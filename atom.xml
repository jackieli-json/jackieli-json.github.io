<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aotu.io</title>
  <subtitle>凹凸实验室</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aotu.io/"/>
  <updated>2016-10-20T07:06:32.451Z</updated>
  <id>https://aotu.io/</id>
  
  <author>
    <name>凹凸实验室</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS3 Mask 安利报告</title>
    <link href="https://aotu.io/notes/2016/10/19/2016-10-19-css3-mask/"/>
    <id>https://aotu.io/notes/2016/10/19/2016-10-19-css3-mask/</id>
    <published>2016-10-19T10:48:16.000Z</published>
    <updated>2016-10-20T07:06:32.451Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="CSS3-Mask-安利报告"><a href="#CSS3-Mask-安利报告" class="headerlink" title="CSS3 Mask 安利报告"></a>CSS3 Mask 安利报告</h1><p>朋友，你听说过 CSS3 Mask 这个属性吗？<br>没听说过？不是很了解？<br>没关系，听我娓娓道来。</p>
<h2 id="1-Mask-介绍"><a href="#1-Mask-介绍" class="headerlink" title="1. Mask 介绍"></a>1. Mask 介绍</h2><blockquote>
<p>css遮罩是2008年4月由苹果公司添加到webkit引擎中的。遮罩提供一种基于像素级别的，可以控制元素透明度的能力，类似于png24位或png32位中的alpha透明通道的效果。</p>
<p>2012年11月15号，遮罩第一次出现在W3C公布的草案中。但是跟苹果公司的是不同的版本。</p>
</blockquote>
<p><em>摘录自: <a href="http://www.w3cplus.com/css3/css-masking.html" target="_blank" rel="external">http://www.w3cplus.com/css3/css-masking.html</a></em></p>
<p>当前（2016.10.19）<code>mask</code> 处于 候选标准阶段（CR），还不是正式标准（REC），<strong>webkit/blink 内核加前缀 <code>-webkit-</code> 可使用</strong>。</p>
<h3 id="1-1-Mask-的兼容性"><a href="#1-1-Mask-的兼容性" class="headerlink" title="1.1 Mask 的兼容性"></a>1.1 Mask 的兼容性</h3><p>以下是来自 <a href="http://caniuse.com/#search=mask" target="_blank" rel="external">caniuse</a>的统计：</p>
<p><img src="//misc.aotu.io/leeenx/1.png" alt="caniuse"></p>
<p>ie/edge 全面不支持，Android 和 iOS Safari 阵营几乎全线飘浅绿，意味着支持部分功能 。不过，Android 4.0 及以下版本的对 <code>mask</code> 的兼容性并不友好！多亏了近几年智能手机市场的良(e)性竞争，给移动前端制造了一个相对良好的环境，以下是 Android 各版本的市场占用率：</p>
<p><img src="//misc.aotu.io/leeenx/2.jpg" alt="安卓各版本市场占有率"></p>
<p>Android 4.0 以下版本的占有率不足 <strong>5%</strong>，已不在主流测试机型内可以忽略不计。</p>
<h3 id="1-2-Mask-的原理"><a href="#1-2-Mask-的原理" class="headerlink" title="1.2 Mask 的原理"></a>1.2 Mask 的原理</h3><p>蒙板可以是 CSS3 渐变或者半透明的PNG图片，蒙板元素的alpha值为0的时候会覆盖下面的元素，为1的时候会完全显示下面的内容。如下：</p>
<p><img src="//misc.aotu.io/leeenx/4.jpg" alt="mask 原理"></p>
<h3 id="1-3-Mask-的发展"><a href="#1-3-Mask-的发展" class="headerlink" title="1.3 Mask 的发展"></a>1.3 Mask 的发展</h3><p>到目前为止，mask 在 W3C 上一共有6个版本（5个草案+1候选标准）,如下：</p>
<ul>
<li><a href="https://www.w3.org/TR/2012/WD-css-masking-20121115/" target="_blank" rel="external">W3C Working Draft 15 November 2012</a></li>
<li><a href="https://www.w3.org/TR/2013/WD-css-masking-20130620/" target="_blank" rel="external">W3C Working Draft 20 June 2013</a></li>
<li><a href="https://www.w3.org/TR/2013/WD-css-masking-1-20131029/" target="_blank" rel="external">W3C Last Call Working Draft, 29 October 2013</a></li>
<li><a href="https://www.w3.org/TR/2014/WD-css-masking-1-20140213/" target="_blank" rel="external">W3C Working Draft, 13 February 2014</a></li>
<li><a href="https://www.w3.org/TR/2014/WD-css-masking-1-20140522/" target="_blank" rel="external">W3C Last Call Working Draft, 22 May 2014</a></li>
<li><a href="https://www.w3.org/TR/2014/CR-css-masking-1-20140826/" target="_blank" rel="external">W3C Candidate Recommendation, 26 August 2014</a></li>
</ul>
<p>当前 <code>-webkit-mask</code> 的标准基本上等同于第一个WD（草案）。（有理由相信『<a href="https://www.w3.org/TR/2012/WD-css-masking-20121115/" target="_blank" rel="external">W3C Working Draft 15 November 2012</a>』参考了 webkit.org 的 『 <a href="https://webkit.org/blog/181/css-masks/" target="_blank" rel="external">CSS Masks</a>』）</p>
<h3 id="1-4-Mask-语法"><a href="#1-4-Mask-语法" class="headerlink" title="1.4 Mask 语法"></a>1.4 Mask 语法</h3><blockquote>
<p>Definitions of CSS properties and values in this specification are analogous to definitions in CSS Backgrounds and Borders [CSS3BG].</p>
</blockquote>
<p><em>摘录自: <a href="https://www.w3.org/TR/css-masking-1/#terminology" target="_blank" rel="external">https://www.w3.org/TR/css-masking-1/#terminology</a></em></p>
<p>按 W3C 官网的说法，<code>mask</code> 的语法与 <code>background</code> 是相仿的。以下是 mask  与 background 属性的对照表： </p>
<table>
<thead>
<tr>
<th style="text-align:left">mask</th>
<th style="text-align:left">background</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">mask-clip</td>
<td style="text-align:left">background-clip</td>
</tr>
<tr>
<td style="text-align:left">*mask-composite</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">mask-image</td>
<td style="text-align:left">background-image</td>
</tr>
<tr>
<td style="text-align:left">*mask-mode</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">mask-origin</td>
<td style="text-align:left">background-origin</td>
</tr>
<tr>
<td style="text-align:left">mask-position</td>
<td style="text-align:left">background-position</td>
</tr>
<tr>
<td style="text-align:left">mask-repeat</td>
<td style="text-align:left">background-repeat</td>
</tr>
<tr>
<td style="text-align:left">mask-size</td>
<td style="text-align:left">background-size</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td style="text-align:left">background-attachment</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td style="text-align:left">background-color</td>
</tr>
</tbody>
</table>
<p>上表中，mask 与 background <strong>对应的六个属性在 webkit/blink 内核都能完全支持</strong>，并且与W3C的标准保持一致，语法与 <code>background</code> 相通。background 的语法不赘述。</p>
<p>另外两个属性的情况如下：</p>
<ul>
<li><code>mask-mode</code> 当前没有任何浏览器支持。</li>
<li><code>-webkit-mask-composite</code> 属性值与W3C不同， 参见：『 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-mask-composite" target="_blank" rel="external">-webkit-mask-composite - CSS | MDN</a>』与 『<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mask-composite" target="_blank" rel="external">mask-composite - CSS | MDN</a>』</li>
</ul>
<h2 id="2-图标的一个便捷选项"><a href="#2-图标的一个便捷选项" class="headerlink" title="2. 图标的一个便捷选项"></a>2. 图标的一个便捷选项</h2><p>图标的主流方案有两种：Icon-Font 和 SVG Sprite。凹凸实验室推荐使用 SVG Sprite，具体参见 @高大师 的大作『 <a href="https://aotu.io/notes/2016/07/09/SVG-Symbol-component-practice/">拥抱Web设计新趋势：SVG Sprites实践应用</a>』。</p>
<p>笔者看来，这两种方案存在一个前提：<strong>图标必须是矢量图</strong>。这其实是道门槛，不是所有团队/个人都跨得过去的。<br>本节将介绍一个低成本的方案：<strong>Mask Icon</strong></p>
<h3 id="2-1-Mask-Icon"><a href="#2-1-Mask-Icon" class="headerlink" title="2.1 Mask Icon"></a>2.1 Mask Icon</h3><p>素材icon.png :  <img src="//misc.aotu.io/leeenx/form_sicon_select.png" alt="原始png icon"></p>
<p>SASS源码：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 生成 黑、红、黄、蓝四个 icon。</span></div><div class="line"><span class="selector-class">.icon</span> &#123;</div><div class="line">	<span class="attribute">display</span>: inline-block;</div><div class="line">	<span class="attribute">width</span>: <span class="number">30px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">	<span class="attribute">background-color</span>: black; <span class="comment">// 控制图标的颜色</span></div><div class="line">	-webkit-<span class="attribute">mask</span>: url(images/icon.png) <span class="number">0</span> <span class="number">0</span> no-repeat;</div><div class="line">	-webkit-<span class="attribute">mask</span>-size: <span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">	&amp;<span class="selector-class">.red</span> &#123;</div><div class="line">		<span class="attribute">background-color</span>: red;</div><div class="line">	&#125;</div><div class="line">	&amp;<span class="selector-class">.yellow</span> &#123;</div><div class="line">		<span class="attribute">background-color</span>: yellow;</div><div class="line">	&#125;</div><div class="line">	&amp;<span class="selector-class">.blue</span> &#123;</div><div class="line">		<span class="attribute">background-color</span>: blue;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>HTML源码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon yellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>截图如下：<br><img src="//misc.aotu.io/leeenx/5.jpg" alt="四色icon"></p>
<p>使用起来跟 Icon-Font 是很类似，不过 <code>mask</code>方案是通过 <code>background-color</code> 控制 icon 颜色，而 Icon-Font 是通过 <code>color</code>。 <code>color</code> 比 <code>background-color</code> 有优势，它可以继承当前文本的色值，而 background-color 却无法继承文本色值（因为继承当前文本的背景色等同于透明）。</p>
<h3 id="2-2-Mask-Icon-improve"><a href="#2-2-Mask-Icon-improve" class="headerlink" title="2.2 Mask Icon improve"></a>2.2 Mask Icon improve</h3><p>能实现通过 <code>color</code> 来改变 <code>mask</code> icon 的颜色吗？</p>
<p>大神张鑫旭在『<a href="http://www.zhangxinxu.com/wordpress/2014/10/currentcolor-css3-powerful-css-keyword/" target="_blank" rel="external">currentColor-CSS3超高校级好用CSS变量</a>』给出了答案：currentColor。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#000</span>;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.icon</span> &#123;</div><div class="line">	<span class="attribute">display</span>: inline-block;</div><div class="line">	<span class="attribute">width</span>: <span class="number">15px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">15px</span>;</div><div class="line">	<span class="attribute">background-color</span>: currentColor; <span class="comment">// 控制图标的颜色 - 默认当前color值</span></div><div class="line">	-webkit-<span class="attribute">mask</span>: url(images/icon.png) <span class="number">0</span> <span class="number">0</span> no-repeat;</div><div class="line">	-webkit-<span class="attribute">mask</span>-size: <span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.red</span> &#123;</div><div class="line">	<span class="attribute">color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.yellow</span> &#123;</div><div class="line">	<span class="attribute">color</span>: yellow;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.blue</span> &#123;</div><div class="line">	<span class="attribute">color</span>: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这个是黑色icon<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>这个是红色icon<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"yellow"</span>&gt;</span>这个是黄色icon<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span>这个是蓝色icon<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="//misc.aotu.io/leeenx/6.png" alt="color继承图标"></p>
<p>通过改进mask 图标几乎可以取代 Icon-Font。</p>
<p><strong>测试DEMO：</strong></p>
<p><img src="//misc.aotu.io/leeenx/17.jpg" alt="二维码"></p>
<h3 id="2-3-Mask-Icon-的局限"><a href="#2-3-Mask-Icon-的局限" class="headerlink" title="2.3 Mask Icon 的局限"></a>2.3 Mask Icon 的局限</h3><p>浏览器兼容是 <code>CSS3 Mask</code> 的最大局限，以 <code>mask-image</code> 为例，浏览器的支持情况如下：</p>
<p>PC端：<br><img src="//misc.aotu.io/leeenx/7.png" alt="Desktop"></p>
<p>移动端：<br><img src="//misc.aotu.io/leeenx/8.png" alt="Desktop"></p>
<p>webkit 两兄弟支持 <code>mask-image</code> ，而 firefox 和 ie/edge 需要通过     SVG Mask 来实现蒙层。</p>
<p>移动端 ≈ Android + iOS， <code>Mask Icon</code> 可当作为移动端的一个便捷方案。</p>
<h2 id="3-多蒙层介绍"><a href="#3-多蒙层介绍" class="headerlink" title="3. 多蒙层介绍"></a>3. 多蒙层介绍</h2><blockquote>
<p>The mask of a box can have multiple layers. The number of layers is determined by the number of comma-separated values in the ‘mask-image’ property.</p>
</blockquote>
<p><em>摘录自：<a href="https://www.w3.org/TR/2012/WD-css-masking-20121115/#layering" target="_blank" rel="external">https://www.w3.org/TR/2012/WD-css-masking-20121115/#layering</a></em></p>
<p>按W3C的定义，mask 可设置多蒙层 。由于缺少多蒙层的兼容性数据，笔者做了一个简单的例子来检验多蒙层在不同机型下的表现。</p>
<p><strong>目标图形：</strong><br><img src="//misc.aotu.io/leeenx/9.png" alt="目标图形"></p>
<p><strong>素材：</strong><br><img src="//misc.aotu.io/leeenx/seckill_coupon_100px.png" alt="100px"><br><img src="//misc.aotu.io/leeenx/seckill_coupon_ellipsis.png" alt="100px"></p>
<p><strong>测试用机：</strong></p>
<p>iPhone 6/6+（iOS 10）、 荣耀3c（Android 4.2.2）、 红米（Android 4.4.4 ）、魅蓝（Android 4.4.4） 三星GT-I9300（Android 4.3）、Microsoft Limia RM-1090（windows mobile）</p>
<p>测试代码如下:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.seckill_coupon</span> &#123;</div><div class="line">    <span class="attribute">width</span>: (<span class="number">718px</span> / <span class="number">2</span>);</div><div class="line">    <span class="attribute">height</span>: auto;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">font-family</span>: Helvetica;</div><div class="line">    &amp;_item &#123;</div><div class="line">        <span class="attribute">width</span>: (<span class="number">226px</span> / <span class="number">2</span>);</div><div class="line">        <span class="attribute">height</span>: ( <span class="number">120px</span> / <span class="number">2</span> );</div><div class="line">        <span class="attribute">display</span>: inline-block;</div><div class="line">        -webkit-<span class="attribute">mask</span>-image: url(images/seckill_coupon_ellipsis.png?__inline), url(images/seckill_coupon_100px.png?__inline), url(images/seckill_coupon_ellipsis.png?__inline);</div><div class="line">        -webkit-<span class="attribute">mask</span>-<span class="attribute">position</span>: (<span class="number">190px</span> / <span class="number">2</span>) -<span class="number">5px</span>, <span class="number">0</span> <span class="number">5px</span>, (<span class="number">190px</span> / <span class="number">2</span>) <span class="number">55px</span>;</div><div class="line">        -webkit-<span class="attribute">mask</span>-repeat: repeat-x, no-repeat, repeat-x;</div><div class="line">        -webkit-<span class="attribute">mask</span>-size: (<span class="number">750px</span> / <span class="number">2</span>) auto, (<span class="number">750px</span> / <span class="number">2</span>) auto, (<span class="number">750px</span> / <span class="number">2</span>) auto;</div><div class="line">        &amp;_top &#123;</div><div class="line">            <span class="attribute">background</span>: <span class="number">#f2f7f7</span> linear-gradient(to bottom, <span class="number">#fafcfc</span>, <span class="number">#f2f7f7</span>);</div><div class="line">            <span class="attribute">border-radius</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">            <span class="attribute">height</span>: ( <span class="number">70px</span> / <span class="number">2</span> );</div><div class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">        &#125;</div><div class="line">        &amp;_bottom &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">            <span class="attribute">height</span>: ( <span class="number">50px</span> / <span class="number">2</span> );</div><div class="line">            <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span>;</div><div class="line">            <span class="attribute">background-image</span>: linear-gradient(to bottom, <span class="number">#ff9600</span>, <span class="number">#ff7c00</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seckill_coupon"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"seckill_coupon_item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seckill_coupon_item_top"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seckill_coupon_item_bottom"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">设备</th>
<th style="text-align:center">浏览器</th>
<th style="text-align:center">支持度</th>
<th style="text-align:center">截图</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">iPhone 6/6+<br>(iOS 9/10)</td>
<td style="text-align:center">Safari/WeChat</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">魅蓝 <br> (Android 4.4.4)</td>
<td style="text-align:center">WeChat 6.3.25</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">魅蓝 <br> (Android 4.4.4)</td>
<td style="text-align:center">原生浏览器</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">红米 <br> (Android 4.4.4)</td>
<td style="text-align:center">WeChat 6.3.25</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">红米 <br> (Android 4.4.4)</td>
<td style="text-align:center">原生浏览器</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">三星GT-I9300 <br>（Android 4.3）</td>
<td style="text-align:center">WeChat 6.3.25</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">三星GT-I9300 <br>（Android 4.3）</td>
<td style="text-align:center">原生浏览器</td>
<td style="text-align:center">不友好</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/11.png?v=2" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">荣耀3c <br> (Android 4.2.2)</td>
<td style="text-align:center">WeChat 6.3.25</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">荣耀3c <br> (Android 4.2.2)</td>
<td style="text-align:center">原生浏览器</td>
<td style="text-align:center">不友好</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/11.png?v=2" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">Lumia RM-1090 <br> （windows mobile）</td>
<td style="text-align:center">ie</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/12.png?v=1" alt="fail"></td>
</tr>
</tbody>
</table>
<p><strong>测试解读：</strong></p>
<p>虽然测试的机型不多，但仍然可以看出 Android 4.3及以下版本原生浏览器对多蒙层的支持<strong>不友好</strong>，windows mobile是 <strong>不支持</strong>，而使用 <code>X5</code>内核的 WeChat 6.3.25对多蒙层的支持度是良好的。</p>
<p>将 <strong>取消多蒙层</strong> 视作 多蒙层的降级以处理<strong>不友好</strong>的机型：</p>
<p><img src="//misc.aotu.io/leeenx/10.png" alt="success">  <span style="position: relative; top: -55px;">– 降级 -&gt;</span> <img src="//misc.aotu.io/leeenx/12.png?v=2" alt="success"></p>
<p>通过 <code>@supports</code> 来做降级处理：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@supports (-webkit-mask-repeat: repeat) &#123;</div><div class="line">    -webkit-<span class="attribute">mask</span>-image: url(images/seckill_coupon_ellipsis.png?__inline), url(images/seckill_coupon_100px.png?__inline), url(images/seckill_coupon_ellipsis.png?__inline);</div><div class="line">    -webkit-<span class="attribute">mask</span>-<span class="attribute">position</span>: (<span class="number">190px</span> / <span class="number">2</span>) -<span class="number">5px</span>, <span class="number">0</span> <span class="number">5px</span>, (<span class="number">190px</span> / <span class="number">2</span>) <span class="number">55px</span>;</div><div class="line">    -webkit-<span class="attribute">mask</span>-repeat: repeat-x, no-repeat, repeat-x;</div><div class="line">    -webkit-<span class="attribute">mask</span>-size: (<span class="number">750px</span> / <span class="number">2</span>) auto, (<span class="number">750px</span> / <span class="number">2</span>) auto, (<span class="number">750px</span> / <span class="number">2</span>) auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过，使用 @supports 后，（荣耀3c与三星 GT I9300的）X5内核也被降级，这并不是最理想的结果。以下是测试DEMO：</p>
<p><img src="//misc.aotu.io/leeenx/15.png?v=3" alt="二维码"><br>（未使用 @supports 降级）</p>
<p><img src="//misc.aotu.io/leeenx/14.png?v=3" alt="二维码"><br>（使用 @supports 降级）</p>
<p><strong>测试结论</strong> </p>
<ol>
<li>微信手Q平台，使用多蒙层是友好的</li>
<li>非X5内核平台，目前不建议多蒙层</li>
</ol>
<h2 id="4-Mask-border-image-介绍"><a href="#4-Mask-border-image-介绍" class="headerlink" title="4. Mask border image 介绍"></a>4. Mask border image 介绍</h2><p>在实际项目中，笔者经常使用 <code>border-image</code> 来实现 background 没办法简单实现的需求。mask 有一个 <code>mask-border</code> 的成员与 border-image 相对应，具体可参见：<a href="https://www.w3.org/TR/css-masking/#mask-borders。" target="_blank" rel="external">https://www.w3.org/TR/css-masking/#mask-borders。</a></p>
<p>现阶段（2016.10.19），未有任何主流浏览器直接支持 mask-border，因为在 mask 草案(WD)的漫长修改过程中，mask-border 经历了两次名称的变更，具体过程如下：</p>
<p><a href="https://www.w3.org/TR/2012/WD-css-masking-20121115/" target="_blank" rel="external">W3C Working Draft 15 November 2012</a> – <strong>mask-box-image</strong><br><a href="https://www.w3.org/TR/2013/WD-css-masking-20130620/" target="_blank" rel="external">W3C Working Draft 20 June 2013</a>  – mask-box-image<br><a href="https://www.w3.org/TR/2013/WD-css-masking-1-20131029/" target="_blank" rel="external">W3C Last Call Working Draft, 29 October 2013</a>  – mask-box-image<br><a href="https://www.w3.org/TR/2014/WD-css-masking-1-20140213/" target="_blank" rel="external">W3C Working Draft, 13 February 2014</a> – <strong>mask-box</strong><br><a href="https://www.w3.org/TR/2014/WD-css-masking-1-20140522/" target="_blank" rel="external">W3C Last Call Working Draft, 22 May 2014</a> – <strong>mask-border</strong><br><a href="https://www.w3.org/TR/2014/CR-css-masking-1-20140826/" target="_blank" rel="external">W3C Candidate Recommendation, 26 August 2014</a> – mask-border</p>
<p>这个过程与 <code>flex</code> 是相似的。<br>当前 webkit/blink 内核 （Chrome/Safari）采用了第一个WD（草案）的 <code>mask-box-image</code>。不过，<code>mask-border</code>代表了未来，所以在写 css 时少不了兼容的代码，这个后面会介绍到。</p>
<h3 id="4-1-Mask-border-的语法"><a href="#4-1-Mask-border-的语法" class="headerlink" title="4.1 Mask-border 的语法"></a>4.1 Mask-border 的语法</h3><blockquote>
<p>The syntax of mask-border corresponds to the border-image property of CSS Background and Borders [CSS3BG].</p>
</blockquote>
<p><em>摘录自: <a href="https://www.w3.org/TR/css-masking-1/#mask-borders" target="_blank" rel="external">https://www.w3.org/TR/css-masking-1/#mask-borders</a></em></p>
<p><strong>*为了方便描述，本章的 mask-border 都是指 mask-box-image ，读者自觉替换</strong></p>
<p>mask-border 与 border-image 的对照列表如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">mask-border</th>
<th style="text-align:left">border-image</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">mask-border-source</td>
<td style="text-align:left">border-image-source</td>
</tr>
<tr>
<td style="text-align:left">*mask-border-mode</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">mask-border-slice</td>
<td style="text-align:left">border-image-slice</td>
</tr>
<tr>
<td style="text-align:left">mask-border-width</td>
<td style="text-align:left">border-image-width</td>
</tr>
<tr>
<td style="text-align:left">mask-border-outset</td>
<td style="text-align:left">border-image-outset</td>
</tr>
<tr>
<td style="text-align:left">mask-border-repeat</td>
<td style="text-align:left">border-image-repeat</td>
</tr>
</tbody>
</table>
<p><code>mask-border-mode</code> 是在『 <a href="https://www.w3.org/TR/2014/WD-css-masking-1-20140522/" target="_blank" rel="external">W3C Last Call Working Draft, 22 May 2014</a> 』才出现的属性，当前没有任何浏览器支持 ，所以 mask-border 与 border-image 在语法上是完全相通！理解了 border-image就理解了 mask-border 。border-image 的具体使用可以参考MDN的『<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-image" target="_blank" rel="external">border-image - CSS | MDN</a>』，这里也不赘述。</p>
<h3 id="4-2-Mask-border-的兼容写法"><a href="#4-2-Mask-border-的兼容写法" class="headerlink" title="4.2 Mask-border 的兼容写法"></a>4.2 Mask-border 的兼容写法</h3><p>如果是手写 css 的同学，在使用 mask-border 需要注意代码的兼容性。其实很简单如下：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当下标准</span></div><div class="line">-webkit-<span class="attribute">mask</span>-box-image-source: url(images/seckill_coupon_half.png?__inline);</div><div class="line">-webkit-<span class="attribute">mask</span>-box-image-slice: <span class="number">9</span> <span class="number">44</span> <span class="number">9</span> <span class="number">1</span> fill;</div><div class="line">-webkit-<span class="attribute">mask</span>-box-image-<span class="attribute">width</span>: <span class="number">5px</span> <span class="number">23px</span> <span class="number">5px</span> <span class="number">5px</span>;</div><div class="line">-webkit-<span class="attribute">mask</span>-box-image-repeat: stretch stretch;</div><div class="line"></div><div class="line"><span class="comment">// 兼容未来</span></div><div class="line"><span class="attribute">mask</span>-<span class="attribute">border</span>-source: url(images/seckill_coupon_half.png?__inline);</div><div class="line"><span class="attribute">mask</span>-<span class="attribute">border</span>-slice: <span class="number">9</span> <span class="number">44</span> <span class="number">9</span> <span class="number">1</span> fill;</div><div class="line"><span class="attribute">mask</span>-<span class="attribute">border-width</span>: <span class="number">5px</span> <span class="number">23px</span> <span class="number">5px</span> <span class="number">5px</span>;</div><div class="line"><span class="attribute">mask</span>-<span class="attribute">border</span>-repeat: stretch stretch;</div></pre></td></tr></table></figure>
<p>如果是使用 <code>sass</code>、<code>less</code> 的同学，推荐安装 autoprefixer 插件。<code>autoprefixer</code> 可以为使用者解决 css 兼容写法的烦恼，有了它，mask-border 可以直接使用<strong>兼容未来</strong>写法：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在安装了 autoprefixer 后</span></div><div class="line"><span class="attribute">mask</span>-<span class="attribute">border</span>-source: url(images/seckill_coupon_half.png?__inline);</div><div class="line"><span class="attribute">mask</span>-<span class="attribute">border</span>-slice: <span class="number">9</span> <span class="number">44</span> <span class="number">9</span> <span class="number">1</span> fill;</div><div class="line"><span class="attribute">mask</span>-<span class="attribute">border-width</span>: <span class="number">5px</span> <span class="number">23px</span> <span class="number">5px</span> <span class="number">5px</span>;</div><div class="line"><span class="attribute">mask</span>-<span class="attribute">border</span>-repeat: stretch stretch;</div></pre></td></tr></table></figure>
<h3 id="4-3-Mask-border-实例"><a href="#4-3-Mask-border-实例" class="headerlink" title="4.3 Mask-border 实例"></a>4.3 Mask-border 实例</h3><p> 上节多蒙层的例子使用 mask-border 来实现会更合适：</p>
<p><strong>目标图形：</strong><br><img src="//misc.aotu.io/leeenx/9.png" alt="目标图形"></p>
<p><strong>素材：</strong><br><img src="//misc.aotu.io/leeenx/seckill_coupon_half.png" alt="素材"></p>
<p><strong>测试用机：</strong></p>
<p>iPhone 6/6+（iOS 10）、 荣耀3c（Android 4.2.2）、 红米（Android 4.4.4 ）、魅蓝（Android 4.4.4） 三星GT-I9300（Android 4.3）、Microsoft Limia RM-1090（windows mobile）</p>
<p><strong>测试代码：</strong></p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.seckill_coupon</span> &#123;</div><div class="line">    <span class="attribute">width</span>: (<span class="number">718px</span> / <span class="number">2</span>);</div><div class="line">    <span class="attribute">height</span>: auto;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">font-family</span>: Helvetica;</div><div class="line">    &amp;_item &#123;</div><div class="line">        <span class="attribute">width</span>: (<span class="number">226px</span> / <span class="number">2</span>);</div><div class="line">        <span class="attribute">height</span>: ( <span class="number">120px</span> / <span class="number">2</span> );</div><div class="line">        <span class="attribute">display</span>: inline-block;</div><div class="line">        <span class="attribute">mask</span>-<span class="attribute">border</span>-source: url(images/seckill_coupon_half.png?__inline);</div><div class="line">		<span class="attribute">mask</span>-<span class="attribute">border</span>-slice: <span class="number">9</span> <span class="number">44</span> <span class="number">9</span> <span class="number">1</span> fill;</div><div class="line">		<span class="attribute">mask</span>-<span class="attribute">border-width</span>: <span class="number">5px</span> <span class="number">23px</span> <span class="number">5px</span> <span class="number">5px</span>;</div><div class="line">        &amp;_top &#123;</div><div class="line">            <span class="attribute">background</span>: <span class="number">#f2f7f7</span> linear-gradient(to bottom, <span class="number">#fafcfc</span>, <span class="number">#f2f7f7</span>);</div><div class="line">            <span class="attribute">border-radius</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">            <span class="attribute">height</span>: ( <span class="number">70px</span> / <span class="number">2</span> );</div><div class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">        &#125;</div><div class="line">        &amp;_bottom &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">            <span class="attribute">height</span>: ( <span class="number">50px</span> / <span class="number">2</span> );</div><div class="line">            <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span>;</div><div class="line">            <span class="attribute">background-image</span>: linear-gradient(to bottom, <span class="number">#ff9600</span>, <span class="number">#ff7c00</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seckill_coupon"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"seckill_coupon_item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seckill_coupon_item_top"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seckill_coupon_item_bottom"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以下是测试DEMO:</p>
<p><img src="//misc.aotu.io/leeenx/16.png" alt="DEMO3"></p>
<p><strong>测试结果：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">设备</th>
<th style="text-align:center">浏览器</th>
<th style="text-align:center">支持度</th>
<th style="text-align:center">截图</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">iPhone 6/6+<br>(iOS 9/10)</td>
<td style="text-align:center">Safari/WeChat</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">魅蓝 <br> (Android 4.4.4)</td>
<td style="text-align:center">WeChat 6.3.25</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">魅蓝 <br> (Android 4.4.4)</td>
<td style="text-align:center">原生浏览器</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">红米 <br> (Android 4.4.4)</td>
<td style="text-align:center">WeChat 6.3.25</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">红米 <br> (Android 4.4.4)</td>
<td style="text-align:center">原生浏览器</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">三星GT-I9300 <br>（Android 4.3）</td>
<td style="text-align:center">WeChat 6.3.25</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">三星GT-I9300 <br>（Android 4.3）</td>
<td style="text-align:center">原生浏览器</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">荣耀3c <br> (Android 4.2.2)</td>
<td style="text-align:center">WeChat 6.3.25</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">荣耀3c <br> (Android 4.2.2)</td>
<td style="text-align:center">原生浏览器</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/10.png" alt="success"></td>
</tr>
<tr>
<td style="text-align:center">Lumia RM-1090 <br> （windows mobile）</td>
<td style="text-align:center">ie</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center"><img src="//misc.aotu.io/leeenx/12.png?v=1" alt="fail"></td>
</tr>
</tbody>
</table>
<p><strong>测试结论</strong><br><code>mask-border</code> 在移动端的兼容性很好，推荐使用。</p>
<hr>
<h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h2><p><a href="https://webkit.org/blog/181/css-masks/" target="_blank" rel="external">CSS Masks</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-mask-composite" target="_blank" rel="external">-webkit-mask-composite - CSS | MDN</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mask-composite" target="_blank" rel="external">mask-composite - CSS | MDN</a><br><a href="https://www.w3.org/TR/css-masking-1/" target="_blank" rel="external">CSS Masking Module Level 1</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mask" target="_blank" rel="external">mask - CSS | MDN</a><br><a href="https://aotu.io/notes/2016/07/09/SVG-Symbol-component-practice/">拥抱Web设计新趋势：SVG Sprites实践应用</a><br><a href="http://edu.yjbys.com/B658165160951/news/nres5691.html" target="_blank" rel="external">ICON-FONT图标字体的四类制作方法</a><br><a href="http://www.zhangxinxu.com/wordpress/2014/10/currentcolor-css3-powerful-css-keyword/" target="_blank" rel="external">currentColor-CSS3超高校级好用CSS变量</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-mask-box-image" target="_blank" rel="external">-webkit-mask-box-image - CSS | MDN</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-image" target="_blank" rel="external">border-image - CSS | MDN</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;CSS3-Mask-安利报告&quot;&gt;&lt;a href=&quot;#CSS3-Mask-安利报告&quot; class=&quot;headerlink&quot; title=&quot;CSS3 Mask 安利报告&quot;&gt;&lt;/a&gt;CSS3 Mask 安利报告&lt;/h1&gt;&lt;p&gt;朋友，你
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="css3 mask" scheme="https://aotu.io/tags/css3-mask/"/>
    
      <category term="css3 mask-border" scheme="https://aotu.io/tags/css3-mask-border/"/>
    
      <category term="css3 蒙层" scheme="https://aotu.io/tags/css3-%E8%92%99%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 新手完全填坑攻略——从环境搭建到服务器渲染</title>
    <link href="https://aotu.io/notes/2016/10/13/vue2/"/>
    <id>https://aotu.io/notes/2016/10/13/vue2/</id>
    <published>2016-10-13T02:31:35.000Z</published>
    <updated>2016-10-20T07:06:32.451Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Jinkey原创<br>感谢 <a href="https://github.com/showonne" target="_blank" rel="external">showonne</a>、<a href="https://github.com/yubang" target="_blank" rel="external">yubang</a> 技术指导<br><strong>Demo 地址:</strong><br> <a href="http://demo.jinkey.io/vue2" target="_blank" rel="external">http://demo.jinkey.io/vue2</a><br><strong>源码:</strong><br><a href="https://github.com/Jinkeycode/vue2-example" target="_blank" rel="external">https://github.com/Jinkeycode/vue2-example</a></p>
</blockquote>
<h2 id="什么是-Vue"><a href="#什么是-Vue" class="headerlink" title="什么是 Vue"></a>什么是 Vue</h2><p>Vue 是一个前端框架，特点是</p>
<p><strong>数据绑定</strong></p>
<blockquote>
<p>比如你改变一个输入框 Input 标签的值，会<strong>自动同步</strong>更新到页面上其他绑定该输入框的组件的值<br>￼<br><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-11-17-43.png" alt="数据绑定"></p>
</blockquote>
<p><strong>组件化</strong></p>
<blockquote>
<p>页面上小到一个按钮都可以是一个单独的文件.vue，这些小组件直接可以像乐高积木一样通过互相引用而组装起来</p>
</blockquote>
<p><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-10-59-15.jpg" alt="组件化"><br>￼</p>
<h2 id="Vue2-0-推荐开发环境"><a href="#Vue2-0-推荐开发环境" class="headerlink" title="Vue2.0 推荐开发环境"></a>Vue2.0 推荐开发环境</h2><p>￼<br><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-11-36-06.png" alt="开发环境解释"></p>
<p>Homebrew 1.0.6(Mac)、Node.js 6.7.0、npm 3.10.3、webpack 1.13.2、vue-cli 2.4.0、Atom 1.10.2</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>打开终端运行以下命令</p>
<h3 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></div></pre></td></tr></table></figure>
<h3 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h3><blockquote>
<p>brew install nodejs</p>
</blockquote>
<p>用 npm install npm@3.10.3 更新 npm 版本报错:</p>
<blockquote>
<p>(node:42) fs: re-evaluating native module sources is not supported.</p>
</blockquote>
<p>解决办法:</p>
<p>在官网下载6.70的安装包再安装一次(刚刚相当于帮你配置好环境变量，现在再安装一次升级到最新的 npm)</p>
<blockquote>
<ul>
<li>好像以前官网的安装包不会自动配置环境变量的，由于我电脑上之前安装过 nodejs 所以环境变量已经配置好了，不知道现在的安装包会不会自动配置环境变量。</li>
</ul>
</blockquote>
<p>Windows 下直接下载安装包即可</p>
<h3 id="获取nodejs模块安装目录访问权限"><a href="#获取nodejs模块安装目录访问权限" class="headerlink" title="获取nodejs模块安装目录访问权限"></a>获取nodejs模块安装目录访问权限</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod -R <span class="number">777</span> /usr/local/<span class="class"><span class="keyword">lib</span>/<span class="title">node_modules</span>/</span></div></pre></td></tr></table></figure>
<h3 id="安装淘宝镜像"><a href="#安装淘宝镜像" class="headerlink" title="安装淘宝镜像"></a>安装淘宝镜像</h3><blockquote>
<p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a></p>
</blockquote>
<h3 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h3><blockquote>
<p>cnpm install webpack -g</p>
</blockquote>
<h3 id="安装vue脚手架"><a href="#安装vue脚手架" class="headerlink" title="安装vue脚手架"></a>安装vue脚手架</h3><blockquote>
<p>npm install vue-cli -g</p>
</blockquote>
<h3 id="在硬盘上找一个文件夹放工程用的，在终端中进入该目录"><a href="#在硬盘上找一个文件夹放工程用的，在终端中进入该目录" class="headerlink" title="在硬盘上找一个文件夹放工程用的，在终端中进入该目录"></a>在硬盘上找一个文件夹放工程用的，在终端中进入该目录</h3><p>Mac</p>
<blockquote>
<p>cd 目录路径</p>
</blockquote>
<h3 id="根据模板创建项目"><a href="#根据模板创建项目" class="headerlink" title="根据模板创建项目"></a>根据模板创建项目</h3><blockquote>
<p>vue init webpack-simple 工程名字&lt;工程名字不能用中文&gt;</p>
</blockquote>
<p>或者创建 vue1.0 的项目</p>
<blockquote>
<p>vue init webpack-simple#1.0 工程名字&lt;工程名字不能用中文&gt;</p>
</blockquote>
<p>会有一些初始化的设置，如下输入:</p>
<p><code>Target directory exists. Continue? (Y/n)</code>直接回车默认(然后会下载 vue2.0模板，这里可能需要连代理)<br><code>Project name (vue-test)</code>直接回车默认<br><code>Project description (A Vue.js project)</code>  直接回车默认<br><code>Author</code> 写你自己的名字</p>
<h3 id="cd-命令进入创建的工程目录"><a href="#cd-命令进入创建的工程目录" class="headerlink" title="cd 命令进入创建的工程目录"></a>cd 命令进入创建的工程目录</h3><p>工程目录如图所示:</p>
<p><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-11-05-21.jpg" alt=""></p>
<h2 id="安装项目依赖"><a href="#安装项目依赖" class="headerlink" title="安装项目依赖"></a>安装项目依赖</h2><p>一定要从官方仓库安装，npm 服务器在国外所以这一步安装速度会很慢。</p>
<blockquote>
<p>npm install</p>
</blockquote>
<p><strong>不要从国内镜像cnpm安装</strong>(会导致后面缺了很多依赖库)</p>
<blockquote>
<p>cnpm install</p>
</blockquote>
<h3 id="安装-vue-路由模块vue-router和网络请求模块vue-resource"><a href="#安装-vue-路由模块vue-router和网络请求模块vue-resource" class="headerlink" title="安装 vue 路由模块vue-router和网络请求模块vue-resource"></a>安装 vue 路由模块<code>vue-router</code>和网络请求模块<code>vue-resource</code></h3><blockquote>
<p>cnpm install vue-router vue-resource –save</p>
</blockquote>
<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><blockquote>
<p>npm run dev</p>
</blockquote>
<h4 id="填坑-以下坑可能由于-vue2-0-导致其他相关编译打包工具没更新导致的"><a href="#填坑-以下坑可能由于-vue2-0-导致其他相关编译打包工具没更新导致的" class="headerlink" title="填坑(以下坑可能由于 vue2.0 导致其他相关编译打包工具没更新导致的)"></a><strong>填坑(以下坑可能由于 vue2.0 导致其他相关编译打包工具没更新导致的)</strong></h4><blockquote>
<p><strong>【重点】后来发现这些坑是由于 npm 不是最新的版本3.10.2， 用 npm 3.9.5就会出现以下坑</strong><br>解决办法: 请运行以下命令<br><strong>npm update -g</strong></p>
</blockquote>
<p>报错</p>
<blockquote>
<p>Error: Cannot find module ‘opn’<br>Error: Cannot find module ‘webpack-dev-middleware’<br>Error: Cannot find module ‘express’<br>Error: Cannot find module ‘compression’<br>Error: Cannot find module ‘sockjs’<br>Error: Cannot find module ‘spdy’<br>Error: Cannot find module ‘http-proxy-middleware’<br>Error: Cannot find module ‘serve-index’</p>
</blockquote>
<p>如果你用的是老版本的 vue-cli 还可能报其他错误，需要更新一下 vue-cli </p>
<blockquote>
<p>npm update vue-cli</p>
</blockquote>
<p>然后可以查看一下当前全局 vue-cli 的版本</p>
<blockquote>
<p>npm view vue-cli</p>
</blockquote>
<p>安装一下这个依赖到工程开发环境</p>
<blockquote>
<p>cnpm install opn –save-dev<br>cnpm install webpack-dev-middleware –save-dev<br>cnpm install express –save-dev<br>cnpm install compression –save-dev<br>cnpm install sockjs –save-dev<br>cnpm install spdy –save-dev<br>cnpm install http-proxy-middleware –save-dev<br>cnpm install serve-index –save-dev<br>cnpm install connect-history-api-fallback –save-dev</p>
</blockquote>
<p>再启动项目，报错</p>
<blockquote>
<p>ERROR in ./src/main.js<br>Module build failed: Error: Cannot find module ‘babel-runtime/helpers/typeof’<br>at Function.Module._resolveFilename (module.js:440:15)<br>at Function.Module._load (module.js:388:25)<br>at Module.require (module.js:468:17)<br>at require (internal/module.js:20:19)<br>at Object.<anonymous> (/Volumes/MacStorage/Coding/Web/vue-test/node_modules/.6.17.0@babel-core/lib/transformation/file/index.js:6:16)<br>at Module._compile (module.js:541:32)<br>at Object.Module._extensions..js (module.js:550:10)<br>at Module.load (module.js:458:32)<br>at tryModuleLoad (module.js:417:12)<br>at Function.Module._load (module.js:409:3)<br>@ multi main<br>ERROR in ./~/.2.1.0-beta.8@webpack-dev-server/client/socket.js<br>Module not found: Error: Can’t resolve ‘sockjs-client’ in ‘/Volumes/MacStorage/Coding/Web/vue-test/node_modules/.2.1.0-beta.8@webpack-dev-server/client’<br>@ ./~/.2.1.0-beta.8@webpack-dev-server/client/socket.js 1:13-37<br>@ ./~/.2.1.0-beta.8@webpack-dev-server/client?<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a><br>@ multi main</anonymous></p>
</blockquote>
<p>安装一下 babel-runtime</p>
<blockquote>
<p>cnpm install babel-helpers –save-dev</p>
</blockquote>
<p>启动项目，再次报错</p>
<blockquote>
<p>Module build failed: Error: Cannot find module ‘babel-helpers’<br>Module build failed: Error: Cannot find module ‘babel-traverse’<br>Module build failed: Error: Cannot find module ‘json5’<br>Module build failed: Error: Cannot find module ‘babel-generator’<br>Module build failed: Error: Cannot find module ‘detect-indent’<br>Module build failed: Error: Cannot find module ‘jsesc’</p>
</blockquote>
<p>找不到依赖那就再安装一下</p>
<blockquote>
<p>cnpm install babel-helpers –save-dev<br>cnpm install babel-traverse –save-dev<br>cnpm install json5 –save-dev<br>.<strong>..不写了，请把全部把旧的环境全部清除，更新到最新版本</strong></p>
</blockquote>
<h4 id="解决办法概述"><a href="#解决办法概述" class="headerlink" title="解决办法概述"></a>解决办法概述</h4><p>遇到</p>
<blockquote>
<p>Module build failed: Error: Cannot find module ‘模块名’</p>
</blockquote>
<p>那就安装</p>
<blockquote>
<p>cnpm install 模块名 –save-dev(关于环境的，表现为npm run dev 启动不了)<br>cnpm install 模块名 –save(关于项目的，比如main.js，表现为npm run dev 成功之后控制台报错)<br>比如escape-string-regexp、strip-ansi、has-ansi、is-finite、emojis-list</p>
</blockquote>
<h4 id="终于可以启动项目了"><a href="#终于可以启动项目了" class="headerlink" title="终于可以启动项目了"></a>终于可以启动项目了</h4><p>输入完命令会自动启动浏览器，如果默认打开 IE 不行</p>
<blockquote>
<p>npm run dev</p>
</blockquote>
<p>自动启动浏览器就会看到这 帅帅的界面了。<br><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-04-54-29.png" alt=""></p>
<h2 id="开始-Vue-之旅"><a href="#开始-Vue-之旅" class="headerlink" title="开始 Vue 之旅"></a>开始 Vue 之旅</h2><h3 id="打开-IDE"><a href="#打开-IDE" class="headerlink" title="打开 IDE"></a>打开 IDE</h3><p>推荐 Atom 打开项目，需要安装 Vue 语法高亮的插件</p>
<p><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-11-15-12.jpg" alt=""></p>
<h3 id="使用官网文档学习基础"><a href="#使用官网文档学习基础" class="headerlink" title="使用官网文档学习基础"></a>使用官网文档学习基础</h3><p>我们来看官网的一个例子，(中文文档请自行上网搜索)</p>
<p>￼<img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-11-43-24.jpg" alt=""></p>
<p>打开 工程目录下的 App.vue</p>
<p>template 写 html，script写 js，style写样式</p>
<p><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-11-44-22.jpg" alt=""></p>
<p>为了方便叙述，我们把官网例子写在同一个组件内</p>
<p>这里有两个坑:</p>
<p><strong>第一</strong>。一个组件下只能有一个并列的 div，可以这么写，所以复制官网示例的时候只要复制 div 里面的内容就好。</p>
<p><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-11-48-35.jpg" alt=""></p>
<p>但是不能这样写:</p>
<p>￼<img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-11-47-39.jpg" alt=""></p>
<p><strong>第二</strong>。数据要写在 return 里面而不是像文档那样子写</p>
<p><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-11-49-05.jpg" alt=""></p>
<p>错误的写法:</p>
<p><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-11-49-55.jpg" alt=""></p>
<p>这样子可以自己啃完官网文档组件之前的部分了。</p>
<p><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-11-58-14.png" alt=""></p>
<h3 id="来玩玩组件"><a href="#来玩玩组件" class="headerlink" title="来玩玩组件"></a>来玩玩组件</h3><p>前面讲得基本上都是各种常用组件的数据绑定，下面还得说说的是 Vue 的组件的使用。</p>
<p>在工程目录<code>/src</code>下创建<code>component</code>文件夹，并在<code>component</code>文件夹下创建一个 <code>firstcomponent.vue</code>并写仿照 App.vue 的格式和前面学到的知识写一个组件。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"firstcomponent"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I am a title.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span> written by &#123;&#123; author &#125;&#125; <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">data () &#123;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line"><span class="attr">author</span>: <span class="string">"微信公众号 jinkey-love"</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>duang… 不能按官网文档那样子叫我做就做，我得先试试再告诉你，我做完效果是这样子的，希望观众做完也是这样子。(迷之微笑 )</p>
<p><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-12-35-12.jpg" alt=""></p>
<p>然后在 App.vue 使用组件 ( 因为在 <code>index.html</code> 里面定义了<div id="app"></div>所以就以这个组件作为主入口，方便 )</p>
<p><strong>第一步，引入</strong>。在<code>&lt;script&gt;&lt;/script&gt;</code>标签内的第一行写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> firstcomponent <span class="keyword">from</span> <span class="string">'./component/firstcomponent.vue'</span></div></pre></td></tr></table></figure>
<p><strong>第二步，注册</strong>。在<code>&lt;script&gt;&lt;/script&gt;</code>标签内的 data 代码块后面加上 components: { firstcomponent }。<strong>记得中间加英文逗号!!!</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">data () &#123;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line"><span class="attr">msg</span>: <span class="string">'Hello Vue!'</span></div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">components</span>: &#123; firstcomponent &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>第三步，使用</strong>。</p>
<p>在<code>&lt;template&gt;&lt;/template&gt;</code>内加上<firstcomponent></firstcomponent></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">firstcomponent</span>&gt;</span><span class="tag">&lt;/<span class="name">firstcomponent</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<p>完成后的代码：</p>
<p><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-12-32-42.jpg" alt=""></p>
<p>这时候看看浏览器上的 <code>http://localhost:8080/</code> 页面(之前打开过就会自动刷新)，如果你没看到效果是因为你没有对 <code>App.vue</code> 和 <code>firstcomponent.vue</code> 进行保存操作，保存后页面会自动刷新。<br><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-06-12-35-51.png" alt=""></p>
<h3 id="使用路由搭建单页应用"><a href="#使用路由搭建单页应用" class="headerlink" title="使用路由搭建单页应用"></a>使用路由搭建单页应用</h3><p>之前已经通过命令安装了vue-router</p>
<blockquote>
<p>cnpm install vue-router –save</p>
</blockquote>
<p>在<code>webpack.config.js</code>加入别名</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line"><span class="attr">alias</span>: &#123;<span class="attr">vue</span>: <span class="string">'vue/dist/vue.js'</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为什么要加 alias 配置项？其作用可以在文档中有相应的描述:<br><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-09-22-41-49.jpg" alt=""></p>
<p>修改完之后的<code>webpack.config.js</code>是这样子的:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"><span class="attr">entry</span>: <span class="string">'./src/main.js'</span>,</div><div class="line"><span class="attr">output</span>: &#123;</div><div class="line"><span class="attr">path</span>: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line"><span class="attr">publicPath</span>: <span class="string">'/dist/'</span>,</div><div class="line"><span class="attr">filename</span>: <span class="string">'build.js'</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">resolveLoader</span>: &#123;</div><div class="line"><span class="attr">root</span>: path.join(__dirname, <span class="string">'node_modules'</span>),</div><div class="line">&#125;,</div><div class="line"><span class="attr">module</span>: &#123;</div><div class="line"><span class="attr">loaders</span>: [</div><div class="line">&#123;</div><div class="line"><span class="attr">test</span>: <span class="regexp">/\\\\\\\\.vue$/</span>,</div><div class="line"><span class="attr">loader</span>: <span class="string">'vue'</span></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line"><span class="attr">test</span>: <span class="regexp">/\\\\\\\\.js$/</span>,</div><div class="line"><span class="attr">loader</span>: <span class="string">'babel'</span>,</div><div class="line"><span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line"><span class="attr">test</span>: <span class="regexp">/\\\\\\\\.(png|jpg|gif|svg)$/</span>,</div><div class="line"><span class="attr">loader</span>: <span class="string">'file'</span>,</div><div class="line"><span class="attr">query</span>: &#123;</div><div class="line"><span class="attr">name</span>: <span class="string">'[name].[ext]?[hash]'</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">]</div><div class="line">&#125;,</div><div class="line"><span class="attr">resolve</span>: &#123;</div><div class="line"><span class="attr">alias</span>: &#123;<span class="attr">vue</span>: <span class="string">'vue/dist/vue.js'</span>&#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">devServer</span>: &#123;</div><div class="line"><span class="attr">historyApiFallback</span>: <span class="literal">true</span>,</div><div class="line"><span class="attr">noInfo</span>: <span class="literal">true</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">devtool</span>: <span class="string">'#eval-source-map'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</div><div class="line"><span class="built_in">module</span>.exports.devtool = <span class="string">'#source-map'</span></div><div class="line"><span class="comment">// http://vue-loader.vuejs.org/en/workflow/production.html</span></div><div class="line"><span class="built_in">module</span>.exports.plugins = (<span class="built_in">module</span>.exports.plugins || []).concat([</div><div class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line"><span class="string">'process.env'</span>: &#123;</div><div class="line"><span class="attr">NODE_ENV</span>: <span class="string">'"production"'</span></div><div class="line">&#125;</div><div class="line">&#125;),</div><div class="line"><span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line"><span class="attr">compress</span>: &#123;</div><div class="line"><span class="attr">warnings</span>: <span class="literal">false</span></div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再按之前的方法写一个组件 secondcomponent.vue</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"secondcomponent"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I am another page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span> written by &#123;&#123; author &#125;&#125; <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 感谢 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/showonne"</span>&gt;</span>showonne<span class="tag">&lt;/<span class="name">a</span>&gt;</span>大神的技术指导<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">data() &#123;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line"><span class="attr">author</span>: <span class="string">"微信公众号 jinkey-love"</span>,</div><div class="line"><span class="attr">articles</span>: [],</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这时候修改 main.js，引入并注册 <code>vue-router</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</div><div class="line">Vue.use(VueRouter);</div></pre></td></tr></table></figure>
<p>并且配置路由规则和 app 启动配置项加上 router，旧版的 router.map 方法在 <code>vue-router 2.0</code> 已经不能用了。修改后的<code>main.js</code>如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</div><div class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span></div><div class="line"></div><div class="line"><span class="comment">//开启debug模式</span></div><div class="line">Vue.config.debug = <span class="literal">true</span>;</div><div class="line"></div><div class="line">Vue.use(VueRouter);</div><div class="line">Vue.use(VueResource);</div><div class="line"></div><div class="line"><span class="comment">// 定义组件, 也可以像教程之前教的方法从别的文件引入</span></div><div class="line"><span class="keyword">const</span> First = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;&lt;h2&gt;我是第 1 个子页面&lt;/h2&gt;&lt;/div&gt;'</span> &#125;</div><div class="line"><span class="keyword">import</span> secondcomponent <span class="keyword">from</span> <span class="string">'./component/secondcomponent.vue'</span></div><div class="line"></div><div class="line"><span class="comment">// 创建一个路由器实例</span></div><div class="line"><span class="comment">// 并且配置路由规则</span></div><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line"><span class="attr">mode</span>: <span class="string">'history'</span>,</div><div class="line"><span class="attr">base</span>: __dirname,</div><div class="line"><span class="attr">routes</span>: [</div><div class="line">&#123;</div><div class="line"><span class="attr">path</span>: <span class="string">'/first'</span>,</div><div class="line"><span class="attr">component</span>: First</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line"><span class="attr">path</span>: <span class="string">'/second'</span>,</div><div class="line"><span class="attr">component</span>: secondcomponent</div><div class="line">&#125;</div><div class="line">]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 现在我们可以启动应用了！</span></div><div class="line"><span class="comment">// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。</span></div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line"><span class="attr">router</span>: router,</div><div class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</div><div class="line">&#125;).$mount(<span class="string">'#app'</span>)</div></pre></td></tr></table></figure>
<p>这样子改完再打开浏览器看看。<br><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-09-23-10-33.png" alt=""></p>
<p>点击那两个链接试试，会发现<code>&lt;router-view class=&quot;view&quot;&gt;&lt;/router-view&gt;</code>的内容已经展示出来，同时注意<strong>浏览器地址已经变更</strong>。<br><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-09-23-11-14.png" alt=""></p>
<p>另外，也可以把 App.vue 的内容写在 main.js 也是可以的不过不建议这么做<br><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-09-23-49-24.jpg" alt=""></p>
<p>如果你使用 vue1.0和0.7版本的 vue-router，请参照下面这个教程, 他整个系列都不错的，当然仅限于 vue1.0 :</p>
<blockquote>
<p><a href="http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/" target="_blank" rel="external">http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/</a></p>
</blockquote>
<h3 id="给页面加点动态数据"><a href="#给页面加点动态数据" class="headerlink" title="给页面加点动态数据"></a>给页面加点动态数据</h3><p>这时候的页面都是静态的(数据在写程序的时候已经固定了不能修改)，而每个应用基本上都会请求外部数据以动态改变页面内容。对应有一个库叫 <code>vue-resource</code> 帮我们解决这个问题。</p>
<p>使用命令行安装</p>
<blockquote>
<p>cnpm install vue-resource –save</p>
</blockquote>
<p>在 main.js 引入并注册 <code>vue-resource</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span></div><div class="line">Vue.use(VueResource);</div></pre></td></tr></table></figure>
<p>我们在 secondcomponent.vue 上来动态加载数据</p>
<p>添加一个列表:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"article in articles"</span>&gt;</span></div><div class="line">&#123;&#123;article.title&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在 data 里面加入数组 articles 并赋值为[]<br>然后在 data 后面加入加入钩子函数 <code>mounted</code>(详细请参照官方文档关于 vue 生命周期的解析)，<strong>data 和 mount 中间记得记得加逗号</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">this</span>.$http.jsonp(<span class="string">'https://api.douban.com/v2/movie/top250?count=10'</span>, &#123;&#125;, &#123;</div><div class="line"><span class="attr">headers</span>: &#123;</div><div class="line"></div><div class="line">&#125;,</div><div class="line"><span class="attr">emulateJSON</span>: <span class="literal">true</span></div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line"><span class="comment">// 这里是处理正确的回调</span></div><div class="line"></div><div class="line"><span class="keyword">this</span>.articles = response.data.subjects</div><div class="line"><span class="comment">// this.articles = response.data["subjects"] 也可以</span></div><div class="line"></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line"><span class="comment">// 这里是处理错误的回调</span></div><div class="line"><span class="built_in">console</span>.log(response)</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里使用的是豆瓣的公开 GET 接口，如果接口是跨域的 POST 请求，则需要在服务器端配置:</p>
<blockquote>
<p>Access-Control-Allow-Origin: *</p>
</blockquote>
<p>这时候运行看看。等一会接口返回数据，咦，数据加载出来了，棒棒哒 !</p>
<p><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-09-23-32-49.png" alt=""></p>
<p>更多 <code>vue-router</code> 的使用方法可以看</p>
<blockquote>
<p><strong>vue-router 0.7</strong><br><a href="http://m.doc00.com/doc/1001004eg" target="_blank" rel="external">http://m.doc00.com/doc/1001004eg</a><br><strong>vue-router 2.0</strong><br><a href="http://router.vuejs.org/zh-cn/index.html" target="_blank" rel="external">http://router.vuejs.org/zh-cn/index.html</a></p>
</blockquote>
<h3 id="来拯救如此难看的界面"><a href="#来拯救如此难看的界面" class="headerlink" title="来拯救如此难看的界面"></a>来拯救如此难看的界面</h3><p>组件、双向绑定、路由、数据请求等基本特性都能用了，写到这里一个单页应用基本上成型了。但是，这几面也太 TM 难看了吧。自己写 UI 框架太费劲？那就上网找一个吧。<br>本来想给大家介绍 Vux 的，因为他用的是微信的 WeUI 设计规范，对于开发微信小程序或者微信内的网页非常和谐，但由于写这篇文章的时候 Vux 还不支持 vue2.0，只能用别的框架了。<br>命令行安装 ElementUI (此处某公司的人应该发红包了…)</p>
<blockquote>
<p>cnpm install element-ui@next -S</p>
</blockquote>
<p>然后在 main.js 引入并注册</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">'element-ui'</span></div><div class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-default/index.css'</span></div><div class="line">Vue.use(Element)</div></pre></td></tr></table></figure>
<p>保存，这时候程序报错</p>
<blockquote>
<p>Uncaught Error: Module parse failed: /Users/**/Desktop/vue2/node_modules/.1.0.0-rc.5@element-ui/lib/theme-default/index.css Unexpected character ‘@’ (1:0)<br>You may need an appropriate loader to handle this file type.</p>
</blockquote>
<p>官网文档又有坑了，安装教程也不跟我们说这一步，当我们都是高手了…<br>报错是由于我们引入了<code>index.css</code>这个 CSS 文件，但是 webpack 打包的时候无法识别并转换成 js，所以就需要配置才能读取 css 和字体文件，运行命令安装下面三个东西(如果之前安装过就不需要了)</p>
<blockquote>
<p>cnpm install style-loader –save-dev<br>cnpm install css-loader –save-dev<br>cnpm install file-loader –save-dev</p>
</blockquote>
<p>在 <code>webpack.config.js</code> 中的 loaders 数组加入以下配置，<strong>记得该加逗号的地方加逗号!</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">test</span>: <span class="regexp">/\\\\\\\\.css$/</span>,</div><div class="line"><span class="attr">loader</span>: <span class="string">"style!css"</span></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line"><span class="attr">test</span>: <span class="regexp">/\\\\\\\\.(eot|woff|woff2|ttf)([\\\\\\\\?]?.*)$/</span>,</div><div class="line"><span class="attr">loader</span>: <span class="string">"file"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改完的 <code>webpack.config.js</code> 如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"><span class="attr">entry</span>: <span class="string">'./src/main.js'</span>,</div><div class="line"><span class="attr">output</span>: &#123;</div><div class="line"><span class="attr">path</span>: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line"><span class="attr">publicPath</span>: <span class="string">'/dist/'</span>,</div><div class="line"><span class="attr">filename</span>: <span class="string">'build.js'</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">resolveLoader</span>: &#123;</div><div class="line"><span class="attr">root</span>: path.join(__dirname, <span class="string">'node_modules'</span>),</div><div class="line">&#125;,</div><div class="line"><span class="attr">module</span>: &#123;</div><div class="line"><span class="attr">loaders</span>: [</div><div class="line">&#123;</div><div class="line"><span class="attr">test</span>: <span class="regexp">/\\\\\\\\.vue$/</span>,</div><div class="line"><span class="attr">loader</span>: <span class="string">'vue'</span></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line"><span class="attr">test</span>: <span class="regexp">/\\\\\\\\.js$/</span>,</div><div class="line"><span class="attr">loader</span>: <span class="string">'babel'</span>,</div><div class="line"><span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line"><span class="attr">test</span>: <span class="regexp">/\\\\\\\\.css$/</span>,</div><div class="line"><span class="attr">loader</span>: <span class="string">"style!css"</span></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line"><span class="attr">test</span>: <span class="regexp">/\\\\\\\\.(eot|woff|woff2|ttf)([\\\\\\\\?]?.*)$/</span>,</div><div class="line"><span class="attr">loader</span>: <span class="string">"file"</span></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line"><span class="attr">test</span>: <span class="regexp">/\\\\\\\\.(png|jpg|gif|svg)$/</span>,</div><div class="line"><span class="attr">loader</span>: <span class="string">'file'</span>,</div><div class="line"><span class="attr">query</span>: &#123;</div><div class="line"><span class="attr">name</span>: <span class="string">'[name].[ext]?[hash]'</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">]</div><div class="line">&#125;,</div><div class="line"><span class="attr">resolve</span>: &#123;</div><div class="line"><span class="attr">alias</span>: &#123;<span class="attr">vue</span>: <span class="string">'vue/dist/vue.js'</span>&#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">devServer</span>: &#123;</div><div class="line"><span class="attr">historyApiFallback</span>: <span class="literal">true</span>,</div><div class="line"><span class="attr">noInfo</span>: <span class="literal">true</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">devtool</span>: <span class="string">'#eval-source-map'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</div><div class="line"><span class="built_in">module</span>.exports.devtool = <span class="string">'#source-map'</span></div><div class="line"><span class="comment">// http://vue-loader.vuejs.org/en/workflow/production.html</span></div><div class="line"><span class="built_in">module</span>.exports.plugins = (<span class="built_in">module</span>.exports.plugins || []).concat([</div><div class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line"><span class="string">'process.env'</span>: &#123;</div><div class="line"><span class="attr">NODE_ENV</span>: <span class="string">'"production"'</span></div><div class="line">&#125;</div><div class="line">&#125;),</div><div class="line"><span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line"><span class="attr">compress</span>: &#123;</div><div class="line"><span class="attr">warnings</span>: <span class="literal">false</span></div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>给豆瓣的电影列表套个衣服(样式) :</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">"box-card"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"line-height: 36px; color: #20A0FF"</span>&gt;</span>豆瓣电影排行榜<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"article in articles"</span> <span class="attr">class</span>=<span class="string">"text item"</span>&gt;</span></div><div class="line">&#123;&#123;article.title&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></div></pre></td></tr></table></figure>
<p>打开浏览器,输入网址:</p>
<blockquote>
<p><a href="http://localhost:8080/second" target="_blank" rel="external">http://localhost:8080/second</a></p>
</blockquote>
<p><img src="http://o8lot23ep.bkt.clouddn.com/_image/2016-10-10-00-51-43.png" alt=""></p>
<p>￼<br>列表比之前漂亮多了，你还可以参照 ElementUI 的文档使用更多组件样式</p>
<blockquote>
<p><a href="http://element.eleme.io/#/component/layout" target="_blank" rel="external">http://element.eleme.io/#/component/layout</a></p>
</blockquote>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><blockquote>
<p>npm run build</p>
</blockquote>
<p>又报错了…orz</p>
<blockquote>
<p>ERROR in build.js from UglifyJs<br>SyntaxError: Unexpected token punc «(», expected punc «:» [build.js:32001,6]<br>把node_modules/.bin/cross-env里的<br>require(‘../dist’)(process.argv.slice(2));</p>
</blockquote>
<p>后来发现直接运行 webpack 命令就可以打包了</p>
<blockquote>
<p>webpack –color –progress</p>
</blockquote>
<p>接着把 index.html 和整个 dist 目录丢到服务器就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Jinkey原创&lt;br&gt;感谢 &lt;a href=&quot;https://github.com/showonne&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;showonne&lt;/a&gt;、&lt;a href=&quot;https://github.com
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="NodeJS" scheme="https://aotu.io/tags/NodeJS/"/>
    
      <category term="Vue" scheme="https://aotu.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>H5直播起航</title>
    <link href="https://aotu.io/notes/2016/10/09/HTML5-SopCast/"/>
    <id>https://aotu.io/notes/2016/10/09/HTML5-SopCast/</id>
    <published>2016-10-09T07:24:41.000Z</published>
    <updated>2016-10-20T07:06:32.451Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前不久抽空对目前比较火的视频直播，做了下研究与探索，了解其整体实现流程，以及探讨移动端HTML5直播可行性方案。</p>
<p>发现目前 WEB 上主流的视频直播方案有 HLS 和 RTMP，移动 WEB 端目前以 HLS 为主（HLS存在延迟性问题，也可以借助 <a href="https://github.com/videojs/video.js" target="_blank" rel="external">video.js</a>  采用RTMP），PC端则以 RTMP 为主实时性较好，接下来将围绕这两种视频流协议来展开H5直播主题分享。</p>
<h2 id="一、视频流协议HLS与RTMP"><a href="#一、视频流协议HLS与RTMP" class="headerlink" title="一、视频流协议HLS与RTMP"></a>一、视频流协议HLS与RTMP</h2><h3 id="1-HTTP-Live-Streaming"><a href="#1-HTTP-Live-Streaming" class="headerlink" title="1. HTTP Live Streaming"></a>1. HTTP Live Streaming</h3><p>HTTP Live Streaming（简称 HLS）是一个基于 HTTP 的视频流协议，由 Apple 公司实现，Mac OS 上的 QuickTime、Safari 以及 iOS 上的 Safari 都能很好的支持 HLS，高版本 Android 也增加了对 HLS 的支持。一些常见的客户端如：MPlayerX、VLC 也都支持 HLS 协议。</p>
<p>HLS 协议基于 HTTP，而一个提供 HLS 的服务器需要做两件事：</p>
<ul>
<li>编码：以 H.263 格式对图像进行编码，以 MP3 或者 HE-AAC 对声音进行编码，最终打包到 MPEG-2 TS（Transport Stream）容器之中；</li>
<li>分割：把编码好的 TS 文件等长切分成后缀为 ts 的小文件，并生成一个 .m3u8 的纯文本索引文件；</li>
</ul>
<p>浏览器使用的是 m3u8 文件。m3u8 跟音频列表格式 m3u 很像，可以简单的认为 m3u8 就是包含多个 ts 文件的播放列表。播放器按顺序逐个播放，全部放完再请求一下 m3u8 文件，获得包含最新 ts 文件的播放列表继续播，周而复始。整个直播过程就是依靠一个不断更新的 m3u8 和一堆小的 ts 文件组成，m3u8 必须动态更新，ts 可以走 CDN。一个典型的 m3u8 文件格式如下：</p>
<blockquote>
<p>#EXTM3U</p>
<p>#EXT-X-STREAM-INF:PROGRAM-ID=1, BANDWIDTH=200000<br>gear1/prog_index.m3u8</p>
<p>#EXT-X-STREAM-INF:PROGRAM-ID=1, BANDWIDTH=311111<br>gear2/prog_index.m3u8</p>
<p>#EXT-X-STREAM-INF:PROGRAM-ID=1, BANDWIDTH=484444<br>gear3/prog_index.m3u8</p>
<p>#EXT-X-STREAM-INF:PROGRAM-ID=1, BANDWIDTH=737777<br>gear4/prog_index.m3u8</p>
</blockquote>
<p>可以看到 HLS 协议本质还是一个个的 HTTP 请求 / 响应，所以适应性很好，不会受到防火墙影响。但它也有一个致命的弱点：延迟现象非常明显。如果每个 ts 按照 5 秒来切分，一个 m3u8 放 6 个 ts 索引，那么至少就会带来 30 秒的延迟。如果减少每个 ts 的长度，减少 m3u8 中的索引数，延时确实会减少，但会带来更频繁的缓冲，对服务端的请求压力也会成倍增加。所以只能根据实际情况找到一个折中的点。</p>
<p>对于支持 HLS 的浏览器来说，直接这样写就能播放了：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;video src=<span class="string">"http://devimages.apple.com/iphone/samples/bipbop/bipbopall.m3u8"</span></div><div class="line"><span class="built_in">height</span>=<span class="string">"300"</span> <span class="built_in">width</span>=<span class="string">"400"</span>  preload=<span class="string">"auto"</span> autoplay=<span class="string">"autoplay"</span> <span class="built_in">loop</span>=<span class="string">"loop"</span> webkit-playsinline=<span class="string">"true"</span>&gt;&lt;/video&gt;</div></pre></td></tr></table></figure>
<p><code>注意</code>：HLS 在 PC 端仅支持safari浏览器，类似chrome浏览器使用<code>HTML5 video</code>标签无法播放 m3u8 格式，可直接采用网上一些比较成熟的方案，如：<a href="https://github.com/jackzhang1204/sewise-player" target="_blank" rel="external">sewise-player</a>、<a href="https://github.com/johndyer/mediaelement" target="_blank" rel="external">MediaElement</a>、<a href="https://github.com/videojs/videojs-contrib-hls" target="_blank" rel="external">videojs-contrib-hls</a>、<a href="https://github.com/jwplayer/jwplayer" target="_blank" rel="external">jwplayer</a>。</p>
<h3 id="2-Real-Time-Messaging-Protocol"><a href="#2-Real-Time-Messaging-Protocol" class="headerlink" title="2. Real Time Messaging Protocol"></a>2. Real Time Messaging Protocol</h3><p>Real Time Messaging Protocol（简称 RTMP）是 Macromedia 开发的一套视频直播协议，现在属于 Adobe。这套方案需要搭建专门的 RTMP 流媒体服务如 Adobe Media Server，并且在浏览器中只能使用 Flash 实现播放器。它的实时性非常好，延迟很小，但无法支持移动端 WEB 播放是它的硬伤。</p>
<p>虽然无法在iOS的H5页面播放，但是对于iOS原生应用是可以自己写解码去解析的, RTMP 延迟低、实时性较好。</p>
<p>浏览器端，<code>HTML5 video</code>标签无法播放 RTMP 协议的视频，可以通过 <a href="https://github.com/videojs/video.js" target="_blank" rel="external">video.js</a> 来实现。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://vjs.zencdn.net/5.8.8/video-js.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"example_video_1"</span> <span class="attr">class</span>=<span class="string">"video-js vjs-default-skin"</span> <span class="attr">controls</span> <span class="attr">preload</span>=<span class="string">"auto"</span> <span class="attr">width</span>=<span class="string">"640"</span> <span class="attr">height</span>=<span class="string">"264"</span> <span class="attr">loop</span>=<span class="string">"loop"</span> <span class="attr">webkit-playsinline</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"rtmp://10.14.221.17:1935/rtmplive/home"</span> <span class="attr">type</span>=<span class="string">'rtmp/flv'</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://vjs.zencdn.net/5.8.8/video.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">videojs.options.flash.swf = <span class="string">'video.swf'</span>;</div><div class="line">videojs(<span class="string">'example_video_1'</span>).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.play();</div><div class="line">&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3-视频流协议HLS与RTMP对比"><a href="#3-视频流协议HLS与RTMP对比" class="headerlink" title="3. 视频流协议HLS与RTMP对比"></a>3. 视频流协议HLS与RTMP对比</h3><table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">协议</th>
<th style="text-align:center">原理</th>
<th style="text-align:center">延时</th>
<th style="text-align:center">优点</th>
<th style="text-align:center">使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">HLS</td>
<td style="text-align:center">短链接Http</td>
<td style="text-align:center">集合一段时间数据生成ts切片文件更新m3u8文件</td>
<td style="text-align:center">10s - 30s</td>
<td style="text-align:center">跨平台</td>
<td style="text-align:center">移动端为主</td>
</tr>
<tr>
<td style="text-align:center">RTMP</td>
<td style="text-align:center">长链接Tcp</td>
<td style="text-align:center">每个时刻的数据收到后立即发送</td>
<td style="text-align:center">2s</td>
<td style="text-align:center">延时低、实时性好</td>
<td style="text-align:center">PC+直播+实时性要求高＋互动性强</td>
</tr>
</tbody>
</table>
<h2 id="二、直播形式"><a href="#二、直播形式" class="headerlink" title="二、直播形式"></a>二、直播形式</h2><p><img src="//misc.aotu.io/pfan123/sopcast/1.png" alt="直播形式"></p>
<p>目前直播展示形式，通常以YY直播、映客直播这种页面居多，可以看到其结构可以分成三层：① 背景视频层 ② 关注、评论模块 ③ 点赞动画</p>
<p>而现行H5类似直播页面，实现技术难点不大，其可以通过实现方式分为：① 底部视频背景使用video视频标签实现播放 ② 关注、评论模块利用 WebScoket 来实时发送和接收新的消息通过DOM 和 CSS3 实现  ③ 点赞利用 CSS3 动画</p>
<p>了解完直播形式之后，接下来整体了解直播流程。</p>
<h2 id="三、直播整体流程"><a href="#三、直播整体流程" class="headerlink" title="三、直播整体流程"></a>三、直播整体流程</h2><p>直播整体流程大致可分为：</p>
<ul>
<li><p>视频采集端：可以是电脑上的音视频输入设备、或手机端的摄像头、或麦克风，目前以移动端手机视频为主。</p>
</li>
<li><p>直播流视频服务端：一台Nginx服务器，采集视频录制端传输的视频流(H264/ACC编码)，由服务器端进行解析编码，推送RTMP/HLS格式视频流至视频播放端。</p>
</li>
<li><p>视频播放端：可以是电脑上的播放器（QuickTime Player、VLC），手机端的native播放器，还有就是 H5 的video标签等，目前还是以手机端的native播放器为主。</p>
</li>
</ul>
<p><img src="//misc.aotu.io/pfan123/sopcast/2.png" alt="直播整体流程"></p>
<h2 id="四、H5-录制视频"><a href="#四、H5-录制视频" class="headerlink" title="四、H5 录制视频"></a>四、H5 录制视频</h2><p>对于H5视频录制，可以使用强大的 webRTC （Web Real-Time Communication）是一个支持网页浏览器进行实时语音对话或视频对话的技术，缺点是只在 PC 的 Chrome 上支持较好，移动端支持不太理想。</p>
<h3 id="1-使用-webRTC-录制视频基本流程"><a href="#1-使用-webRTC-录制视频基本流程" class="headerlink" title="1. 使用 webRTC 录制视频基本流程"></a>1. 使用 webRTC 录制视频基本流程</h3><p>① 调用 <code>window.navigator.webkitGetUserMedia()</code> 获取用户的PC摄像头视频数据。<br>② 将获取到视频流数据转换成 <code>window.webkitRTCPeerConnection</code> (一种视频流数据格式)。<br>③ 利用 <code>WebScoket</code> 将视频流数据传输到服务端。</p>
<p><code>注意</code>：虽然Google一直在推WebRTC，目前已有不少成型的产品出现，但是大部分移动端的浏览器还不支持 webRTC（最新iOS 10.0也不支持），所以真正的视频录制还是要靠客户端（iOS,Android）来实现,效果会好一些。<br><img src="//misc.aotu.io/pfan123/sopcast/3.png" alt="WebRTC支持度"></p>
<h3 id="2-iOS原生应用调用摄像头录制视频流程"><a href="#2-iOS原生应用调用摄像头录制视频流程" class="headerlink" title="2. iOS原生应用调用摄像头录制视频流程"></a>2. iOS原生应用调用摄像头录制视频流程</h3><p>① 音视频的采集，利用AVCaptureSession和AVCaptureDevice可以采集到原始的音视频数据流。<br>② 对视频进行H264编码，对音频进行AAC编码，在iOS中分别有已经封装好的编码库（<a href="https://github.com/kewlbear/x264-ios" target="_blank" rel="external">x264编码</a>、<a href="https://github.com/fflydev/faac-ios-build" target="_blank" rel="external">faac编码</a>、<a href="https://github.com/kewlbear/FFmpeg-iOS-build-script" target="_blank" rel="external">ffmpeg编码</a>）来实现对音视频的编码。<br>③ 对编码后的音、视频数据进行组装封包。<br>④ 建立RTMP连接并上推到服务端。</p>
<p><img src="//misc.aotu.io/pfan123/sopcast/4.png" alt="视频流程"></p>
<h2 id="五、搭建Nginx-Rtmp直播流服务"><a href="#五、搭建Nginx-Rtmp直播流服务" class="headerlink" title="五、搭建Nginx+Rtmp直播流服务"></a>五、搭建Nginx+Rtmp直播流服务</h2><h3 id="1-安装nginx、nginx-rtmp-module"><a href="#1-安装nginx、nginx-rtmp-module" class="headerlink" title="1. 安装nginx、nginx-rtmp-module"></a>1. 安装nginx、nginx-rtmp-module</h3><p>① 先clone nginx项目到本地：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>tap homebrew/nginx</div></pre></td></tr></table></figure>
<p>② 执行安装<code>nginx-rtmp-module</code></p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install nginx-full --<span class="keyword">with</span>-rtmp-<span class="class"><span class="keyword">module</span></span></div></pre></td></tr></table></figure>
<h3 id="2-nginx-conf配置文件，配置RTMP、HLS"><a href="#2-nginx-conf配置文件，配置RTMP、HLS" class="headerlink" title="2. nginx.conf配置文件，配置RTMP、HLS"></a>2. nginx.conf配置文件，配置RTMP、HLS</h3><p>查找到nginx.conf配置文件（路径/usr/local/etc/nginx/nginx.conf），配置RTMP、HLS。</p>
<p>① 在http节点之前添加 rtmp 的配置内容：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="section">rtmp</span> &#123;</div><div class="line">  <span class="section">server</span> &#123;</div><div class="line">     <span class="comment">#监听的端口</span></div><div class="line">      <span class="attribute">listen</span> <span class="number">1935</span>;</div><div class="line">      <span class="comment"># RTMP 直播流配置</span></div><div class="line">      <span class="attribute">application</span> rtmplive &#123;</div><div class="line">          <span class="attribute">live</span> <span class="literal">on</span>;</div><div class="line">	      <span class="comment">#为 rtmp 引擎设置最大连接数。默认为 off</span></div><div class="line">	      <span class="attribute">max_connections</span> <span class="number">1024</span>;</div><div class="line">       &#125;</div><div class="line">	  <span class="comment"># HLS 直播流配置</span></div><div class="line">      <span class="attribute">application</span> hls&#123;</div><div class="line">          <span class="attribute">live</span> <span class="literal">on</span>;</div><div class="line">          <span class="attribute">hls</span> <span class="literal">on</span>;</div><div class="line">          <span class="attribute">hls_path</span> /usr/local/var/www/hls;</div><div class="line">          <span class="attribute">hls_fragment</span> <span class="number">1s</span>;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>② 在http中添加 hls 的配置</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">location /<span class="class">hls </span>&#123;  </div><div class="line">       <span class="meta"># Serve HLS fragments  </span></div><div class="line">       <span class="class">types </span>&#123;  </div><div class="line">           application/vnd.apple.mpegurl m3u8;  </div><div class="line">           video/mp2t ts;  </div><div class="line">       &#125;  </div><div class="line">       root <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/var/</span>www;  </div><div class="line">       <span class="meta">#add_header Cache-Controll no-cache;</span></div><div class="line">       expires <span class="number">-1</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="3-重启nginx服务"><a href="#3-重启nginx服务" class="headerlink" title="3. 重启nginx服务"></a>3. 重启nginx服务</h3><p>重启nginx服务，浏览器中输入 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a>，是否出现欢迎界面确定nginx重启成功。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx <span class="_">-s</span> reload</div></pre></td></tr></table></figure></p>
<h2 id="六、直播流转换格式、编码推流"><a href="#六、直播流转换格式、编码推流" class="headerlink" title="六、直播流转换格式、编码推流"></a>六、直播流转换格式、编码推流</h2><p>当服务器端接收到采集视频录制端传输过来的视频流时，需要对其进行解析编码，推送RTMP/HLS格式视频流至视频播放端。通常使用的常见编码库方案，如<a href="https://github.com/kewlbear/x264-ios" target="_blank" rel="external">x264编码</a>、<a href="https://github.com/fflydev/faac-ios-build" target="_blank" rel="external">faac编码</a>、<a href="https://github.com/kewlbear/FFmpeg-iOS-build-script" target="_blank" rel="external">ffmpeg编码</a>等。</p>
<p>鉴于 FFmpeg 工具集合了多种音频、视频格式编码，我们可以优先选用FFmpeg进行转换格式、编码推流。</p>
<p>1.安装 FFmpeg 工具<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>ffmpeg</div></pre></td></tr></table></figure></p>
<p>2.推流MP4文件</p>
<p>视频文件地址：/Users/gao/Desktop/video/test.mp4<br>推流拉流地址：rtmp://localhost:1935/rtmplive/home，rtmp://localhost:1935/rtmplive/home</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//RTMP 协议流</span></div><div class="line">ffmpeg -re -<span class="selector-tag">i</span> /Users/gao/Desktop/video/test<span class="selector-class">.mp4</span> -vcodec libx264 -acodec aac -f flv rtmp:<span class="comment">//10.14.221.17:1935/rtmplive/home</span></div><div class="line"></div><div class="line"><span class="comment">//HLS 协议流</span></div><div class="line">ffmpeg -re -<span class="selector-tag">i</span> /Users/gao/Desktop/video/test<span class="selector-class">.mp4</span> -vcodec libx264 -vprofile baseline -acodec aac -ar <span class="number">44100</span> -strict -<span class="number">2</span> -ac <span class="number">1</span> -f flv  -<span class="selector-tag">q</span> <span class="number">10</span> rtmp:<span class="comment">//10.14.221.17:1935/hls/test</span></div></pre></td></tr></table></figure>
<p><code>注意</code>： 当我们进行推流之后，可以安装<a href="http://www.pc6.com/mac/112121.html" target="_blank" rel="external">VLC</a>、ffplay（支持rtmp协议的视频播放器）本地拉流进行演示</p>
<p>3.FFmpeg推流命令</p>
<p>① 视频文件进行直播</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ffmpeg -re -<span class="selector-tag">i</span> /Users/gao/Desktop/video/test<span class="selector-class">.mp4</span> -vcodec libx264 -vprofile baseline -acodec aac -ar <span class="number">44100</span> -strict -<span class="number">2</span> -ac <span class="number">1</span> -f flv  -<span class="selector-tag">q</span> <span class="number">10</span> rtmp:<span class="comment">//192.168.1.101:1935/hls/test</span></div><div class="line">ffmpeg -re -<span class="selector-tag">i</span> /Users/gao/Desktop/video/test<span class="selector-class">.mp4</span> -vcodec libx264 -vprofile baseline -acodec aac -ar <span class="number">44100</span> -strict -<span class="number">2</span> -ac <span class="number">1</span> -f flv  -<span class="selector-tag">q</span> <span class="number">10</span> rtmp:<span class="comment">//10.14.221.17:1935/hls/test</span></div></pre></td></tr></table></figure>
<p>② 推流摄像头＋桌面+麦克风录制进行直播</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -f avfoundation -framerate <span class="number">30</span> -<span class="selector-tag">i</span> <span class="string">"1:0"</span> \-f avfoundation -framerate <span class="number">30</span> -video_size <span class="number">640</span>x480 -<span class="selector-tag">i</span> <span class="string">"0"</span> \-c:v libx264 -preset ultrafast \-filter_complex <span class="string">'overlay=main_w-overlay_w-10:main_h-overlay_h-10'</span> -acodec libmp3lame -ar <span class="number">44100</span> -ac <span class="number">1</span>  -f flv rtmp:<span class="comment">//192.168.1.101:1935/hls/test</span></div></pre></td></tr></table></figure>
<p>更多命令，请参考：<br><a href="http://blog.csdn.net/leixiaohua1020/article/details/12029543" target="_blank" rel="external">FFmpeg处理RTMP流媒体的命令大全</a><br><a href="http://www.jianshu.com/p/d541b317f71c" target="_blank" rel="external"> FFmpeg常用推流命令</a></p>
<h2 id="七、H5-直播视频播放"><a href="#七、H5-直播视频播放" class="headerlink" title="七、H5 直播视频播放"></a>七、H5 直播视频播放</h2><p>移动端iOS和 Android 都天然支持HLS协议，做好视频采集端、视频流推流服务之后，便可以直接在H5页面配置 video 标签播放直播视频。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">video</span> controls preload=<span class="string">"auto"</span>  autoplay=<span class="string">"autoplay"</span> loop=<span class="string">"loop"</span> webkit-playsinline&gt;    </div><div class="line">    &lt;source src=<span class="string">"http://10.14.221.8/hls/test.m3u8"</span> type=<span class="string">"application/vnd.apple.mpegurl"</span> /&gt;  </div><div class="line">    &lt;<span class="selector-tag">p</span> class=<span class="string">"warning"</span>&gt;Your browser does not support HTML5 <span class="selector-tag">video</span>.&lt;/p&gt;  </div><div class="line">&lt;/video&gt;</div></pre></td></tr></table></figure>
<p><code>ps</code>：① video标签添加<code>webkit-playsinline</code>属性（iOS支持）是保证视频在网页中内嵌播放。<br>② 针对微信浏览器，video标签层级最高的问题，需要申请添加白名单，请参照 <a href="http://bbs.mb.qq.com/thread-1242581-1-1.html?ptlang=2052。" target="_blank" rel="external">http://bbs.mb.qq.com/thread-1242581-1-1.html?ptlang=2052。</a></p>
<h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><p>本文从视频采集上传，服务器处理视频推流，以及H5页面播放直播视频一整套流程,具体阐述了直播实现原理，实现过程中会遇到很多性能优化问题。</p>
<p>① H5 HLS 限制必须是H264+AAC编码。</p>
<p>② H5 HLS 播放卡顿问题，server 端可以做好分片策略，将 ts 文件放在 CDN 上，前端可尽量做到 DNS 缓存等。</p>
<p>③ H5 直播为了达到更好的实时互动，也可以采用RTMP协议，通过<code>video.js</code>实现播放。</p>
<p>参考资料：</p>
<ul>
<li><a href="https://www.zhihu.com/question/42162310" target="_blank" rel="external">如何搭建一个完整的视频直播系统？</a></li>
<li><a href="http://www.haomou.net/2014/08/04/2014_Html5_canvas_video/" target="_blank" rel="external">WebRTC相关的canvas与video</a></li>
<li><a href="https://segmentfault.com/a/1190000000392586" target="_blank" rel="external">使用 WebSockets 进行 HTML5 视频直播</a></li>
<li><a href="http://blog.ucloud.cn/archives/694" target="_blank" rel="external">关于直播，所有的技术细节都在这里了（一）</a></li>
<li><a href="http://blog.ucloud.cn/archives/699" target="_blank" rel="external">关于直播，所有的技术细节都在这里了（二）</a></li>
<li><a href="http://blog.ucloud.cn/archives/760" target="_blank" rel="external">关于直播，所有的技术细节都在这里了（三）</a></li>
<li><a href="https://github.com/phoboslab/jsmpeg" target="_blank" rel="external">JS解码项目jsmpeg</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前不久抽空对目前比较火的视频直播，做了下研究与探索，了解其整体实现流程，以及探讨移动端HTML5直播可行
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="H5" scheme="https://aotu.io/tags/H5/"/>
    
      <category term="H5 视频直播 video" scheme="https://aotu.io/tags/H5-%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD-video/"/>
    
      <category term="HLS、RTMP协议" scheme="https://aotu.io/tags/HLS%E3%80%81RTMP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>A-Frame WebVR试玩报告</title>
    <link href="https://aotu.io/notes/2016/10/08/aframe/"/>
    <id>https://aotu.io/notes/2016/10/08/aframe/</id>
    <published>2016-10-08T03:05:14.000Z</published>
    <updated>2016-10-20T07:06:32.450Z</updated>
    
    <content type="html"><![CDATA[<p>什么叫真？你怎样给真下定义，如果你说真就是你能感觉到的东西，你能闻到的气味，你能尝到的味道，那么这个真只是你大脑作出反应的电子信号。 —— 《黑客帝国》</p>
<h3 id="关于VR技术"><a href="#关于VR技术" class="headerlink" title="关于VR技术"></a>关于VR技术</h3><p>VR即Virtual Reality虚拟现实，大白话来讲，就是利用电脑创造一个全新的虚拟世界，通过欺骗你的感官（目前更多是视觉上），让你置身于一个与现实相似又完全虚拟的世界中，这就像是在《黑客帝国》中，主人公尼奥对这个看似真实的世界产生怀疑，在崔妮蒂的帮助下，最终与墨菲斯见面，并吃下了象征真相的红色药丸，在矩阵醒来后的尼奥发现，原来他一直生活在矩阵所创造的虚拟世界中。</p>
<h3 id="一分钟VR简史"><a href="#一分钟VR简史" class="headerlink" title="一分钟VR简史"></a>一分钟VR简史</h3><p><strong>《Pygmalion’s Spectacles》（《皮格马利翁的眼镜》）</strong></p>
<p>虚拟现实这个概念最早来自于Stanley G. Weinbaum在1935年发表的科幻小说《皮格马利翁的眼镜》，被认为是探讨虚拟现实的第一部科幻作品，简短的故事中详细的描述了包括嗅觉、触觉和全息眼镜为基础的虚拟现实系统。</p>
<p><img src="//misc.aotu.io/ONE-SUNDAY/aframe_PygmalionsSpectacles.jpg" alt="Pygmalion&#39;s Spectacles"></p>
<p><strong>Sensorama</strong></p>
<p>VR的雏形，要追溯到1962年被称为虚拟现实之父Morton Heilig发明的Sensorama，它的外观就像是一个笨重的街机盒子。<br>Morton Heilig发明Sensorama的初衷是为了打造未来的电影，在当时那个年代拍摄3D电影并不容易，Morton Heilig为了配合拍摄，又发明了3D摄像机和投影仪，为Sensorama拍摄了五部短片，以直升机、卡丁车、自行车和摩托车等骑行体验为主，Sensorama播放在布鲁克林骑摩托车的短片时能够提供真实的3D影像，感受行车时的颠簸，周围环境的立体声、迎面吹来的风和气味，这在当时大部分人都还在使用黑白电视的时代，是多么令人震撼的，遗憾的是该项目未能获得资金的支持，因此Sensorama的研发工作止步不前，最终回看历史，其实它更像是现代的4D电影。</p>
<p><img src="//misc.aotu.io/ONE-SUNDAY/aframe_Sensorama.jpg" alt="Sensorama"></p>
<p><strong>The Sword of Damocles（达摩克利斯之剑）</strong></p>
<p>1968年，Ivan Edward Sutherland和他的学生Bob Sproull在麻省理工学院的林肯实验室创造了第一个虚拟现实及增强现实头戴式显示器系统，第一个显示应用是悬浮在空中的一个立方体，这款头戴显示器因为要跟踪用户的视线，需要通过机械臂移动，因此设备非常笨重，只能挂在天花板上减轻重量使用，被戏称为“达摩克利斯之剑”。</p>
<p><img src="//misc.aotu.io/ONE-SUNDAY/aframe_TheSwordofDamocles.jpg" alt="The Sword of Damocles"></p>
<p><strong>Sega VR（世嘉VR）</strong><br>1991年世嘉宣布了Sega VR，定价为200美元，从1991年到1994年，世嘉就在起VR设备上不断宣传，并且在1993年的夏季CES展会上提供VR的试玩，就在大家万分期待之时，1994年世嘉表示停止该项目，给出的理由是虚拟现实效果过于逼真，同时佩戴耳机的用户有可能移动和伤害到自己，当然明白人都知道这是个借口，花了如此大力气的投入和探索最终却放弃了，原因或许是因为SEGA VR的游戏和软件太少了，在夏季CES展会上也只是公布了屈指可数的4款游戏：《Nuclear Rush》、《Iron Hammer》、《Matrix Runner》、《Outlaw Racing》。</p>
<p><img src="//misc.aotu.io/ONE-SUNDAY/aframe_SegaVR.jpg" alt="Sega VR"></p>
<p><strong>Virtual Boy</strong><br>1995年，任天堂发布了Virtual Boy，Virtual Boy采用二极管和视差技术创造出游戏的3D效果，是任天堂在N64上市之前用来取代Game Boy的32位便携游戏机，由设计Game Boy的横井军平主导，最终发售22个游戏，全球销量77万台，造成其失败的原因很大程度是因为Virtual Boy只能提供红黑两色的游戏画面，760克的重量需要支架支撑，玩家只能卷缩身体坐着玩，并且玩家在过程中会有强烈的眩晕感。</p>
<p><img src="//misc.aotu.io/ONE-SUNDAY/aframe_VirtualBoy.jpg" alt="Virtual Boy"></p>
<p><strong>Oculus Rift</strong><br>VR这个词在近两年火热起来也正是因为Oculus Rift，92年生的Palmer Freeman Luckey对任何事物皆有好奇其心的人，喜欢收藏各类VR设备，并且是Meat to be seen技术论坛的版主，Palmer对市面上VR的低对比度、高延迟和低视野感到失望，他希望制作一个能跟踪玩家头部转动的360度全景，并以极低的延迟显示画面的VR头戴设备。</p>
<p>同样作为Meat to be seen技术论坛成员之一的FPS之父卡约翰·卡马克，看到此项目非常感兴趣，要求给予一台原型机，并对《DOOM3》进行VR适配，在2012年E3展出此设备，获得了E3最佳外设奖，一时间获得各大媒体的关注，随后在Kickstarter发起众筹，短时间内就获得超过9500人支持，总资金达243万美金。</p>
<p>在2014年7月，Oculus Rift被Facebook以20亿美元收购后，各个厂家似乎又看到另一片蓝海，大量的涌入这个市场，HTC的HTC Vive，索尼的PlayStation VR，各类的手机VR等等。</p>
<p><img src="//misc.aotu.io/ONE-SUNDAY/aframe_oculus.jpg" alt="Oculus Rift"></p>
<h3 id="关于A-Frame"><a href="#关于A-Frame" class="headerlink" title="关于A-Frame"></a>关于A-Frame</h3><p><img src="//misc.aotu.io/ONE-SUNDAY/aframe.jpg" alt="A-Frame"></p>
<p>历史讲完回到正题，Mozilla认为目前的WebVR发展太困难了，为了使其更加快速、方便、愉快的打造3D/VR场景，2015年12月16日Mozilla旗下的MozVR团队，在经过长时间的试验，并且从一些3D/VR工具（例如：JanusVR、GLAM、SceneVR）中汲取经验，公布了JavaScript开源框架A-Frame。</p>
<p>A-Frame使用Web开发者熟悉的HTML标签来创建WebVR场景，使得非WebGL开发者无需学习强大而又复杂的WebGL API来创建VR场景，降低了初学者学习的门槛，并且A-Frame一个最大的优势在于跨平台性，目前版本已迭代到v0.3.0，支持VR头戴设备Oculus Rift和HTC Vive以及非VR设备的PC端和Mobile端（可开启VR模式，利用Google Cardboard、Gear VR等设备观看）。</p>
<p>简单概括A-Frame特点如下：</p>
<ul>
<li>结合three.js和WebGL的力量</li>
<li>通过自定义标签创建WebVR，标签具有可读性</li>
<li>具有跨平台性，支持PC端、Mobile端以及头戴设备Oculus Rift和HTC Vive</li>
<li>减少开发成本，降低初学者与牛人之间学习曲线</li>
<li>底层模块化和可扩展性</li>
</ul>
<h3 id="A-Frame功能"><a href="#A-Frame功能" class="headerlink" title="A-Frame功能"></a>A-Frame功能</h3><p>A-Frame为开发者提供了许多的功能模块，例如在官网Docs里Primitives提供了基础的几何形状（盒子、球面、圆柱、平面等）、可导入3D建模工具制作或从网上下载的Collada模型、定义背景的天空、定义用户从哪个角度观看场景的相机、动画、光影、全景视频等功能，通过标签开发者就可以轻松的创建WebVR场景，更多功能可以到官网查看。</p>
<h3 id="A-Frame实例"><a href="#A-Frame实例" class="headerlink" title="A-Frame实例"></a>A-Frame实例</h3><p>这里以官网的一个例子作为基础讲讲怎么使用A-Frame。</p>
<p><strong>1、创建场景</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"aframe-v0.3.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a-scene</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">a-scene</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>&lt;a-scene&gt;</code>是一个全局的根对象，所有实体都存在于这个场景中，<code>&lt;a-scene&gt;</code>处理了所有three.js和WebVR boilerplate需要做的事：</p>
<ul>
<li>创建画布，渲染器以及渲染循环</li>
<li>默认的相机和光影</li>
<li>创建WebVR Polyfill，VREffect</li>
<li>添加用户界面进入VR，调用WebVR API</li>
</ul>
<p><strong>2、创建天空</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a-scene</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a-assets</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"lake"</span> <span class="attr">src</span>=<span class="string">"lake.jpg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a-assets</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a-sky</span> <span class="attr">src</span>=<span class="string">"#lake"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-sky</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a-scene</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;a-sky&gt;</code>允许为场景设置纯色背景或是一张360度全景图片，<code>&lt;a-assets&gt;</code>则是预加载WebVR页面所需的资源。</p>
<p><img src="//misc.aotu.io/ONE-SUNDAY/aframe_sky.jpg" alt="sky"></p>
<p><a href="http://jdc.jd.com/demo/aframe_sky/" target="_blank" rel="external">点击查看DEMO</a></p>
<p><strong>3、创建相机</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a-scene</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a-entity</span> <span class="attr">position</span>=<span class="string">"0 0 3.8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a-camera</span>&gt;</span><span class="tag">&lt;/<span class="name">a-camera</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a-entity</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a-scene</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>&lt;a-camera&gt;</code>定义了用户从哪个角度观看场景，改变<code>&lt;a-camera&gt;</code>的<code>position</code>需要将其置于<code>&lt;a-entity&gt;</code>中，直接在<code>&lt;a-camera&gt;</code>设置不会生效。</p>
<p><strong>4、创建球面、立方体、圆柱、平面</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a-scene</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 球面 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a-sphere</span> <span class="attr">position</span>=<span class="string">"0 1.25 -1"</span> <span class="attr">radius</span>=<span class="string">"1.25"</span> <span class="attr">color</span>=<span class="string">"#ef2d5e"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-sphere</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 立方体 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a-box</span> <span class="attr">position</span>=<span class="string">"-1 0.5 1"</span> <span class="attr">rotation</span>=<span class="string">"0 45 0"</span> <span class="attr">width</span>=<span class="string">"1"</span> <span class="attr">height</span>=<span class="string">"1"</span> <span class="attr">depath</span>=<span class="string">"1"</span> <span class="attr">color</span>=<span class="string">"#4cc3d9"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-box</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 圆柱 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a-cylinder</span> <span class="attr">position</span>=<span class="string">"1 0.75 1"</span> <span class="attr">radius</span>=<span class="string">"0.5"</span> <span class="attr">height</span>=<span class="string">"1.5"</span> <span class="attr">color</span>=<span class="string">"#ffc65d"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-cylinder</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 平面 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a-plane</span> <span class="attr">rotation</span>=<span class="string">"-90 0 0"</span> <span class="attr">width</span>=<span class="string">"4"</span> <span class="attr">height</span>=<span class="string">"4"</span> <span class="attr">color</span>=<span class="string">"#7bc8a4"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-plane</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a-scene</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li><code>position</code>定位实体x、y、z轴的位置</li>
<li><code>rotation</code>调整实体x、y、z轴的旋转角度</li>
<li><code>color</code>改变实体的颜色</li>
<li><code>depth</code>景深</li>
<li><code>width</code>、<code>height</code>设置实体的宽高</li>
<li><code>radius</code>圆角半径</li>
<li>数值是以“米”为单位</li>
</ul>
<p><img src="//misc.aotu.io/ONE-SUNDAY/aframe_geometry.jpg" alt="geometry"></p>
<p><a href="http://jdc.jd.com/demo/aframe_geometry/" target="_blank" rel="external">点击查看DEMO</a></p>
<p><strong>5、添加动画</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a-scene</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a-sphere</span> <span class="attr">position</span>=<span class="string">"0 1.25 -1"</span> <span class="attr">radius</span>=<span class="string">"1.25"</span> <span class="attr">color</span>=<span class="string">"#ef2d5e"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 缩放 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a-animation</span> <span class="attr">attribute</span>=<span class="string">"scale"</span> <span class="attr">from</span>=<span class="string">"1 1 1"</span> <span class="attr">to</span>=<span class="string">"1.2 1.2 1.2"</span> <span class="attr">repeat</span>=<span class="string">"indefinite"</span> <span class="attr">direction</span>=<span class="string">"alternate"</span> <span class="attr">dur</span>=<span class="string">"2000"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-animation</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a-sphere</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a-box</span> <span class="attr">position</span>=<span class="string">"-1 0.5 1"</span> <span class="attr">rotation</span>=<span class="string">"0 45 0"</span> <span class="attr">width</span>=<span class="string">"1"</span> <span class="attr">height</span>=<span class="string">"1"</span> <span class="attr">depath</span>=<span class="string">"1"</span> <span class="attr">color</span>=<span class="string">"#4cc3d9"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 旋转 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a-animation</span> <span class="attr">attribute</span>=<span class="string">"rotation"</span> <span class="attr">from</span>=<span class="string">"0 45 0"</span> <span class="attr">to</span>=<span class="string">"0 360 0"</span> <span class="attr">repeat</span>=<span class="string">"indefinite"</span> <span class="attr">direction</span>=<span class="string">"alternate"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-animation</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a-box</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a-cylinder</span> <span class="attr">position</span>=<span class="string">"1 0.75 1"</span> <span class="attr">radius</span>=<span class="string">"0.5"</span> <span class="attr">height</span>=<span class="string">"1.5"</span> <span class="attr">color</span>=<span class="string">"#ffc65d"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 改变高度 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a-animation</span> <span class="attr">attribute</span>=<span class="string">"height"</span> <span class="attr">from</span>=<span class="string">"1.5"</span> <span class="attr">to</span>=<span class="string">"0"</span> <span class="attr">repeat</span>=<span class="string">"indefinite"</span> <span class="attr">direction</span>=<span class="string">"alternate"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-animation</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a-cylinder</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a-scene</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>需要为某个实体添加动画则将<code>&lt;a-animation&gt;</code>置于标签之内，这里我给球<code>scale</code>缩放，立方体<code>rotation</code>360度Y轴旋转，圆柱改变<code>height</code>，并且无限次轮流反向播放动画。</p>
<ul>
<li><code>attribute</code>定义要执行的动画属性</li>
<li><code>from</code>动画的起始</li>
<li><code>to</code>动画的结束</li>
<li><code>repeat</code>定义了要循环的次数，可以是一个数字或indefinite表示无限循环</li>
<li><code>dur</code>动画的时长</li>
<li><code>direction</code>动画轮流反向播放</li>
</ul>
<p>A-Frame的动画属性与CSS3 animation非常相似，还有填充模式<code>fill</code>、延时<code>delay</code>、速度曲线<code>easing</code>等等。</p>
<p><a href="http://jdc.jd.com/demo/aframe_animation/" target="_blank" rel="external">点击查看DEMO</a></p>
<p><strong>6、创建光标</strong><br>通过给相机增加一个光标<code>cursor</code>，让我们可以通过点击和注视与实体互动。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a-scene</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a-box</span> <span class="attr">cursor-listener</span> <span class="attr">position</span>=<span class="string">"-1 0.5 1"</span> <span class="attr">rotation</span>=<span class="string">"0 45 0"</span> <span class="attr">width</span>=<span class="string">"1"</span> <span class="attr">height</span>=<span class="string">"1"</span> <span class="attr">depath</span>=<span class="string">"1"</span> <span class="attr">color</span>=<span class="string">"#4cc3d9"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a-animation</span> <span class="attr">attribute</span>=<span class="string">"rotation"</span> <span class="attr">from</span>=<span class="string">"0 45 0"</span> <span class="attr">to</span>=<span class="string">"0 360 0"</span> <span class="attr">repeat</span>=<span class="string">"indefinite"</span> <span class="attr">direction</span>=<span class="string">"alternate"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-animation</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a-box</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a-entity</span> <span class="attr">position</span>=<span class="string">"0 0 3.8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a-camera</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 创建光标 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a-cursor</span> <span class="attr">color</span>=<span class="string">"#000"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-cursor</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a-camera</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a-entity</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a-scene</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 添加光标监听器</span></div><div class="line">AFRAME.registerComponent(<span class="string">"cursor-listener"</span>, &#123;</div><div class="line">    <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> COLORS = [<span class="string">"#6c8cbf"</span>, <span class="string">"#e4f0ff"</span>, <span class="string">"#6c70e1"</span>];</div><div class="line">        <span class="comment">// 点击随机改变立方体颜色</span></div><div class="line">        <span class="keyword">this</span>.el.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> randomIndex = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * COLORS.length);</div><div class="line">            <span class="keyword">this</span>.setAttribute(<span class="string">"color"</span>, COLORS[randomIndex]);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><a href="http://jdc.jd.com/demo/aframe_cursor/" target="_blank" rel="external">点击查看DEMO</a></p>
<h3 id="A-Frame社区"><a href="#A-Frame社区" class="headerlink" title="A-Frame社区"></a>A-Frame社区</h3><p>一个框架是否能持续发展，很大程度看社区的活跃状态，A-Frame目前在Github上已经超过3500个star，Mozilla鼓励开发者们加入1400人的A-Frame Slack聊天组，并在社区中分享自己的作品，在A-Frame Twitter里，每周都会精选出优秀的A-Frame作品供开发者们参考学习。</p>
<p><img src="//misc.aotu.io/ONE-SUNDAY/aframe_twitter.jpg" alt="A-Frame twitter"></p>
<p>在A-Frame的Github Roadmap后续的版本更新线路图中表明，后续除了常规的升级外还将推出教程（制作更多的学习资源、文章、指南、录屏）帮助初学者更好学习。</p>
<p><img src="//misc.aotu.io/ONE-SUNDAY/aframe_update.jpg" alt="A-Frame update"></p>
<h3 id="A-Frame资源"><a href="#A-Frame资源" class="headerlink" title="A-Frame资源"></a>A-Frame资源</h3><ul>
<li><a href="https://aframe.io/aframe-inspector/example/" target="_blank" rel="external">可视化在线编辑器</a></li>
</ul>
<p><img src="//misc.aotu.io/ONE-SUNDAY/aframe_edit.jpg" alt="aframe-inspector"></p>
<p><strong>360全景图素材</strong></p>
<ul>
<li><a href="https://www.flickr.com/groups/equirectangular/" target="_blank" rel="external">flickr</a></li>
<li><a href="https://500px.com/" target="_blank" rel="external">500px</a></li>
</ul>
<p><strong>3D模型免费素材</strong></p>
<ul>
<li><a href="https://clara.io/view/edb55549-32a8-46bd-8a36-2e03027ffcb5#" target="_blank" rel="external">Clara.io</a></li>
<li><a href="https://3dwarehouse.sketchup.com/" target="_blank" rel="external">3D Warehouse</a></li>
<li><a href="http://archive3d.net/" target="_blank" rel="external">Archive 3D</a></li>
<li><a href="http://www.turbosquid.com/Search/3D-Models/free" target="_blank" rel="external">Turbosquid</a></li>
</ul>
<p><strong>资源集</strong></p>
<ul>
<li><a href="https://github.com/aframevr/awesome-aframe" target="_blank" rel="external">awesome-aframe</a></li>
</ul>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><ul>
<li><a href="http://en.wikipedia.org/wiki/Virtual_reality" target="_blank" rel="external">http://en.wikipedia.org/wiki/Virtual_reality</a></li>
<li><a href="https://en.wikipedia.org/wiki/Sensorama" target="_blank" rel="external">https://en.wikipedia.org/wiki/Sensorama</a></li>
<li><a href="https://en.wikipedia.org/wiki/Sega_VR" target="_blank" rel="external">https://en.wikipedia.org/wiki/Sega_VR</a></li>
<li><a href="https://en.wikipedia.org/wiki/Virtual_Boy" target="_blank" rel="external">https://en.wikipedia.org/wiki/Virtual_Boy</a></li>
<li><a href="https://en.wikipedia.org/wiki/Oculus_Rift" target="_blank" rel="external">https://en.wikipedia.org/wiki/Oculus_Rift</a></li>
<li><a href="http://aframe.io/" target="_blank" rel="external">http://aframe.io/</a></li>
<li><a href="https://github.com/aframevr/aframe" target="_blank" rel="external">https://github.com/aframevr/aframe</a></li>
<li><a href="https://twitter.com/aframevr" target="_blank" rel="external">https://twitter.com/aframevr</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么叫真？你怎样给真下定义，如果你说真就是你能感觉到的东西，你能闻到的气味，你能尝到的味道，那么这个真只是你大脑作出反应的电子信号。 —— 《黑客帝国》&lt;/p&gt;
&lt;h3 id=&quot;关于VR技术&quot;&gt;&lt;a href=&quot;#关于VR技术&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="体验报告" scheme="https://aotu.io/tags/%E4%BD%93%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    
      <category term="WebVR" scheme="https://aotu.io/tags/WebVR/"/>
    
  </entry>
  
  <entry>
    <title>在网页上实现 3D Touch 效果</title>
    <link href="https://aotu.io/notes/2016/09/28/3d-touch/"/>
    <id>https://aotu.io/notes/2016/09/28/3d-touch/</id>
    <published>2016-09-28T08:00:00.000Z</published>
    <updated>2016-10-20T07:06:32.450Z</updated>
    
    <content type="html"><![CDATA[<p>9 月 14 日凌晨，iOS 10 正式版开始向用户推送更新，而 iOS 10 搭载的 Safari 10 亦带来了不少新特性，其中就有 3D Touch 事件的支持（官方文档 <a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html" target="_blank" rel="external">《What’s New in Safari 10》</a>）。</p>
<h2 id="Force-Touch-与-3D-Touch"><a href="#Force-Touch-与-3D-Touch" class="headerlink" title="Force Touch 与 3D Touch"></a>Force Touch 与 3D Touch</h2><p>说到 3D Touch 不能不提与之相似的 Force Touch。Force Touch<br>是苹果公司在 2014 年 9 月公布的一项压力敏感屏幕技术，最早用于 Apple Watch ，可识别轻点、轻按两种操作。随后 Force Touch 于 2015 年 9 月在 iPhone 6s 上得到改进并更名为 3D Touch，提供了更高灵敏度的触控力度识别、及更强的触感反馈，支持轻点、轻按及重按三个维度。</p>
<h2 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h2><p>支持 3D Touch 的设备，目前有 iPhone 6s、iPhone 6s Plus、iPhone 7 以及 iPhone 7 Plus。</p>
<h2 id="感受-3D-Touch"><a href="#感受-3D-Touch" class="headerlink" title="感受 3D Touch"></a>感受 3D Touch</h2><p>3D Touch 最为典型的交互有 Quick Actions 和 Peek and Pop 两种。在 APP 图标上重按呼出一组快捷操作菜单，这即是典型的 Quick Actions:</p>
<p><img src="//misc.aotu.io/hihuimin/quick_actions.jpg" alt="Quick Actions"></p>
<p>而使用 Peek and Pop 则可以快速地对内容进行预览，以及后续的其他操作：</p>
<p><img src="//misc.aotu.io/hihuimin/peek_and_pop.jpg" alt="Peek And Pop"></p>
<p>如上图所示，在系统的邮件 APP 中，以一定的力度按压邮件列表中的某一项，会触发 Peek 弹出一个内容预览窗口（在 Peek 状态下上滑还能触发 Quick Actions 调出一些快捷操作项哦），如果继续加大按压力度，则会触发 Pop 进入邮件内容界面，这整个过程就称之为 Peek and Pop。</p>
<p>除了邮件 APP 以外，信息、照片等多个系统 APP 以及一些第三方 APP （如 微信、Facebook、Twitter 等）也都很好的支持了 Peek and Pop 这种 3D Touch 交互形式。</p>
<h2 id="网页中的-3D-Touch"><a href="#网页中的-3D-Touch" class="headerlink" title="网页中的 3D Touch"></a>网页中的 3D Touch</h2><p>要在网页中实现 3D Touch，需要用到以下两个知识点：</p>
<p>1、Touch.force</p>
<p>在 touch 对象中包含有一个名为 <code>force</code> 的只读属性，它的取值从 0 到 1，表示的是触碰点的按压力度，0 表示没有检测到压力，而 1 则是设备能识别出的最大压力</p>
<p>2、touchforcechange</p>
<p><code>touchforcechange</code> 是 Safari 10 新增的事件，该事件会在按压力度改变时被触发</p>
<p>（注：在 MacOS Safari 上也有与之对应的 <code>webkitmouseforcechanged</code> 事件，该事件会在支持 Force Touch 的 Trackpad 上反应出按压力度值 force 的变化，但本文仅讨论手机设备的情况）</p>
<h2 id="实现-3D-Touch-效果"><a href="#实现-3D-Touch-效果" class="headerlink" title="实现 3D Touch 效果"></a>实现 3D Touch 效果</h2><p>要实现 3D Touch 效果，关键在于实时地获取 Touch.force 的值。而由于网页上的 3D Touch 很大程度上受限于设备及浏览器的支持情况，因此我们划分以下 3 种情况，分别来看看要如何实现</p>
<p>1、支持 3D Touch 且升级到了 iOS 10 的设备</p>
<p>在这种最为理想的情况下，只需要监听 touchforcechange 事件即可获取到 force 的当前值，将 force 值的变化以适当的形式反馈在界面上以实现 3D Touch 效果。</p>
<p>2、支持 3D Touch 但系统版本低于 iOS 10 的设备</p>
<p>这种情况虽然无法监听 touchforcechange 事件，但 Touch 对象的 force 属性仍然可以反应出正确的按压力度，可以巧妙地设置一个定时器，以轮询的方式获取 force 的当前值</p>
<p>3、不支持 3D Touch 的设备</p>
<p>这种情况下 Touch.force 的取值始终为 0，虽然可以用长按的交互形式来代替，但建议还是以优雅降级的方式，索性就不处理了吧</p>
<h2 id="一个-3D-Touch-的例子"><a href="#一个-3D-Touch-的例子" class="headerlink" title="一个 3D Touch 的例子"></a>一个 3D Touch 的例子</h2><p>看到这里你肯定想说 “Shut up and show me the code…” 好的，那我们来看一个例子，在这个事例页面，用支持 3D Touch 的设备按压蓝色按钮可以将树懒兄逗笑哦，嘿嘿嘿~</p>
<p><img src="//misc.aotu.io/hihuimin/demo.png" alt="Demo"></p>
<p>你可扫描以上二维码，或<a href="http://jdc.jd.com/demo/3d-touch/" target="_blank" rel="external">戳我进行预览</a>，<strong>注意请使用 iOS Safari 浏览器进行访问！使用 iOS Safari 浏览器！！使用 iOS Safari 浏览器！！！</strong>重要的事情要说三遍。。因为目前微信 WebView 并不支持 3D Touch。</p>
<p>实现思路其实比较简单，根据刚刚说到的知识，我们分别监听 touchforcechange、touchstart、touchend、touchcancel 事件</p>
<ul>
<li>在 touchstart 事件中，启动一个定时器轮询地去获取 Touch.force 的值；</li>
<li>在 touchforcechange 事件中获取当前 Touch.force 的值，并清除 touchstart 事件中设置的定时器，因为支持 touchforcechange 事件的话就没必要轮询了；</li>
<li>在 touchend 及 touchcancel 事件中把 Touch.force 重置为 0，并清除定时器。</li>
</ul>
<p>而树懒兄大笑的动画则用的是以下这张雪碧图，根据当前 Touch.force 值来设置 background-position 以显示对应的动画帧来实现的</p>
<p><img src="//misc.aotu.io/hihuimin/sloth.png" alt="Sloth Sprite Sheet"></p>
<p>你可以访问这个 <a href="https://github.com/hihuimin/3d-touch" target="_blank" rel="external">Github 项目</a> 来查看源码，核心代码位于 ThreeDTouch.js，该文件封装了一个名为 ThreeDTouch 的类，事例化时传入一个 DOM 对象即可在 callback 中获取到按压力度值的变化。</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 3D Touch 事件处理器，传入要监听的 DOM 对象，在 callback 回调中获取当前 force 值</div><div class="line"> *</div><div class="line"> * @param &#123; HTMLElement &#125; el - 要监听的 DOM 对象</div><div class="line"> * @param &#123; Function &#125; callback - 带有 force 值的回调函数</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ThreeDTouch</span><span class="params">(el, callback)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.el = el</div><div class="line">    <span class="keyword">this</span>.<span class="keyword">callback</span> = <span class="keyword">callback</span></div><div class="line">    <span class="keyword">this</span>._bindEvents()</div><div class="line">&#125;</div><div class="line"></div><div class="line">ThreeDTouch.prototype = &#123;</div><div class="line">    <span class="comment">//绑定相关 touch 事件</span></div><div class="line">    _bindEvents: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> events = [<span class="string">'touchforcechange'</span>, <span class="string">'touchstart'</span>, <span class="string">'touchend'</span>, <span class="string">'touchcancel'</span>]</div><div class="line">        events.forEach(<span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.el.addEventListener(event, <span class="keyword">this</span>, <span class="literal">false</span>)</div><div class="line">        &#125;.bind(<span class="keyword">this</span>))</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//分派 touch 事件</span></div><div class="line">    handleEvent: <span class="function"><span class="keyword">function</span><span class="params">(ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (ev.type) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'touchforcechange'</span>:</div><div class="line">                <span class="keyword">this</span>._touchForceDidChange(ev)</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">case</span> <span class="string">'touchstart'</span>:</div><div class="line">                <span class="keyword">this</span>._touchDidStart(ev)</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">case</span> <span class="string">'touchend'</span>:</div><div class="line">            <span class="keyword">case</span> <span class="string">'touchcancel'</span>:</div><div class="line">                <span class="keyword">this</span>._touchDidEnd(ev)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//force 值改变时</span></div><div class="line">    _touchForceDidChange: <span class="function"><span class="keyword">function</span><span class="params">(ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> force = ev.touches[<span class="number">0</span>].force</div><div class="line">        <span class="keyword">this</span>.<span class="keyword">callback</span>(force)</div><div class="line">        clearTimeout(<span class="keyword">this</span>.timeoutId) <span class="comment">//支持 touchforcechange 的话则取消轮询</span></div><div class="line">    &#125;,</div><div class="line">    _touchDidStart: <span class="function"><span class="keyword">function</span><span class="params">(ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> touch = ev.touches[<span class="number">0</span>]</div><div class="line">        <span class="keyword">this</span>._checkForce(touch)</div><div class="line">    &#125;,</div><div class="line">    _touchDidEnd: <span class="function"><span class="keyword">function</span><span class="params">(ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.<span class="keyword">callback</span>(<span class="number">0</span>)</div><div class="line">        clearTimeout(<span class="keyword">this</span>.timeoutId)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//轮询地获取 force 值</span></div><div class="line">    _checkForce: <span class="function"><span class="keyword">function</span><span class="params">(touch)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.<span class="keyword">callback</span>(touch.force)</div><div class="line">        <span class="keyword">this</span>.timeoutId = setTimeout(<span class="keyword">this</span>._checkForce.bind(<span class="keyword">this</span>, touch), <span class="number">16</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html" target="_blank" rel="external">https://developer.apple.com/…/WhatsNewInSafari/Articles/Safari_10_0.html</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Force_Touch_events" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/API/Force_Touch_events</a></li>
<li><a href="https://github.com/stuyam/pressure" target="_blank" rel="external">https://github.com/stuyam/pressure</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;9 月 14 日凌晨，iOS 10 正式版开始向用户推送更新，而 iOS 10 搭载的 Safari 10 亦带来了不少新特性，其中就有 3D Touch 事件的支持（官方文档 &lt;a href=&quot;https://developer.apple.com/library/pre
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="3dtouch" scheme="https://aotu.io/tags/3dtouch/"/>
    
      <category term="touchforcechange" scheme="https://aotu.io/tags/touchforcechange/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 缓存</title>
    <link href="https://aotu.io/notes/2016/09/22/http-caching/"/>
    <id>https://aotu.io/notes/2016/09/22/http-caching/</id>
    <published>2016-09-22T08:38:12.000Z</published>
    <updated>2016-10-20T07:06:32.449Z</updated>
    
    <content type="html"><![CDATA[<p>有时，HTTP 中的缓存可能会非常让人头疼。<br>按照文档正确地使用 HTTP 并不是那么困难，但事实上，不同的浏览器和 HTTP 版本常常困扰着我们。</p>
<a id="more"></a>
<p>通过 <a href="http://stackoverflow.com/search?q=http+cache" target="_blank" rel="external">Stack Overflow</a> 的搜索结果，你可以很轻易地发现很多人有相同的困扰。我们自己或是不必或是没有时间去钻研所有的边缘的情况。 </p>
<p>所以这里有一些博主总结的实用并速记的规则，并且在未来博主也会持续地跟进和更新。 </p>
<h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><p>永远不会修改的内容：JS 和 CSS 文件，图片，和任何类型的二进制文件都属于这个类目。</p>
<p>永远，我确实说的是永远。为静态资源指定版本号是很通用的做法。它们无论什么时候改动了，它们的 URL 就改变了。</p>
<p>这里是一些针对静态资源的简单的规则： </p>
<ul>
<li>在文件或者路径中嵌入指纹。避免为指纹使用查询字符串。另外，确保生成的URL长度超过8个不同的字符。 </li>
<li>使用这些 HTTP 头： <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Cache-<span class="string">Control:</span> <span class="keyword">public</span>, max-age=<span class="number">31536000</span></div><div class="line"><span class="string">Expires:</span> (一年后的今天)</div><div class="line"><span class="string">ETag:</span> (基于内容生成)</div><div class="line">Last-<span class="string">Modified:</span> (过去某个时间)</div><div class="line"><span class="string">Vary:</span> Accept-Encoding</div></pre></td></tr></table></figure>
</li>
</ul>
<p>针对静态资源的设置就是那么简单。 </p>
<h2 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h2><p>针对应用程序私密性和新鲜度方面需求的不同，我们应该使用不同的缓存控制设置。 </p>
<p>对于非私密性和经常性变动的资源（想像一下股票信息），我们应该使用下面这些：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Cache-<span class="string">Control:</span> <span class="keyword">public</span>, max-age=<span class="number">0</span></div><div class="line"><span class="string">Expires:</span> (当前时间)</div><div class="line"><span class="string">ETag:</span> (基于内容生成)</div><div class="line">Last-<span class="string">Modified:</span> (过去某个时间)</div><div class="line"><span class="string">Vary:</span> Accept-Encoding</div></pre></td></tr></table></figure></p>
<p>这些设置的效果是：这些资源可以被公开地（通过浏览器和代理服务器）缓存起来。每一次在浏览器使用这些资源之前，浏览器或者代理服务器会检查这些资源是否有更新的版本，如果有，就把它们下载下来。 </p>
<p>这样的设置需要注意，浏览器在重新检查资源时效性方面有一定的灵活性。典型的是，当用户点击了「返回／前进」按钮时，浏览器不会重新检查这些资源文件，而是直接使用缓存的版本。你如果需要更严格的控制，需要告知浏览器即使当用户点击了「返回／前进」按钮，也需要重新检查这些资源文件，那么可以使用：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Cache</span>-Control: <span class="keyword">public</span>, <span class="keyword">no</span>-<span class="keyword">cache</span>, <span class="keyword">no</span>-<span class="keyword">store</span></div></pre></td></tr></table></figure></p>
<p>不是所有的动态资源都会马上变成过时的资源。如果它们可以保持至少5分钟的时效，可以使用：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Cache</span><span class="params">-Control</span>: <span class="keyword">public</span>, <span class="keyword">max</span><span class="params">-age</span>=<span class="number">300</span></div></pre></td></tr></table></figure></p>
<p>经过这样的设置，浏览器只会在5分钟之后才重新检查。在这之前，缓存的内容会被直接使用。如果在5分钟后，这些过时的内容需要严格控制，你可以添加 <code>must-revalidate</code> 字段：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Cache</span><span class="params">-Control</span>: <span class="keyword">public</span>, <span class="keyword">max</span><span class="params">-age</span>=<span class="number">300</span>, must<span class="params">-revalidate</span></div></pre></td></tr></table></figure></p>
<p>对于私密或者针对用户的内容，需要把 <code>public</code> 替换为 <code>private</code> 以避免内容被代理缓存。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cache-<span class="string">Control:</span> <span class="keyword">private</span>, …</div></pre></td></tr></table></figure></p>
<h2 id="Cache-Control-和-Expires"><a href="#Cache-Control-和-Expires" class="headerlink" title="Cache-Control 和 Expires"></a>Cache-Control 和 Expires</h2><p>当同时使用 <code>Cache-Control</code> 和 <code>Expires</code> 时，<code>Cache-Control</code> 获得优先权。 </p>
<p>同时使用 <code>Cache-Control</code> 和 <code>Expires</code> 意味着得到更广泛的支持（被不同的浏览器和版本）。当然，它们两个应该被配置成相同的时效值，以避免引起困惑。 </p>
<blockquote>
<p>参考 <a href="http://squid-web-proxy-cache.1019090.n4.nabble.com/Expires-vs-Cache-Control-max-age-td1033350.html" target="_blank" rel="external">Expires: vs. Cache-Control: max-age</a></p>
</blockquote>
<h2 id="ETag-和-Last-Modified"><a href="#ETag-和-Last-Modified" class="headerlink" title="ETag 和 Last-Modified"></a>ETag 和 Last-Modified</h2><p>这两个头在浏览器对资源做重新检查验证的时候会使用到。大致来说，浏览器只是盲目地存储这两个来自于服务器的头的值，然后在需要检查验证的时候，浏览器根据请求条件，把这两个指发送给服务器（分别通过 <code>If-None-Match</code> 和 <code>If-Modified-Since</code>）。 </p>
<p>注意只有在资源过期的情况下，检查验证才会发生。 </p>
<p>在有条件的请求下，<code>If-None-Match</code> 和 <code>If-Modified-Since</code> 头的出现取决于服务器。然而，由于是服务器生成的 <code>ETag</code> 和（或） <code>Last-Modified</code>，所以实际上，这没有什么大问题。大多数的浏览器在可能的情况下都会把着两者都发送给服务器。 </p>
<blockquote>
<p>参考 <a href="http://stackoverflow.com/questions/824152/what-takes-precedence-the-etag-or-last-modified-http-header" target="_blank" rel="external">What takes precedence: the ETag or Last-Modified HTTP header?</a></p>
</blockquote>
<p>一个通常的建议是：避免使用 <code>ETag</code>。这不是一个总是有用的建议。<code>ETag</code> 在判断内容是否真的改动方面确实提供了更为精确的控制。针对生成的 <code>ETag</code>，默认的Apache方法需要把文件的索引节（inode），大小（size）和最后修改时间作为输入求值得到。这会导致在负载均衡的环境中，生成的 <code>ETag</code> 值变得毫无用处，因为每个服务器都会针对相同的文件生成一个不同的 <code>Etag</code> 值。这个可能就是唯一的问题导致很多人完全禁用 <code>ETag</code>，其实只要精确地针对一个匹配的文件生成一个独一无二的 <code>ETag</code> 值，就没有必要禁用 <code>ETag</code> 了。 </p>
<blockquote>
<p>参考 <a href="https://www.techpunch.co.uk/development/should-your-site-be-using-etags-or-not" target="_blank" rel="external">Should your site be using etags or not?</a></p>
</blockquote>
<h2 id="手动按下-Ctrl-R"><a href="#手动按下-Ctrl-R" class="headerlink" title="手动按下 Ctrl-R"></a>手动按下 Ctrl-R</h2><p>当按下 <code>Ctrl-R</code> 时，浏览器会携带下面的请求，以检查是否需要更新缓存内容：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Cache</span>-Control: <span class="keyword">max</span>-age=<span class="number">0</span></div><div class="line"><span class="keyword">If</span>-<span class="keyword">None</span>-<span class="keyword">Match</span>: …</div><div class="line"><span class="keyword">If</span>-Modifed-Since: …</div></pre></td></tr></table></figure></p>
<p>注意这并不只是和原服务器建立连接，其同样适用于代理服务器。本质上，它只是重新检查验证内容。如果服务器回应了一个304，浏览器将会使用缓存的内容。 </p>
<h2 id="Vary-Accept-Encoding"><a href="#Vary-Accept-Encoding" class="headerlink" title="Vary: Accept-Encoding"></a>Vary: Accept-Encoding</h2><p>这个头对于一些人来说可能比较陌生。 </p>
<p>当一个资源启用了 gzip 压缩，并且被代理服务器缓存，客户端如果不支持 gzip 压缩，那么在这样的情况下将会得到不正确的数据（也就是，压缩过的数据）。这将会使代理服务器缓存两个版本的资源：一个是压缩过的，一个是没压缩过的。正确版本的资源将在请求头发送之后进行传输。 </p>
<p>还有一个现实的原因：IE 浏览器不缓存任何带有 <code>Vary</code> 头但值不为 <code>Accept-Encoding</code> 和 <code>User-Agent</code> 的资源。所以通过这种方式添加这个头，才能确保这些资源在 IE 下被缓存。 </p>
<blockquote>
<p>本文译自 Bryan Tsai 的 《<a href="https://bryantsai.com/http-caching/" target="_blank" rel="external">Http Caching</a>》。</p>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://devcenter.heroku.com/articles/increasing-application-performance-with-http-cache-headers" target="_blank" rel="external">Increasing Application Performance with HTTP Cache Headers</a> </li>
<li><a href="http://tomayko.com/writings/things-caches-do" target="_blank" rel="external">Things Caches Do</a></li>
<li><a href="https://developers.google.com/speed/articles/caching" target="_blank" rel="external">Google Developers: HTTP Caching</a></li>
<li><a href="https://developers.google.com/speed/docs/best-practices/caching?csw=1" target="_blank" rel="external">Google Developers: Optimize Caching</a></li>
<li><a href="http://www.mnot.net/cache_docs/" target="_blank" rel="external">Caching Tutorial for Web Authors and Webmasters</a></li>
<li><a href="http://palizine.plynt.com/issues/2008Jul/cache-control-attributes/" target="_blank" rel="external">Cache Control Directives Demystified</a></li>
<li><a href="http://webmasters.stackexchange.com/questions/1459/what-are-the-hard-and-fast-rules-for-cache-control?lq=1" target="_blank" rel="external">What are the hard and fast rules for Cache Control?</a></li>
<li><a href="http://stackoverflow.com/questions/1046966/whats-the-difference-between-cache-control-max-age-0-and-no-cache" target="_blank" rel="external">What’s the difference between Cache-Control: max-age=0 and no-cache?</a></li>
<li><a href="http://stackoverflow.com/questions/2932890/http-cache-control-max-age-must-revalidate" target="_blank" rel="external">HTTP Cache Control max-age, must-revalidate</a></li>
<li><a href="http://stackoverflow.com/questions/18148884/difference-between-no-cache-and-must-revalidate?rq=1" target="_blank" rel="external">Difference between no-cache and must-revalidate</a></li>
<li><a href="http://blogs.msdn.com/b/ie/archive/2010/07/14/caching-improvements-in-internet-explorer-9.aspx" target="_blank" rel="external">Caching Improvements in Internet Explorer 9</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时，HTTP 中的缓存可能会非常让人头疼。&lt;br&gt;按照文档正确地使用 HTTP 并不是那么困难，但事实上，不同的浏览器和 HTTP 版本常常困扰着我们。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="HTTP Cache 缓存 优化" scheme="https://aotu.io/tags/HTTP-Cache-%E7%BC%93%E5%AD%98-%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>通过 Babel 使用 ES6 的 import</title>
    <link href="https://aotu.io/notes/2016/09/22/es6-import-with-babel/"/>
    <id>https://aotu.io/notes/2016/09/22/es6-import-with-babel/</id>
    <published>2016-09-22T07:28:59.000Z</published>
    <updated>2016-10-20T07:06:32.449Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://www.pauleveritt.org/articles/pylyglot/modules/" target="_blank" rel="external">《Modules with CommonJS》</a>一文中，我们通过类似于 Python 的 import 方式，把我们的代码组织成模块。那篇文章展示了 NodeJS 的原生模块系统 – CommonJS。同时，文章还阐述了在那些不支持模块和模块加载器的浏览器中，如何使用 Webpack 去解决这种兼容性问题。 </p>
<a id="more"></a>
<p>在本文中，我们将会看到一个不同的 import 系统，这个系统基于最新的 JavaScript 标准。我们将使用 ES6 的 import，然后通过<a href="http://babeljs.io" target="_blank" rel="external">Babel转换器</a>将我们的代码转换成在 Node 和浏览器环境都可以运行的兼容性代码。 </p>
<blockquote>
<p>为什么说 <code>ES6</code> 而不是 <code>ES2015</code> ？诚然，<code>ES6</code> 作为一个标签正逐渐被遗忘，因为现在相关委员会已经通过基于时间的命名方案，而不是通过版本数字的方式去管理那些规范。但事实证明，模块和加载器是一个多层次的复杂的业务，包含着后期会推出的不同方面的东西。所以，我们将会使用 <code>ES6模块</code> 以避免一些细节。  </p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>安装和配置 Babel</li>
<li>将 CommonJS 中的模块和 import 切换为 ES6</li>
<li>把 Babel 插入到前端工具链（Mocha，Webpack，ESLint）中 </li>
</ul>
<h2 id="起点"><a href="#起点" class="headerlink" title="起点"></a>起点</h2><p>我们需要在一些前期的文章<sup><a href="http://www.pauleveritt.org/articles/pylyglot/" target="_blank" rel="external">注1</a></sup>获得一些代码片段作为起点，生成本文的代码： </p>
<ul>
<li>部分 webpack ，部分 ESLint，部分 Mocha</li>
<li>确保 ESLint 在 PyCharm 中的连接</li>
<li>npm start 和 npm test，还有 Mocha test 运行器</li>
</ul>
<p>我们的 index.html 文件非常简单，这来自于 Webpack 相关的文章：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ES6 Imports<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Incrementer<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Webpack 的配置也是一样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: <span class="string">'./app.js'</span>,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">path</span>: __dirname,</div><div class="line">        <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">devtool</span>: <span class="string">'source-map'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>经过这些步骤，Webpack 将会把下面的 <code>app1.js</code> 和 <code>lib1.js</code> 打包，通过 <code>webpack-dev-server</code> 提供服务：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> incrementer = <span class="built_in">require</span>(<span class="string">'./lib1'</span>);</div><div class="line"><span class="keyword">var</span> newVal = incrementer(<span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'newVal'</span>, newVal);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">incrementer</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> i+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = incrementer;</div></pre></td></tr></table></figure>
<p>最后，我们从之前的文章中获取一份 Mocha 测试文件： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> describe = <span class="built_in">require</span>(<span class="string">'mocha'</span>).describe,</div><div class="line">    it = <span class="built_in">require</span>(<span class="string">'mocha'</span>).it,</div><div class="line">    expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect,</div><div class="line">    incrementer = <span class="built_in">require</span>(<span class="string">'./lib1'</span>);</div><div class="line"></div><div class="line">describe(<span class="string">'Hello World'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    it(<span class="string">'should increment a value'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> result = incrementer(<span class="number">8</span>);</div><div class="line">        expect(result).eql(<span class="number">9</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>让我们安装 Babel – 一个现代的 JavaScript 转换器，通过一个 <code>loader</code> 在 Webpack 打包的时候进行编译转换：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-preset-es2015 babel-loader</div></pre></td></tr></table></figure></p>
<p>这一步将会在我们的 <code>package.json</code> 文件的 <code>devDependencies</code> 中添加依赖：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"pylyglot"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"Series of articles for Polyglot Python with PyCharm"</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"start"</span>: <span class="string">"webpack-dev-server"</span>,</div><div class="line">    <span class="string">"test"</span>: <span class="string">"mocha --compilers js:babel-core/register test*.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"repository"</span>: &#123;</div><div class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</div><div class="line">    <span class="string">"url"</span>: <span class="string">"git+ssh://git@github.com/pauleveritt/pauleveritt.github.io.git"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"Paul Everitt"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"bugs"</span>: &#123;</div><div class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/pauleveritt/pauleveritt.github.io/issues"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"homepage"</span>: <span class="string">"https://github.com/pauleveritt/pauleveritt.github.io#readme"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"babel-loader"</span>: <span class="string">"^6.2.1"</span>,</div><div class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.3.13"</span>,</div><div class="line">    <span class="string">"chai"</span>: <span class="string">"^3.4.1"</span>,</div><div class="line">    <span class="string">"eslint"</span>: <span class="string">"^1.10.3"</span>,</div><div class="line">    <span class="string">"mocha"</span>: <span class="string">"^2.3.4"</span>,</div><div class="line">    <span class="string">"webpack"</span>: <span class="string">"^1.12.12"</span>,</div><div class="line">    <span class="string">"webpack-dev-server"</span>: <span class="string">"^1.14.1"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="ES6-模块"><a href="#ES6-模块" class="headerlink" title="ES6 模块"></a>ES6 模块</h2><p>让我们把基于 CommonJS 的模块和导入，转换为基于 ES6 的模块。首先，我们创建一个 <code>app2.js</code> 文件，其使用了不一样的 import 语法： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> incrementer <span class="keyword">from</span> <span class="string">'./lib2'</span>;</div><div class="line"><span class="keyword">var</span> newVal = incrementer(<span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'newVal'</span>, newVal);</div></pre></td></tr></table></figure>
<p>当我们这样做的时候，PyCharm 马上就会崩溃。它目前只支持 <code>ECMAScript5.1</code> 标准作为 JavaScript 的语法。我们现在给了它无效的语法，因此我们需要在 <code>Preferences -&gt; Languages &amp; Frameworks -&gt; JavaScript -&gt; JavaScript language version</code> 中，更改其为 <code>ECMAScript 6</code>。  </p>
<p>这时候，ESLint 也会失效 – 它必须要认识这些新的语法。幸运的是，ESLint 和 Babel 一样，都是非常流行和快速更新换代的开源项目。它们很容易就能和 ES2015、ES2016 和 ES2017 协同工作。让我们更新我们的 <code>.eslintrc</code> 文件： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"rules"</span>: &#123;</div><div class="line">    <span class="string">"strict"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"quotes"</span>: [</div><div class="line">      <span class="number">1</span>,</div><div class="line">      <span class="string">"single"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"ecmaFeatures"</span>: &#123;</div><div class="line">    <span class="string">"modules"</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"env"</span>: &#123;</div><div class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"jquery"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"es6"</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>让我们现在新建一个 <code>lib2.js</code> 文件，其将使用 ES6 的 export 语法导出我们的函数： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">incrementer</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> i+<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种条件下，此模块除了该函数，没有任何可以导入的东西。因为它是一个不一样的，不兼容的语法；我们可以避免繁琐的 <code>module.exports</code>，而直接在声明中使用 <code>export default</code>。</p>
<p>在导出语法中使用 <code>default</code>，意味着我们的意思是把这个函数是这个模块唯一导出的东西。事实上，你还可以像这样导出：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>这就是一个匿名函数的导出方式。通过默认的 export，这个函数的名字来源于导入这个函数的模块，而不是导出这个函数的模块。 </p>
<p>我们现在得到了通过 ES6 进行导入和导出的模块。为了查看它在 Node 中是否能正常工作，我们可以在我们的测试中使用 ES6 的 import 来检验： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; describe, before, it &#125; <span class="keyword">from</span> <span class="string">'mocha'</span>;</div><div class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</div><div class="line"><span class="keyword">import</span> incrementer <span class="keyword">from</span> <span class="string">'./lib2'</span>;</div><div class="line"></div><div class="line">describe(<span class="string">'Hello World'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    it(<span class="string">'should increment a value'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> result = incrementer(<span class="number">8</span>);</div><div class="line">        expect(result).eql(<span class="number">9</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>让我们跑一个：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run <span class="built_in">test</span>2.js</div></pre></td></tr></table></figure></p>
<p>汗，报错了：<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">SyntaxError</span>: <span class="type">Unexpected</span> token <span class="keyword">import</span></div></pre></td></tr></table></figure></p>
<p>这好像是 Mocha – 一个 Node 应用，不能解析我们的 JavaScript。好吧，没开玩笑……它现在使用ES6编写的。我们需要一些东西转把「未来」的 JavaScript（ES6 模块）转换成现在的 JavaScript（Node）。 </p>
<h2 id="通过-Babel-编译"><a href="#通过-Babel-编译" class="headerlink" title="通过 Babel 编译"></a>通过 Babel 编译</h2><p>这种转换称为「编译(transpiling)」<sup><a href="http://blog.csdn.net/napolunyishi/article/details/20473799" target="_blank" rel="external">注2</a></sup>，而 Babel 是使用人数最多的编译工具。我们在 <a href="http://www.pauleveritt.org/articles/pylyglot/pythonic_js/" target="_blank" rel="external">Pythonic JavaScript with ES2015</a> 中谈论了更多关于编译方面的东西。 </p>
<p>我们需要告诉 Mocha 以运行我们的 JavaScript – 包括应用代码和测试代码。这些代码包含了需要 Babel 新代码风格。首先，Babel 有一个配置文件，显然现在人手一份这个东西： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是用来配置 Babel本身的。为了告知我们的 PyCharm Mocha 运行配置以使用 Babel，我们需要编辑运行配置，在额外的 Mocha 选项（Extra Mocha options）中添加这个： </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--compilers js:babel-core/register</div></pre></td></tr></table></figure>
<p>我们的 Mocha 测试现在就能正常运行了。这也意味着我们的 <code>lib2.js</code> 也能跑起来了。为了能在 <code>npm run</code> 脚本下处理这些变更，我们需要修改 <code>package.json</code>： </p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"test"</span>: <span class="string">"mocha --compilers js:babel-core/register test*.js"</span></div></pre></td></tr></table></figure>
<p>这一步适用于 Node。那浏览器下呢？我们需要像 Mocha 那样，告知 Webpack 在打包的时候使用 Babel 编译代码吗？是的，并且这个非常简单： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: <span class="string">'./app2.js'</span>,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">path</span>: __dirname,</div><div class="line">        <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">'babel-loader'</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">devtool</span>: <span class="string">'source-map'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们为所有的 <code>.js</code> 后缀的文件都添加了一个 <code>module</code> 项，并且定义了一个 <code>loader</code>。这个 <code>loader</code> 通过 <code>babel-loader</code> 软件运行这些文件，而这个软件是一个 Babel 在 Webpack 下的插件。<code>babel-loader</code> 使用的是在 <code>.babelrc</code> 文件下共享的设置，这可以避免 Babel 在 Mocha 和 Webpack 下的独立设置。 </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们现在只是使用到了 ES6 中很小一部分的特性：模块和导入。为了使用这部分特性，我们需要引入一个新的工具– Babel 到前端工具链中，并处理由此带来的连锁效应： </p>
<ul>
<li>PyCharm -&gt; ECMAScript 6 </li>
<li>ESLint</li>
<li>Mocha</li>
<li>Webpack </li>
</ul>
<p>在你编程的时候，你的 CPU 诚然会一直处于繁忙的状态，因为它要一直编译和打包。有解决这个问题的办法，但是目前来说，相信我……这很值得，因为在下一遍文章中就会明白了~  </p>
<blockquote>
<p>本文译自 Paul Everitt 的 《<a href="http://www.pauleveritt.org/articles/pylyglot/es6_imports/" target="_blank" rel="external">ES6 Imports with Babel</a>》。</p>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.pauleveritt.org/articles/pylyglot/" target="_blank" rel="external">Paul Everitt’s blog</a></li>
<li><a href="http://blog.csdn.net/napolunyishi/article/details/20473799" target="_blank" rel="external">Compiling 和 Transpiling 的区别</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://www.pauleveritt.org/articles/pylyglot/modules/&quot;&gt;《Modules with CommonJS》&lt;/a&gt;一文中，我们通过类似于 Python 的 import 方式，把我们的代码组织成模块。那篇文章展示了 NodeJS 的原生模块系统 – CommonJS。同时，文章还阐述了在那些不支持模块和模块加载器的浏览器中，如何使用 Webpack 去解决这种兼容性问题。 &lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ES6" scheme="https://aotu.io/tags/ES6/"/>
    
      <category term="Babel" scheme="https://aotu.io/tags/Babel/"/>
    
  </entry>
  
  <entry>
    <title>写给新人的call、apply、bind</title>
    <link href="https://aotu.io/notes/2016/09/02/Different-Binding/"/>
    <id>https://aotu.io/notes/2016/09/02/Different-Binding/</id>
    <published>2016-09-02T06:56:23.000Z</published>
    <updated>2016-10-20T07:06:32.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、call"><a href="#1、call" class="headerlink" title="1、call()"></a>1、call()</h2><p>语法：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span>.<span class="title">call</span></span>(thisArg[, arg1[, arg2[, ...]]])</div></pre></td></tr></table></figure>
<p>thisArg：fun函数运行时指定的this值，可能的值为：</p>
<ul>
<li>不传，或者传null，undefined， this指向<strong>window对象</strong></li>
<li>传递另一个函数的函数名fun2，this指向<strong>函数fun2的引用</strong></li>
<li>值为原始值(数字，字符串，布尔值),this会指向该原始值的自动包装对象，如 String、Number、Boolean</li>
<li>传递一个对象，函数中的this指向这个对象</li>
</ul>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">a.call(b);  <span class="comment">// function b()&#123;&#125;</span></div></pre></td></tr></table></figure>
<p>经常会看到这种使用情况：</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 将arguments转成数组</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);  </div><div class="line">&#125;</div><div class="line"><span class="built_in">list</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);  <span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure>
<p>为什么能实现这样的功能将arguments转成数组？首先call了之后，this指向了所传进去的arguments。我们可以假设slice方法的内部实现是这样子的：创建一个新数组，然后for循环遍历this，将this[i]一个个地赋值给新数组，最后返回该新数组。因此也就可以理解能实现这样的功能了。</p>
<h2 id="2、apply"><a href="#2、apply" class="headerlink" title="2、apply()"></a>2、apply()</h2><p>语法：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Chrome 14 以及 Internet Explorer 9 仍然不接受类数组对象。</span></div><div class="line"><span class="comment">// thisArg的可能值和call一样</span></div><div class="line"><span class="function"><span class="keyword">fun</span>.<span class="title">apply</span><span class="params">(thisArg[, argsArray])</span></span></div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> numbers = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>];</div><div class="line"><span class="built_in">var</span> <span class="built_in">max</span> = Math.<span class="built_in">max</span>.<span class="built_in">apply</span>(null, numbers);</div><div class="line">console.<span class="built_in">log</span>(<span class="built_in">max</span>)  // <span class="number">7</span></div></pre></td></tr></table></figure>
<p>平时Math.max只能这样子用：<code>Math.max(5,6,2,3,7)</code>;<br>利用apply的第二个参数是数组的特性，从而能够简便地从数组中找到最大值。</p>
<h2 id="3、bind"><a href="#3、bind" class="headerlink" title="3、bind"></a>3、bind</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>语法：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span>.<span class="title">bind</span></span>(thisArg[, arg1[, arg2[, ...]]]);</div></pre></td></tr></table></figure>
<p>bind()方法会创建一个<strong>新函数</strong>，称为绑定函数。</p>
<p>bind是ES5新增的一个方法，<strong>不会执行对应的函数</strong>（call或apply会自动执行对应的函数），而是<strong>返回对绑定函数的引用</strong>。</p>
<p>当调用这个绑定函数时，thisArg参数作为 this，<strong>第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数</strong>来调用原函数。</p>
<p>简单地说，bind会产生一个新的函数，这个函数可以有预设的参数。</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 将arguments转成数组</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">var</span> leadingThirtysevenList = <span class="built_in">list</span>.bind(<span class="literal">undefined</span>, <span class="number">37</span>); <span class="comment">// 绑定函数</span></div><div class="line"><span class="built_in">var</span> <span class="built_in">list</span> = leadingThirtysevenList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 调用绑定函数</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">list</span>); <span class="comment">// [37, 1, 2, 3]</span></div></pre></td></tr></table></figure>
<h3 id="bind调用简单"><a href="#bind调用简单" class="headerlink" title="bind调用简单"></a>bind调用简单</h3><p>把类数组换成真正的数组，bind能够更简单地使用：</p>
<ul>
<li>apply用法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice;</div><div class="line"><span class="comment">// ...</span></div><div class="line">slice.apply(<span class="built_in">arguments</span>);  <span class="comment">// 类似对象的方法那样调用</span></div></pre></td></tr></table></figure>
<ul>
<li>bind用法</li>
</ul>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> unboundSlice = <span class="keyword">Array</span>.prototype.slice;</div><div class="line"><span class="keyword">var</span> slice = <span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span>.<span class="title">apply</span>.<span class="title">bind</span><span class="params">(unboundSlice)</span>;</span></div><div class="line"><span class="comment">// ...</span></div><div class="line">slice(arguments);  <span class="comment">// 直接调用，简单</span></div></pre></td></tr></table></figure>
<h2 id="4、它们的区别"><a href="#4、它们的区别" class="headerlink" title="4、它们的区别"></a>4、它们的区别</h2><p>相同之处：改变函数体内 this 的指向。<br>不同之处：</p>
<ul>
<li>call、apply的区别：接受参数的方式不一样。</li>
<li>bind：不立即执行。而apply、call 立即执行。</li>
</ul>
<h2 id="5、参考"><a href="#5、参考" class="headerlink" title="5、参考"></a>5、参考</h2><p><a href="http://www.cnblogs.com/coco1s/p/4833199.html" target="_blank" rel="external">http://www.cnblogs.com/coco1s/p/4833199.html</a><br><a href="https://segmentfault.com/a/1190000004568767" target="_blank" rel="external">https://segmentfault.com/a/1190000004568767</a><br><a href="https://segmentfault.com/a/1190000002929289" target="_blank" rel="external">https://segmentfault.com/a/1190000002929289</a><br><a href="http://www.cnblogs.com/coco1s/p/4833199.html" target="_blank" rel="external">http://www.cnblogs.com/coco1s/p/4833199.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、call&quot;&gt;&lt;a href=&quot;#1、call&quot; class=&quot;headerlink&quot; title=&quot;1、call()&quot;&gt;&lt;/a&gt;1、call()&lt;/h2&gt;&lt;p&gt;语法：&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Git" scheme="https://aotu.io/tags/Git/"/>
    
      <category term="Fork" scheme="https://aotu.io/tags/Fork/"/>
    
  </entry>
  
  <entry>
    <title>SeaJS从入门到原理</title>
    <link href="https://aotu.io/notes/2016/08/29/SeaJs-From-Entry-To-The-Principle/"/>
    <id>https://aotu.io/notes/2016/08/29/SeaJs-From-Entry-To-The-Principle/</id>
    <published>2016-08-29T05:55:34.000Z</published>
    <updated>2016-10-20T07:06:32.448Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中抛弃传统的<code>&lt;script&gt;</code>而改用 SeaJS 这样的 JS 模块加载器了，确实模块加载器对于代码的可维护性带来了较大的提升。<br><a id="more"></a></p>
<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>SeaJS 是一个模块加载器，模块加载器需要实现两个基本功能：</p>
<ul>
<li>实现模块定义规范，这是模块系统的基础。</li>
<li>模块系统的启动与运行。</li>
</ul>
<p>下文会围绕模块定义规范以及模块系统的启动与运行两方面进行讲解，最后理清一下模块加载大体流程，以及说明与RequireJS的主要区别。</p>
<h2 id="2、define"><a href="#2、define" class="headerlink" title="2、define"></a>2、define</h2><h3 id="2-1、CMD规范"><a href="#2-1、CMD规范" class="headerlink" title="2.1、CMD规范"></a>2.1、CMD规范</h3><p>CMD 规范的前身是Modules/Wrappings规范。</p>
<p>SeaJS更多地来自 Modules/2.0 的观点，同时借鉴了 RequireJS 的不少东西，比如将Modules/Wrappings 规范里的 module.declare改为 define 等。<br>SeaJS遵循的CMD（Common Module Definition） 模块定义规范就是属于Modules/2.0流派阵营。</p>
<p>在 CMD 规范中，<strong>一个模块就是一个文件</strong>。代码的书写格式如下：</p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">define</span>(<span class="section">factory</span>)</div></pre></td></tr></table></figure>
<ul>
<li>factory 为对象、字符串时，表示模块的接口就是该对象、字符串。</li>
<li>factory 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。factory默认会传入三个参数：require、exports 和 module。</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// factory 为对象</span></div><div class="line"><span class="class"><span class="keyword">define</span></span>(&#123; <span class="string">"foo"</span>: <span class="string">"bar"</span> &#125;);</div><div class="line"></div><div class="line"><span class="comment">// factory 为函数</span></div><div class="line"><span class="class"><span class="keyword">define</span></span>(function(<span class="keyword">require</span>, exports, module) &#123;</div><div class="line">    <span class="comment">// 模块代码</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="2-2、Modules-Transport-规范"><a href="#2-2、Modules-Transport-规范" class="headerlink" title="2.2、Modules/Transport 规范"></a>2.2、Modules/Transport 规范</h3><p>SeaJS 只支持 CMD 模块的话，没法实现 JS 文件的合并了，所以SeaJS 还支持一种 Transport 格式。<br>Transport 格式其实就是加上了名字的 CMD 模块，SeaJS 在遇到这种模块时通过定义的 id 来缓存模块：</p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">define</span>(<span class="section">id</span>?, deps?, factory)</div></pre></td></tr></table></figure>
<p>id：模块标识。<br>deps：一个数组，表示模块依赖。</p>
<p>在用普通压缩工具压缩时，如果项目需要支持 IE，务必写上第一个参数id或通过工具提取 id；而且如果项目对性能有要求，上线后需要合并文件，也确保手工写上 id 参数。</p>
<p>如何理解：SeaJS 只支持 CMD 模块的话，没法实现 JS 文件的合并了？<br>没有id的两个模块JS文件a.js和b.js合并成一个文件index.js如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js</span></div><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports</span>) </span>&#123;</div><div class="line">    exports.add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> a + b;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// b.js</span></div><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</div><div class="line">    <span class="keyword">var</span> c = a.add(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">    alert(c);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>首先，CMD 规范 中一个模块就是一个文件，一个文件里面定义了两个，所以出现异常也不奇怪了。<br>另外，CMD 模块没有显式地指定该模块的 id，同时SeaJS 会用这个 JS 文件的 URL 作为它的 id ，并缓存 id 与 模块之间的关系，因此<strong>只有最后一个定义的 CMD 模块会被识别</strong>，因为前面定义的模块都被它覆盖了。</p>
<p>实际上在版本 1.3.1 之前，有一个特性叫做<strong>firstModuleInPackage</strong>，即当一个文件里有多个 define 时，默认将第一个define里的模块作为主模块进行返回。由于各种原因作者去掉了这个特性。</p>
<h2 id="3、factory参数"><a href="#3、factory参数" class="headerlink" title="3、factory参数"></a>3、factory参数</h2><h3 id="3-1、factory参数的使用如下："><a href="#3-1、factory参数的使用如下：" class="headerlink" title="3.1、factory参数的使用如下："></a>3.1、factory参数的使用如下：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 所有模块都通过 define 来定义</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">  <span class="comment">// 通过 require 引入依赖，获取模块 a 的接口</span></div><div class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 调用模块 a 的方法</span></div><div class="line">  a.doSomething();</div><div class="line"></div><div class="line">  <span class="comment">// 通过 exports 对外提供接口foo 属性</span></div><div class="line">  exports.foo = <span class="string">'bar'</span>;</div><div class="line"></div><div class="line">  <span class="comment">// 对外提供 doSomething 方法</span></div><div class="line">  exports.doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">  <span class="comment">// 错误用法！！!</span></div><div class="line">  exports = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="string">'bar'</span>,</div><div class="line">    <span class="attr">doSomething</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">// 正确写法，通过module.exports提供整个接口</span></div><div class="line">  <span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="string">'bar'</span>,</div><div class="line">    <span class="attr">doSomething</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="3-2、require：Function"><a href="#3-2、require：Function" class="headerlink" title="3.2、require：Function"></a>3.2、require：Function</h3><ul>
<li><p>require是一个函数方法，用来获取其他模块提供的接口，而且是同步往下执行。require的模块不能被返回时，应该返回null。</p>
</li>
<li><p>require.async(id, callback?)：用来在模块内部异步加载模块，并在加载完成后执行指定回调。require的模块不能被返回时，callback应该返回null。callback接受返回的模块作为它的参数。</p>
</li>
<li><p>require.resolve(id)：不会加载模块，只返回解析后的绝对路径。</p>
</li>
</ul>
<p>注意事项：</p>
<ul>
<li>factory第一个参数必须命名为 require 。<br>例外：在保证 id 和 dependencies 的预先提取下，可以调用任何普通 JS 压缩工具来进行压缩，require 参数可以被压缩成任意字符，或者在工具中定义不要压缩 require 参数；建议采用配套的构建工具spm来压缩、合并代码。</li>
<li>不要重命名 require 函数，或在任何作用域中给 require 重新赋值。</li>
<li>require 的参数值必须是字符串直接量。</li>
</ul>
<p>为什么那么死规定？！<br>首先你要知道SeaJS 是如何知道一个模块的具体依赖的。SeaJS 通过 factory.toString() 拿到源码，再通过正则匹配 require 的方式来得到依赖信息。这也是必须遵守 require 书写约定的原因。</p>
<p>有时会希望可以使用 require 来进行条件加载，如下：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (todayIsWeekend) &#123;</div><div class="line">  <span class="built_in">require</span>(<span class="string">"play"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">require</span>(<span class="string">"work"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在浏览器端中，加载器会把这两个模块文件都下载下来。 这种情况下，推荐使用 require.async 来进行条件加载。</p>
<h3 id="3-3、exports：Object"><a href="#3-3、exports：Object" class="headerlink" title="3.3、exports：Object"></a>3.3、exports：Object</h3><p>用来在模块内部对外提供接口。<br>exports 仅仅是 module.exports 的一个引用。在 factory 内部给 exports 重新赋值时，并不会改变 module.exports 的值。因此给 exports 赋值是无效的，不能用来更改模块接口。</p>
<h3 id="3-4、module：Object"><a href="#3-4、module：Object" class="headerlink" title="3.4、module：Object"></a>3.4、module：Object</h3><ul>
<li>module.uri：解析后的绝对路径</li>
<li>module.dependencies：模块依赖</li>
<li>module.exports：暴露模块接口数据，也可以通过 return 直接提供接口，因个人习惯使用。<br>对 module.exports 的赋值需要同步执行，慎重放在回调函数里，因为无法立刻得到模块接口数据。</li>
</ul>
<h2 id="4、模块标识id"><a href="#4、模块标识id" class="headerlink" title="4、模块标识id"></a>4、模块标识id</h2><p>模块标识id尽量遵循路径即 ID原则，减轻记忆模块 ID 的负担。<br>模块标识id会用在 require、 require.async 等加载函数中的第一个参数。</p>
<p>三种类型的标识：</p>
<ul>
<li><p>相对标识：以 . 开头（包括.和..），相对标识<strong>永远相对当前模块的 URI 来解析</strong>。</p>
</li>
<li><p>顶级标识：<strong>不以点（.）或斜线（/）开始</strong>， 会相对模块系统的基础路径<strong>（即 SeaJS配置 的 base 路径）</strong>来解析。</p>
</li>
</ul>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">seajs.config(&#123;</div><div class="line">  <span class="attribute">base</span>: 'http://code<span class="variable">.jquery</span><span class="variable">.com</span>/'</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 在模块代码里：</div><div class="line"><span class="attribute">require.resolve('jquery');</span></div><div class="line">  // 解析为 http://code<span class="variable">.jquery</span><span class="variable">.com</span>/jquery<span class="variable">.js</span></div></pre></td></tr></table></figure>
<ul>
<li>普通路径：除了相对和顶级标识之外的标识都是普通路径，相对当前页面解析。绝对路径和根路径也是普通路径。绝对路径比较容易理解。根路径是以“/”开头的，取当前页面的域名+根路径，如下所示：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设当前页面是 http://example.com/path/to/page/index.html</span></div><div class="line"><span class="built_in">require</span>.resolve(<span class="string">'/js/b'</span>);</div><div class="line">  <span class="comment">// 解析为 http://example.com/js/b.js</span></div></pre></td></tr></table></figure>
<p>如上所示，<code>/js/b</code>可省略后缀.js，但是”.css” 后缀不可省略。<br>SeaJS 在解析模块标识时，除非在路径中有问号（?）或最后一个字符是井号（#），否则都会自动添加 JS 扩展名（.js）。</p>
<h2 id="5、模块系统的启动与运行"><a href="#5、模块系统的启动与运行" class="headerlink" title="5、模块系统的启动与运行"></a>5、模块系统的启动与运行</h2><p>通过define定义许多模块后，得让它们能跑起来，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../gb/sea.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">  seajs.use(<span class="string">'./index.js'</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>直接使用 script 标签同步引入sea.js文件后，就可以使用seajs.use(id, callback?)在页面中加载模块了！</p>
<p>最佳实践：</p>
<ul>
<li>seajs.use 理论上只用于加载启动，不应该出现在 define 中的模块代码里。</li>
<li>为了让 sea.js 内部能快速获取到自身路径，推荐手动加上 id 属性：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../gb/sea.js"</span> <span class="attr">id</span>=<span class="string">"seajsnode"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>讲到seajs.use，当然要提一下Sea.js 的调试接口。</p>
<ul>
<li>seajs.cache：Object，查阅当前模块系统中的所有模块信息。</li>
<li>seajs.resolve：Function，利用模块系统的内部机制对传入的字符串参数进行路径解析。</li>
<li>seajs.require：Function，全局的 require 方法，可用来直接获取模块接口。</li>
<li>seajs.data：Object，查看 seajs 所有配置以及一些内部变量的值。</li>
<li>seajs.log：Function，由 seajs-log 插件提供。</li>
<li>seajs.find：Function，由 seajs-debug 插件提供。</li>
</ul>
<h2 id="6、-模块加载大体流程"><a href="#6、-模块加载大体流程" class="headerlink" title="6、 模块加载大体流程"></a>6、 模块加载大体流程</h2><p>模块加载大体流程：</p>
<p><img src="//misc.aotu.io/Newcandy/2016-08-29-SeaJs-From-Entry-To-The-Principle/seajs_load_and_run.jpg" alt="模块加载"></p>
<p>文字描述：</p>
<ol>
<li>通过 use 方法来加载入口模块，并接收一个回调函数， 当模块加载完成， 会调用回调函数，并传入对应的模块作为参数。</li>
<li>从缓存或创建并加载 来获取到模块后，等待模块（包括模块依赖的模块）加载完成会调用回调函数。</li>
<li>在图片虚线部分中，加载factory及分析出模块的依赖，按依赖关系递归执行 document.createElement(‘script’) 。</li>
</ol>
<h2 id="7、与RequireJS的主要区别"><a href="#7、与RequireJS的主要区别" class="headerlink" title="7、与RequireJS的主要区别"></a>7、与RequireJS的主要区别</h2><h3 id="7-1、遵循的规范不同"><a href="#7-1、遵循的规范不同" class="headerlink" title="7.1、遵循的规范不同"></a>7.1、遵循的规范不同</h3><p>RequireJS 遵循 AMD（异步模块定义）规范，SeaJS 遵循 CMD （通用模块定义）规范。</p>
<h3 id="7-2、factory-的执行时机不同"><a href="#7-2、factory-的执行时机不同" class="headerlink" title="7.2、factory 的执行时机不同"></a>7.2、factory 的执行时机不同</h3><p>SeaJS<strong>按需执行依赖</strong>避免浪费，但是require时才解析的行为对性能有影响。<br>SeaJS是异步加载模块的没错, 但执行模块的顺序也是<strong>严格按照模块在代码中出现(require)的顺序</strong>。</p>
<p>RequireJS更遵从js异步编程方式，<strong>提前执行依赖</strong>，<strong>输出顺序取决于哪个 js 先加载完</strong>（不过 RequireJS 从 2.0 开始，也改成可以延迟执行）。如果一定要让 模块B 在 模块A 之后执行，需要在 define 模块时申明依赖，或者通过 require.config 配置依赖。</p>
<p>如果两个模块之间突然模块A依赖模块B：SeaJS的懒执行可能有问题，而RequireJS不需要修改当前模块。</p>
<p>当模块A依赖模块B，模块B出错了：如果是SeaJS，模块A执行了某操作，可能需要回滚。RequireJS因为尽早执行依赖可以尽早发现错误，不需要回滚。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="function"><span class="keyword">function</span><span class="params">(A, B)</span> </span>&#123;</div><div class="line">    <span class="comment">//运行至此，a.js 和 b.js 已下载完成</span></div><div class="line">    <span class="comment">//A、B 两个模块已经执行完，直接可用</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="7-3、聚焦点有差异"><a href="#7-3、聚焦点有差异" class="headerlink" title="7.3、聚焦点有差异"></a>7.3、聚焦点有差异</h3><p>SeaJS努力成为浏览器端的模块加载器，RequireJS牵三挂四，兼顾Rhino 和 node，因此RequireJS比SeaJS的文件大。</p>
<h3 id="7-4、-理念不一样"><a href="#7-4、-理念不一样" class="headerlink" title="7.4、 理念不一样"></a>7.4、 理念不一样</h3><p>RequireJS 有一系列插件，功能很强大，但破坏了模块加载器的纯粹性。SeaJS 则努力保持简单，并支持 CSS 模块的加载。</p>
<h2 id="8、参考"><a href="#8、参考" class="headerlink" title="8、参考"></a>8、参考</h2><p><a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">https://github.com/seajs/seajs/issues/242</a><br><a href="https://github.com/seajs/seajs/issues/258" target="_blank" rel="external">https://github.com/seajs/seajs/issues/258</a><br><a href="https://github.com/seajs/seajs/issues/263" target="_blank" rel="external">https://github.com/seajs/seajs/issues/263</a><br><a href="https://github.com/seajs/seajs/issues/266" target="_blank" rel="external">https://github.com/seajs/seajs/issues/266</a><br><a href="https://github.com/seajs/seajs/issues/277" target="_blank" rel="external">https://github.com/seajs/seajs/issues/277</a><br><a href="http://www.zhihu.com/question/21157540" target="_blank" rel="external">http://www.zhihu.com/question/21157540</a><br><a href="http://annn.me/how-to-realize-cmd-loader/" target="_blank" rel="external">http://annn.me/how-to-realize-cmd-loader/</a><br><a href="http://chaoskeh.com/blog/why-its-hard-to-combo-seajs-modules.html" target="_blank" rel="external">http://chaoskeh.com/blog/why-its-hard-to-combo-seajs-modules.html</a><br><a href="https://github.com/cmdjs/specification/blob/master/draft/module.md" target="_blank" rel="external">https://github.com/cmdjs/specification/blob/master/draft/module.md</a><br><a href="https://www.douban.com/note/283566440/" target="_blank" rel="external">https://www.douban.com/note/283566440/</a><br><a href="https://imququ.com/post/amd-simplified-commonjs-wrapping.html" target="_blank" rel="external">https://imququ.com/post/amd-simplified-commonjs-wrapping.html</a><br><a href="https://lifesinger.wordpress.com/2011/05/17/the-difference-between-seajs-and-requirejs/" target="_blank" rel="external">https://lifesinger.wordpress.com/2011/05/17/the-difference-between-seajs-and-requirejs/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中抛弃传统的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;而改用 SeaJS 这样的 JS 模块加载器了，确实模块加载器对于代码的可维护性带来了较大的提升。&lt;br&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="seajs" scheme="https://aotu.io/tags/seajs/"/>
    
      <category term="模块加载" scheme="https://aotu.io/tags/%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 WebVR</title>
    <link href="https://aotu.io/notes/2016/08/24/2016-8-24-webvr/"/>
    <id>https://aotu.io/notes/2016/08/24/2016-8-24-webvr/</id>
    <published>2016-08-24T12:00:00.000Z</published>
    <updated>2016-10-20T07:06:32.452Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>“目镜在他眼前涂上了一抹朦胧的淡色，映射着一幅弯曲的广角画面：一条灯火辉煌的大街，伸向无尽的黑暗。但这大街其实并不存在，它只是电脑绘出的一片虚拟的空间。”——《Snow Crash》，Neal Stephenson 1992年</p>
</blockquote>
<h2 id="什么是-VR"><a href="#什么是-VR" class="headerlink" title="什么是 VR"></a>什么是 VR</h2><p>VR（Virtual Reality）是利用电脑模拟产生一个三维空间的虚拟世界，提供用户关于视觉等感官的模拟，让用户感觉仿佛身历其境，可以及时、没有限制地观察三维空间内的事物。用户进行位置移动时，电脑可以立即进行复杂的运算，将精确的三维世界视频传回产生临场感。—— 维基百科</p>
<h3 id="VR-的显示原理"><a href="#VR-的显示原理" class="headerlink" title="VR 的显示原理"></a>VR 的显示原理</h3><p>了解 VR 显示原理前，先了解我们人眼的立体视觉的成像原理：  </p>
<p>人眼的视觉是可以感觉出深度的，也就是<strong>深度知觉（depth perception）</strong>。而有了深度的信息后，才能判断出立体空间的相对位置。</p>
<p>另外，由于两个眼睛的位置不一样（一般人两眼相距 5~7 厘米），所以看到的东西会有<strong>两眼视差（binocular parallax）</strong>，大脑再将这两个图像做融合处理，从而产生立体的感觉（即所谓的 binocular cues）。</p>
<p><img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/vision.png" alt="立体视觉"><br>立体视觉</p>
<h3 id="头戴式显示器（Head-mounted-Display）"><a href="#头戴式显示器（Head-mounted-Display）" class="headerlink" title="头戴式显示器（Head-mounted Display）"></a>头戴式显示器（Head-mounted Display）</h3><p>头戴式显示器（HMD）是 VR 目前最常见的一种体验方式。它的原理是将小型二维显示器所产生的图像经由光学系统放大。具体而言，小型显示器所发射的光线经过凸状透镜使图像因折射产生类似远方效果。利用此效果将近处物体放大至远处观赏，从而达到所谓的全息视觉（Hologram）。另外，显示器被分为左右两个部分，分别显示左右眼看到的图像。大脑再将左右眼所看到的图像（两眼视差）做融合处理，从而产生 3D 效果。同时，HMD  会根据头部运动让视角与之同步。综合上述特性，用户通过 HMD 体验 VR 时就如同在现实中观看一样，这种体验也被称为沉浸式体验。</p>
<p><img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/HMD.jpg" alt="此处输入图片的描述"><br>HMD 原理示意图</p>
<h4 id="HMD-种类"><a href="#HMD-种类" class="headerlink" title="HMD 种类"></a>HMD 种类</h4><p>目前市场上主要有以下 3 种 HMD 设备：</p>
<ul>
<li>滑配式<br> 这是目前最初级、价格最低的 HMD 设备。它与智能手机相连接，将 2D 显示变成 3D VR 显示。滑配式 HMD 设备强烈依赖于主机系统（智能手机），后者是提供 VR 效果的必备部分。<br> 厂商：滑配式 HMD 设备包括谷歌 Carboard 和三星 Gear VR。</li>
<li>分离式<br>分离式 HMD 设备较滑配式 HMD 设备复杂，内置多种电子零部件。两者的主要不同是，分离式 HMD  设备拥有自己的显示屏，也可能配备自己的处理器（提供简单计算能力）。虽然分离式 HMD 设备不能独立于主机系统而工作，但却为 VR 市场创造了新的机会，因为主机系统已不再局限于智能手机，PC 和视频游戏机也能用于提供 VR 体验。总之，分离式 HMD 设备能提供高质量的 VR 体验。<br> 厂商：分离式 HMD 设备包括 Facebook Oculus Rift、HTC Vive 和 PlayStation VR。</li>
<li>整合式<br>整合式 HMD 设备拥有强大的计算能力和追踪系统。作为一款独立的计算设备，整合式 HMD 设备将配备一整套零部件，价格甚至高于普通 PC。<br> 厂商：微软 HoloLens（AR）</li>
</ul>
<p>对于想初步体验或入门 VR 的用户，推荐谷歌的 Carboard 或国内的性价比高的滑配式设备。<br><img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/google-cardboard.jpg" alt="此处输入图片的描述"><br>Google Carboard</p>
<h3 id="VR-周边设备"><a href="#VR-周边设备" class="headerlink" title="VR 周边设备"></a>VR 周边设备</h3><p>VR 是最具科幻色彩以及梦幻体验的东西，单独一个 HMD 并不能发挥 VR 的最大效果，加上“属性加成”的周边才能体验极致的 VR。</p>
<p>2015 年，澳大利亚开设了世界首家 VR 沉浸式竞技游戏店—— <a href="https://www.zerolatencyvr.com/" target="_blank" rel="external">Zero Latency</a>。 这家店拥有 4300 平方英尺，安装有 129 台 PlayStation Eye 摄像头，用于捕捉玩家的动作。整套系统可以最多同时供 6 名玩家进行游戏。<br><img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/Zero%20Latency.jpg" alt="此处输入图片的描述"><br>现实与虚拟</p>
<p>当然，各式各样的 VR 周边设备也越来越多，如 Virtuix Omni 跑步机：<br> <img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/Virtuix%20Omni.gif" alt="此处输入图片的描述"><br>Virtuix Omni</p>
<p>这些设备无疑会增强了 VR 的体验，给用户带来更加刺激与逼真的体验。</p>
<h2 id="WebVR"><a href="#WebVR" class="headerlink" title="WebVR"></a>WebVR</h2><p>上文说了这么多关于 VR 的东西，视乎还没有入正题（⊙﹏⊙)）   </p>
<p>许多 VR 体验是以应用程序的形式呈现的，这意味着你在体验 VR 前，必须进行搜索与下载。而 Web VR 则改变了这种形式，它将 VR  体验搬进了浏览器，Web + VR = WebVR。  </p>
<p>下面根据我目前的见解，分析一下 WebVR 的现状。</p>
<h3 id="WebVR-草案"><a href="#WebVR-草案" class="headerlink" title="WebVR 草案"></a>WebVR 草案</h3><blockquote>
<p>WebVR 是早期和实验性的 JavaScript API，它提供了访问如 Oculus Rift 和 Google Cardboard 等 VR 设备功能的 API。</p>
</blockquote>
<p>VR 应用需要高精度、低延迟的接口，才能传递一个可接受的体验。而对于类似 Device Orientation Event 接口，虽然能获取浅层的 VR 输入，但这并不能为高品质的 VR 提供必要的精度要求。WebVR 提供了专门访问 VR 硬件的接口，让开发者能构建舒适的 VR 体验。</p>
<p>WebVR API 目前可用于安装了 Firefox nightly 的 Oculus Rift、Chrome 的实验性版本和 Samsung Gear VR 的浏览器。当然，如果你现在就想在你的移动端浏览器体验 WebVR，可以使用 <a href="https://github.com/borismus/webvr-polyfill" target="_blank" rel="external">WebVR Polyfill</a>。</p>
<h3 id="WebVR-开发"><a href="#WebVR-开发" class="headerlink" title="WebVR 开发"></a>WebVR 开发</h3><p>在 Web 上开发 VR 应用，有下面三种（潜在）方式：</p>
<ol>
<li>JavaScript, Three.js 与 监听设备方向（Device Orientation）</li>
<li>JavaScript, Three.js 与 WebVR</li>
<li>CSS 与 WebVR（仍处于非常早期阶段）</li>
</ol>
<p>由于 WebVR 仍处于草案阶段并可能会有所改变，所以建议你基于 <a href="https://github.com/borismus/webvr-boilerplate" target="_blank" rel="external">webvr-boilerplate</a> 进行 WebVR 开发。</p>
<h4 id="A-Frame"><a href="#A-Frame" class="headerlink" title="A-Frame"></a>A-Frame</h4><p>上面说道，在 Web 上开发 VR 应用有 3 种（潜在）方式，前两种都离不开直接接触 Three.js，而第三种方式则为时尚早。对于没接触过 Three.js，但又想体验一把 WebVR 开发的同学们来说，无疑会存在一定的门槛。</p>
<p>如果你想以较低的门槛体验一把 WebVR 开发，那么可以试试 <a href="https://mozvr.com/#team" target="_blank" rel="external">MozVR 团队</a> 开发的 A-Frame 框架。</p>
<p>PS：写着写着，A-Frame 的版本从 v0.2 升到到 v0.3（这很前端），但文档等各方面变得更加完善了。</p>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://aframe.io/" target="_blank" rel="external">A-Frame</a> 是一个通过 HTML 创建 VR 体验的开源 WebVR 框架。通过该框架构建的 VR 场景能兼容智能手机、PC、 Oculus Rift 和 HTC Vive。</p>
<p>MozVR 团队开发的 A-Frame 框架的目的是：让构建 3D/VR 场景变得更易更快，以吸引 web 开发社区进入 WebVR 的生态。WebVR 要成功，需要有内容。但目前只有很少一部分 WebGL 开发者，却有数以百万的 Web 开发者与设计师。A-Frame 要把 3D/VR 内容的创造权力赋予给每个人。</p>
<h4 id="优势与特点"><a href="#优势与特点" class="headerlink" title="优势与特点"></a>优势与特点</h4><ul>
<li>A-Frame 能减少冗余代码。冗余复杂的代码成为了尝鲜者的障碍，A-Frame 将复杂冗余的代码减至一行 HTML 代码，如创建场景则只需一个 <code>&lt;a-scene&gt;</code> 标签。</li>
<li>A-Frame 是专为 Web 开发者设计的。它基于 DOM，因此能像其它 Web 应用一样操作 3D/VR 内容。当然，也能结合 box、d3、React 等 JavaScript 框架一起使用；</li>
<li>A-Frame 让代码结构化。Three.js 的代码通常是松散的，A-Frame 在 Three.js  之上构建了一个声明式的实体组件系统（entity-component-system）。另外，组件能发布并分享出去，其它开发者能以 HTML 的形式进行使用。</li>
</ul>
<p><img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/asence.gif" alt="此处输入图片的描述"><br>减少冗余复杂的代码</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>talk is cheap，show me the c… hello world.</p>
<p><a href="http://codepen.io/mozvr/pen/BjygdO/" target="_blank" rel="external">A-Frame 的 Hello world</a><br><img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/aframe.gif" alt="此处输入图片的描述"><br>在手机的浏览器（如：Chrome、QQ浏览器）中呈现的效果</p>
<p>实现代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 引入aframe框架</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./aframe.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a-scene</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 球体 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a-sphere</span> <span class="attr">position</span>=<span class="string">"0 1 -1"</span> <span class="attr">radius</span>=<span class="string">"1"</span> <span class="attr">color</span>=<span class="string">"#EF2D5E"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-sphere</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 盒（此处是立方体） --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a-box</span> <span class="attr">width</span>=<span class="string">"1"</span> <span class="attr">height</span>=<span class="string">"1"</span> <span class="attr">rotation</span>=<span class="string">"0 45 0"</span> <span class="attr">depth</span>=<span class="string">"1"</span> <span class="attr">color</span>=<span class="string">"#4CC3D9"</span> <span class="attr">position</span>=<span class="string">"-1 0.5 1"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-box</span>&gt;</span>	</div><div class="line">  <span class="comment">&lt;!-- 圆柱 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a-cylinder</span> <span class="attr">position</span>=<span class="string">"1 0.75 1"</span> <span class="attr">radius</span>=<span class="string">"0.5"</span> <span class="attr">height</span>=<span class="string">"1.5"</span> <span class="attr">color</span>=<span class="string">"#FFC65D"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-cylinder</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 平面 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a-plane</span> <span class="attr">rotation</span>=<span class="string">"-90 0 0"</span> <span class="attr">width</span>=<span class="string">"4"</span> <span class="attr">height</span>=<span class="string">"4"</span> <span class="attr">color</span>=<span class="string">"#7BC8A4"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-plane</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- sky元用于为场景添加背景图或显示360度的全景图 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a-sky</span> <span class="attr">color</span>=<span class="string">"#ECECEC"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-sky</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 用于指定摄像机的位置 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a-entity</span> <span class="attr">position</span>=<span class="string">"0 0 4"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a-camera</span>&gt;</span><span class="tag">&lt;/<span class="name">a-camera</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">a-entity</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a-scene</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>基本概念（以 v0.3 版本为参考）：</p>
<ul>
<li>该框架的三维坐标轴遵循<strong>右手坐标系</strong>，具体如下图：<br><img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/coordinate.jpg" alt="此处输入图片的描述"></li>
<li>场景的原点默认在视口底边的中点</li>
<li>position 相当于 CSS3 中的 translate3d</li>
<li>以<strong>米</strong>为单位长度</li>
<li>height 与 width 是正面的长和宽，depth表示深度（厚度）</li>
<li>rotation=”x y z” 单位<strong>角度（°）</strong>，拇指指向坐标轴的正方向，其余手指卷起来的方向就是该轴的旋转正方向。</li>
<li>color 是材质颜色，默认是白色（#FFF）</li>
<li>在 PC 中，可通过鼠标与键盘 WSAD 进行交互</li>
</ul>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>当然，上述案例只是 A-Frame 的 Hello World demo。若你感兴趣，可以深入学习，再结合自己的想法，相信你能作出让人拍手称赞的作品。</p>
<ul>
<li>A-Frame 官网：<a href="https://aframe.io/" target="_blank" rel="external">https://aframe.io/</a></li>
<li>A-Frame Blog：<a href="https://aframe.io/blog/" target="_blank" rel="external">https://aframe.io/blog/</a></li>
<li>Awesome A-Frame：<a href="https://github.com/aframevr/awesome-aframe" target="_blank" rel="external">https://github.com/aframevr/awesome-aframe</a></li>
</ul>
<h3 id="其它一些-WebVR-案例"><a href="#其它一些-WebVR-案例" class="headerlink" title="其它一些 WebVR 案例"></a>其它一些 WebVR 案例</h3><p>下面就列举一些 WebVR 的相关案例，如果你已具备了 VR 的体验环境，不妨体验一下。</p>
<ul>
<li><a href="https://www.beloola.com/" target="_blank" rel="external">Beloola</a>：Beloola 是一个基于 WebVR 的社交平台，它允许人们在同一个虚拟的空间上实时进行情感交流。</li>
<li><a href="https://sketchfab.com/" target="_blank" rel="external">Sketchfab</a>：Sketchfab 是一个不需任何插件即可在 Web 页面里嵌入交互式 3D 模型的服务网站。</li>
<li><a href="http://vizor.io/" target="_blank" rel="external">Vizor</a>：该网站提供了可视化编辑器，让任何人都能在浏览器上创建和分享他们的 VR 内容。</li>
<li><a href="http://vr.chromeexperiments.com/" target="_blank" rel="external">Chrome Experiments for Virtual Reality</a>：Chrome 团队提供的 6 个 VR 案例。</li>
<li>…</li>
</ul>
<p>更多 WebVR 内容等着你们发现</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>许多人将 2016 年称为 VR 元年。VR 的前景有人看好，也有人看衰。但无论如何，新技术的出现都值得我们去体验一番。当然，作为一名开发者，也可以从代码的角度体验一番。</p>
<p>想详细了解更多关于 VR 的行业报告，可以阅读 <a href="http://tech.qq.com/a/20160202/011274.htm" target="_blank" rel="external">《VR与AR：解读下一个通用计算平台》</a>。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://webvr.info/" target="_blank" rel="external">WebVR.info</a></li>
<li><a href="https://aframe.io/" target="_blank" rel="external">A-Frame</a></li>
<li><a href="https://www.sitepoint.com/how-to-build-vr-on-the-web-today/" target="_blank" rel="external">How to Build VR on the Web Today</a></li>
<li><a href="http://tech.qq.com/a/20160202/011274.htm" target="_blank" rel="external">VR与AR：解读下一个通用计算平台</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;“目镜在他眼前涂上了一抹朦胧的淡色，映射着一幅弯曲的广角画面：一条灯火辉煌的大街，伸向无尽的黑暗。但这大街其实并不存在，它只是电脑绘出的一片虚拟的空间。”——《Snow Crash》，Neal Stephenson 1992年&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="webvr" scheme="https://aotu.io/tags/webvr/"/>
    
      <category term="vr" scheme="https://aotu.io/tags/vr/"/>
    
  </entry>
  
  <entry>
    <title>CSS 3D Panorama - 淘宝造物节技术剖析</title>
    <link href="https://aotu.io/notes/2016/08/24/2016-8-24-css-3d-panorama/"/>
    <id>https://aotu.io/notes/2016/08/24/2016-8-24-css-3d-panorama/</id>
    <published>2016-08-24T10:58:35.000Z</published>
    <updated>2016-10-20T07:06:32.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>3D 全景并不是什么新鲜事物了，但以前我们在 Web 上看到的 3D 全景一般是通过 Flash 实现的。若我们能将 <code>CSS3 Transform</code> 的相关知识运用得当，也是能实现类似的效果。换句话说，3D 全景其实就是 CSS3 3D 的应用场景之一。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>在实现 CSS3 3D 全景之前，我们先理清部分 CSS3 Transform 属性：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-origin" target="_blank" rel="external">transform-origin</a>：元素变形的原点（默认值为 50% 50% 0，该数值和后续提及的百分比均默认基于元素自身的宽高算出具体数值）；</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/perspective" target="_blank" rel="external">perspective</a>: 指定了观察者与 <code>z=0</code> 平面的距离，使具有三维位置变换的元素产生透视效果。（默认值：none，值只能是绝对长度，即负数是非法值）；</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style" target="_blank" rel="external">transform-style</a>：用于指定其为子元素提供 2D 还是 3D 的场景。另外，该属性是非继承的；</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform" target="_blank" rel="external">transform</a>：该属性能让你修改 CSS 可视化模型的坐标空间，其中包括 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d" target="_blank" rel="external">平移（translate）</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate" target="_blank" rel="external">旋转（rotate）</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale" target="_blank" rel="external">缩放（scale）</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skew" target="_blank" rel="external">扭曲（skew）</a>。</li>
</ul>
<p>下面对上述的一些点进行更深入的分析：</p>
<ul>
<li><p>对于 <code>perspective</code>，该属性指定了“眼睛”与元素的 <code>perspective-origin</code> （默认值是 <code>50% 50%</code>）点的距离。那么问题来了：“当我们应用 <code>px</code> 作为衡量单位时，那它的实际距离该如何量化呢（即如何得到我们熟悉且易于表达的距离）？”<br>答：当我们的屏幕的分辨率是 1080P（1920*1080px），且该元素或祖先元素的 perspective 值是 <code>1920px</code> 时，该应用了 CSS3 3D Transform 的元素的立体效果就相当于我们在距离一个屏幕宽度（1920px）的屏幕前观看该元素的真实效果。尽管如此，目前我也不清楚如何准确地为元素设置一个合适的 <code>perspective</code> 值，只能猜测个大概值，然后再动态修改值，以达到满意的呈现效果。<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/perspective.jpg" alt="此处输入图片的描述"><br>根据 <a href="https://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BC%BC%E4%B8%89%E8%A7%92%E5%BD%A2" target="_blank" rel="external">相似三角形</a> 的性质可计算出被前移的元素最终在屏幕上显示的实际大小  </p>
<p> 另外，关于 <code>perspective</code> 还有另外一个重要的点。因为，perspective-origin 的默认值是 <code>50% 50%</code>，因此，对哪个元素应用 <code>perspective</code> 属性，就决定了“眼睛”的位置（即我们的“眼睛”是在哪个角度看物体）。一般来说，当我们需要正视物体时，就会将该属性设置在与该元素中心重合的<strong>某一祖先元素</strong>上。</p>
<p> 再另外，如果说：“如何让一个元素（的背面）不可见？”，你可能会说 <code>backface-visibility:hidden;</code>。其实，对于在“眼睛”背后的元素（以元素的 <code>transform-origin</code> 为参考点），即元素的z轴坐标值大于 perspective 的值，浏览器是不会将其渲染出来的。</p>
</li>
<li><p>对于 <code>transform-style</code>，该属性指定了其<strong>子元素</strong>是处于 3D 场景还是 2D 场景。对于 2D 场景，元素的前后位置是按照平时的渲染方式（即若在普通文档流中，是按照代码中元素的先后顺序，后面的元素会遮住在其前面的元素）；对于 3D 场景，元素的前后位置则按照真实世界的规则排序（即越靠近“眼睛”的，会遮住离“眼睛”更远的元素）。</p>
<p> 另外，由于 <code>transform-style</code> 属性是非继承的，对于中间节点需要显式设定。</p>
</li>
<li><p>对于 <code>transform</code> 属性：下图整理了 rotate3d、translate3d 的变换方向：<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/transform.jpg" alt="transform"><br>transform 中的变换属性的顺序是有关系的，如 translateX(10px) rotate(30deg) 与 rotate(30deg) translateX(10px) 是不等价的。</p>
<p> 另外，需要注意的是 scale 中如果有负数值，则该方向会产生 180 度的翻转；</p>
<p> 再另外，部分 transform 效果会导致元素（字体）模糊，如 translate 的数值存在小数、通过 translateZ 或 scale 放大元素等等。<strong>每个浏览器都有其不同的表现</strong>。</p>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>上面理清了一些 CSS Transform 的知识点，下面就讲讲如何实现 CSS 3D 全景 ：</p>
<p>想象一下，当我们站在十字路口中间，身体不动，头部旋转 360°，这个过程中所看到的画面就形成了一幅以你为中心的全景图了。其实，当焦距不变时，我们就等同于站在一个圆柱体的中心。  </p>
<p>但是，虚拟世界与现实的最大不同是：没有东西是连续的，即所有东西都是离散的。例如，你无法在屏幕上显示一个完美的圆。你只能以一个正多边形表示圆：边越多，圆就越“完美”。 </p>
<p>同理，在三维空间，每个 3D 模型都等同于一个多面体（即 3D 模型只能由不弯曲的平面组成）。当我们讨论一个本身就是多面体（如立方体）的模型时并不足以为奇，但当我们想展示其它模型时，如球体时，就需要记住这个原理了。<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/ball.png" alt="三维环境的球体"></p>
<p><a href="http://zwj360.im20.com.cn" target="_blank" rel="external">淘宝造物节的活动页</a> 就是 CSS 3D 全景的一个很赞的页面，它将全景图分隔成 20 等份，相邻的元素间差 18°（360/20）。需要注意的是：我们要确保<strong>每个元素的正面是指向圆柱中心的，</strong>所以要计算好每等份的旋转角度值。然后再将元素向外（即 Z 轴方向）平移 <code>r</code> px。对于立方体 <code>r</code> 就是 <code>边长/2</code>，而对于其它更复杂的正多面体呢？  </p>
<p>举例：对于正九面体，每个元素的宽为 <code>210px</code>，对应的角度为 <code>40°</code>，即如下图：<br>图片来自：<a href="https://desandro.github.io/3dtransforms/docs/carousel.html" target="_blank" rel="external">https://desandro.github.io/3dtransforms/docs/carousel.html</a><br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/diagram.png" alt="此处输入图片的描述"><br>正九面体的俯视图  </p>
<p><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/calc.png" alt="此处输入图片的描述"><br>计算过程  </p>
<p>由此得到一个公用函数，只需传入含有<strong>元素的宽度</strong>和<strong>元素数量</strong>的对象，即可得到 <code>r</code> 值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">calTranslateZ</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.round(opts.width / (<span class="number">2</span> * <span class="built_in">Math</span>.tan(<span class="built_in">Math</span>.PI / opts.number)))</div><div class="line">&#125;</div><div class="line"></div><div class="line">calTranlateZ(&#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">210</span>,</div><div class="line">    <span class="attr">number</span>: <span class="number">9</span></div><div class="line">&#125;);  <span class="comment">// 288</span></div></pre></td></tr></table></figure></p>
<p><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/expand4.gif" alt="俯视时所看到的元素外移动画"><br>俯视时所看到的元素外移动画  </p>
<p>另外，为了让下文易于理解，我们约定 html 结构是：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#view</span>(<span class="attribute">perspective</span>:<span class="number">1000px</span>)</div><div class="line">    <span class="selector-id">#stage</span>(<span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d)</div><div class="line">        <span class="selector-id">#cube</span>(<span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d)</div><div class="line">            <span class="selector-class">.div</span>（<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;<span class="attribute">height</span>:<span class="number">600px</span>;） <span class="comment">/*组成立方体的元素*/</span></div></pre></td></tr></table></figure></p>
<p>正多面体构建完成后，就需要将我们的“眼睛”放置在正多面体内。由于在“眼睛”后的元素是不会被浏览器所渲染的（与 <code>.div元素</code> 是否设置 <code>backface-visibility:hidden;</code> 无关），且我们保证了 <code>.div元素</code> 的<strong>正面</strong>都指向了正多面体的中心，这就形成 360° 被环绕的效果了。<br>那“眼睛”具体是被放置在哪个位置呢？<br>答：通过设置 <code>#stage</code> 元素的 translateZ 的值，让不能被看到的 <code>.div元素</code> 的 Z 轴坐标值大于 perspective 的值即可。如：立方体的正面的 translateZ 是 -300px（为了保证立方体的正面是指向立方体中心，正面元素需要设置 <code>rotateY(-180deg) translateZ(-300px)</code>，即正面元素向“眼球”方向平移了 300px），而 #view 的 perspective 的值为 1000px，那么 #stage 的 translateZ 的值应该大于 700px 且小于 1300px，具体数值则取决于你想要呈现的效果了。</p>
<p>根据上述知识，我粗略地模仿了“造物节”的效果：<a href="http://jdc.jd.com/lab/zaowu/index_new.html" target="_blank" rel="external">http://jdc.jd.com/lab/zaowu/index_new.html</a></p>
<p>其实，只需 6 幅图就可以实现一张常见的无死角全景图。<br>我自己又试验了下：<a href="http://jdc.jd.com/lab/zaowu/index2.html" target="_blank" rel="external">http://jdc.jd.com/lab/zaowu/index2.html</a>   </p>
<p>可由下图看出，将水平的 4 张图片合成后就是一张全景图：<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/panorama3d.jpg" alt="此处输入图片的描述"></p>
<p>理解上述知识后，就可以通过为元素设置合适的 CSS3 Transform 属性值，即可实现一张可交互的全景图了。当然，交互的效果可以是拖拽，也可以是重力感应等。</p>
<p>正如在上文提到的：“没有东西是连续的，即所有东西都是离散的…”。将《造物节》与后续全景图的水平方向上的图片分别合成一张图后，可以发现：图片数量越多，图片的要求也越低。你觉得呢？<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/zaowujie.jpg" alt="淘宝造物节整体效果图"><br>造物节全景图</p>
<h3 id="全景图素材的制作"><a href="#全景图素材的制作" class="headerlink" title="全景图素材的制作"></a>全景图素材的制作</h3><p>将全景图制作分为设计类与实景类：</p>
<h4 id="设计类"><a href="#设计类" class="headerlink" title="设计类"></a>设计类</h4><p>要制作类似 <a href="http://zwj360.im20.com.cn" target="_blank" rel="external">《淘宝造物节》</a> 的全景页面，设计稿需要有以下这些要求。</p>
<p>注：下面提及的具体数据均基于《造物节》，可根据自身要求进行调整（若发现欠缺，欢迎作出补充）。</p>
<p>整体背景设计图如下（2580*1170px，被分成 20 等份）：<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/zaowujie.jpg" alt="淘宝造物节整体效果图"></p>
<p>基本要求：</p>
<ol>
<li>水平方向上需要首尾相连；</li>
<li>因为效果图最终需要切成 <strong>N 等份</strong>，所以尽可能让 <strong>设计图的宽度能被 N 整除</strong>；</li>
<li>图片尺寸不仅要考虑正视图的大小，还要考虑元素在旋转时依然能覆盖视野（可选）。</li>
</ol>
<p>当然，上图只是背景图，还可以添加一些小物体素材（通过运动速度的差异形成视差，增强立体效果），如：<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/item3.jpg" alt="物体小元素1"><br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/item1.jpg" alt="物体小元素2"><br>小物体元素（虚线是用于参考的，造物节中共有 21 个小物体）</p>
<p>如上图所示，每个图片也是被等分成 M 等份。当然，M 取决于物体在背景上的具体位置和本身大小。<br>另外，M 的宽度是与 N 的宽度相等的。尽管部分物体（M&gt;1）的两侧等份的图案占比小，但建议保留同样的宽度。  </p>
<p>注：如果小物体有特殊的变形效果，应该备注具体变形参数。</p>
<p>对于顶部和底图图片，则无特殊要求。</p>
<h4 id="实景类"><a href="#实景类" class="headerlink" title="实景类"></a>实景类</h4><p>如果想制作实景的全景，可以看看 Google 街景：<br><a href="https://www.google.com/streetview/publish/" target="_blank" rel="external">Google 街景</a> 推荐的设备如下：<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/panorama_machine.jpg" alt="此处输入图片的描述"></p>
<p>如上图，最实惠的就是最后一个选项—— <a href="https://www.google.com/streetview/apps/" target="_blank" rel="external">Google 街景 APP</a>，该应用内部提供了全景相机功能，但正如图片介绍所说，这是需要练习的，因此对操作要求比较高。</p>
<p>补充：<br>上周六（2016.8.20）参加了 TGDC 的分享会，嘉宾分享了他们处理全景的方式：</p>
<ol>
<li>利用 RICOH THETA S 等专业设备拍出全景图</li>
<li>导出静态图像</li>
<li>利用设备专门提供的 APP 或 krpamo tools、pano2vr、Glsky box 等工具将静态图像转为6张图</li>
<li>利用 Web 技术制作可交互的全景图</li>
</ol>
<p>其中 Web 技术有以下3种可选方式（当然，还有其它）：</p>
<ul>
<li>CSS3（本文所提及的方式）</li>
<li>Three.js</li>
<li>krpano（为全景而生，低级浏览器则回退到 Flash），<a href="http://krpano.com/docu/tutorials/quickstart/?from=groupmessage&amp;isappinstalled=0#top" target="_blank" rel="external">查看教程</a></li>
</ul>
<p>当时，嘉宾现场快速制作的 <a href="http://wt.qq.com/act/tgdc_lottery/lottery.html" target="_blank" rel="external">会议现场全景</a>。</p>
<p>可见，优秀硬件设备的出现，大大减少了后期处理的时间，而 Web 则提供了一个很好的展现平台。</p>
<hr>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>随着终端设备的软硬件不断完善和提高，Web 在 3D 领域也不甘落后，如果你玩腻了 2D 的 H5 或者想为用户提供更加新颖优秀的体验，全景也许是一种选择。</p>
<p>最后，如有不清晰或不明白的地方，可以联系我，我会尽可能解决的。谢谢谢~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;3D 全景并不是什么新鲜事物了，但以前我们在 Web 上看到的 3D 全景一般是通过 Flash 实现的。若我们能将 &lt;code&gt;CSS3 
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="https://aotu.io/tags/CSS/"/>
    
      <category term="panorama" scheme="https://aotu.io/tags/panorama/"/>
    
      <category term="3d" scheme="https://aotu.io/tags/3d/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 配置 HTTPS 服务器</title>
    <link href="https://aotu.io/notes/2016/08/16/nginx-https/"/>
    <id>https://aotu.io/notes/2016/08/16/nginx-https/</id>
    <published>2016-08-16T09:40:23.000Z</published>
    <updated>2016-10-20T07:06:32.447Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a> 
<p>Chrome 浏览器地址栏标志着 HTTPS 的绿色小锁头从心理层面上可以给用户专业安全的心理暗示，本文简单总结一下如何在 Nginx 配置 HTTPS 服务器，让自己站点上『绿锁』。</p>
<p><img src="//misc.aotu.io/mihanX/nginx-https/img1.jpg" alt="Nginx 配置 HTTPS"></p>
<p>Nginx 配置 HTTPS 并不复杂，主要有两个步骤：<strong>签署第三方可信任的 SSL 证书</strong> 和 <strong>配置 HTTPS</strong></p>
<h2 id="签署第三方可信任的-SSL-证书"><a href="#签署第三方可信任的-SSL-证书" class="headerlink" title="签署第三方可信任的 SSL 证书"></a>签署第三方可信任的 SSL 证书</h2><h3 id="关于-SSL-证书"><a href="#关于-SSL-证书" class="headerlink" title="关于 SSL 证书"></a>关于 SSL 证书</h3><p>有关 SSL 的介绍可以参阅维基百科的<a href="HTTPS://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E5%8D%94%E8%AD%B0" target="_blank" rel="external">传输层安全协议</a>和阮一峰先生的 <a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="external">《SSL/TLS协议运行机制的概述》</a>。</p>
<p>SSL 证书主要有两个功能：<strong>加密</strong>和<strong>身份证明</strong>，通常需要购买，也有免费的，通过第三方 SSL 证书机构颁发，常见可靠的第三方 SSL 证书颁发机构有下面几个：</p>
<p><img src="//misc.aotu.io/mihanX/nginx-https/img10.jpg" alt="颁发 SSL 证书可靠的第三方机构"></p>
<p><a href="https://www.startssl.com/" target="_blank" rel="external">StartCom</a> 机构上的 SSL 证书有以下几种：</p>
<ul>
<li>企业级别：EV(Extended Validation)、OV(Organization Validation)</li>
<li>个人级别：IV(Identity Validation)、DV（Domain Validation）</li>
</ul>
<p>其中 EV、OV、IV 需要付费</p>
<p>免费的证书安全认证级别一般比较低，不显示单位名称，不能证明网站的真实身份，仅起到加密传输信息的作用，适合个人网站或非电商网站。由于此类只验证域名所有权的低端 SSL 证书已经被国外各种欺诈网站滥用，因此强烈推荐部署验证单位信息并显示单位名称的 OV SSL 证书或申请最高信任级别的、显示绿色地址栏、直接在地址栏显示单位名称的 EV SSL 证书，就好像 <a href="HTTPS://www.startssl.com/" target="_blank" rel="external">StarCom</a> 的地址栏一样：</p>
<p><img src="//misc.aotu.io/mihanX/nginx-https/img2.jpg" alt="StarCom"></p>
<p>更多关于购买 SSL 证书的介绍：<a href="HTTPS://www.zhihu.com/question/19578422" target="_blank" rel="external">SSL 证书服务，大家用哪家的？</a>、<a href="http://freessl.wosign.com/freessl" target="_blank" rel="external">DV免费SSL证书</a></p>
<h3 id="使用-OpenSSL-生成-SSL-Key-和-CSR-文件"><a href="#使用-OpenSSL-生成-SSL-Key-和-CSR-文件" class="headerlink" title="使用 OpenSSL 生成 SSL Key 和 CSR 文件"></a>使用 OpenSSL 生成 SSL Key 和 CSR 文件</h3><p>配置 HTTPS 要用到私钥 example.key 文件和 example.crt 证书文件，申请证书文件的时候要用到 example.csr 文件，<code>OpenSSL</code> 命令可以生成 example.key 文件和 example.csr 证书文件。</p>
<ul>
<li>CSR：Cerificate Signing Request，证书签署请求文件，里面包含申请者的 DN（Distinguished Name，标识名）和公钥信息，<strong>在第三方证书颁发机构签署证书的时候需要提供</strong>。证书颁发机构拿到 CSR 后使用其根证书私钥对证书进行加密并生成 CRT 证书文件，里面包含证书加密信息以及申请者的 DN 及公钥信息</li>
<li>Key：证书申请者私钥文件，和证书里面的公钥配对使用，在 HTTPS 『握手』通讯过程需要使用私钥去解密客戶端发來的经过证书公钥加密的随机数信息，是 HTTPS 加密通讯过程非常重要的文件，<strong>在配置 HTTPS 的時候要用到</strong> </li>
</ul>
<p>使用 <code>OpenSSl</code>命令可以在系统当前目录生成 <strong>example.key</strong> 和 <strong>example.csr</strong> 文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -new -newkey rsa:2048 -sha256 -nodes -out example_com.csr -keyout example_com.key -subj <span class="string">"/C=CN/ST=ShenZhen/L=ShenZhen/O=Example Inc./OU=Web Security/CN=example.com"</span></div></pre></td></tr></table></figure>
<p>下面是上述命令相关字段含义：</p>
<ul>
<li>C：Country ，单位所在国家，为两位数的国家缩写，如： CN 就是中国</li>
<li>ST 字段： State/Province ，单位所在州或省</li>
<li>L 字段： Locality ，单位所在城市 / 或县区</li>
<li>O 字段： Organization ，此网站的单位名称;</li>
<li>OU 字段： Organization  Unit，下属部门名称;也常常用于显示其他证书相关信息，如证书类型，证书产品名称或身份验证类型或验证内容等;</li>
<li>CN 字段： Common Name ，网站的域名;</li>
</ul>
<p>生成 csr 文件后，提供给 CA 机构，签署成功后，就会得到一個 <strong>example.crt</strong> 证书文件，SSL 证书文件获得后，就可以在 Nginx 配置文件里配置 HTTPS 了。</p>
<h2 id="配置-HTTPS"><a href="#配置-HTTPS" class="headerlink" title="配置 HTTPS"></a>配置 HTTPS</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>要开启 HTTPS 服务，在配置文件信息块(server block)，必须使用监听命令 <code>listen</code> 的 ssl 参数和定义服务器证书文件和私钥文件，如下所示：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="comment">#ssl参数</span></div><div class="line">    <span class="attribute">listen</span>              <span class="number">443</span> ssl;</div><div class="line">    <span class="attribute">server_name</span>         example.com;</div><div class="line">    <span class="comment">#证书文件</span></div><div class="line">    <span class="attribute">ssl_certificate</span>     example.com.crt;</div><div class="line">    <span class="comment">#私钥文件</span></div><div class="line">    <span class="attribute">ssl_certificate_key</span> example.com.key;</div><div class="line">    <span class="attribute">ssl_protocols</span>       TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line">    <span class="attribute">ssl_ciphers</span>         HIGH:!aNULL:!MD5;</div><div class="line">    <span class="comment">#...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>证书文件会作为公用实体發送到每台连接到服务器的客戶端，私钥文件作为安全实体，<strong>应该被存放在具有一定权限限制的目录文件，并保证 Nginx 主进程有存取权限</strong>。</p>
<p>私钥文件也有可能会和证书文件同放在一個文件中，如下面情況：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ssl_certificate</span>     www.example.com.cert;</div><div class="line"><span class="attribute">ssl_certificate_key</span> www.example.com.cert;</div></pre></td></tr></table></figure>
<p>这种情況下，证书文件的的读取权限也应该加以限制，仅管证书和私钥存放在同一个文件里，但是只有证书会被发送到客戶端</p>
<p>命令 <code>ssl_protocols</code> 和 <code>ssl_ciphers</code> 可以用来限制连接只包含 SSL/TLS 的加強版本和算法，默认值如下：  </p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line"><span class="attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;</div></pre></td></tr></table></figure>
<p>由于这两个命令的默认值已经好几次发生了改变，因此不建议显性定义，除非有需要额外定义的值，如定义 D-H 算法：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#使用DH文件</span></div><div class="line"><span class="attribute">ssl_dhparam</span> /etc/ssl/certs/dhparam.pem;</div><div class="line"><span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line"><span class="comment">#定义算法</span></div><div class="line"><span class="attribute">ssl_ciphers</span> <span class="string">"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4"</span>;</div><div class="line"><span class="comment">#...</span></div></pre></td></tr></table></figure>
<h3 id="HTTPS服务器优化"><a href="#HTTPS服务器优化" class="headerlink" title="HTTPS服务器优化"></a>HTTPS服务器优化</h3><h4 id="减少-CPU-运算量"><a href="#减少-CPU-运算量" class="headerlink" title="减少 CPU 运算量"></a>减少 CPU 运算量</h4><p>SSL 的运行计算需要消耗额外的 CPU 资源，一般多核处理器系统会运行多个工作进程(<a href="http://nginx.org/en/docs/ngx_core_module.html#worker_processes" target="_blank" rel="external">worker processes </a>)，进程的数量不会少于可用的 CPU 核数。SSL 通讯过程中『握手』阶段的运算最占用 CPU 资源，有两个方法可以减少每台客户端的运算量：</p>
<ul>
<li><strong>激活 <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout" target="_blank" rel="external">keepalive</a> 长连接，一个连接发送更多个请求</strong></li>
<li><strong>复用 SSL 会话参数，在并行并发的连接数中避免进行多次 SSL『握手』</strong></li>
</ul>
<p>这些会话会存储在一个 SSL 会话缓存里面，通过命令 <a href="//nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_cache">ssl_session_cache</a> 配置，可以使缓存在机器间共享，然后利用客戶端在『握手』阶段使用的 <code>seesion id</code> 去查询服务端的 session cathe(如果服务端设置有的话)，简化『握手』阶段。</p>
<p>1M 的会话缓存大概包含 4000 個会话，默认的缓存超时时间为 5 分钟，可以通过使用 <a href="//nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_timeout">ssl_session_timeout</a> 命令设置缓存超时时间。下面是一個拥有 10M 共享会话缓存的多核系统优化配置例子：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">worker_processes</span> auto;</div><div class="line"></div><div class="line"><span class="section">http</span> &#123;</div><div class="line">    <span class="comment">#配置共享会话缓存大小</span></div><div class="line">    <span class="attribute">ssl_session_cache</span>   shared:SSL:<span class="number">10m</span>;</div><div class="line">    <span class="comment">#配置会话超时时间</span></div><div class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</div><div class="line"></div><div class="line">    <span class="section">server</span> &#123;</div><div class="line">        <span class="attribute">listen</span>              <span class="number">443</span> ssl;</div><div class="line">        <span class="attribute">server_name</span>         www.example.com;</div><div class="line">        <span class="comment">#设置长连接</span></div><div class="line">        <span class="attribute">keepalive_timeout</span>   <span class="number">70</span>;</div><div class="line"></div><div class="line">        <span class="attribute">ssl_certificate</span>     www.example.com.crt;</div><div class="line">        <span class="attribute">ssl_certificate_key</span> www.example.com.key;</div><div class="line">        <span class="attribute">ssl_protocols</span>       TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line">        <span class="attribute">ssl_ciphers</span>         HIGH:!aNULL:!MD5;</div><div class="line">        <span class="comment">#...</span></div></pre></td></tr></table></figure>
<h4 id="使用-HSTS-策略强制浏览器使用-HTTPS-连接"><a href="#使用-HSTS-策略强制浏览器使用-HTTPS-连接" class="headerlink" title="使用 HSTS 策略强制浏览器使用 HTTPS 连接"></a>使用 HSTS 策略强制浏览器使用 HTTPS 连接</h4><p>HSTS – HTTP Strict Transport Security，HTTP严格传输安全。它允许一个 HTTPS 网站要求浏览器总是通过 HTTPS 来访问，这使得攻击者在用戶与服务器通讯过程中拦截、篡改信息以及冒充身份变得更为困难。</p>
<p>只要在 Nginx 配置文件加上以下头信息就可以了：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">add_header</span> Strict-Transport-Security <span class="string">"max-age=31536000; includeSubDomains;preload"</span> always;</div></pre></td></tr></table></figure>
<ul>
<li>max-age：设置单位时间内強制使用 HTTPS 连接</li>
<li>includeSubDomains：可选，所有子域同时生效</li>
<li>preload：可选，<em>非规范值</em>，用于定义使用『HSTS 预加载列表』</li>
<li>always：可选，保证所有响应都发送此响应头，包括各种內置错误响应</li>
</ul>
<p>当用户进行 HTTPS 连接的时候，服务器会发送一个 <strong>Strict-Transport-Security</strong> 响应头：</p>
<p><img src="//misc.aotu.io/mihanX/nginx-https/img9.jpg" alt="STS Header"></p>
<p>浏览器在获取该响应头后，在 <code>max-age</code> 的时间内，如果遇到 HTTP 连接，就会通过 307 跳转強制使用 HTTPS 进行连接，并忽略其它的跳转设置（如 301 重定向跳转）：</p>
<p><img src="//misc.aotu.io/mihanX/nginx-https/img6.jpg" alt="HSTS"></p>
<p>307 跳转 <strong>Non-Authoritative-Reason</strong> 响应头</p>
<p><img src="//misc.aotu.io/mihanX/nginx-https/img5.jpg" alt="HSTS"></p>
<h5 id="Google-HSTS-预加载列表（HSTS-Preload-List）"><a href="#Google-HSTS-预加载列表（HSTS-Preload-List）" class="headerlink" title="Google HSTS 预加载列表（HSTS Preload List）"></a>Google HSTS 预加载列表（HSTS Preload List）</h5><p>由于 HSTS 需要用戶经过一次安全的 HTTPS 连接后才会在 max-age 的时间內生效，因此HSTS 策略并不能完美防止 <a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/06.4.md" target="_blank" rel="external">HTTP 会话劫持（HTTP session hijacking）</a>，在下面这些情況下还是存在被劫持的可能：</p>
<ul>
<li>从未访问过的网站</li>
<li>近期重裝过操作系統</li>
<li>近期重裝过浏览器</li>
<li>使用新的浏览器</li>
<li>使用了新的设备（如手机）</li>
<li>刪除了浏览器缓存</li>
<li>近期沒有打开过网站且 max-age 过期</li>
</ul>
<p>针对这种情況，Google 维护了一份『HSTS 预加载列表』，列表里包含了使用了 HSTS 的站点主域名和子域名，可以通过以下页面申请加入：</p>
<p><a href="https://hstspreload.appspot.com/." target="_blank" rel="external">https://hstspreload.appspot.com/.</a> </p>
<p>申请的时候会先验证站点是否符合资格，一般会检验待验证的站点主域和子域是否能通过 HTTPS 连接、HTTPS 和 HTTP 配置是否有 STS Header 等信息，通过验证后，会让你确认一些限制信息，如下图：</p>
<p><img src="//misc.aotu.io/mihanX/nginx-https/img8.jpg" alt="HSTS"></p>
<p>当确认提交后，就会显示处理状态：</p>
<p><img src="//misc.aotu.io/mihanX/nginx-https/img11.jpg" alt="HSTS"></p>
<p>申请通过后，列表内的站点名会被写进主流的浏览器，当浏览器更新版本后，只要打开列表内的站点，浏览器会拒绝所有 HTTP 连接而自动使用 HTTPS，即使关闭了 HSTS 设置。</p>
<p>可以在下面两个连接分別查找 Chrome 和 Firfox 的『HSTS 预加载列表』内容：</p>
<p><a href="https://www.chromium.org/hsts" target="_blank" rel="external">The Chromium Projects - HTTP Strict Transport Security</a></p>
<p><a href="https://dxr.mozilla.org/comm-central/source/mozilla/security/manager/ssl/nsSTSPreloadList.inc" target="_blank" rel="external">Firefox HSTS preload list - nsSTSPreloadList.inc</a></p>
<p><strong>需要注意的是：</strong></p>
<ul>
<li>一旦把自己的站点名加入『HSTS 预加载列表』，将很难彻底从列表中移除，因为不能保证其它浏览器可以及时移除，即使 Chrome 提供有便捷的移除方法，也是要通过出邮件联系，注明移除原因，并等到最新的浏览器版本更新发布才有机会（用戶不一定会及时更新） </li>
<li>所有不具备有效证书的子域或內嵌子域的访问将会被阻止</li>
</ul>
<p><strong>因此，如果自己站点子域名变化比较多，又沒有泛域证书，又沒法确定全站是否能应用 HTTPS 的朋友，就要谨慎申请了。</strong></p>
<p>更多关于 HSTS 配置可参考：</p>
<p><a href="https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/" target="_blank" rel="external">《HTTP Strict Transport Security (HSTS) and NGINX》</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security#Preloading_Strict_Transport_Security" target="_blank" rel="external">MDN的《HTTP Strict Transport Security》</a></p>
<h5 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h5><p><img src="//misc.aotu.io/mihanX/nginx-https/img7.jpg" alt="Compatibility"></p>
<h4 id="加强-HTTPS-安全性"><a href="#加强-HTTPS-安全性" class="headerlink" title="加强 HTTPS 安全性"></a>加强 HTTPS 安全性</h4><p>HTTPS 基础配置采取的默认加密算法是 SHA-1，这个算法非常脆弱，安全性在逐年降低，在 2014 年的时候， <strong>Google 官方博客就宣布在 Chrome 浏览器中逐渐降低 SHA-1 证书的安全指示，会从 2015 年起使用 SHA-2 签名的证书</strong>，可参阅 <a href="http://www.freebuf.com/author/rabbit_run" target="_blank" rel="external">Rabbit_Run</a> 在 2014 年发表的文章：<a href="http://www.freebuf.com/news/topnews/44288.html" target="_blank" rel="external">《为什么Google急着杀死加密算法SHA-1》</a></p>
<p>为此，主流的 HTTPS 配置方案应该避免 SHA-1，可以使用 <a href="https://zh.wikipedia.org/wiki/%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E7%88%BE%E6%9B%BC%E5%AF%86%E9%91%B0%E4%BA%A4%E6%8F%9B" target="_blank" rel="external">迪菲-赫尔曼密钥交换（D-H，Diffie–Hellman key exchange）</a>方案。</p>
<p>首先在目录 <code>/etc/ssl/certs</code> 运行以下代码生成 <code>dhparam.pem</code> 文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl dhparam -out dhparam.pem 2048</div></pre></td></tr></table></figure>
<p>然后加入 Nginx 配置：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#优先采取服务器算法</span></div><div class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</div><div class="line"><span class="comment">#使用DH文件</span></div><div class="line"><span class="attribute">ssl_dhparam</span> /etc/ssl/certs/dhparam.pem;</div><div class="line"><span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line"><span class="comment">#定义算法</span></div><div class="line"><span class="attribute">ssl_ciphers</span> <span class="string">"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4"</span>;</div></pre></td></tr></table></figure>
<p>如果服务器夠強大，可以使用更为复杂的 4096 位进行加密。</p>
<p>一般情況下还应该加上以下几个增强安全性的命令：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#减少点击劫持</span></div><div class="line"><span class="attribute">add_header</span> X-Frame-Options DENY;</div><div class="line"><span class="comment">#禁止服务器自动解析资源类型</span></div><div class="line"><span class="attribute">add_header</span> X-Content-Type-Options nosniff;</div><div class="line"><span class="comment">#防XSS攻击</span></div><div class="line"><span class="attribute">add_header</span> X-Xss-Protection <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>这几个安全命令在 <a href="https://imququ.com/" target="_blank" rel="external">Jerry Qu</a> 大神的文章<a href="https://imququ.com/post/web-security-and-response-header.html" target="_blank" rel="external">《一些安全相关的HTTP响应头》</a>有详细的介紹。</p>
<h3 id="优化后的综合配置"><a href="#优化后的综合配置" class="headerlink" title="优化后的综合配置"></a>优化后的综合配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">worker_processes</span> auto;</div><div class="line"></div><div class="line"><span class="section">http</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">#配置共享会话缓存大小，视站点访问情况设定</span></div><div class="line">    <span class="attribute">ssl_session_cache</span>   shared:SSL:<span class="number">10m</span>;</div><div class="line">    <span class="comment">#配置会话超时时间</span></div><div class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</div><div class="line"></div><div class="line">    <span class="section">server</span> &#123;</div><div class="line">        <span class="attribute">listen</span>              <span class="number">443</span> ssl;</div><div class="line">        <span class="attribute">server_name</span>         www.example.com;</div><div class="line">        </div><div class="line">        <span class="comment">#设置长连接</span></div><div class="line">        <span class="attribute">keepalive_timeout</span>   <span class="number">70</span>;</div><div class="line">        </div><div class="line">        <span class="comment">#HSTS策略</span></div><div class="line">        <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">"max-age=31536000; includeSubDomains; preload"</span> always;</div><div class="line">        </div><div class="line">        <span class="comment">#证书文件</span></div><div class="line">        <span class="attribute">ssl_certificate</span>     www.example.com.crt;</div><div class="line">        <span class="comment">#私钥文件</span></div><div class="line">        <span class="attribute">ssl_certificate_key</span> www.example.com.key; </div><div class="line">        </div><div class="line">        <span class="comment">#优先采取服务器算法</span></div><div class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</div><div class="line">        <span class="comment">#使用DH文件</span></div><div class="line">        <span class="attribute">ssl_dhparam</span> /etc/ssl/certs/dhparam.pem;</div><div class="line">        <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line">        <span class="comment">#定义算法</span></div><div class="line">        <span class="attribute">ssl_ciphers</span> <span class="string">"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4"</span>;</div><div class="line">        <span class="comment">#减少点击劫持</span></div><div class="line">        <span class="attribute">add_header</span> X-Frame-Options DENY;</div><div class="line">        <span class="comment">#禁止服务器自动解析资源类型</span></div><div class="line">        <span class="attribute">add_header</span> X-Content-Type-Options nosniff;</div><div class="line">        <span class="comment">#防XSS攻擊</span></div><div class="line">        <span class="attribute">add_header</span> X-Xss-Protection <span class="number">1</span>;</div><div class="line">        <span class="comment">#...</span></div></pre></td></tr></table></figure>
<h3 id="HTTP-HTTPS混合服务器配置"><a href="#HTTP-HTTPS混合服务器配置" class="headerlink" title="HTTP/HTTPS混合服务器配置"></a>HTTP/HTTPS混合服务器配置</h3><p>可以同时配置 HTTP 和 HTTPS 服务器：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>              <span class="number">80</span>;</div><div class="line">    <span class="attribute">listen</span>              <span class="number">443</span> ssl;</div><div class="line">    <span class="attribute">server_name</span>         www.example.com;</div><div class="line">    <span class="attribute">ssl_certificate</span>     www.example.com.crt;</div><div class="line">    <span class="attribute">ssl_certificate_key</span> www.example.com.key;</div><div class="line">    <span class="comment">#...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>在 0.7.14 版本之前，在独立的 server 端口中是不能选择性开启 SSL 的</strong>。如上面的例子，SSL 只能通过使用 <a href="//nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl">ssl</a> 命令为单个 server 端口开启</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>              <span class="number">443</span>;</div><div class="line">    <span class="attribute">server_name</span>         www.example.com;</div><div class="line">    <span class="attribute">ssl_certificate</span>     www.example.com.crt;</div><div class="line">    <span class="attribute">ssl_certificate_key</span> www.example.com.key;</div><div class="line">    <span class="comment">#ssl命令开启 https</span></div><div class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</div><div class="line">    <span class="comment">#...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因此没有辦法设置 HTTP/HTTPS 混合服务器。于是 Nginx 新增了监听命令 <a href="//nginx.org/en/docs/http/ngx_http_core_module.html#listen">listen</a>参数 <code>ssl</code> 來解决这个问题，<strong>Nginx 現代版本的<code>ssl</code>命令并不推荐使用</strong></p>
<h3 id="基于服务器名称（name-based）的-HTTPS-服务器"><a href="#基于服务器名称（name-based）的-HTTPS-服务器" class="headerlink" title="基于服务器名称（name-based）的 HTTPS 服务器"></a>基于服务器名称（name-based）的 HTTPS 服务器</h3><p>一个常见的问题就是当使用同一个 IP 地址去配置两个或更多的 HTTPS 服务器的时候，出现证书不匹配的情況：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>          <span class="number">443</span> ssl;</div><div class="line">    <span class="attribute">server_name</span>     www.example.com;</div><div class="line">    <span class="attribute">ssl_certificate</span> www.example.com.crt;</div><div class="line">    <span class="comment">#...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>          <span class="number">443</span> ssl;</div><div class="line">    <span class="attribute">server_name</span>     www.example.org;</div><div class="line">    <span class="attribute">ssl_certificate</span> www.example.org.crt;</div><div class="line">    <span class="comment">#...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种情况下浏览器会获取默认的服务器证书（如上面例子的 www.example.com.crt）而忽视请求的服务器名，如输入网址：<code>www.example.org</code>，服务器会发送 <code>www.example.com.crt</code> 的证书到客戶端，而不是 <code>www.exaple.org.crt</code>。</p>
<p>这是因为 SSL 协议行为所致，SSL 连接在浏览器发送 HTTP 请求之前就被建立，Nginx 并不知道被请求的服务器名字，因此 Nginx 只会提供默认的服务器证书。</p>
<p><img src="//misc.aotu.io/mihanX/nginx-https/img4.jpg" alt="证书获取异常"></p>
<p>解決这个问题最原始最有效的方法就是为每个 HTTPS 服务器分配独立的 IP 地址：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>          <span class="number">192.168.1.1:443</span> ssl;</div><div class="line">    <span class="attribute">server_name</span>     www.example.com;</div><div class="line">    <span class="attribute">ssl_certificate</span> www.example.com.crt;</div><div class="line">    <span class="comment">#...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>          <span class="number">192.168.1.2:443</span> ssl;</div><div class="line">    <span class="attribute">server_name</span>     www.example.org;</div><div class="line">    <span class="attribute">ssl_certificate</span> www.example.org.crt;</div><div class="line">    <span class="comment">#...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="更多解決方案"><a href="#更多解決方案" class="headerlink" title="更多解決方案"></a>更多解決方案</h4><p>除此之外，官方还介绍了两个方法：<strong>泛域证书</strong>和<strong>域名指示（SNI）</strong></p>
<p>其实 OpenSSL 在 <strong>0.9.8f版本</strong>就支持 SNI 了，只要在安裝的时候加上 <code>--enable-tlsext</code> 选项就可以。到了 <strong>0.9.8j版本</strong>，这个选项在安裝的时候会默认启用。如果创建 Nginx 的时候支持 SNI，可以在 Nginx 版本信息查到以下的字段：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TLS SNI support enabled</div></pre></td></tr></table></figure>
<p>因此，如果较新版本的 Nginx 使用默认的 OpenSSL 库，<strong>是不存在使用 HTTPS 同时支持基于名字的虚拟主机的时候同 IP 不同域名证书不匹配的问题</strong>。</p>
<p><em>注意：即使新版本的 Nginx 在创建时支持了 SNI，如果 Nginx 动态加载不支持 SNI 的 OpenSSL 库的话，SNI 扩展将不可用</em></p>
<p>有兴趣的朋友可以看下：</p>
<p><a href="http://nginx.org/en/docs/http/configuring_https_servers.html" target="_blank" rel="external">An SSL certificate with several names &amp;&amp; Server Name Indication</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>OK，我们简单总结一下在 Nginx 下配置 HTTPS 的关键要点：</p>
<ul>
<li><p><strong>获得 SSL 证书</strong></p>
<ul>
<li>通过 OpenSSL 命令获得 example.key 和 example.csr 文件</li>
<li>提供 example.csr 文件给第三方可靠证书颁发机构，选择适合的安全级别证书并签署，获得 example.crt 文件</li>
</ul>
</li>
<li><p><strong>通过 listen 命令 SSL 参数以及引用 example.key 和 example.crt 文件完成 HTTPS 基础配置</strong></p>
</li>
<li><p><strong>HTTPS优化</strong></p>
<ul>
<li>减少 CPU 运算量<ul>
<li>使用 keepalive 长连接</li>
<li>复用 SSL 会话参数</li>
</ul>
</li>
<li>使用 HSTS 策略强制浏览器使用 HTTPS 连接<ul>
<li>添加 Strict-Transport-Security 头部信息</li>
<li>使用 HSTS 预加载列表（HSTS Preload List）</li>
</ul>
</li>
<li>加强 HTTPS 安全性<ul>
<li>使用迪菲-赫尔曼密钥交换（D-H，Diffie–Hellman key exchange）方案</li>
<li>添加 X-Frame-Options 头部信息，减少点击劫持</li>
<li>添加 X-Content-Type-Options 头部信息，禁止服务器自动解析资源类型</li>
<li>添加 X-Xss-Protection 头部信息，防XSS攻击</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>HTTP/HTTPS混合服务器配置</strong></p>
</li>
<li><p><strong>基于服务器名称（name-based）的 HTTPS 服务器</strong></p>
<ul>
<li>为每个 HTTPS 服务器分配独立的 IP 地址</li>
<li>泛域证书</li>
<li>域名标识（SNI） </li>
</ul>
</li>
</ul>
<p>其实简单的个人博客，如果没有敏感数据交互的话，使用 http 协议通讯，一般都夠用了，页面速度还会更快，但正如文章开头所说，戴上『绿锁』，更专业更安全~~有兴趣的同学可以去深入了解折腾下：）</p>
<p><img src="//misc.aotu.io/mihanX/nginx-https/img3.jpg" alt="嘻~~"></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;p&gt;Chrome 浏览器地址栏标志着 HTTPS 的绿色小锁头从心理层面上可以给用户专业安全的心理暗示，本文简单总结一下如何在 Nginx 配置 HTTPS 服务器，让自己站点上『绿锁』。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//misc.a
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Nginx" scheme="https://aotu.io/tags/Nginx/"/>
    
      <category term="HTTPS" scheme="https://aotu.io/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>跟着老司机玩转Node命令行</title>
    <link href="https://aotu.io/notes/2016/08/09/command-line-development/"/>
    <id>https://aotu.io/notes/2016/08/09/command-line-development/</id>
    <published>2016-08-09T01:30:12.000Z</published>
    <updated>2016-10-20T07:06:32.447Z</updated>
    
    <content type="html"><![CDATA[<p>当我们使用Node.js原生开发命令行程序时或许会有一定的门槛，但通过依赖一些开源模块却能够帮助我们简化命令行开发，从而达到事半功倍的效果。本文主要通过一些示例来演示commander.js、inquirer.js的一些基本玩法。下面老司机将带着我，我带着大家一起来玩转Node命令行吧！</p>
<h2 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h2><ul>
<li>本文部分代码参考自凹凸实验室前端流程工具 <a href="https://github.com/o2team/athena" target="_blank" rel="external">athena</a></li>
<li>本文需要一点Node基础</li>
<li>本文涉及到一些es6语法，并且请确保Node版本在4.0及以上</li>
<li>不属于本文的知识点一秒带过哈</li>
</ul>
<p><img src="//misc.aotu.io/yangzicheng/command-line-development/command-line-development_8.jpg" alt=""></p>
<h2 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h2><p>1.新建一个项目，打开cmd命令，执行npm init,创建package.json<br>2.在根目录下创建一个不带后缀的系统文件，作为主入口文件<br>3.安装本文所涉及到的模块commander、inquirer、chalk，在根目录下执行 npm install commander inquirer chalk  –save-dev,这时候会看到根目录下多了一个node_modules目录，里面有刚刚安装的几个模块，package.json里面devDependencies依赖了这几个模块，如下图</p>
<p><strong>根目录</strong><br><img src="//misc.aotu.io/yangzicheng/command-line-development/command-line-development_1.jpg" alt=""></p>
<p><strong>package.json</strong><br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"app"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"玩转命令行开发"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"ykg"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"chalk"</span>: <span class="string">"^1.1.3"</span>,</div><div class="line">    <span class="attr">"commander"</span>: <span class="string">"^2.9.0"</span>,</div><div class="line">    <span class="attr">"inquirer"</span>: <span class="string">"^1.1.2"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="主体内容"><a href="#主体内容" class="headerlink" title="主体内容"></a>主体内容</h2><p>我们先来认识一下commander吧</p>
<h3 id="commander-简介"><a href="#commander-简介" class="headerlink" title="commander 简介"></a>commander 简介</h3><p>呃~~官方时刻到了哈：commander灵感来自 Ruby，它提供了用户命令行输入和参数解析的强大功能，可以帮助我们简化命令行开发。<br>根据其官方的描述，具有以下特性:</p>
<ul>
<li>参数解析</li>
<li>强制多态</li>
<li>可变参数</li>
<li>Git 风格的子命令</li>
<li>自动化帮助信息</li>
<li>自定义帮助等</li>
</ul>
<p><img src="//misc.aotu.io/yangzicheng/command-line-development/command-line-development_9.jpg" alt=""></p>
<h3 id="一个简单的实例"><a href="#一个简单的实例" class="headerlink" title="一个简单的实例"></a>一个简单的实例</h3><p>下面我们通过一个简单的实例来了解一下它的基本语法吧<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</div><div class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</div><div class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</div><div class="line"></div><div class="line">program</div><div class="line">    .command(<span class="string">'module'</span>)</div><div class="line">    .alias(<span class="string">'m'</span>)</div><div class="line">    .description(<span class="string">'创建新的模块'</span>)</div><div class="line">    .option(<span class="string">'-a, --name [moduleName]'</span>, <span class="string">'模块名称'</span>)</div><div class="line">    .action(<span class="function"><span class="params">option</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>)</div><div class="line">        <span class="comment">//为什么是Hello World 给你个眼神，自己去体会...</span></div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">program.parse(process.argv)</div></pre></td></tr></table></figure></p>
<p>执行一下看看效果吧！$ node app.js app (请各位看官自行体会这种执行方式哈)<br>//输出结果 Hello World</p>
<h3 id="全局方式运行"><a href="#全局方式运行" class="headerlink" title="全局方式运行"></a>全局方式运行</h3><p>我们可以通过一些配置，然后以 <strong>模块名 + command</strong>的方式运行，实现这种方式分三步走：</p>
<p><img src="//misc.aotu.io/yangzicheng/command-line-development/command-line-development_10.jpg" alt=""></p>
<ul>
<li><p>配置package.json的bin字段。bin字段有啥用呢？它可以用来<strong>存放一个可执行的文件</strong>，如下配置所示</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"bin"</span>: &#123;</div><div class="line">    <span class="string">"app"</span>: <span class="string">"app"</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>执行npm link。它将会把<strong>app</strong>这个字段复制到npm的全局模块安装文件夹node_modules内，并创建符号链接（symbolic link，软链接），也就是<strong>将 app 的路径加入环境变量 PATH</strong></p>
</li>
<li>在主入口文件的最上方添加代码 <strong>#! /usr/bin/env node</strong>, 表明这是一个可执行的应用，如下所示<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /usr/bin/env node </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</div><div class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</div><div class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</div><div class="line"></div><div class="line">program</div><div class="line">    .command(<span class="string">'module'</span>)</div><div class="line">    .alias(<span class="string">'m'</span>)</div><div class="line">    .description(<span class="string">'创建新的模块'</span>)</div><div class="line">    .option(<span class="string">'-a, --name [moduleName]'</span>, <span class="string">'模块名称'</span>)</div><div class="line">    .action(<span class="function"><span class="params">option</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>)</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">program.parse(process.argv)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>做好了以上三步后，然后运行$ app module<br>//输出结果 Hello World</p>
<p><img src="//misc.aotu.io/yangzicheng/command-line-development/command-line-development_11.jpg" alt=""></p>
<h3 id="commander-API"><a href="#commander-API" class="headerlink" title="commander API"></a>commander API</h3><p>我们逐个来看看各个属性的功能，一看秒懂哦</p>
<ul>
<li><strong>command</strong> – 定义命令行指令，后面可跟上一个name，用空格隔开，如 .command( ‘app [name] ‘)</li>
<li><strong>alias</strong> – 定义一个更短的命令行指令 ，如执行命令<strong>$ app m</strong> 与之是等价的</li>
<li><strong>description</strong> – 描述，它会在help里面展示</li>
<li><strong>option</strong> – 定义参数。它接受四个参数，在第一个参数中，它可输入短名字 -a和长名字–app ,使用 <strong>|</strong> 或者<strong>,</strong>分隔，在命令行里使用时，这两个是等价的，区别是后者可以在程序里通过回调获取到；第二个为描述, 会在 help 信息里展示出来；第三个参数为回调函数，他接收的参数为一个string，有时候我们需要一个命令行创建多个模块，就需要一个回调来处理；第四个参数为默认值</li>
<li><strong>action</strong> – 注册一个callback函数,这里需注意<strong>目前回调不支持let声明变量</strong></li>
<li><strong>parse</strong> – 解析命令行</li>
</ul>
<p><img src="//misc.aotu.io/yangzicheng/command-line-development/command-line-development_12.jpg" alt=""></p>
<h3 id="生成帮助信息"><a href="#生成帮助信息" class="headerlink" title="生成帮助信息"></a>生成帮助信息</h3><h4 id="自动生成"><a href="#自动生成" class="headerlink" title="自动生成"></a>自动生成</h4><p>执行 $ app m –help</p>
<p><img src="//misc.aotu.io/yangzicheng/command-line-development/command-line-development_2.jpg" alt=""></p>
<p>它会自动将description、option的信息显示在help中</p>
<h4 id="自定义生成"><a href="#自定义生成" class="headerlink" title="自定义生成"></a>自定义生成</h4><p>我们也可以通过自定义的方式生成帮助信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</div><div class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</div><div class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</div><div class="line"></div><div class="line">program</div><div class="line">    .command(<span class="string">'module [moduleName]'</span>)</div><div class="line">    .alias(<span class="string">'m'</span>)</div><div class="line">    .description(<span class="string">'创建新的项目'</span>)</div><div class="line">    .option(<span class="string">'-a, --name [moduleName]'</span>, <span class="string">'模块名称'</span>)</div><div class="line">    .action(<span class="function"><span class="params">option</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>)</div><div class="line">    &#125;)</div><div class="line">    <span class="comment">//自定义帮助信息</span></div><div class="line">    .on(<span class="string">'--help'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'  Examples:'</span>)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">''</span>)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'$ app module moduleName'</span>)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'$ app m moduleName'</span>)</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">program.parse(process.argv)</div></pre></td></tr></table></figure></p>
<p>执行$ app m –help</p>
<p><img src="//misc.aotu.io/yangzicheng/command-line-development/command-line-development_3.jpg" alt=""></p>
<h3 id="inquirer"><a href="#inquirer" class="headerlink" title="inquirer"></a>inquirer</h3><p>在开发的过程中，我们需要频繁的跟命令行进行交互，借助<strong>inquirer</strong>这个模块就能轻松实现，它提供了用户界面和查询会话流程。它的语法是这样的（直接从<a href="https://www.npmjs.com/package/inquirer" target="_blank" rel="external">官方</a>拷贝~~）<br><img src="//misc.aotu.io/yangzicheng/command-line-development/command-line-development_16.jpg" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</div><div class="line">inquirer.prompt([<span class="comment">/* Pass your questions in here */</span>]).then(<span class="function"><span class="keyword">function</span> (<span class="params">answers</span>) </span>&#123;</div><div class="line">    <span class="comment">// Use user feedback for... whatever!! </span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>需注意在旧的语法中，采用的是传统的function回调<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</div><div class="line">inquirer.prompt([<span class="comment">/* Pass your questions in here */</span>], <span class="function"><span class="keyword">function</span> (<span class="params">answers</span>) </span>&#123;</div><div class="line">    <span class="comment">// Use user feedback for... whatever!! </span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="inquirer功能简介"><a href="#inquirer功能简介" class="headerlink" title="inquirer功能简介"></a>inquirer功能简介</h4><ul>
<li>input–输入</li>
<li>validate–验证</li>
<li>list–列表选项</li>
<li>confirm–提示</li>
<li>checkbox–复选框等等</li>
</ul>
<p><img src="//misc.aotu.io/yangzicheng/command-line-development/command-line-development_9.jpg" alt=""></p>
<p>这个模块相当简单，看个栗子就全明白了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /usr/bin/env node </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</div><div class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</div><div class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</div><div class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</div><div class="line"></div><div class="line">program</div><div class="line">    .command(<span class="string">'module'</span>)</div><div class="line">    .alias(<span class="string">'m'</span>)</div><div class="line">    .description(<span class="string">'创建新的模块'</span>)</div><div class="line">    .option(<span class="string">'--name [moduleName]'</span>)</div><div class="line">    .option(<span class="string">'--sass'</span>, <span class="string">'启用sass'</span>)</div><div class="line">    .option(<span class="string">'--less'</span>, <span class="string">'启用less'</span>)</div><div class="line">    .action(<span class="function"><span class="params">option</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">var</span> config = _.assign(&#123;</div><div class="line">            <span class="attr">moduleName</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">description</span>: <span class="string">''</span>,</div><div class="line">            <span class="attr">sass</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">less</span>: <span class="literal">false</span></div><div class="line">        &#125;, option)</div><div class="line">        <span class="keyword">var</span> promps = []</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(config.moduleName !== <span class="string">'string'</span>) &#123;</div><div class="line">              promps.push(&#123;</div><div class="line">                <span class="attr">type</span>: <span class="string">'input'</span>,</div><div class="line">                <span class="attr">name</span>: <span class="string">'moduleName'</span>,</div><div class="line">                <span class="attr">message</span>: <span class="string">'请输入模块名称'</span>,</div><div class="line">                <span class="attr">validate</span>: <span class="function"><span class="keyword">function</span> (<span class="params">input</span>)</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(!input) &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="string">'不能为空'</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">                &#125;</div><div class="line">              &#125;)</div><div class="line">        &#125; </div><div class="line"></div><div class="line">        <span class="keyword">if</span>(config.description !== <span class="string">'string'</span>) &#123;</div><div class="line">            promps.push(&#123;</div><div class="line">                <span class="attr">type</span>: <span class="string">'input'</span>,</div><div class="line">                <span class="attr">name</span>: <span class="string">'moduleDescription'</span>,</div><div class="line">                <span class="attr">message</span>: <span class="string">'请输入模块描述'</span></div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(config.sass === <span class="literal">false</span> &amp;&amp; config.less === <span class="literal">false</span>) &#123;</div><div class="line">          promps.push(&#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'list'</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">'cssPretreatment'</span>,</div><div class="line">            <span class="attr">message</span>: <span class="string">'想用什么css预处理器呢'</span>,</div><div class="line">            <span class="attr">choices</span>: [</div><div class="line">              &#123;</div><div class="line">                <span class="attr">name</span>: <span class="string">'Sass/Compass'</span>,</div><div class="line">                <span class="attr">value</span>: <span class="string">'sass'</span></div><div class="line">              &#125;,</div><div class="line">              &#123;</div><div class="line">                <span class="attr">name</span>: <span class="string">'Less'</span>,</div><div class="line">                <span class="attr">value</span>: <span class="string">'less'</span></div><div class="line">              &#125;</div><div class="line">            ]</div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        inquirer.prompt(promps).then(<span class="function"><span class="keyword">function</span> (<span class="params">answers</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(answers)</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">    .on(<span class="string">'--help'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'  Examples:'</span>)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">''</span>)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'$ app module moduleName'</span>)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'$ app m moduleName'</span>)</div><div class="line">    &#125;) </div><div class="line"></div><div class="line">program.parse(process.argv)</div></pre></td></tr></table></figure>
<p>执行命令 $ app m</p>
<p><img src="//misc.aotu.io/yangzicheng/command-line-development/command-line-development_4.jpg" alt=""></p>
<p>以上为了代码组织方便使用了一个promps数组来接收参数以及借助了<strong>lodash</strong>模块的<strong>assign</strong>方法用来合并对象，lodash不属于本章的知识点哈，这里给大家提供一个<a href="http://www.kancloud.cn/wizardforcel/lodash-doc-45/144108" target="_blank" rel="external">中文API文档</a>仅供大家学习参考</p>
<h3 id="chalk"><a href="#chalk" class="headerlink" title="chalk"></a>chalk</h3><p>最后我们引入<a href="https://www.npmjs.com/package/chalk" target="_blank" rel="external">chalk</a>这个<strong>美化命令行</strong>的模块，它具有轻量级、高性能、学习成本低等特点。继续在以上栗子中引入chalk进行输出</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /usr/bin/env node </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</div><div class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</div><div class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</div><div class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</div><div class="line"></div><div class="line">program</div><div class="line">    .command(<span class="string">'module'</span>)</div><div class="line">    .alias(<span class="string">'m'</span>)</div><div class="line">    .description(<span class="string">'创建新的模块'</span>)</div><div class="line">    .option(<span class="string">'--name [moduleName]'</span>)</div><div class="line">    .option(<span class="string">'--sass'</span>, <span class="string">'启用sass'</span>)</div><div class="line">    .option(<span class="string">'--less'</span>, <span class="string">'启用less'</span>)</div><div class="line">    .action(<span class="function"><span class="params">option</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">var</span> config = _.assign(&#123;</div><div class="line">            <span class="attr">moduleName</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">description</span>: <span class="string">''</span>,</div><div class="line">            <span class="attr">sass</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">less</span>: <span class="literal">false</span></div><div class="line">        &#125;, option)</div><div class="line">        <span class="keyword">var</span> promps = []</div><div class="line">        </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">''</span>)</div><div class="line">        <span class="built_in">console</span>.log(chalk.red(<span class="string">'开启前端工程化之路'</span>))     </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">''</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(config.moduleName !== <span class="string">'string'</span>) &#123;</div><div class="line">              promps.push(&#123;</div><div class="line">                <span class="attr">type</span>: <span class="string">'input'</span>,</div><div class="line">                <span class="attr">name</span>: <span class="string">'moduleName'</span>,</div><div class="line">                <span class="attr">message</span>: <span class="string">'请输入模块名称'</span>,</div><div class="line">                <span class="attr">validate</span>: <span class="function"><span class="keyword">function</span> (<span class="params">input</span>)</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(!input) &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="string">'不能为空'</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">                &#125;</div><div class="line">              &#125;)</div><div class="line">        &#125; </div><div class="line"></div><div class="line">        <span class="keyword">if</span>(config.description !== <span class="string">'string'</span>) &#123;</div><div class="line">            promps.push(&#123;</div><div class="line">                <span class="attr">type</span>: <span class="string">'input'</span>,</div><div class="line">                <span class="attr">name</span>: <span class="string">'moduleDescription'</span>,</div><div class="line">                <span class="attr">message</span>: <span class="string">'请输入模块描述'</span></div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(config.sass === <span class="literal">false</span> &amp;&amp; config.less ===<span class="literal">false</span>) &#123;</div><div class="line">          promps.push(&#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'list'</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">'cssPretreatment'</span>,</div><div class="line">            <span class="attr">message</span>: <span class="string">'想用什么css预处理器呢'</span>,</div><div class="line">            <span class="attr">choices</span>: [</div><div class="line">              &#123;</div><div class="line">                <span class="attr">name</span>: <span class="string">'Sass/Compass'</span>,</div><div class="line">                <span class="attr">value</span>: <span class="string">'sass'</span></div><div class="line">              &#125;,</div><div class="line">              &#123;</div><div class="line">                <span class="attr">name</span>: <span class="string">'Less'</span>,</div><div class="line">                <span class="attr">value</span>: <span class="string">'less'</span></div><div class="line">              &#125;</div><div class="line">            ]</div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        inquirer.prompt(promps).then(<span class="function"><span class="keyword">function</span> (<span class="params">answers</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(chalk.green(<span class="string">'收工咯'</span>))</div><div class="line">            <span class="built_in">console</span>.log(chalk.blue(<span class="string">'收工咯'</span>))</div><div class="line">            <span class="built_in">console</span>.log(chalk.blue.bgRed(<span class="string">'收工咯'</span>)) <span class="comment">//支持设置背景</span></div><div class="line">            <span class="built_in">console</span>.log(chalk.blue(answers))</div><div class="line">        &#125;)</div><div class="line">    &#125;) </div><div class="line">    .on(<span class="string">'--help'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'  Examples:'</span>)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">''</span>)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'$ app module moduleName'</span>)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'$ app m moduleName'</span>)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">program.parse(process.argv)</div></pre></td></tr></table></figure>
<p>执行命令 $ app m</p>
<p><img src="//misc.aotu.io/yangzicheng/command-line-development/command-line-development_5.jpg" alt=""></p>
<p>正如你所看到的输出结果，本篇文章收工咯，是不是so easy！</p>
<p><img src="//misc.aotu.io/yangzicheng/command-line-development/command-line-development_14.jpg" alt=""></p>
<blockquote>
<p>曾经在很长一段时间里，我一直不知道他们口中的老司机究竟是个什么梗。后来随着时间的拉长，以及在现实生活中对这个词所出现语境的理解，我的潜意识一度将它理解成了一个<img src="//misc.aotu.io/yangzicheng/command-line-development/command-line-development_15.jpg" alt="">的词汇(咦，这里咋显示不出来呢)…后来才知道真正的老司机指的是<strong>在各个网站、论坛里接触时间比较长，熟悉站内各种规则、内容以及技术、玩法，并且掌握着一定资源的老手，亦指在某些方面熟门熟路，资历较老，见识广，经验足的人…</strong></p>
</blockquote>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>凹凸实验室前端流程工具:  <a href="https://github.com/o2team/athena" target="_blank" rel="external">https://github.com/o2team/athena</a><br>博文: <a href="http://www.tuicool.com/articles/ZFNZjq" target="_blank" rel="external">http://www.tuicool.com/articles/ZFNZjq</a><br>commander: <a href="https://www.npmjs.com/package/commander" target="_blank" rel="external">https://www.npmjs.com/package/commander</a><br>inquirer: <a href="https://www.npmjs.com/package/inquirer" target="_blank" rel="external">https://www.npmjs.com/package/inquirer</a><br>chalk: <a href="https://www.npmjs.com/package/chalk" target="_blank" rel="external">https://www.npmjs.com/package/chalk</a><br>示例源码: <a href="https://github.com/yangzicheng/command-line" target="_blank" rel="external">https://github.com/yangzicheng/command-line</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们使用Node.js原生开发命令行程序时或许会有一定的门槛，但通过依赖一些开源模块却能够帮助我们简化命令行开发，从而达到事半功倍的效果。本文主要通过一些示例来演示commander.js、inquirer.js的一些基本玩法。下面老司机将带着我，我带着大家一起来玩转No
    
    </summary>
    
      <category term="NodeJS" scheme="https://aotu.io/cates/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="https://aotu.io/tags/NodeJS/"/>
    
      <category term="命令行" scheme="https://aotu.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="前端工程化" scheme="https://aotu.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="老司机" scheme="https://aotu.io/tags/%E8%80%81%E5%8F%B8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>带机器人上设计学校</title>
    <link href="https://aotu.io/notes/2016/08/05/robot-design-school/"/>
    <id>https://aotu.io/notes/2016/08/05/robot-design-school/</id>
    <published>2016-08-05T02:09:24.000Z</published>
    <updated>2016-10-20T07:06:32.446Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文译自 Jon Gold 的 <a href="http://www.jon.gold/2016/05/robot-design-school/" target="_blank" rel="external">Taking The Robots To Design School</a>，略有删减。</p>
</blockquote>
<p>大概在一年前，我开始尝试把「字体设计」和「人工智能」这两个东西结合起来。<br>现在是 2016 年了，我打算把脑子里的东西搬到网上来。部分原因是它实在是有趣，其次是我想作为日志，便于以后翻看。但最重要的是，我想更多人能读到这些东西。</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>自打我做设计师以来，我就被设计系统中数学的纯洁性所吸引。我一直很欣赏瑞士的设计。我一生中最爱的设计师或许就是 Karl Gerstner，他著有作品 <a href="https://runemadsen.com/blog/karl-gerstner-designing-programmes/" target="_blank" rel="external">programmatic design</a>。2011 年我在 Prismatic 做系统化的网页布局算法。然后 2014 年受到了 <a href="http://engineering.flipboard.com/2014/03/web-layouts/" target="_blank" rel="external">Flipboard’s 布局算法</a> 的启发，我开始把注意力转移到抽象化上，开始做一些 元-元-元-设计系统和工具，让人类设计师思维更开阔。</p>
<p>就这么到了 2015 春，我开始在 The Grid 工作——一个利用人工智能来建站的工具。介绍一下，这个工具某些地方跟 Squarespace 或者 Wix 挺像的，都可以让非设计师快速搭建起一个好看的网站。但不同的地方在于，它没有主题或者模板，而是根据内容，用精准的设计算法去设计网站，再呈现给用户。酷。这个是探索设计系统的好地方，我受命去把这个版式设计系统变得更好。</p>
<p>那是个开放性的理念，它让我变得对自己生涯有了更多的思考和有趣的探索。据我所知，我之前所做的版式设计系统的工作仍然在保密协议之内，但它实质上是针对人类的。对此我定义了自己的理念，我希望<strong>这个系统是可以认识、选择和根据人类设计专家的细微区别去应用排版。</strong></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>有时当我说「AI 文字设计」时候，别人以为我在设计新的自生成字体。那确实是很有意思的领域，但那个臆断是因为用词不当。澄清一下，在开始之前和你对这篇文章失望之前：</p>
<p><strong>版式设计</strong>（Typography）：字体的使用<br><strong>字体设计</strong>（Type design）：新字体的创造</p>
<p>谢谢 <a href="http://www.fontbureau.com/blog/clear-definitions/" target="_blank" rel="external">Stephen Coles</a> 对此简洁的定义。如果你对用神经网络设计字体感兴趣的话，不妨看下 Erik Bern 大神的 <a href="http://erikbern.com/2016/01/21/analyzing-50k-fonts-using-deep-neural-networks/" target="_blank" rel="external">Deep Fonts</a> 项目，大概对 50000 个字体进行视觉分析。所以说，「AI 文字设计」——让计算机做字体设计。</p>
<hr>
<p>设计一个能生成复杂专业的中心法则的人工智能系统，确实是有点挑战。这需要我在工作中，从一些基本法则里学习人工智能和相关的所有学科（我并没有计算机科学的背景，我是项目中唯一一个设计工程师）。记得那个时候，我每晚都会远离屏幕去 Pacific Heights 附近散步，看着日落，仔细琢磨那个项目的艰巨性。有一次走着走着，Alan Turing（译者注：艾伦·图灵，计算机之父）的一句话跳进了我的脑子里。</p>
<blockquote>
<p>与其说试着去写程序去模拟成年人的心智，为什么不试着去写个可以模拟小孩的呢？如果它受到适当的教育，它应该会获得一个成年人的大脑。<br>— Alan Turing, <a href="http://www.loebner.net/Prizef/TuringArticle.html" target="_blank" rel="external">Computing Machinery and Intelligence</a>, 1950</p>
</blockquote>
<p>与其说把设计当成一个整体去看，如果我把设计看成一个个基于人类设计师教育的模型呢？<br>我相信在这 65 年期间，那个方法论被 AI 纯粹者给推翻了。但作为混沌的开端，它看起来还是合理的。</p>
<h2 id="Part-1-学会去看"><a href="#Part-1-学会去看" class="headerlink" title="Part 1: 学会去看"></a>Part 1: 学会去看</h2><p>对于设计这个东西，你不用非要做设计师才能够触碰到它。在西方社会里，我们有数百年共通的视觉文化——我们先天就知道事物是怎么传达的，即便我们还不能去标记它。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-57-03.png" alt=""></p>
<blockquote>
<p>通过文字（和 Taylor Swift）来传达完全不同的情感</p>
</blockquote>
<p>平面设计的目的是去唤醒目标群体的情感——可以是设计师，但更多的是「普通群众」。就是那些喜欢聊颜色、图形的黑魔法和对字距泛泛而谈的外行人。但这不妨碍设计把信息传达给他们。如果一个普通人不能从设计中得到一些信号暗示的话，设计师就没有存在的必要了。非设计师不知不觉中，就能感受到设计带来的触动。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-56-54.png" alt=""></p>
<blockquote>
<p>它们分别传达不同的含义——如果没有，就没设计师这个专业</p>
</blockquote>
<p>但另一个角度来说，计算机，它们丝毫不懂得设计，一点点都不。对于计算机来说，字体就是一些 <code>.otf</code> 文件和还有字符串形式的字体名称。对于计算机来说，颜色就是一些十六进制、RGB 和 HSL 值。默认来说，计算机甚至不是一个非设计师人类的对手。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-56-39.png" alt=""></p>
<blockquote>
<p>我们用的这些工具它们根本不知道自己长什么样子</p>
</blockquote>
<p>对于计算机来说，它们只知道一些很卑微的字符串——最卑微的数据结构。但人类却有着非常强大的传达情感的方式。只是人类不能仅仅靠字体名称来做设计而已。因为我们可以看到它们和了解它们，所以计算机为什么不行呢？把我们的算法带到设计学校前，首先需要纠正这点。</p>
<p>设计学校提供了一个从情感到理性的映射——我们学到为什么事物在我们脑子里生成情绪反应，还有怎么利用那些思想去在别的事物上重现情感。为此我们学到了一些术语；学习了怎么辩别 <code>歌德体 (Grotesque)</code>、<code>人文字体 (Humanist)</code>、<code>迪东体 (Didone)</code> 和 <code>过渡字体 (Transitional)</code>、<code>德文尖角体 (Fraktur)</code> 还有 <code>圆体 (Rotunda)</code>。我们学会了怎么用一些元属性辩别一个字体：<code>x字高</code>、<code>笔画粗细对比</code>、<code>宽度</code>、<code>超过x高度部分 (ascenders)</code>、<code>字怀 (counters)</code>，而不仅仅是字体名称。</p>
<blockquote>
<p>抽象化的目的不是要得更含糊，而是利用它去创建一个能绝对描述准确的语义层。</p>
<ul>
<li>Edsger Dijkstra, <a href="https://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html" target="_blank" rel="external">The Humble Programmer</a>, 1972</li>
</ul>
</blockquote>
<p>这些新的、精确的术语让我们在工作中有规律可依。我们可以用像 <code>x字高</code>、<code>笔画粗细对比</code> 这些来标记字体。我们用这些特点来辩别字体，而不是简单的说，「哦我看它长得像这种字体」。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-56-26.png" alt=""></p>
<blockquote>
<p>字形的每一个部分，都有一个能准确描述的术语——插图来自 Ellen Lupton 的《Thinking With Type》</p>
</blockquote>
<p>我们要做的事情就是，让计算机用同样的概念去标记和选择字体。</p>
<p>乍一看，我们可以用手动去标记字体。但这带来两个问题：</p>
<ul>
<li>这很耗时，我出了名懒</li>
<li>这样既不够聪明，也不能规模化</li>
</ul>
<p>上面第一点足以说服我永远不去碰需要人工干预的事儿了。那怎么才能用算法去区分字体呢？</p>
<h3 id="栅格化尝试"><a href="#栅格化尝试" class="headerlink" title="栅格化尝试"></a>栅格化尝试</h3><p>我第一个反应就是观察下这些字体。有时可能会涉及一些计算机视觉和分类学。我想自己是否足够聪明去以截取部分的方式构建一些字符，然后弄明白它们长什么样儿。但我发现自己掉到一个全是像素的无底洞，一直在绘制字体和测量「模糊抗锯齿彩色印片法」输出的结果。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-56-16.jpg" alt=""></p>
<p>最开始有这个想法可以理解，但它效率并不是最高的。为了可以更快和重复地做上面这些操作，我用了 PhantomJS 和 HTML5 canvas 来做。但在 canvas 里画网页字体真的很蛋疼，而在 PhantomJS 里做些视觉复杂的事情也很麻烦。我花了 9 个月时间去尝试，期间经历过很多挫折；但我提起这件事的原因，是因为它让我发现……</p>
<h3 id="矢量图形！"><a href="#矢量图形！" class="headerlink" title="矢量图形！"></a>矢量图形！</h3><p>面对柏林残暴的高温天气和无数次对 PhantomJS 和位图的吐槽之后，我决定重新来过。之前我之所以对一个个像素点分析，是因为我把问题归结到「视觉」上，而计算机视觉就是以像素为主。但其实应该还有其他办法！</p>
<p>因为字体是矢量的，这让一切计算都变得非常简单。它就是几何学而已。所以我开始写一个小小的库去解析字体文件，把它们转化成 SVG，但我很快又发现了一个更好的东西。<a href="http://opentype.js.org/" target="_blank" rel="external">opentype.js</a> 是一个 OpenType 和 TrueType 文件的解析器，它让你在 Node.js 和浏览器环境中可以访问到矢量的字形，还包括所有的内嵌  opentype 数据。很好很强大！</p>
<p>有了这种靠谱的方式后，我开始写一些算法去标记那些功能了。看看这些例子：<br><img src="//misc.aotu.io/chuyik/2016-08-05-02-55-58.png" alt=""></p>
<h4 id="x字高"><a href="#x字高" class="headerlink" title="x字高"></a>x字高</h4><p>「x字高」指的是小写字母 x 的高度，这很明显。为了让所有字体都能得到一个可规范化的数值（字体可能被绘制成不同的大小），我们用大写字母 A 作为对比，记录比例值。这个数值大概在 ~0.45 - 0.8 之间，听上去蛮合理的。</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> x-height [font]</div><div class="line">  (/ (<span class="name">char-height</span> font <span class="symbol">:x</span>) (<span class="name">char-height</span> font <span class="symbol">:A</span>)))</div></pre></td></tr></table></figure>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-55-48.png" alt=""></p>
<h4 id="笔画粗细对比"><a href="#笔画粗细对比" class="headerlink" title="笔画粗细对比"></a>笔画粗细对比</h4><p>有些字符真的很能展示出字体的笔画粗细对比。特别是重叠 <code>O</code>、<code>o</code>、<code>A</code> 字符让我很清晰了解到字体是怎么分化的。这个对比可以用以下算法来表示：</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> contrast [font]</div><div class="line">  (/ (<span class="name">char-area</span> font <span class="symbol">:O</span>) (<span class="name">char-bounding-box</span> font <span class="symbol">:O</span>)))</div></pre></td></tr></table></figure>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-55-32.png" alt=""></p>
<h4 id="字体宽度"><a href="#字体宽度" class="headerlink" title="字体宽度"></a>字体宽度</h4><p>找一些最容易感受到字体宽度变化的字符，<code>M</code> 和 <code>N</code> 相对于其它而言，就是个很好的选择。但我们不能只是量它们的宽度（因为字体可以是不同尺寸），所以我就取了它们高宽比例的平均数。哈哈。</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> width-ratio [font]</div><div class="line">  (<span class="name">mean</span> [(/ (<span class="name">char-width</span> font <span class="symbol">:M</span>) (<span class="name">char-height</span> font <span class="symbol">:M</span>))</div><div class="line">         (/ (<span class="name">char-width</span> font <span class="symbol">:N</span>) (<span class="name">char-height</span> font <span class="symbol">:N</span>))]))</div></pre></td></tr></table></figure>
<p>然后发现一个有意思的事儿。我当时在给我的设计项目中找一些相似的字体。有想到 <code>Gotham</code>, <code>Proxima Nova</code> 和 <code>Avenir</code>；<code>Tiempos Headline</code> 和 <code>Leitura Display</code>；<code>San Francisco</code>, <code>Aktiv Grotesk</code> 和 <code>Helvetica</code>; <code>Aperçu</code>, <code>Patron</code> 和 <code>Maison Neue</code> 这些组合。</p>
<p>按照经验来说，搭配字体时都会找一些有笔画粗细差异的字体。像 <code>Gotham</code> 和 <code>Proxima Nova</code> 搭配比较少见，但如果 <code>Gotham</code> 搭配一个衬线字体就会有意思得多。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-55-19.png" alt=""></p>
<blockquote>
<p>这是三种人类设计师觉得相似的字体。但计算机怎么看呢？</p>
</blockquote>
<p>可是有些时候你想要找特定属性相近的字体。比如说，你可能会想要搭配一些x字高差不多的、笔画粗细接近的字体。</p>
<p>所以我弄了一个「相似度评分」，用来展示任意字体属性组合的欧氏距离。默认它表示每个字体属性之前的距离，但它也可以用来表示字体的一些差异，像 <code>x字高</code> 和 <code>笔画粗细对比</code>。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-50-27.png" alt=""></p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> similarity [x y &amp; attrs]</div><div class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">empty?</span></span> attrs)</div><div class="line">        (<span class="name"><span class="builtin-name">recur</span></span> x y [<span class="symbol">:x-height</span> <span class="symbol">:contrast</span> <span class="symbol">:width</span>])</div><div class="line">        (<span class="name">euclidean-distance</span> (<span class="name"><span class="builtin-name">map</span></span> x attrs) (<span class="name"><span class="builtin-name">map</span></span> y attrs))))</div><div class="line"></div><div class="line">(<span class="name">similarity</span> helvetica aktiv-grotesk [<span class="symbol">:x-height</span> <span class="symbol">:contrast</span>]) <span class="comment">;; etc</span></div></pre></td></tr></table></figure>
<p>在写了这么多算法之后，我在一些测试数据上跑了一下，把数据比例缩小到 0 和 1 之间，将结果绘制成了表格。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-54-45.png" alt=""></p>
<blockquote>
<p>把 8 个字体按照与「Proxima Nova」的相似度排序</p>
</blockquote>
<p>这个结果很理想！根据相似度排序之后，发现 <code>Proxima Nova</code> 和 <code>Gotham</code> 确实是最像的，而和 <code>Didot</code> 差异最大。这符合我的预期，但能用代码表示出来这很棒。</p>
<p>但当然了，只有 9 个字体不足以让人兴奋，所以我很残暴地把 Google Fonts 上的所有字体上都跑了一遍。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-53-23.png" alt=""></p>
<blockquote>
<p>对比超过 800 个字体</p>
</blockquote>
<p>这些结果再次说明了我的代码是对的。看字体的预览效果和它们的得分，我们可知这些数值是匹配的——赞！</p>
<p>但 <code>&lt;table&gt;</code> 并不是一个字体系统，所以我继续研究我的设计学校初级理论：规则。</p>
<h2 id="Part-2-基于规则的系统"><a href="#Part-2-基于规则的系统" class="headerlink" title="Part 2: 基于规则的系统"></a>Part 2: 基于规则的系统</h2><p>设计是一连串的规则，不管你意识到这点没有。有一些很简单明了的规则：一行文字应该在 66 个字宽左右，文字颜色应该有一定对比度便于阅读。文章段落不该出现寡行或者川流（译者注：rivers, 即纵向裂缝）；字体缩放比例的不同削弱了字体间的反差。这些都是显而易见的规则，我们可以很容易在书上找到。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-53-47.jpg" alt=""></p>
<p>但也有一些隐含的规则。这些隐含的规则是我们设计师经验的总结。我们接手的每个项目、每件事都可能做得更好或者更差；但每个奇淫技巧我们都记得。虽然没有万能的解决方案，但我们仍可以挽起袖子去不断探索。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-54-00.jpg" alt=""></p>
<p>即使是那些嘲笑现代主义设计的人，他们所在的职业也会有一些人不合常规。David Carson 有着他自己的一套，Neville Brody 也是。他们也许不是十分正统，也不会被写进书里，但我们每个人自己身上都有一套专属的规则。框架被用来处理设计，它有着一系列可以把设计需求变成可交付物的方法。这或许不是表面可见的东西，但我们可以去发掘一下。</p>
<p>在基于规则的系统前提之下，我提供了一些面向设计师的接口，可以用来创建规则。我受到了像 <a href="https://github.com/clojure/core.logic" target="_blank" rel="external">core.logic</a> 和 <a href="http://pqdtopen.proquest.com/search.html#abstract?dispub=3380156" target="_blank" rel="external">miniKanren</a> 这些逻辑编程程序库的影响后，就开始想让一个系统变得<code>声明式(Declarative)</code>和<code>组合式(Compositional)</code>。</p>
<p>如果听上去很抽象，那么给你看看这些我们都用的基于条件的程序：</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-54-22.png" alt=""></p>
<blockquote>
<p>这是两个常见的组合式、基于条件的查找器。酷。</p>
</blockquote>
<p>所以这很酷——我们可以指定一些元规则像「给我找到有这几种属性的字体」，而不是说「给我找到这个字体、那个字体」，以更高的层面去理解字体。「根据这种新闻标题字体，给我根据这些属性搭配文章正文」、「如果像这种字体展现在页面上，就不要搭配像那种字体」。我想实际实现的规则不会有理论上那么有趣（因为规则可以被调整）；但大意就是以更高的层面去探讨字体，而不是只看字体的名字。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-57-20.png" alt=""></p>
<blockquote>
<p>*<em>那个字体</em>*</p>
</blockquote>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> small-x-height?</div><div class="line">  [font]</div><div class="line">    (<span class="name"><span class="builtin-name">&lt;=</span></span> (<span class="name">font</span> <span class="symbol">:x-height</span>)</div><div class="line">        <span class="number">0.75</span>))</div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> too-similar?</div><div class="line">  [a b min &amp; attrs]</div><div class="line">    (<span class="name"><span class="builtin-name">&gt;=</span></span> min</div><div class="line">        (<span class="name">similarity</span> a b attrs)))</div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> legible-serif</div><div class="line">  [font]</div><div class="line">    (<span class="name"><span class="builtin-name">and</span></span> (<span class="name"><span class="builtin-name">=</span></span> <span class="symbol">:serif</span> (<span class="name">font</span> <span class="symbol">:formality</span>))</div><div class="line">         (<span class="name"><span class="builtin-name">not</span></span> (<span class="name">small-x-height</span> font))))</div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> pair</div><div class="line">  <span class="string">"given a display font, find a legible</span></div><div class="line">  serif for the body that isn't too similar"</div><div class="line">  [library display]</div><div class="line">  (<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> library</div><div class="line">    (<span class="name"><span class="builtin-name">filter</span></span> legible-serif)</div><div class="line">    (<span class="name"><span class="builtin-name">filter</span></span></div><div class="line">      (<span class="name"><span class="builtin-name">fn</span></span> [body]</div><div class="line">        (<span class="name"><span class="builtin-name">not</span></span> (<span class="name">too-similar</span> display body <span class="number">0.35</span>))))))</div></pre></td></tr></table></figure>
<p>上面这些东西的目的就是暴露一个接口给设计师，去创建和调整被添加到系统的规则。但很快我意识到自己把这个模型很重要的一部分给忘了…</p>
<h2 id="Part-3-宏观观察"><a href="#Part-3-宏观观察" class="headerlink" title="Part 3: 宏观观察"></a>Part 3: 宏观观察</h2><p><img src="//misc.aotu.io/chuyik/2016-08-05-02-57-33.png" alt=""></p>
<p>创建这些规则变得越来越手动化，所以我想自己对这个行业的理解，寻找一个解决方案，理论和实践相结合。这就是我的模型的第三部分：宏观观察。</p>
<p>作为一个学生，你会有一些行业领袖作为你的偶像，史书上的或者当代的。逐渐增长的设计知识让你能够把他们的创作和自己的关联起来；从你的事业轨迹中探寻到他们的作品。</p>
<p>在我学生时期，<code>Experimental Jetset</code>，<code>Spin</code> 和 <code>Non-Format</code> 这些是我一些最爱的工作室。在伦敦学校无数个下着毛毛细雨的冬天夜里，我凝视它们的作品，试着去了解他们怎么修炼自己的个人美学。认出他们所用的字体，然后研究为什么这些字体就可以。看他们所用的颜色，然后去搞清楚它们是从哪个调色板中得到的。我从来没有想过在真实项目中复制他们的作品，但像那种形式的观察在学习过程中肯定是有意义的。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-57-51.png" alt=""></p>
<blockquote>
<p>两个我最爱的网站（译者注：分别是 <a href="http://fontsinuse.com/" target="_blank" rel="external">Font In Use</a> 和 <a href="https://www.typewolf.com/" target="_blank" rel="external">Typewolf</a>）</p>
</blockquote>
<p>我把这种「在现实中观察设计师们用什么、做什么」的形式给模型化了。有一些我很喜欢的网站，它们收集了其它一些排版能给人灵感的网站，根据字体分类，构建出一个庞大的关系型数据库。这可以是一个体力活，但如果让爬虫把这些数据全部自动化抓给我就更好了。无论如何，几行代码加上大量的 HTTP 请求，最终我就可以拿到真实世界字体使用情况的庞大数据集。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-58-02.jpg" alt=""></p>
<p>把它们可视化最自然的方式就是用节点图吧，通过线连接相互被使用的字体。虽然这样看上去很晕，但是数据看上去很丰富，很吸引人。</p>
<p>但这个图表有一个和字体簿（译者注：FontBook，MacOS 的字体管理器）一样的问题。虽然这些关系很有趣，但它们仍然通过字体名称进行关联。如果你读过之前的章节，疑惑机器学习会进入到哪一个人类衍生出来的相对狭隘的系统的话，那么这就是了。通过创建一个能分析任意字体和基于几何特性绘制出图表的系统，我们就可以把关系从字体名称转移到字体富属性上了。</p>
<p>我们可以通过查询来找出一些匹配的字体，但也可以遍历图表去找到许多相似的有意思的相关字体。我们可以看到一些字体组变得越来越流行，但可以看出是因为它们有着一些特定的字体属性。这个图表告诉了我们哪些字体是流行的，但我们的几何系统告诉了我们为什么流行。</p>
<p>通过看一些设计博客，你很容易了解到 <code>Aperçu</code>, <code>Maison Neue</code>, <code>GT Walsheim</code> 和 <code>LL Circular</code> 这些字体很流行。但对我而言，通过一个系统去找出字体搭配就更有意思了。这个系统可以知道为什么一些字体会流行起来，通过他对排版的知识也可以去预估未来设计的趋势。它或许可以提出一些人类想不到的，但看上去貌似合理的字体组合。</p>
<h2 id="Part-4-微观观察"><a href="#Part-4-微观观察" class="headerlink" title="Part 4: 微观观察"></a>Part 4: 微观观察</h2><p>如果把这个行业当成一个整体，以一个高的层面去构建我们对潮流趋势的理解，那么去深入了解其它设计师也是很重要的。了解他们怎么做的，观察他们做出选择的过程。他们尝试过的方法，他们放弃的、保留着的东西。不断询问，留心他们解决问题的技巧。</p>
<p>在我们学生阶段、实习阶段、甚至是刚当设计师那会儿，就学会了怎么去做上面这些事情。最开始我们经常和一些年长的设计师打交道。我们从一些同行和大师中，学到了很多东西。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-58-16.jpg" alt=""></p>
<blockquote>
<p>英国瑞文斯博学院。设计师在忙活。</p>
</blockquote>
<p>作为人类，我们会以个体、小组和更大的社区形式，去为其他设计师创造一些模范。比如这些在工作室氛围中形成的文化基因，和一些设计师群体聚在一起，对外分享的一些思想火花。所有伦敦的设计学校，基本上就是「瑞文斯博风格」的学校和金斯顿大学、切尔西大学、伦敦传媒学院和中央圣马丁艺术与设计学院这些学校的较量。但也有「伦敦风」、英伦风和欧洲风这些不同风格群体。像更远的，「<a href="http://yalegraphicdesign.tumblr.com/" target="_blank" rel="external">耶鲁风</a>」一下子被认出来了。学校之外也有一些有着同样想法，但不同物理空间的派系——在 Dribbble 和 Behance 上设计师和插画家之间明显的潮流趋势，或者其他我们互相欣赏对方作品的地方。</p>
<p>了解其他设计师所掌握的东西，最好的方式就是坐下来和他们闲聊，或者窥看他们的画板和他们制作的方式。关于这个最酷的地方就是，这也是可以通过算法学习到的。把「站在其他设计师肩膀上」这个动作给数字化。</p>
<p>我有一些工具可以去探索这个想法：去合法观察其他设计师如何做设计。最酷的地方在于，我们的算法越聪明，我们就越能从匿名数据中抽取出所需要的含上下文的东西。这就需要去丰富和改变训练数据，让我们在设计师中找到潮流趋势。在大型的生产企业和工作室，会用一些内部设计工具，或许我们能构建出这些使用者的特征模型。更多关于设计工具融合化的事儿，以后再说。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>我今年初（2016）离开了 The Grid 团队。这几个月由于公司需求太忙，这个版式设计项目一直没继续，我一直没能把它应用到生产环境上，现在想想还是很悲伤。#创业生活</p>
<p>当然事后很容易知道什么事情可以做得更好，这也督促着我的工作向前推进。The Grid 目的是想打造一个设计系统，把所有详细信息都抽象出来给终端用户。但在我把所有智慧装进这个版式设计系统之后，我被告知只能用一个 <code>&lt;input type=&quot;range&quot; /&gt;</code> 滑动条将其展示出来。</p>
<p>问这个系统怎么用的设计师朋友肯定会对此很失望。除去我在那里为设计行业未来人工智能所做的贡献之外，我更想让这些智能算法去更好帮助设计师，而不是说取代他们。</p>
<blockquote>
<p>一个研究团体预计 1980 年前，人工智能的发展会让机器的独立思考或者解决军事问题成为可能。那就是说，大概还有 5 年时间去发展人机共生关系和 15 年的时间去使用它。这个 15 也可以是 10 年或者 500 年，但那应该人类历史上最激动人心和智慧最闪耀的时刻。<br>— J. C. R. Licklider, <a href="http://groups.csail.mit.edu/medg/people/psz/Licklider.html" target="_blank" rel="external">Man-Computer Symbiosis</a>, 1960</p>
</blockquote>
<p>在翘首完未来之后，再看现在所用的设计工具，无疑是让人失望的。我们的软件缺乏了上下文理解和行业意识。这些工具操作的是文本、矢量和布尔值；不是设计。但工具是最容易发生改变的东西，所以我在创造一些设计工具，它整合了跟设计流程相关的聪明算法，可以让设计师通过学习他们在做什么，我们在做什么，从而变得更好。增强他们而不是替代他们。</p>
<p><img src="//misc.aotu.io/chuyik/2016-08-05-02-58-28.jpg" alt=""></p>
<blockquote>
<p>对于一些特定的设计子集，想法趋同很重要</p>
</blockquote>
<p>设计师最不愿意去选择用什么工具了。对于算法设计来说，优化组合是一个有趣的机会。个人来说我并没有想把互联网变得更同质化，但设计确实是有一些共通的法则。这不需要变得很趋同，有很多方式可以去公开和使用这些数据。我们的工具应该让彼此更接近，或者远离趋势。当然我们现在去提议一个更受欢迎的字体，但我们找到那些主流分支相似的但未被发现的宝藏。我们可以提议、暗示和修正；这些都建立在扎实的设计原则和我们作为设计师的经验总结之上。这些都是触手可及的。</p>
<p>设计就是一系列的规则，而我们从这些规则中学习。</p>
<p>对于设计者来说，Licklider（译者注：利克里德，人工智能的先驱，上文观点被引用的人）已经离开有些年头了。虽说 Macintosh 机器让我们工作得更快，但我们对于语义层面的交互来停留在 1984 年。几十年之后，我们就会开始觉得像是开拓一个新的时代。那将是我们行业历史上最激动人心和智慧闪耀的时代，真正人机共生的尖端时刻。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文译自 Jon Gold 的 &lt;a href=&quot;http://www.jon.gold/2016/05/robot-design-school/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Taking The Robots 
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Typography" scheme="https://aotu.io/tags/Typography/"/>
    
      <category term="Type design" scheme="https://aotu.io/tags/Type-design/"/>
    
      <category term="字体设计" scheme="https://aotu.io/tags/%E5%AD%97%E4%BD%93%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="人工智能" scheme="https://aotu.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="算法" scheme="https://aotu.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2016年夏季蜜桃通缉令</title>
    <link href="https://aotu.io/notes/2016/07/28/o2-wants-you/"/>
    <id>https://aotu.io/notes/2016/07/28/o2-wants-you/</id>
    <published>2016-07-28T02:24:35.000Z</published>
    <updated>2016-10-20T07:06:32.429Z</updated>
    
    <content type="html"><![CDATA[<p>前端只是我们的正餐，其实我们还有许多的甜点！</p>
<a id="more"></a>
<style>
body {
    max-width: 600px;
    margin:0 auto;
}
.grid {
    width: 100% !important;
}
.mod-main {
    float: none !important;
    margin-right: 0 !important;
    width: 100% !important;
}
.mod-side {
    float: none !important;
    width: 100% !important;
    margin-top: 20px !important;
    border-top: 1px solid #ddd !important;
}
.post-content img {
    max-width: 100%;
    padding: 15px 0 !important;
}
.works, .favlinks {
    display: none !important;
}
@media (max-width: 989px) {
    .post-cover {
        padding-left: 15px;
        padding-right: 15px;
    }
    .post-content h3 {
        margin-top: 0;
        padding-top: 0.5em;
    }
}
</style>

<p><a href="//aotu.io/join/"><img src="//misc.aotu.io/mamboer/2016/o2-wants-u-2016.png" alt="o2"></a></p>
<h3 id="我们会撸页面，会HTML5-CSS3-JS-NodeJS！"><a href="#我们会撸页面，会HTML5-CSS3-JS-NodeJS！" class="headerlink" title="我们会撸页面，会HTML5\CSS3\JS\NodeJS！"></a>我们会撸页面，会HTML5\CSS3\JS\NodeJS！</h3><p><img src="//misc.aotu.io/mamboer/2016/o2wu-code.jpg" alt="code"></p>
<h3 id="会玩前端工程化！"><a href="#会玩前端工程化！" class="headerlink" title="会玩前端工程化！"></a>会玩前端工程化！</h3><p><a href="//athena.aotu.io"><img src="//misc.aotu.io/luckyadam/athena/athena_cover.jpg" alt="Athena"></a></p>
<h3 id="玩音乐！"><a href="#玩音乐！" class="headerlink" title="玩音乐！"></a>玩音乐！</h3><p><img src="//misc.aotu.io/mamboer/2016/o2wu-guitar.jpg" alt="footbal"></p>
<h3 id="爱踢球！"><a href="#爱踢球！" class="headerlink" title="爱踢球！"></a>爱踢球！</h3><p><img src="//misc.aotu.io/mamboer/2016/o2wu-football.jpg" alt="footbal"></p>
<h3 id="爱设计！"><a href="#爱设计！" class="headerlink" title="爱设计！"></a>爱设计！</h3><p><img src="//misc.aotu.io/mamboer/2016/o2wu-design.jpg" alt="DG"></p>
<h3 id="周末喜欢视察东莞！"><a href="#周末喜欢视察东莞！" class="headerlink" title="周末喜欢视察东莞！"></a>周末喜欢视察东莞！</h3><p><img src="//misc.aotu.io/mamboer/2016/o2wu-dg.jpg" alt="DG"></p>
<h3 id="偶尔装个文艺（B）！"><a href="#偶尔装个文艺（B）！" class="headerlink" title="偶尔装个文艺（B）！"></a>偶尔装个文艺（B）！</h3><p><img src="//misc.aotu.io/mamboer/2016/o2wu-art.jpg" alt="DG"></p>
<blockquote>
<p>我们是凹凸实验室，来自京东（深圳）最年轻富有基情的技术团队。<br>我们现在有<strong>34</strong>位凹凸曼小伙伴，期待下一个你。<br>投递简历至aotu{AT}jd.com，今年夏天，O2不见不散！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端只是我们的正餐，其实我们还有许多的甜点！&lt;/p&gt;
    
    </summary>
    
      <category term="生活玩乐" scheme="https://aotu.io/cates/%E7%94%9F%E6%B4%BB%E7%8E%A9%E4%B9%90/"/>
    
    
      <category term="招贤纳士" scheme="https://aotu.io/tags/%E6%8B%9B%E8%B4%A4%E7%BA%B3%E5%A3%AB/"/>
    
  </entry>
  
  <entry>
    <title>Vue实战－邮箱签名设计项目</title>
    <link href="https://aotu.io/notes/2016/07/25/vuejs-mailsign/"/>
    <id>https://aotu.io/notes/2016/07/25/vuejs-mailsign/</id>
    <published>2016-07-25T02:24:35.000Z</published>
    <updated>2016-10-20T07:06:32.428Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>  在工作的沟通交流中，邮件是必不可少的工具之一。而规范一致的邮箱签名设计有利于打造和传播团队品牌形象，以提高团队的知名度。同时，借助工具能够使得签名生成更为方便、快捷。</p>
<h2 id="项目成果"><a href="#项目成果" class="headerlink" title="项目成果"></a>项目成果</h2><blockquote>
<p>点击体验工具：<a href="https://sign.aotu.io/" target="_blank" rel="external">https://sign.aotu.io/</a></p>
<p>项目托管在Github上开源，喜欢的话可以给项目加个<a href="https://github.com/o2team/sign/tree/master" target="_blank" rel="external">『星星』</a></p>
</blockquote>
<p><img src="https://misc.aotu.io/Tingglelaoo/sign.gif" alt="1.gif"></p>
<h3 id="功能一览"><a href="#功能一览" class="headerlink" title="功能一览"></a>功能一览</h3><ul>
<li>即时预览</li>
<li>图片上传、裁剪及下载保存</li>
<li>个性化配色、Logo设置</li>
</ul>
<h2 id="思路与实现"><a href="#思路与实现" class="headerlink" title="思路与实现"></a>思路与实现</h2><p>  因为计划是个小而快的项目，所以更多的考虑是走捷径——用现成的库和框架。</p>
<h3 id="框架选择——Vue-js"><a href="#框架选择——Vue-js" class="headerlink" title="框架选择——Vue.js"></a>框架选择——<a href="http://cn.vuejs.org/" target="_blank" rel="external">Vue.js</a></h3><p>  选择Vue，主要还是私心，刚学习完Vue想拿来实践下。<br>  若是要对比Angular来说，Vue相对来说更轻巧易上手，文档中文化。考虑到项目并不需要数据库，不需要后端处理，是个完全依靠前端的项目，所以选择专注“让编写动态的UI界面变得轻松简单”的Vue其实是比较合适的。</p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>  工欲善其事，必先利其器。<br>  <strong>一、明确功能核心。</strong><br>  邮件签名设计的主要功能是给予统一的签名设计模版，用户只需要输入个人信息即可生成规范的个人邮件签名。<br>  <strong>二、确认技术路线。</strong><br>  从技术角度说就是，根据邮件签名设计模版先构建好对应的静态DOM结构，结合用户输入的数据动态实现从DOM结构转化为图像，然后供以下载使用。<br> <strong> 三、库的选用</strong><br>  那么，对应技术点各个击破：</p>
<ul>
<li>DOM 转化为 IMG：<a href="https://github.com/tsayen/dom-to-image" target="_blank" rel="external">dom-to-image</a><ul>
<li>实现的原理是：利用Canvas将DOM绘制生成为图像。</li>
<li>难能可贵的是，它这个库还考虑到了伪元素、Web Font、内联样式的使用，在绘制的时候不会把这些内容缺失。</li>
</ul>
</li>
<li>文件下载保存：<a href="https://github.com/eligrey/FileSaver.js" target="_blank" rel="external">FileSaver.js</a><ul>
<li>无需后端处理，在客户端就可以实现文件的保存。</li>
<li>更为重要是的，<a href="https://github.com/tsayen/dom-to-image" target="_blank" rel="external">dom-to-image</a>需要它配合，实现将Canvas转化生成图像并下载。</li>
</ul>
</li>
<li>个人头像裁切：<a href="https://github.com/fengyuanchen/cropperjs" target="_blank" rel="external">cropperjs</a><ul>
<li>实现裁切的原理，同样是利用到Canvas。</li>
<li>最为“难用”的库是<a href="https://github.com/fengyuanchen/cropperjs" target="_blank" rel="external">cropperjs</a>，因为它自身包含的功能特别多，所以要根据自己的需求来抽取出特定的功能来使用。</li>
</ul>
</li>
</ul>
<h3 id="核心代码简解"><a href="#核心代码简解" class="headerlink" title="核心代码简解"></a>核心代码简解</h3><blockquote>
<p>方法概览</p>
</blockquote>
<p><img src="https://misc.aotu.io/Tingglelaoo/codes.jpg" alt="codes.png"></p>
<h4 id="bindLoadImgEvent"><a href="#bindLoadImgEvent" class="headerlink" title="bindLoadImgEvent()"></a>bindLoadImgEvent()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 监听文件读取</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;len;i++) &#123;</div><div class="line">    uploadImages[i].addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        ...</div><div class="line">        reader.readAsDataURL(file);</div><div class="line">        ...</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 若读取图像文件，则初始化加载cropper</span></div><div class="line">reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    ...</div><div class="line">    if (!thisObj.flag.cropperHasInit) &#123;</div><div class="line">        thisObj.loadCropper();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用HTML5的文件上传API来读取用户选取的图像文件，一旦监听到图像上传完毕，则调用<code>loadCropper()</code>方法来初始化。</p>
<h4 id="loadCroper"><a href="#loadCroper" class="headerlink" title="loadCroper()"></a>loadCroper()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据需要配置参数，初始化cropper</span></div><div class="line"><span class="keyword">var</span> option = &#123;</div><div class="line">    <span class="attr">aspectRatio</span>: <span class="number">1</span> / <span class="number">1</span>,</div><div class="line">    <span class="attr">build</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        previewImage.src = image.src;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">crop</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">thisObj.cropper = <span class="keyword">new</span> Cropper(image, option);</div></pre></td></tr></table></figure>
<p>根据<a href="https://github.com/fengyuanchen/cropperjs/blob/master/README.md" target="_blank" rel="external">官方文档说明</a>，选择合适的参数来定制功能。<br>按照邮件签名设计的模版，头像需要裁剪成要求一比一的比例，因此只需要简单的一比一裁切功能即可。</p>
<h4 id="finishCropImage"><a href="#finishCropImage" class="headerlink" title="finishCropImage()"></a>finishCropImage()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">var imgDataUrl = croppedCanvas.toDataURL();</div><div class="line"><span class="keyword">var</span> where = <span class="string">'.o2_sign .'</span> + thisObj.img + <span class="string">' img'</span>;</div><div class="line"><span class="built_in">document</span>.querySelector(where).src = imgDataUrl;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>完成裁剪，将裁剪结果输出为base64格式。</p>
<h4 id="downloadRes"><a href="#downloadRes" class="headerlink" title="downloadRes()"></a>downloadRes()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">domtoimage.toBlob(sign).then(<span class="function"><span class="keyword">function</span>(<span class="params">blob</span>)</span>&#123; </div><div class="line">    <span class="built_in">window</span>.saveAs(blob,imgName + <span class="string">'.png'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>调用<a href="https://github.com/tsayen/dom-to-image" target="_blank" rel="external">dom-to-image</a>以及<a href="https://github.com/eligrey/FileSaver.js" target="_blank" rel="external">FileSaver.js</a>库，将对应的DOM结构输出为图像并下载。</p>
<h3 id="还需要思考的方面"><a href="#还需要思考的方面" class="headerlink" title="还需要思考的方面"></a>还需要思考的方面</h3><p>  秉承着”用户体验至上”是产品的黄金原则之一的理念，因此，在项目完成基本的功能之余，在用户体验方面做些了小优化：</p>
<p><strong>一、信息格式化，优化用户输入</strong><br>  对于手机号码，用“－”分隔符更便于用户阅读和记忆，但是用户在输入信息时，会自动忽略“－”的存在，因此，考虑到的阅读和输入习惯，利用Vue的过滤器(Filter)来优化用户输入。<br>  除此之外，在配色设置中，采用的是HTML5的原生取色器，严格规定颜色色值输入是RRGGBB格式的十六进制代码，但是对于用户习惯来说，对于#FFFFFF类似的写法更倾向于缩写为#FFF的简洁形式，因此，在色值输入时，同样是通过过滤器(Filter)来自动将缩写格式转化为标准形式。</p>
<p><strong>二、生成二倍图，适配高清屏</strong><br>在如今Retina屏幕的兴起的时代，适配高清屏已经成为UI界面设计的重要优化步骤，因此，为了适配高清屏，在<a href="https://github.com/tsayen/dom-to-image" target="_blank" rel="external">dom-to-image</a>的原基础上进行了代码优化，使得输出结果为二倍图形式。</p>
<p><strong>三、个性化设置，供团队外共享</strong><br>在实际的应用中，考虑到工具的分享与传播，在维持原有基本的LOGO、版面设计外，特意设计配色个性化设置功能，让团队成员外的用户能够随心所欲选用自己喜欢的配色，设计出有个人特色的签名图。</p>
<p><strong>四、功能划分、字体，交互设计优化</strong><br>考虑到工具的主要面向对象是团队成员，使用频率较低，所以配色设置作为附加功能设计在预览区的右上角，通过点击可以将信息输入面板切换到配色设置面板。<br>这样的设计将不同的功能集合在不同区域，在页面上更为合理地利用有限空间外，同时使得用户更专注于主要的功能块。<br>在另一方面，在Windows平台和Mac平台共同支持的默认字体有限，同时要考虑到遵循设计还原，因此，通过使用第三方字体来优化字体，使其在不同平台下能够表现一致。</p>
<h2 id="关于Vue-js的小技巧"><a href="#关于Vue-js的小技巧" class="headerlink" title="关于Vue.js的小技巧"></a>关于Vue.js的小技巧</h2><p>对于Vue.js的学习，我只算是新手初试，在这里总结下遇到的一些常见问题，作为分享给大家的小技巧：</p>
<p><strong>1.使用<code>v-text</code>替代&#123;&#123;&#125;&#125;</strong><br>类似于Angular的<code>v-bind</code>替换&#123;&#123;&#125;&#125;的做法一样，在Vue中使用<code>v-text</code>替代&#123;&#123;&#125;&#125;，可以避免在渲染页面的过程中出现双向绑定数据的未处理状态。</p>
<p><strong>2.没有<code>v-change</code>这样的指令</strong><br>在Agular中用ng-change可以为元素帮到change事件响应，但是在Vue中，在默认情况下，v-model 在input 事件中同步输入框值与数据，可以添加一个特性 lazy，从而改到在 change 事件中同步。</p>
<p><strong>3.<code>v-bind:class</code> 替换 <code>v-show</code>指令</strong><br>Vue中的v-show指令是通过内联样式<code>display:none</code>来来处理显示和隐藏元素(true时，不做内联样式；false时内联display:none)。<br>所以，如果使用<code>v-show</code>指令在渲染页面的时候一开始，元素就会显示出来再被隐藏，这样的用户体验并不好。所以，可以考虑使用<code>v-bind:class</code> 来处理，自己写好显示隐藏的样式，通过绑定类名来切换元素显示隐藏状态。</p>
<p><strong>4.延续上一问，为什么不使用<code>v-if</code>替代，与<code>v-show</code>的区别在哪里呢？</strong><br>从表现来看<code>v-if</code>和<code>v-show</code>都是用来显示隐藏元素。但<code>v-if</code>则是通过删除添加DOM结构的手段来实现显隐的，在元素上绑定的监听事件就会随着删除而销毁，是一个局部编译/卸载的过程。因此，在这样的情景限制下，我没有选择使用<code>v-if</code>来替代<code>v-show</code>。</p>
<p><strong>5.Vue.js的学习资料推荐</strong><br>Vue.js是国人尤雨溪大大作为主要开发的，所以文档中文化做得非常棒，官网有齐全的资料，快速入门教程、API文档等等，个人认为作为上手研读官网(<a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">Vue.js</a>)的教程即可，推荐:)。</p>
<blockquote>
<p> 感谢长篇阅读至此，“说一做二想三”，这个小项目也算是初成，告一段落了。:)<br>作为一个小项目，自认为并不是特别能带来很多的干货，但是也就是这种小尝试、小实践去慢慢积累经验，前端路漫漫，互勉加油吧。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;  在工作的沟通交流中，邮件是必不可少的工具之一。而规范一致的邮箱签名设计有利于打造和传
    
    </summary>
    
      <category term="项目总结" scheme="https://aotu.io/cates/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Vue" scheme="https://aotu.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>我们是如何做好前端工程化和静态资源管理</title>
    <link href="https://aotu.io/notes/2016/07/19/A-little-exploration-of-front-end-engineering/"/>
    <id>https://aotu.io/notes/2016/07/19/A-little-exploration-of-front-end-engineering/</id>
    <published>2016-07-19T13:12:48.000Z</published>
    <updated>2016-10-20T07:06:32.428Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<blockquote>
<p>随着互联网的发展，我们的业务也日益变得更加复杂且多样化起来，前端工程师也不再只是做简单的页面开发这么简单，我们需要面对的十分复杂的系统性问题，例如，业务愈来愈复杂，我们要如何清晰地梳理；团队人员愈来愈多，我们要如何更好地进行团队协作；功能愈来愈多，我们要如何保证页面的性能不至于下降，等等。所有的这些都可以归结为如何提升开发体验和性能问题。</p>
</blockquote>
<h2 id="提升开发体验"><a href="#提升开发体验" class="headerlink" title="提升开发体验"></a>提升开发体验</h2><p>我们主要从以下三个方面来提升我们的开发体验。</p>
<h3 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h3><p>当团队人员不断扩充时，我们需要制定统一的规范来对平时的开发工作做出一定约束和指导。统一的规范包括前端的代码规范，根据规范定义好一套代码检查的规则，在代码提交的时候进行检查，让开发人员知道自己的代码情况。</p>
<p>同时，根据以往的开发经验，我们制定了统一的项目框架，根据业务功能不同，将一个项目(app)拆分成不同的业务模块(module)，而每一个模块都包含自身的页面(page)以及构成页面所需要的组件(widget)，每一个项目涉及到app、module、page、widget这些已经约定好的概念，这样让项目结构更加清晰，而且让团队内不同业务的人员之间切换无障碍。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/project_structure.jpg" alt="项目架构"></p>
<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>在项目中引入组件化的概念，这里的组件对应上文讲到的widget，每一个组件都会包含组件自身的模板、css、js、图片以及说明文件，我们使用组件来拼装页面，像搭积木一样来拼装我们的页面，同时一个组件内可以调用另一个组件。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/component.jpg" alt="组件化"></p>
<p>在拿到设计稿后，我们首先需要确定哪些需要做成公共组件，那些是要做成独立组件，以及组件间如何进行通信。在页面中调用这些组件后，会自动加载组件的模板以及组件的静态资源，而当组件不再需要时，只要移除掉组件引用，那么相应的模板和静态资源也会不再加载。</p>
<p>组件化的好处主要有这么几点</p>
<ul>
<li>管理方便，我们可以把一个独立功能相关的文件在工程目录中放在一起，这样代码管理起来会非常便利</li>
<li>组件复用，通过抽取公共组件，可以实现组件复用，从而减少工作量，创造价值</li>
<li>分而治之，这是组件化最重要的一点，将页面组件化，就是对页面功能的拆分，将一个大的工程拆成小的零件，我们只需要关注每一个零件的功能，极大地降低了页面的开发与维护的难度</li>
</ul>
<h3 id="自动化编译"><a href="#自动化编译" class="headerlink" title="自动化编译"></a>自动化编译</h3><p>在前端开发中，我们总是会去使用很多工具、手段来优化代码、提升开发效率，例如，我们会使用sass、less等CSS预处理工具来编写更好维护的样式代码，我们也会使用CSSLint、eslint等代码检查工具来检查代码的语法错误，使用文件合并压缩等手段来减少资源大小，除此之外我们还会去做雪碧图合并、多倍图处理、字体压缩处理、代码发布等等。</p>
<p>曾经有大神说过，超过90s的工作都应该自动化掉。而以上所有的这些工作，贯穿我们整个开发流程，但是不同工具的切换不但显得凌乱，而且影响开发效率。在自动化、工程编译的思想早已深入人心的当下，我们当然也要紧跟潮流，所以我们考虑通过自动化手段来提升我们的效率，让所有操作可以一键式开速执行完。</p>
<p>我们将通过定义好一系列的编译任务，按照一定顺序依次对我们的项目自动进行编译操作，最后产生出可上线的代码。</p>
<h2 id="提升性能"><a href="#提升性能" class="headerlink" title="提升性能"></a>提升性能</h2><p>我们主要从以下四个方面来做好性能优化。</p>
<h3 id="首屏优化"><a href="#首屏优化" class="headerlink" title="首屏优化"></a>首屏优化</h3><p>页面的打开速度一直是大家非常关心的一个指标，一个页面打开太慢会让让用户失去等待的耐心，为了让用户更快地看到页面，我们考虑将页面中部分静态资源代码直接嵌入页面中，我们通过工具处理，在工程编译阶段，将指定的静态资源代码内嵌入页面中，这样可以减少HTTP请求，提升首屏加载速度，同时降低页面裸奔风险。</p>
<h3 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h3><p>同时，我们考虑通过尽量减小页面体积来提升页面打开速度，在业务上我们将页面划分为一个个楼层组件，以京东美妆馆为例，页面中从上而下分为首焦、至IN尖货、今日特惠、潮流前沿、口碑榜单这么几个楼层组件，其实这个页面还有很长，内容非常多且复杂。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/beauty.jpg" alt="京东美妆馆"></p>
<p>之前我们的做法是整个页面直出，这样一次性加载的内容会非常多，为了提升打开速度，我们考虑通过按需加载的方式来优化页面的加载。我们在页面中只放每一个楼层的框架性代码，楼层的模板和数据都通过异步的方式去拉取，来实现楼层组件的按需加载，同时我们可以对模板以及数据进行缓存，以此来减少请求，做更极致的优化。在开发中我们以正常组件的方式去开发整个页面，随后通过编译工具，在代码编译阶段自动将楼层的模板抽离成一个独立的JS文件，并给楼层容器打上标记位，通过页面加载逻辑去按需拉取模板，再进行渲染。</p>
<blockquote>
<p>通过给楼层容器和模板分别加上标记位 <code>o2-out-tpl-wrapper</code> <code>o2-out-tpl</code></p>
</blockquote>
<p><img src="//misc.aotu.io/luckyadam/athena/lazyload_1.jpg" alt="按需加载1"></p>
<blockquote>
<p>在编译时自动将指定的模板代码抽离成独立js文件</p>
</blockquote>
<p><img src="//misc.aotu.io/luckyadam/athena/lazyload_2.jpg" alt="按需加载2"></p>
<blockquote>
<p>并且给楼层容器打上标记</p>
</blockquote>
<p><img src="//misc.aotu.io/luckyadam/athena/lazyload_3.jpg" alt="按需加载3"></p>
<blockquote>
<p>同时在逻辑脚本适当位置自动加入模板的版本</p>
</blockquote>
<p><img src="//misc.aotu.io/luckyadam/athena/lazyload_4.jpg" alt="按需加载4"></p>
<p>通过上述步骤，实现按需加载的自动化生成，在提升性能的同时，很好地解放我们生产力。</p>
<h3 id="基于资源表加载"><a href="#基于资源表加载" class="headerlink" title="基于资源表加载"></a>基于资源表加载</h3><p>根据页面组件化，通过工具分析，我们将获得页面与组件的依赖关系表，同时也能确认页面所引用资源的依赖关系，例如，我们在页面hello中同步引用组件topbar，那么依赖关系表中将会记录同步引用关系hello引用topbar.tpl、topbar.css、topbar.js，那么页面hello将会自动加载组件topbar的CSS与JS，同时依赖表会记录异步引用的关系，假如我们在组件C中通过API异步引用了组件D的js，那么会在依赖表中记录C异步引用D.js这一个依赖关系，这样D.js这个资源将会在用到的时候被异步调用。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/mapjson_1.jpg" alt="组件依赖"></p>
<p><img src="//misc.aotu.io/luckyadam/athena/mapjson_2.jpg" alt="资源依赖"></p>
<p>同步引用的资源通过生成combo形式链接，在服务端进行文件合并，这样在页面加载的时候，页面只会加载自己需要的同步资源，异步的资源将会在用到的时候再加载，有效避免资源冗余。同时删除、增加组件也非常方便，只需改动模板中对组件调用，通过编译工具会自动重新生成模板以及combo链接。</p>
<p>我们可以将资源加载的操作抽离出来，形成一套统一的资源加载框架设计，这样我们使用的模板可以变得更加灵活，无论是纯html模板，还是PHP或Java之类的后端模板都能有效支持。编译工具扫描代码后只生成资源依赖表，我们通过实现各语言平台的资源加载框架，让不同语言的模板都能基于同一个资源依赖表进行资源加载。</p>
<p>同时，对资源进行MD5重命名处理，文件md5重命名也是一种提升性能的有效手段，使用文件md5后开启服务器强缓存，可以提升缓存的利用率并避免不必要的缓存判断处理。但文件md5重命名后会出现开发时引用的文件名对不上的问题，这就需要在资源表中记录原文件名与md5重命名后之间的对应关系，当我们引用一个资源时，就会通过查表获取重命名后的资源名，然后利用代码中引用资源定位的能力来进行资源名自动替换。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/md5.jpg" alt="md5"></p>
<h3 id="静态资源预加载"><a href="#静态资源预加载" class="headerlink" title="静态资源预加载"></a>静态资源预加载</h3><p>所谓静态资源预加载，就是当用户在进行浏览页面的时候，我们可以在当前页面静默加载下一个页面的静态资源，这样当用户进入到下一个页面时就能快速打开页面，从而在不知不觉中提升页面的打开速度。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/hermes.jpg" alt="静态资源预加载设计"></p>
<p>我们会在静态资源预加载平台上配置每一个页面id对应需要预加载页面资源的id，然后系统通过读取资源依赖表获取到所需要预加载的静态资源，生成预加载资源列表文件，再将文件推送到线上服务器，通过页面挂载js请求获取预加载资源列表，随后静默加载资源。在有了资源依赖表后，我们可以准确地分析到每一个页面引用资源的请求，就可以很好地实现静态资源预加载的功能。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/preload.jpg" alt="静态资源预加载"></p>
<h2 id="Athena"><a href="#Athena" class="headerlink" title="Athena"></a>Athena</h2><p>工欲善其事，必现利其器。为了实现我们对提升开发效率和产品性能的诉求，我们提出了比较完整的工程化解决方案以及对应的工具<a href="https://github.com/o2team/athena" target="_blank" rel="external">Athena</a>。</p>
<p><a href="https://github.com/o2team/athena" target="_blank" rel="external">Athena</a>是由京东【凹凸实验室】(<a href="http://aotu.io">aotu.io</a>) 推出的一套项目流程工具，通过<a href="https://github.com/o2team/athena" target="_blank" rel="external">Athena</a>，我们可以很流程地跑完整个开发流程。<a href="https://github.com/o2team/athena" target="_blank" rel="external">Athena</a>分为两部分，一是本地自动化编译工具，二是资源管理平台，其架构如下</p>
<p><img src="//misc.aotu.io/luckyadam/athena/athena.jpg" alt="Athena"></p>
<h3 id="本地自动化工具"><a href="#本地自动化工具" class="headerlink" title="本地自动化工具"></a>本地自动化工具</h3><p>Athena本地编译工具是一个基于NodeJs的命令行工具，通过执行命令的方式来优化我们的开发流程，目前Athena的主要功能有</p>
<ul>
<li>自动创建项目、模块、页面、组件结构</li>
<li>轻量组件化功能，根据组件加载情况生成资源依赖表</li>
<li>Sass/less 编译</li>
<li>代码检查</li>
<li>CSS prefix等处理</li>
<li>CSS合并压缩，JS合并压缩</li>
<li>自动生成雪碧图，自动多倍图，图片压缩</li>
<li>字体文件压缩</li>
<li>自定义图片转base64</li>
<li>文件内联，可以内联样式及JS代码</li>
<li>文件MD5戳，将文件进行使用MD5进行重命名</li>
<li>本地预览，直接查看整个项目</li>
<li>资源定位（图片等资源路径替换）</li>
<li>生成CSS页面片，提供将页面引用的CSS/JS抽离成页面片的形式，方便管理CSS资源</li>
<li>部署到预览机和开发机</li>
</ul>
<h4 id="创建项目结构"><a href="#创建项目结构" class="headerlink" title="创建项目结构"></a>创建项目结构</h4><p>在执行创建命令时，Athena会从管理平台下载自定义好的项目模板，可以根据模板创建项目、模块、页面、和组件。Athena有四个创建命令：</p>
<p>通过执行 <code>$ ath app demo</code> 命令就可以生成定义好目录结构的项目。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/athapp.jpg" alt="创建项目"></p>
<p>随后可以通过 <code>$ ath module home</code>来创建一个业务模块;</p>
<p>通过 <code>$ ath page index</code> 来创建页面；</p>
<p>通过 <code>$ ath widget widgetName</code> 来创建组件。</p>
<h4 id="开发使用"><a href="#开发使用" class="headerlink" title="开发使用"></a>开发使用</h4><h5 id="组件化-1"><a href="#组件化-1" class="headerlink" title="组件化"></a>组件化</h5><p>Athena中实现组件化主要是分为两种，一是针对纯HTML模板，通过扩展模板引擎方法实现，提供了组件化API <code>widget.load</code>，它可以方法接收三个参数，第一个参数是widget的名称，后面两个参数是可选参数，第二个是向widget传递的一些参数，第三个是widget所属的模块，如果是本模块，可以不传例如</p>
<figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> widget.load(<span class="string">'user'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">%=</span></span><span class="ruby"></span></div><div class="line">	widget.load(<span class="string">'user'</span>, &#123;</div><div class="line">		<span class="symbol">param:</span> <span class="string">'test'</span></div><div class="line">	&#125;)</div><div class="line"><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">%=</span></span><span class="ruby"> widget.load(<span class="string">'user'</span>, null, <span class="string">'gb'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure>
<p>通过模板引擎编译，执行widget.load方法，可以实现加载模板，记录依赖关系的目的。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/component_use.jpg" alt="组件化形式"></p>
<p>二是针对不同语言的后端模板，通过实现各自的组件化框架来进行组件的加载，例如 <code>PHP</code> 下使用 <code>&lt;?= $widget-&gt;load(&#39;user&#39;, NULL, &#39;gb&#39;) ?&gt;</code> 来进行组件加载，再通过代码扫描得出组件依赖关系。</p>
<h5 id="Athena中的API"><a href="#Athena中的API" class="headerlink" title="Athena中的API"></a>Athena中的API</h5><p>Athena针对模板提供了一系列的API来扩展丰富的功能，例如前面提到的 <code>&lt;%= widget.load() %&gt;</code> 来实现组件化。</p>
<p>同时Athena中还提供了其他API：</p>
<p><code>&lt;%= getCSS() %&gt;</code>、<code>&lt;%= getJS() %&gt;</code> 用来引用CSS/JS文件，传入文件名和模块名；</p>
<p><code>&lt;%= uri() %&gt;</code> 提供了资源定位功能，可以在模板中标记资源，编译过程中会进行替换，而且在JS中也有资源定位API <code>__uri()</code>；</p>
<p><code>&lt;%= inline() %&gt;</code> 提供了内联资源的功能，传入文件名和模块名，可以在模板中内联任意资源，例如图片以及JS脚本；而且 <code>inline</code> 也可以内联一段网络资源，例如线上的JS文件，同样的在JS中也有内联资源API <code>__inline()</code>；</p>
<p>雪碧图标识 <code>?__sprite</code> ，在CSS中引用图片最后加上标识 <code>?__sprite</code> 可以自动生成自定义名称雪碧图，同时支持自定义生成多张雪碧图，只需要要标识后面带上一个文件名，就可以生成一张以这个文件名来命名的雪碧图，例如 <code>?__sprite=icons</code> ，这样所有带同样标识的图片就会生成一张以 <code>icons</code> 为文件名的雪碧图。</p>
<h4 id="编译预览"><a href="#编译预览" class="headerlink" title="编译预览"></a>编译预览</h4><h5 id="编译任务"><a href="#编译任务" class="headerlink" title="编译任务"></a>编译任务</h5><p>在编写完项目，就可以通过命令来对项目进行编译了，执行编译命令 <code>$ ath build</code>，会针对指定模块执行已经定义好的编译任务，根据项目需求，目前编译都是基于业务模块去编译，编译任务的最小执行单位是页面，每次编译都会执行以下编译列表</p>
<p><img src="//misc.aotu.io/luckyadam/athena/build_process.jpg" alt="编译任务"></p>
<p><img src="//misc.aotu.io/luckyadam/athena/athbuild.jpg" alt="编译截图"></p>
<h5 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h5><p>执行预览命令 <code>$ath serve</code> 会执行精简版编译任务来编译项目，编译完项目后会生成一份站点地图，随后打开一个本地服务器来预览项目，使用这个命令可以很方便地进行开发，在预览时会同时watch目录和文件的改动，并且提供了livereload功能，我们可以在预览时任意修改文件，都将实时地反映到页面中，同时可以新建另一个窗口执行新增组件和页面的操作，让整个开发过程非常顺畅，我们只需关注开发本身就好，不需要再关注其他事。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/aths.jpg" alt="ath serve"></p>
<blockquote>
<p>执行完编译任务后，默认自动打开浏览器，预览站点地图</p>
</blockquote>
<p><img src="//misc.aotu.io/luckyadam/athena/site_map.jpg" alt="站点地图"></p>
<h5 id="Mock-server"><a href="#Mock-server" class="headerlink" title="Mock server"></a>Mock server</h5><p>在进行项目预览的同时，Athena同时提供了mock data的服务，我们可以配置相应的路由，以及路由接口对应的假数据，所有的接口请求会发送到mock server上，在mock server中可以选择将请求代理到假数据平台还是代理到线上接口，这样就可以脱离后端进行开发联调了，以此实现数据的前后端分离。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/mock_server.jpg" alt="mock server"></p>
<h4 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h4><p>在开发预览完后，通过命令 <code>$ ath publish</code> 就可以将项目发布到配置好的测试机上，发布同时支持ftp、sftp以及http形式。</p>
<h4 id="组件维护"><a href="#组件维护" class="headerlink" title="组件维护"></a>组件维护</h4><p>我们通过组件化的手段已经将我们的项目进行组件化了，这样我们经过业务迭代积累，产出很多业务公共组件，但在以往的项目开发中，公共组件的更新与维护一直很受限制，而且有哪些公共组件、公共组件长什么样子，只能依靠口口相传或者手工维护的文档。所以在Athena中我们加入了组件平台，在组件平台上统一展示各个业务的公共组件，而得益于本地工具，组件平台不需要人工干预维护，我们可以在本地通过命令 <code>$ ath widget-publish [widgetName]</code> 命令来发布一个组件到组件平台，这样其他人就可以立即在组件平台进行组件的预览，而其他人若想使用该组件时，在本地通过命令 <code>ath widget-load [widgetId]</code> 就可以下载该组件到自己的模块目录下了。</p>
<p>这样组件的维护更加自动化，公共组件的使用也更加方便了。</p>
<blockquote>
<p>组件发布</p>
</blockquote>
<p><img src="//misc.aotu.io/luckyadam/athena/ath_wp.jpg" alt="组件发布"></p>
<blockquote>
<p>组件下载</p>
</blockquote>
<p><img src="//misc.aotu.io/luckyadam/athena/ath_wl.jpg" alt="组件下载"></p>
<h4 id="自身优化"><a href="#自身优化" class="headerlink" title="自身优化"></a>自身优化</h4><p>为了提升开发效率，Athena做了一些优化操作</p>
<h5 id="精简项目预览时的任务"><a href="#精简项目预览时的任务" class="headerlink" title="精简项目预览时的任务"></a>精简项目预览时的任务</h5><p>在开发时进行项目预览时，会执行精简版的编译任务，剔除了类似文件压缩、雪碧图生成、模板抽离处理等耗时的操作，只保留核心、必须的编译任务，这样可以极大地减少编译时间，提升开发的效率。</p>
<h5 id="预览时监听细化"><a href="#预览时监听细化" class="headerlink" title="预览时监听细化"></a>预览时监听细化</h5><p>在开发进行预览时，会对所有文件的改动进行监听，而针对每一类文件都有非常细化的操作，当文件改动时只会执行改文件所需要的编译任务，而不会进行整体编译，这样可以很好地提升开发效率。例如改动某一组件的CSS文件，则只会针对该文件执行一些相关的CSS操作。</p>
<p>同时得益于所有文件依赖关系的记录，在监听时会根据依赖关系进行文件编译，例如某sass文件中引入了另一个sass库文件，修改这个sass库文件的时候，会根据引用关系表同时更新到所有引用到这个sass文件的文件，这样项目文件更新及时，让开发流程更加流畅。</p>
<h5 id="编译缓存"><a href="#编译缓存" class="headerlink" title="编译缓存"></a>编译缓存</h5><p>在图片压缩和sass编译时，开启文件缓存，将已经编译过且没有改动的文件过滤掉，不再编译，大幅提升编译速度。</p>
<h5 id="发布缓存"><a href="#发布缓存" class="headerlink" title="发布缓存"></a>发布缓存</h5><p>设置发布过滤，根据文件md5过滤掉已经发布过的文件，提升发布速度。</p>
<h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><p>Athena本地工具早期技术选型是 <code>Yeoman</code> + <code>Gulp</code> 的方式，但后来由于安装、更新非常麻烦，命令太长很难打的原因，我们改成了自己开发一个全局安装包的方式，编译核心使用的还是 <code>Gulp</code> 的 <code>vinyl-fs</code> 来实现文件流处理，通过 <code>ES6 Promise</code> 来进行编译流程控制，最小以页面为单位，经过一系列编译任务，最后产出编译好的文件。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/athena_tech.jpg" alt="技术选型"></p>
<h3 id="管理平台"><a href="#管理平台" class="headerlink" title="管理平台"></a>管理平台</h3><p>性能优化一直是前端工程师探索的课题，很多时候就是资源的分配问题，也就是资源管理。为了更好地配合本地构建工具来管理资源，我们搭建了管理平台。我们来看下，结合本地构建工具和管理平台，工作流程变成了怎样？</p>
<h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><ol>
<li>在管理平台上创建项目，输入项目名称和预览机，以及选择相应的模板等；</li>
<li>在终端执行ath app指令，工具会优先拉取远程服务器的项目信息来初始化项目，如果没有获取到相关信息，就会在本地生成项目，并将项目信息上报给服务器；</li>
<li>项目初始化后，就可以创建模块、页面、组件了；</li>
<li>在编码过程中，可通过ath server预览页面；</li>
<li>在本地通过后，可执行ath publish将代码发布到开发机或者预览机。</li>
</ol>
<p>在上面的publish指令中，工具会扫描所有文件，执行代码检查，扫描页面文件，获取组件依赖关系，根据组件依赖关系进行文件合并，然后会进行样式处理、js处理以及图片的处理，根据配置是否进行md5重命名文件，组装html，插入样式、js和图片，最后将编译好的文件发布到相应的机器。在整个过程里面，会生成资源关系依赖表，最终会将资源关系表及编译后的文件上传至管理平台。</p>
<p>除此之外，每个指令的操作都会上报给管理平台。管理平台收到数据后，会对数据进行处理，最终可以在平台上看到项目相关的信息。</p>
<p>整体工作流程图如下：</p>
<p><img src="//misc.aotu.io/luckyadam/athena/work.jpg" alt="工作流程"></p>
<p>从上面的工作流程中，我们可以看到，管理平台需要有数据统计、资源管理以及项目管理的功能。整体架构图如下：</p>
<p><img src="//misc.aotu.io/luckyadam/athena/athena_manage.jpg" alt="管理平台架构"></p>
<h4 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h4><p>数据统计包含项目操作日志，主要是用于统计团队每个成员具体的操作，方便项目成员查看项目代码变更；另一部份是统计样式表、脚本以及图片的压缩数据，用于显示工具给我们项目带来的提升。</p>
<p>以下是操作日志统计：</p>
<p><img src="//misc.aotu.io/luckyadam/athena/athena_manage1.jpg" alt="数据统计"></p>
<h4 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h4><p>资源管理是管理平台的核心，主要分为4个部分：模块展示、依赖关系、组件预览和权限控制。这部分功能主要通过本地构建工具提供的资源关系表来完成。</p>
<h5 id="模块展示"><a href="#模块展示" class="headerlink" title="模块展示"></a>模块展示</h5><p>模块展示，用于记录项目具体包含哪些模块以及模块具体的信息。在平常开发中，我们的项目会分为许多模块，不同的模块有不同的人来开发和维护。当项目越大的时候，可以通过管理平台清晰地看到模块具体的信息。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/athena_manage_module.jpg" alt="模块展示"></p>
<h5 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h5><p>依赖关系，主要是html、css、js和图片相互之间的关系。通过分析资源关系依赖表，可以获取到各个资源被引用的情况以及线上版本的情况。当线上环境采用md5来做资源管理时，我们不是很清晰地知道静态资源对应线上哪个版本的资源，而有了这个依赖关系表，当出现问题时，我们可以更快地定位到具体的资源。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/athena_manage_include.jpg" alt="依赖关系"></p>
<h5 id="组件管理"><a href="#组件管理" class="headerlink" title="组件管理"></a>组件管理</h5><p>我们采用组件来拼凑页面，当项目越大时，组件越多，那么如何管理组件成为了一个棘手的问题。比如说，有一些比较老的冗余组件，我们不确定是否为其他页面所引用，那么就不能愉快地删除它。有了组件管理，可以清晰地知道组件的被调用情况，就可以对组件做相应的操作。</p>
<p>组件管理，结合组件平台来使用，在管理平台上引用组件地址预览组件，同时可以获取到组件被引用以及引用资源（如css、js、图片）的相关情况。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/athena_manage_component.jpg" alt="组件管理"></p>
<p>我们的组件分为两种，一类是通过ath w自动创建的，通过ath pu提交到管理平台的，在管理平台上进行组件的相关分析和编译，得到组件的信息，这类组件主要是跟业务绑定的；另一类是通过ath widget-publish提交到组件平台的，由组件平台进行相关处理，这类组件是通用组件，与业务无关，用于展示给开发以及相关业务方看的。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/athena_components.jpg" alt="组件提交"></p>
<p>在组件平台上可以预览与编辑相关的组件，通过与设计师约定相关的设计规范来促使组件达到尽可能地复用，进而减少设计师的工作量，提升我们的工作效率。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/athena_components_ui.jpg" alt="组件平台"></p>
<h6 id="组件提交到组件平台"><a href="#组件提交到组件平台" class="headerlink" title="组件提交到组件平台"></a>组件提交到组件平台</h6><p>通过ath widget-publish指令将组件提交到组件平台，组件平台会对组件源码进行编译，将组件名称md5、组件归类以及组件版本记录等等。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/ath_wp_process.jpg" alt="组件发布"></p>
<h6 id="从组件平台上下载组件"><a href="#从组件平台上下载组件" class="headerlink" title="从组件平台上下载组件"></a>从组件平台上下载组件</h6><p>通过ath widget-load指令将组件下载到本地，当本地构建工具向组件平台发起请求时，会带上组件名称，组件平台会将源码进行编译，将组件名称重命名，并且相应地替换源码中的组件名称，同时记录组件的被引用记录。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/ath_wl_process.jpg" alt="组件下载"></p>
<h5 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h5><p>权限控制，项目中存在公共组件模块，公共组件比较稳定，比如说轮播组件、选项卡组件等等，这部分代码一般比较少变动，可由少部分人来更新和维护，所以加入了权限控制机制，保证公共组件的稳定性。</p>
<h4 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h4><p>我们在使用本地构建工具时，需要配置多个参数，比如主机信息、选择模版等，在命令行环境下有些不直观。为了简化这个操作，管理平台提供了项目创建的功能，同时提供了模版创建的功能。</p>
<p><img src="//misc.aotu.io/luckyadam/athena/ath_app_online.jpg" alt="项目管理"></p>
<p>在项目信息、模块信息以及组件信息发生变更的时候，为了第一时间能够通知项目成员更新，加入了消息通知的功能，目前通过发送邮件的方式，后期可以加入微信提醒的功能。</p>
<h4 id="技术选型-1"><a href="#技术选型-1" class="headerlink" title="技术选型"></a>技术选型</h4><p>管理平台前端采用React+Redux的方式，后端采用Express+MongoDB，整体技术选型如下：</p>
<p><img src="//misc.aotu.io/luckyadam/athena/athena_tech2.jpg" alt="技术选型"></p>
<h3 id="假数据服务"><a href="#假数据服务" class="headerlink" title="假数据服务"></a>假数据服务</h3><h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><p>在平常的开发中，经常需要前后端联调，但是在项目开始之初，很多接口并没有提供，在以前的开发模式下，需要等待后端提供接口或者自己先定义接口，前端开发的进度可能会受影响。</p>
<h4 id="Mock数据平台"><a href="#Mock数据平台" class="headerlink" title="Mock数据平台"></a>Mock数据平台</h4><p>为了不影响前端开发的进度，我们搭建了Mock数据平台，通过与后端协商数据格式，自定义数据接口，这样子就可以做到前后端分离，让前端独立于后端进行开发。</p>
<p>Mock数据平台基于mockjs搭建而成，通过简单的mock语法来生成数据。</p>
<p>Mock数据平台目前有如下功能：</p>
<ol>
<li>创建模拟数据，使之符合各种场景；</li>
<li>生成json数据接口，支持CORS以及jsonp。</li>
</ol>
<p><img src="//misc.aotu.io/luckyadam/athena/athena_mock.jpg" alt="Mock数据平台"></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>本次分享首先讲述了我们在业务膨胀、人员不断增加的背景下遇到的项目开发上的问题，并提出了我们自己对于这些问题思考总结后得出的解决方案与思路，最后产出适合我们团队、业务的开发工具—— <a href="https://github.com/o2team/athena" target="_blank" rel="external">Athena</a>。希望我们的方案能给大家带来一定的借鉴作用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;随着互联网的发展，我们的业务也日益变得更加复杂且多样化起来，前端工程师也不再只是做简单的页面开发这么简单，我们需要面对的十分复杂的系统性问题，例如，业务愈来愈复杂，我们要如何清晰地梳理；团队人员愈来愈多，我们要如
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Front-end" scheme="https://aotu.io/tags/Front-end/"/>
    
      <category term="Engineering" scheme="https://aotu.io/tags/Engineering/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Web设计新趋势：SVG Sprites实践应用</title>
    <link href="https://aotu.io/notes/2016/07/09/SVG-Symbol-component-practice/"/>
    <id>https://aotu.io/notes/2016/07/09/SVG-Symbol-component-practice/</id>
    <published>2016-07-09T10:01:17.000Z</published>
    <updated>2016-10-20T07:06:32.428Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着移动互联网的到来，各种高清屏幕移动设备的层出不穷，导致H5应用在移动设备<code>retina</code>屏幕下经常会遇到图标不清晰的问题。</p>
<p>为了解决屏幕分辨率对图标影响的问题，通常采用CSS Sprite，Icon Font，CSS Icon以及SVG以适应@x1屏、@2屏、@3屏，相对比较而言SVG矢量性、缩放无损等诸多优点，更应受前端设计师的青睐，可在许多公司的移动项目应用中却很鲜见，究其主因在于SVG开发学习成本比较高以及在绘制的性能上比PNG要差。此篇文章将从SVG快速导出到SVG、SVG Symbol组件化在项目中实战进行讲解，并提供SVG Symbol快速导出工具，教你如何提高SVG开发效率减少成本。</p>
<h2 id="SVG简介"><a href="#SVG简介" class="headerlink" title="SVG简介"></a>SVG简介</h2><p>SVG是一种开放标准的矢量图形语言，使用<code>svg</code>格式我们可以直接用代码来描绘图像，可以用任何文字处理工具打开<code>svg</code>图像，通过改变部分代码来使图像具有交互功能，并可以随时插入到HTML中通过浏览器来浏览。</p>
<h3 id="SVG优缺点："><a href="#SVG优缺点：" class="headerlink" title="SVG优缺点："></a>SVG优缺点：</h3><table>
<thead>
<tr>
<th>优点</th>
<th>缺点 </th>
</tr>
</thead>
<tbody>
<tr>
<td>1.缩放无损还原，显示清晰</td>
<td>1.SVG在绘制的性能上比PNG要差</td>
</tr>
<tr>
<td>2.语义性良好</td>
<td>2.局限性，对应单色或普通渐变没什么问题，但对不规则的渐变以及特效叠加效果显示不全</td>
</tr>
<tr>
<td>3.可用CSS控制图标样式以及动画</td>
<td>3.兼容性稍差，android4.1才开始支持</td>
</tr>
<tr>
<td>4.减少http请求</td>
<td>4.学习应用成本较高</td>
</tr>
</tbody>
</table>
<h3 id="PS：SVG-为什么没有替代-iconfont？"><a href="#PS：SVG-为什么没有替代-iconfont？" class="headerlink" title="PS：SVG 为什么没有替代 iconfont？"></a>PS：SVG 为什么没有替代 iconfont？</h3><p>1.PC 端 SVG 有兼容性问题，因此 PC 端还是用 iconfont 比较靠谱。那么，与其为移动端多弄一套 SVG 方案，为什么不直接公用同一套 iconfont 库？成本问题。</p>
<p>2.知道 SVG Sprite 的人不多，而 iconfont 俨然成为前端面试必考题了。</p>
<p>3.抛开兼容，再就是SVG的局限性:单色或线性渐变(从左向右笔直进行渐变)，径向渐变(从内到外进行圆形渐变)都没问题、但是不规则的渐变、就实现不了了。</p>
<p>4.SVG比图片麻烦、设计稿如果不优化节点、直接导出、代码量那个惊人，然而ai导出的SVG代码、节点优化后，也不能直接用、还得小改、总体来说SVG比图片好耗费功力太多。</p>
<h2 id="Web应用中SVG的使用方式"><a href="#Web应用中SVG的使用方式" class="headerlink" title="Web应用中SVG的使用方式"></a>Web应用中SVG的使用方式</h2><h4 id="1-使用img、object、embed-标签直接引用SVG"><a href="#1-使用img、object、embed-标签直接引用SVG" class="headerlink" title="1.使用img、object、embed 标签直接引用SVG"></a>1.使用img、object、embed 标签直接引用SVG</h4><p>此方法的缺点主要在于每个图标都需单独保存成一个 SVG 文件，使用时单独请求，增加了HTTP请求数量。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">img</span> src=<span class="string">"http://www.w3school.com.cn/svg/rect1.svg"</span>  <span class="attribute">width</span>=<span class="string">"300"</span> /&gt;</div></pre></td></tr></table></figure>
<h4 id="2-Inline-SVG，直接把SVG写入-HTML-中"><a href="#2-Inline-SVG，直接把SVG写入-HTML-中" class="headerlink" title="2.Inline SVG，直接把SVG写入 HTML 中"></a>2.Inline SVG，直接把SVG写入 HTML 中</h4><p>Inline SVG 作为HTML文档的一部分，不需要单独请求。临时需要修改某个图标的形状也比较方便。但是Inline SVG使用上比较繁琐，需要在页面中插入一大块SVG代码不适合手写，图标复用起来也比较麻烦。</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;svg <span class="built_in">width</span>=<span class="string">"100%"</span> <span class="built_in">height</span>=<span class="string">"100%"</span>&gt;</div><div class="line">        &lt;<span class="built_in">rect</span> x=<span class="string">"20"</span> y=<span class="string">"20"</span> <span class="built_in">width</span>=<span class="string">"250"</span> <span class="built_in">height</span>=<span class="string">"250"</span> style=<span class="string">"fill:#fecdddd;"</span>/&gt;</div><div class="line">    &lt;/svg&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h4 id="3-SVG-Sprite"><a href="#3-SVG-Sprite" class="headerlink" title="3.SVG Sprite"></a>3.SVG Sprite</h4><p>这里的Sprite技术，类似于CSS中的Sprite技术。图标图形整合在一起，实际呈现的时候准确显示特定图标。其实基础的SVG Sprite也只是将原来的位图改成了SVG而已，控制SVG大小、颜色需要重新合并SVG文件。</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.icon-bg&#123;</div><div class="line">    <span class="built_in">display</span>: <span class="keyword">inline</span>-block;</div><div class="line">    <span class="built_in">width</span>: <span class="number">30</span>px;</div><div class="line">    <span class="built_in">height</span>: <span class="number">30</span>px;</div><div class="line">    <span class="built_in">background</span>: url(./res/svg-sprite-<span class="built_in">background</span>.svg);</div><div class="line">    <span class="built_in">background</span>-<span class="built_in">size</span>:<span class="number">100</span>% <span class="number">100</span>%;</div><div class="line">&#125;</div><div class="line">.icon-facebook-logo&#123;</div><div class="line">    <span class="built_in">background</span>-<span class="built_in">position</span>: <span class="number">0</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">.icon-earth&#123;</div><div class="line">    <span class="built_in">background</span>-<span class="built_in">position</span>: <span class="number">0</span> <span class="number">-30</span>px;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;span <span class="keyword">class</span>=<span class="string">"icon-bg icon-facebook-logo"</span>&gt;&lt;/span&gt;</div><div class="line">&lt;span <span class="keyword">class</span>=<span class="string">"icon-bg icon-earth"</span>&gt;&lt;/span&gt;</div></pre></td></tr></table></figure>
<h4 id="4-使用-SVG-中的-symbol，use-元素来制作SVG-Sprite"><a href="#4-使用-SVG-中的-symbol，use-元素来制作SVG-Sprite" class="headerlink" title="4.使用 SVG 中的 symbol，use 元素来制作SVG Sprite"></a>4.使用 SVG 中的 symbol，use 元素来制作SVG Sprite</h4><p>SVG Symbols的使用，本质上是对Sprite的进一步优化，通过<code>&lt;symbol&gt;</code>元素来对单个SVG元素进行分组，使用<code>&lt;use&gt;</code>元素引用并进行渲染。这种方法的解决了上述三种方式带来的弊端，少量的http请求，图标能被缓存方便复用，每个SVG图标可以更改大小颜色，整合、使用以及管理起来非常简单。</p>
<p>①SVG Symbols作为body的第一个元素插入在HTML中使用：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;svg style="width:<span class="number">0</span><span class="comment">; height:0; visibility:hidden;position:absolute;z-index:-1"&gt;</span></div><div class="line">        &lt;symbol viewBox="<span class="number">0 0 24 24</span>" id="heart"&gt;</div><div class="line">            &lt;path fill="#E86C60" d="M17,<span class="number">0</span>c-<span class="number">1.9,0-3</span>.<span class="number">7,0.8-5</span>,<span class="number">2.1C10.7</span>,<span class="number">0.8,8.9</span>,<span class="number">0,7,0C3</span>.<span class="number">1,0,0,3</span>.<span class="number">1,0,7c0</span>,<span class="number">6.4,10.9</span>,<span class="number">15.4,11.4</span>,<span class="number">15</span>.<span class="number">8</span> c<span class="number">0.2,0.2</span>,<span class="number">0.4,0.2</span>,<span class="number">0</span>.<span class="number">6,0.2s0</span>.<span class="number">4-0.1,0</span>.<span class="number">6-0.2C13</span>.<span class="number">1,22.4,24</span>,<span class="number">13</span>.<span class="number">4,24,7C24</span>,<span class="number">3.1,20.9</span>,<span class="number">0</span>,<span class="number">17</span>,<span class="number">0</span>z"&gt;&lt;/path&gt;</div><div class="line">        &lt;/symbol&gt;</div><div class="line">    &lt;/svg&gt;</div><div class="line"></div><div class="line">    &lt;svg&gt;</div><div class="line">        &lt;use xlink:href="#heart"/&gt; </div><div class="line">    &lt;/svg&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>②使用完整路径引用Icon（此方法涉及到跨域问题）</p>
<p>存在跨域问题，同域可以使用。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    //路径形式进行获取icon</div><div class="line">    <span class="tag">&lt;<span class="name">svg</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"/asset/svg-symbols.svg#heart"</span>/&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">svg</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"/asset/svg-symbols.svg#heart"</span>/&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>③js控制SVG写入body进行引用</p>
<p>推荐使用，有效分离结构和展现、解决缓存以及跨域问题。</p>
<p>svg.js:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var symbols = '&lt;svg style="width:<span class="number">0</span><span class="comment">; height:0; visibility:hidden;position:absolute;z-index:-1"&gt;</span></div><div class="line">        &lt;symbol viewBox="<span class="number">0 0 24 24</span>" id="heart"&gt;</div><div class="line">            &lt;path fill="#E86C60" d="M17,<span class="number">0</span>c-<span class="number">1.9,0-3</span>.<span class="number">7,0.8-5</span>,<span class="number">2.1C10.7</span>,<span class="number">0.8,8.9</span>,<span class="number">0,7,0C3</span>.<span class="number">1,0,0,3</span>.<span class="number">1,0,7c0</span>,<span class="number">6.4,10.9</span>,<span class="number">15.4,11.4</span>,<span class="number">15</span>.<span class="number">8</span> c<span class="number">0.2,0.2</span>,<span class="number">0.4,0.2</span>,<span class="number">0</span>.<span class="number">6,0.2s0</span>.<span class="number">4-0.1,0</span>.<span class="number">6-0.2C13</span>.<span class="number">1,22.4,24</span>,<span class="number">13</span>.<span class="number">4,24,7C24</span>,<span class="number">3.1,20.9</span>,<span class="number">0</span>,<span class="number">17</span>,<span class="number">0</span>z"&gt;&lt;/path&gt;</div><div class="line">        &lt;/symbol&gt;</div><div class="line">    &lt;/svg&gt;'<span class="comment">;</span></div><div class="line">document.body.insertAdjacentHTML("afterBegin",symbols)</div></pre></td></tr></table></figure></p>
<p>svg.html:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    //脚本需在svg use引用之前引入</div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"/asset/svg.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">svg</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#heart"</span>/&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="SVG快速导出"><a href="#SVG快速导出" class="headerlink" title="SVG快速导出"></a>SVG快速导出</h2><h3 id="SVG导出工具："><a href="#SVG导出工具：" class="headerlink" title="SVG导出工具："></a>SVG导出工具：</h3><ul>
<li>Photoshop CC 2015 以上版本均支持导出SVG功能</li>
<li>Adobe Illustrator 导出</li>
<li><a href="http://hackingui.com/design/export-photoshop-layer-to-svg/" target="_blank" rel="external">export-photoshop-layer-to-svg</a>基于photoshop的SVG导出插件</li>
<li><a href="http://firetuts.com/export-svg-with-fireworks/" target="_blank" rel="external">export-svg-with-fireworks</a>基于firework的SVG导出插件</li>
</ul>
<h3 id="Photoshop-CC-2015-导出SVG使用"><a href="#Photoshop-CC-2015-导出SVG使用" class="headerlink" title="Photoshop CC 2015 导出SVG使用"></a>Photoshop CC 2015 导出SVG使用</h3><p>Ps可以对矢量图层进行导出，即通过矢量工具绘制所在图层或图层文件夹进行导出，若对不是矢量图形进行导出，可能会引起错误或者导出的文件是位图。</p>
<p>SVG导出，建议图形一定要撑满整个画布，若存在间隙，网页使用时图标居中对齐就会比较麻烦。</p>
<p>1.批量导出SVG<br>批量导出SVG，只需在矢量图层或失落图层文件夹名后添加相应格式后缀（如.svg)，依次点击菜单“文件-&gt;生成-&gt;图像资源”，确认该菜单项已被勾选。但是此方法会根据icon实际大小进行导出，若icon图标存在小数导出就不太适用，我们需要手动去调节。</p>
<p><img src="//misc.aotu.io/pfan123/hob/export.png" alt="export"></p>
<p>2.设置导出为单个导出<br>设置导出为单个导出，选中矢量图层单击右键，依次点击“导出为-&gt;设置参数-&gt;导出”，此方法可以设置SVG的图像实际大小，以及画布大小。</p>
<p>导出为：</p>
<p><img src="//misc.aotu.io/pfan123/hob/export2.png" alt="export"></p>
<p>设置导出SVG图像实际大小，以及画布大小：</p>
<p><img src="//misc.aotu.io/pfan123/hob/export1.png" alt="export"></p>
<h2 id="SVG-Symbol自动化合并生成"><a href="#SVG-Symbol自动化合并生成" class="headerlink" title="SVG Symbol自动化合并生成"></a>SVG Symbol自动化合并生成</h2><p>Photoshop导出来的是单个SVG文件，需要将这些单个SVG文件进行合并生产<code>symbol</code>的SVG，这样才能通过<code>symbol＋use</code>进行引用。可以使用手工合并，推荐使用工具，安利给大家一个专门用于处理SVG Symbols用的glup插件<a href="https://github.com/Hiswe/gulp-svg-symbols" target="_blank" rel="external">gulp-svg-symbols</a>。</p>
<p>下面我们就来以一个实例一步一步来使用下这个插件。</p>
<p>首先新建一个文件夹，目录结构如下图所示：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">assets</div><div class="line">   ├── svg   <span class="comment">//存放ps导出的大量svg文件</span></div><div class="line">       ├── xxx<span class="selector-class">.svg</span></div><div class="line">       ├── xxx<span class="selector-class">.svg</span></div><div class="line">       ├── xxx<span class="selector-class">.svg</span></div><div class="line">   ├── out</div><div class="line">   ├── gulpfile<span class="selector-class">.js</span> </div><div class="line">   ├── package<span class="selector-class">.json</span> </div><div class="line">   ├── index.html</div></pre></td></tr></table></figure>
<p>安装gulp-svg-symbols插件,若没有预先安装gulp请先行安装:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="selector-tag">i</span> gulp-svg-symbols  --save</div></pre></td></tr></table></figure>
<p><code>gulpfile.js</code>写入如下执行任务：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="string">'use strick'</span>;</div><div class="line"><span class="keyword">const</span> gulp = <span class="keyword">require</span>(<span class="string">"gulp"</span>);</div><div class="line"><span class="keyword">const</span> symbols = <span class="keyword">require</span>(<span class="string">"gulp-svg-symbols"</span>);</div><div class="line"></div><div class="line"><span class="comment">//转换svg</span></div><div class="line">gulp.task(<span class="string">'svg'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./svg/**'</span>)</div><div class="line">    .pipe(symbols())</div><div class="line">    .pipe(gulp.dest(<span class="string">'out/'</span>))</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>执行任务导出svg-symbols：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp svg  <span class="comment">//out文件夹，生成svg-symbols.svg，svg-symbols.css（此文件对应svg样式，基本无用）</span></div></pre></td></tr></table></figure></p>
<h2 id="SVG-Symbol可视化工具"><a href="#SVG-Symbol可视化工具" class="headerlink" title="SVG Symbol可视化工具"></a>SVG Symbol可视化工具</h2><p>为了方便快速批量合成SVG图标生成 SVG Symbol，提高效率，我们开发了简易版的SVG Symbol可视化工具<code>svg tool</code>。</p>
<h3 id="svg-tool使用："><a href="#svg-tool使用：" class="headerlink" title="svg tool使用："></a>svg tool使用：</h3><p>打开后界面</p>
<p><img src="//misc.aotu.io/pfan123/hob/svgtool.png" alt="export"></p>
<h4 id="使用范围："><a href="#使用范围：" class="headerlink" title="使用范围："></a>使用范围：</h4><p>主要支持单层结构SVG进行合并生产symbol，对于多层结构SVG合并注意手动修改对应颜色。</p>
<h4 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h4><ul>
<li><p>1.支持拖拽文件夹，自动遍历SVG文件合并生成symbol文件。</p>
</li>
<li><p>2.提供两种导出方式，正常模式、修正模式。</p>
</li>
<li><p>3.对文件viewBox大小不为整进行提示，可以选择自动修正模式系统自动放大处理。</p>
</li>
<li><p>4.导出svg-symbol.svg、svg-symbol.js，可直接引入svg-symbol.js方便使用。</p>
</li>
</ul>
<p>svg tool下载地址：</p>
<p>mac：<a href="http://jdc.jd.com/svg/svgtoolfile/svgtool-1.0.0.dmg" target="_blank" rel="external">http://jdc.jd.com/svg/svgtoolfile/svgtool-1.0.0.dmg</a></p>
<p>win32: <a href="http://jdc.jd.com/svg/svgtoolfile/svgtool-win32-ia32.zip" target="_blank" rel="external">http://jdc.jd.com/svg/svgtoolfile/svgtool-win32-ia32.zip</a></p>
<p>win64: <a href="http://jdc.jd.com/svg/svgtoolfile/svgtool-win32-ia32.zip" target="_blank" rel="external">http://jdc.jd.com/svg/svgtoolfile/svgtool-win32-x64.zip</a></p>
<p>参考资料：</p>
<ul>
<li><a href="https://io-meter.com/2014/07/20/replace-icon-fonts-with-svg/" target="_blank" rel="external">Web 设计新趋势: 使用 SVG 代替 Web Icon Font</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207863967&amp;idx=1&amp;sn=3d7b07d528f38e9f812e8df7df1e3322&amp;scene=4#wechat_redirect" target="_blank" rel="external">Android微信上的SVG</a></li>
<li><a href="https://isux.tencent.com/16292.html" target="_blank" rel="external">使用SVG中的Symbol元素制作Icon</a></li>
<li><a href="http://www.cnblogs.com/dxy1982/tag/svg/" target="_blank" rel="external">突袭HTML5之SVG 2D入门</a></li>
<li><a href="http://css-tricks.com/icon-fonts-vs-svg/" target="_blank" rel="external">CSS Trick 中总结的 Icon Font使用缺陷</a></li>
<li><a href="https://jarevrygo.gitbooks.io/webbook/content/5-2-1svgli_jie_yu_yun_yong.html" target="_blank" rel="external">svg理解与运用</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着移动互联网的到来，各种高清屏幕移动设备的层出不穷，导致H5应用在移动设备&lt;code&gt;retina&lt;/
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="svg" scheme="https://aotu.io/tags/svg/"/>
    
      <category term="svg symbol" scheme="https://aotu.io/tags/svg-symbol/"/>
    
      <category term="svg sprites" scheme="https://aotu.io/tags/svg-sprites/"/>
    
  </entry>
  
  <entry>
    <title>feWorkflow - 使用electron, react, redux, immutable构建桌面App</title>
    <link href="https://aotu.io/notes/2016/07/05/fe-workflow/"/>
    <id>https://aotu.io/notes/2016/07/05/fe-workflow/</id>
    <published>2016-07-05T02:24:35.000Z</published>
    <updated>2016-10-20T07:06:32.427Z</updated>
    
    <content type="html"><![CDATA[<p>15年初创建了适用于目前团队的gulp工作流，旨在以一个gulpfile来操作和执行所有文件结构。随着项目依赖滚雪球式的增长，拉取npm包成了配置中最麻烦而极容易出错的一项。为了解决配置过程中遇到的种种问题，15年底草草实现了一个方案，用nw.js（基于Chromium和node.js的app执行工具）框架来编写了一个简单的桌面应用<a href="http://whatifhappen.github.io/GulpUI-WX/" target="_blank" rel="external">gulp-ui</a>, 所做的操作是打包gulpfile和所依赖的所有node_modules在一起，然后简单粗暴的在app内部执行gulpfile。</p>
<a id="more"></a>
<p><a href="http://whatifhappen.github.io/GulpUI-WX/" target="_blank" rel="external">gulp-ui</a>做出来后再团队中使用了一段时间，以单个项目来执行的方式确实在经常多项目开发的使用环境中多有不便。于是在这个基础上，重写了整个代码结构，开发了现在的版本feWorkflow.</p>
<p><a href="http://whatifhappen.github.io/GulpUI-WX/" target="_blank" rel="external">feWorkflow</a>改用了electron做为底层，使用react, redux, immutable框架做ui开发，仍然基于运行gulpfile的方案，这样可以使每个使用自己团队的gulp工作流快速接入和自由调整。</p>
<p><img src="https://sfault-image.b0.upaiyun.com/254/455/2544556661-577b5347d97a0_articlex" alt="feWorkflow"></p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="一键式开发-压缩"><a href="#一键式开发-压缩" class="headerlink" title="一键式开发/压缩"></a>一键式开发/压缩</h3><ul>
<li>less实时监听编译css</li>
<li>css前缀自动补全</li>
<li>格式化html，并自动替换src源码路径为tc_idc发布路径</li>
<li>压缩图片(png|jpg|gif|svg)</li>
<li>压缩或格式化js，并自动替换src源码路径为tc_idc发布路径</li>
<li>同步刷新浏览器browserSync</li>
</ul>
<h2 id="框架选型"><a href="#框架选型" class="headerlink" title="框架选型"></a>框架选型</h2><h3 id="electron"><a href="#electron" class="headerlink" title="electron"></a>electron</h3><p>与 NW.js 相似，Electron 提供了一个能通过 JavaScript 和 HTML 创建桌面应用的平台，同时集成 Node 来授予网页访问底层系统的权限。</p>
<p>使用nw.js时遇到了很多问题，设置和api比较繁琐，于是改版过程用再开发便利性上的考虑转用了electron。</p>
<p>electron应用布署非常简单，存放应用程序的文件夹需要叫做 <code>app</code> 并且需要放在 Electron 的 资源文件夹下（在 macOS 中是指 <code>Electron.app/Contents/Resources/</code>，在 Linux 和 Windows 中是指 <code>resources/</code>） 就像这样：</p>
<p>macOS:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">electron/Electron.app/Contents/Resources/app/</div><div class="line">├── package.json</div><div class="line">├── main.js</div><div class="line">└── index.html</div></pre></td></tr></table></figure>
<p>在 Windows 和 Linux 中:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">electron/resources/app</div><div class="line">├── package.json</div><div class="line">├── main.js</div><div class="line">└── index.html</div></pre></td></tr></table></figure>
<p>然后运行 <code>Electron.app</code> （或者 Linux 中的 <code>electron</code>，Windows 中的 <code>electron.exe</code>）, 接着 Electron 就会以你的应用程序的方式启动。</p>
<h5 id="目录释义"><a href="#目录释义" class="headerlink" title="目录释义"></a>目录释义</h5><p><code>package.json</code>主要用来指定app的名称，版本，入口文件，依赖文件等</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>    : <span class="string">"your-app"</span>,</div><div class="line">  <span class="attr">"version"</span> : <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="attr">"main"</span>    : <span class="string">"main.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>main.js</code> 应该用于创建窗口和处理系统事件，官方也是推荐使用<code>es6</code>来开发，典型的例子如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">'electron'</span>);</div><div class="line"><span class="comment">//引入app模块</span></div><div class="line"><span class="keyword">const</span> &#123;app&#125; = electron;</div><div class="line"><span class="comment">// 引入窗口视图</span></div><div class="line"><span class="keyword">const</span> &#123;BrowserWindow&#125; = electron;</div><div class="line"><span class="comment">//设置一个变量</span></div><div class="line"><span class="keyword">let</span> mainWindow;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//实例化一个新的窗口</span></div><div class="line">  mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;);</div><div class="line"></div><div class="line">  <span class="comment">//加载electron主页面</span></div><div class="line">  mainWindow.loadURL(<span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/index.html`</span>);</div><div class="line"></div><div class="line">  <span class="comment">//打开chrome开发者工具</span></div><div class="line">  mainWindow.webContents.openDevTools();</div><div class="line"></div><div class="line">  <span class="comment">//监听窗口关闭状态</span></div><div class="line">  mainWindow.on(<span class="string">'closed'</span>, () =&gt; &#123;</div><div class="line">    mainWindow = <span class="literal">null</span>;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//当app初始化完毕，开始创建一个新窗口</span></div><div class="line">app.on(<span class="string">'ready'</span>, createWindow);</div><div class="line"></div><div class="line"><span class="comment">//监听app窗口关闭状态</span></div><div class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">//mac osx中只有执行command+Q才会退出app，否则保持活动状态</span></div><div class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</div><div class="line">    app.quit();</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">//mac osx中再dock图标点击时重新创建一个窗口</span></div><div class="line">  <span class="keyword">if</span> (mainWindow === <span class="literal">null</span>) &#123;</div><div class="line">    createWindow();</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>index.html</code>则用来输出你的html：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    We are using node <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.node)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>,</div><div class="line">    Chrome <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.chrome)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>,</div><div class="line">    and Electron <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.electron)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>.</div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>electron官方提供了一个快速开始的模板：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Clone the Quick Start repository</div><div class="line">$ git clone https://github.com/electron/electron-quick-start</div><div class="line"></div><div class="line"># Go into the repository</div><div class="line">$ cd electron-quick-start</div><div class="line"></div><div class="line"># Install the dependencies and run</div><div class="line">$ npm install &amp;&amp; npm start</div></pre></td></tr></table></figure>
<p>更多入门介绍可以查看这里<a href="https://github.com/electron/electron/blob/master/docs-translations/zh-CN/tutorial/quick-start.md" target="_blank" rel="external">Electron快速入门</a>.</p>
<hr>
<h3 id="React-ES6"><a href="#React-ES6" class="headerlink" title="React + ES6"></a>React + ES6</h3><p>React做为一个用来构建UI的JS库开辟了一个相当另类的途径，实现了前端界面的高效率高性能开发。React的虚拟DOM不仅带来了简单的UI开发逻辑，同时也带来了组件化开发的思想。</p>
<p>ES6做为js的新规范带来了许多新的变化，从代码的编写上也带来了许多的便利性。</p>
<p>一个简单的<code>react</code>模块示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//jsx</span></div><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span>, document.getElementById('root')));</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//html</div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//实际输出</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span>Hello John<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过<code>React.createClass</code>创建一个<code>react</code>模块，使用<code>render</code>函数返回这个模块中的实际html模板，然后引用<code>ReactDOM</code>的<code>render</code>函数生成到指定的html模块中。调用<code>HelloMessage</code>的方法，则是写成一个<code>xhtml</code>的形式<code>&lt;HelloMessage name=&quot;John&quot; /&gt;</code>，将<code>name</code>里面的”John”做为一个属性值传到<code>HelloMessage</code>中，通过<code>this.props.name</code>来调用。</p>
<p>当然，这个是未经编译的<code>jsx</code>文件，不能实际输出到html中，如果想要未经编译使用<code>jsx</code>文件，可以在<code>html</code>中引用<code>babel</code>的组件，例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">      ReactDOM.render(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line">      );</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>自从<code>es6</code>正式发布后，<code>react</code>也改用了<code>babel</code>做为编译工具，也因此许多开发者开始将代码开发风格项<code>es6</code>转变。</p>
<p>于是<code>React.createClass</code>的方法被取代为es6中的扩展类写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到这些语法有了细微的不同：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5的写法</span></div><div class="line"><span class="keyword">var</span> HelloWorld = React.createClass(&#123;</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;...&#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//ES6及以上写法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  handleClick(e) &#123;...&#125;</div><div class="line">  render() &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在feWorkflow中基本都是使用ES6的写法做为开发, 例如最终输出的container模块：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ListFolder <span class="keyword">from</span> <span class="string">'./list/list'</span>;</div><div class="line"><span class="keyword">import</span> Dropzone <span class="keyword">from</span> <span class="string">'./layout/dropzone'</span>;</div><div class="line"><span class="keyword">import</span> ContainerEmpty <span class="keyword">from</span> <span class="string">'./container-empty'</span>;</div><div class="line"><span class="keyword">import</span> ContainerFt <span class="keyword">from</span> <span class="string">'./layout/container-ft'</span>;</div><div class="line"><span class="keyword">import</span> Aside <span class="keyword">from</span> <span class="string">'./layout/aside'</span>;</div><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Container = <span class="function">(<span class="params">&#123; lists &#125;</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"container"</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"container-bd"</span>&gt;</span></div><div class="line">      &#123;lists.size ? <span class="tag">&lt;<span class="name">ListFolder</span> /&gt;</span> : <span class="tag">&lt;<span class="name">ContainerEmpty</span> /&gt;</span>&#125;</div><div class="line">      <span class="tag">&lt;<span class="name">Dropzone</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ContainerFt</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Aside</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">states</span>) =&gt;</span> (&#123;</div><div class="line">  <span class="attr">lists</span>: states.lists</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps)(Container);</div></pre></td></tr></table></figure>
<p>import做为ES6的引入方式，来取代commonJS的require模式，等同于</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ListFoder = <span class="built_in">require</span>(<span class="string">'./list/list'</span>);</div></pre></td></tr></table></figure>
<p>输出从<code>module.export = Container;</code> 替换成<code>export default Container;</code></p>
<p>这种写法其实等同于：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5写法</span></div><div class="line"><span class="keyword">var</span> Container = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    ...</div><div class="line">    &#123;<span class="keyword">this</span>.props.lists.size ? <span class="xml"><span class="tag">&lt;<span class="name">ListFolder</span> /&gt;</span> : <span class="tag">&lt;<span class="name">ContainerEmpty</span> /&gt;</span>&#125;</span></div><div class="line">    ...</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>{ lists }</code>的写法编译成ES5的写法等同于：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Container = <span class="function"><span class="keyword">function</span> <span class="title">Container</span>(<span class="params">_ref</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> lists = _ref.lists;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相当于减少了非常多的赋值操作, 极大了减少了开发的工作量。</p>
<hr>
<h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>ES6中介绍了一下编译之后的代码，而每个文件里其实也并没有import必须的react模块，其实都是通过Webpack这个工具来执行了编译和打包。在webpack中引入了<code>babel-loader</code>来编译<code>react</code>和<code>es6</code>的代码，并将css通过<code>less-loader</code>,<code>css-loader</code>, <code>style-loader</code>自动编译到html的style标签中，再通过</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">  <span class="attr">React</span>: <span class="string">'react'</span></div><div class="line">&#125;),</div></pre></td></tr></table></figure>
<p>的形式，将react组件注册到每个js文件中，不需再重复引用，最后把所有的js模块编译打包输出到<code>dist/bundle.js</code>，再html中引入即可。</p>
<p>流程图：</p>
<p><img src="https://segmentfault.com/img/bVyPyt" alt="wepback"></p>
<p>webpack部分设置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">devtool</span>: <span class="string">'source-map'</span>,</div><div class="line">  <span class="attr">entry</span>: [</div><div class="line">    <span class="string">'./src/index'</span></div><div class="line">  ],</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.join(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span>,</div><div class="line">    <span class="attr">publicPath</span>: <span class="string">'/dist/'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">target</span>: <span class="string">'atom'</span>,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">        <span class="attr">include</span>: path.join(__dirname, <span class="string">'src'</span>),</div><div class="line">        <span class="attr">loader</span>: <span class="built_in">require</span>.resolve(<span class="string">'babel-loader'</span>),</div><div class="line">        ...</div><div class="line">      &#125;,</div><div class="line">   ...</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>webpack需要设置入口文件<code>entry</code>，在此是引入了源码文件夹src中的<code>index.js</code>，和一个或多个出口文件<code>output</code>，输出devtool<code>source-map</code>使得源代码可见，而非编译后的代码，然后制定所需要的<code>loader</code>来做模块的编译。</p>
<p>与<code>electron</code>相关的一个比较重要的点是，必须指定<code>target: atom</code>，否则会出现无法resolve electron modules的报错提示。</p>
<p>更多介绍可以参考<a href="https://segmentfault.com/a/1190000002551952" target="_blank" rel="external">Webpack 入门指迷</a></p>
<p>feWorkflow项目中选用了<a href="https://github.com/gaearon/react-transform-hmr" target="_blank" rel="external">react-transform-hmr</a>做为模板，已经写好了基础的<code>webpack</code>文件，支持<code>react</code>热加载，不再需要经常去刷新electron，不过该作者已经停止维护这个项目，而是恢复维护<code>react-hot-reload</code>，现在重新开发<a href="https://github.com/gaearon/react-hot-loader/pull/240" target="_blank" rel="external">React Hot Loader 3</a>, 有兴趣可以去了解一下。</p>
<hr>
<h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>Redux是针对JavaScript apps的一个可预见的state容器。它可以帮助我们写一个行为保持一致性的应用，可以运行再不同的环境中（client，server，和原生），并非常容易测试。</p>
<p>Redux 可以用这三个基本原则来描述：</p>
<ol>
<li><p><strong>单一数据源</strong> </p>
<p><strong>整个应用的 state 被储存在一个 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> store = createStore(counter) <span class="comment">//创建一个redux store来保存你的app中所有state</span></div><div class="line"></div><div class="line"><span class="comment">//当state更新时，可以使用 subscribe()来绑定监听更新UI，通常情况下不会直接使用这个方法，而是会用view层绑定库（类似react-redux等)。</span></div><div class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span></div><div class="line">  <span class="built_in">console</span>.log(store.getState()) <span class="comment">//抛出所有数据</span></div><div class="line">)</div></pre></td></tr></table></figure>
</li>
<li><p><strong>State是只读的</strong></p>
<p>惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。</p>
<p>所有的修改都被集中化处理，且严格按照一个接一个的顺序执行. 而执行的方法是调用<code>dispatch</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">store.dispatch(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'COMPLETE_TODO'</span>,</div><div class="line">  <span class="attr">index</span>: <span class="number">1</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>使用纯函数来执行修改</strong></p>
<p>为了描述 action 如何改变 state tree ，你需要编写 <code>reducers</code>。</p>
<p><code>Reducer</code> 只是一些纯函数，它接收先前的 <code>state</code> 和 <code>action</code>，并返回新的 <code>state</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</div><div class="line">    <span class="keyword">return</span> state + <span class="number">1</span></div><div class="line">  <span class="keyword">case</span> <span class="string">'DECREMENT'</span>:</div><div class="line">    <span class="keyword">return</span> state - <span class="number">1</span></div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> state</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>redux流程图：</p>
<p><img src="https://segmentfault.com/img/bVyPyi" alt="redux"></p>
<hr>
<h3 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React-Redux"></a>React-Redux</h3><p>redux在react中应用还需要加载<code>react-redux</code>模块，因为<code>store</code>为单一state结构头，我们仅需要在入口处调用react-redux的<code>Provider</code>方法抛出<code>store</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Container</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>这样，在container的内部都能接收到<code>store</code>。</p>
<p>我们需要一个操作store的<code>reducer</code>. 当我们的reducer拆分好对应给不同的子组件之后，redux提供了一个<code>combineReducers</code>的方法，把所有的<code>reducers</code>合并起来:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> lists <span class="keyword">from</span> <span class="string">'./list'</span>;</div><div class="line"><span class="keyword">import</span> snackbar <span class="keyword">from</span> <span class="string">'./snackbar'</span>;</div><div class="line"><span class="keyword">import</span> dropzone <span class="keyword">from</span> <span class="string">'./dropzone'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</div><div class="line">  lists,</div><div class="line">  snackbar,</div><div class="line">  dropzone,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>然后通过<code>createStore</code>的方式链接<code>store</code>与<code>reducer</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'../reducer/reducer'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducer);</div></pre></td></tr></table></figure>
<p>上文介绍<code>redux</code>的时候也说过，<strong>state</strong>是只读的，只能通过action来操作，同样我们也可以把<code>dispatch</code>映射成为一个props传入Container中。</p>
<p>在子模块中, 则把这个store映射成react的props，再用<code>connect</code>方法，把store和component链接起来：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>; <span class="comment">//引入connect方法</span></div><div class="line"><span class="keyword">import</span> &#123; addList &#125; <span class="keyword">from</span> <span class="string">'../../action/addList'</span>; <span class="comment">//从action中引入addList方法</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> AddListBtn = <span class="function">(<span class="params">&#123; lists, addList &#125;</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">FloatingActionButton</span></span></span></div><div class="line">    <span class="attr">onClick</span>=<span class="string">&#123;(event)</span> =&gt; &#123;</div><div class="line">        addList('do something here');</div><div class="line">      return false;</div><div class="line">      &#125;);</div><div class="line">    &#125;&#125;</div><div class="line">  &gt;;</div><div class="line">);</div><div class="line">const mapStateToProps = (states) =&gt; (&#123;</div><div class="line">  //从state.lists获取数据存储到lists中，做为属性传递给AddListBtn</div><div class="line">  lists: states.lists</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const mapDispatchToProps = (dispatch) =&gt; (&#123;</div><div class="line">  //将addList函数做为属性传递给AddListBtn</div><div class="line">  addList: (name, location) =&gt; dispatch(addList(name, location));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//lists, addList做为属性链接到Conta</div><div class="line">export default connect(mapStateToProps, mapDispatchToProps)(AddListBtn);</div></pre></td></tr></table></figure>
<p>这样，就完成了redux与react的交互，很便捷的从上而下操作数据。</p>
<hr>
<h3 id="immutable-js"><a href="#immutable-js" class="headerlink" title="immutable.js"></a>immutable.js</h3><p>Immutable Data是指一旦被创造后，就不可以被改变的数据。</p>
<p>通过使用Immutable Data，可以让我们更容易的去处理缓存、回退、数据变化检测等问题，简化我们的开发。</p>
<p>所以当对象的内容没有发生变化时，或者有一个新的对象进来时，我们倾向于保持对象引用的不变。这个工作正是我们需要借助Facebook的 <a href="https://github.com/facebook/immutable-js" target="_blank" rel="external">Immutable.js</a>来完成的。</p>
<blockquote>
<p>不变性意味着数据一旦创建就不能被改变，这使得应用开发更为简单，避免保护性拷贝（defensive copy），并且使得在简单的应用 逻辑中实现变化检查机制等。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stateV1 = Immutable.fromJS(&#123;  </div><div class="line"><span class="attr">users</span>: [</div><div class="line">  &#123; <span class="attr">name</span>: <span class="string">'Foo'</span> &#125;,</div><div class="line">  &#123; <span class="attr">name</span>: <span class="string">'Bar'</span> &#125;</div><div class="line">]</div><div class="line">&#125;);</div><div class="line"> </div><div class="line"><span class="keyword">var</span> stateV2 = stateV1.updateIn([<span class="string">'users'</span>, <span class="number">1</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">  <span class="keyword">return</span> Immutable.fromJS(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'Barbar'</span></div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">stateV1 === stateV2; <span class="comment">// false  </span></div><div class="line">stateV1.getIn([<span class="string">'users'</span>, <span class="number">0</span>]) === stateV2.getIn([<span class="string">'users'</span>, <span class="number">0</span>]); <span class="comment">// true  </span></div><div class="line">stateV1.getIn([<span class="string">'users'</span>, <span class="number">1</span>]) === stateV2.getIn([<span class="string">'users'</span>, <span class="number">1</span>]); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>feWorkflow项目中使用最多的是<code>List</code>来创建一个数组，<code>Map()</code>来创建一个对象，再通过<code>set</code>的方法来更新数组，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; List, <span class="built_in">Map</span> &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> syncFolder = List([</div><div class="line">  <span class="built_in">Map</span>(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'syncFromFolder'</span>,</div><div class="line">    <span class="attr">label</span>: <span class="string">'从目录复制'</span>,</div><div class="line">    <span class="attr">location</span>: <span class="string">''</span></div><div class="line">  &#125;),</div><div class="line">  <span class="built_in">Map</span>(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'syncToFolder'</span>,</div><div class="line">    <span class="attr">label</span>: <span class="string">'复制到目录'</span>,</div><div class="line">    <span class="attr">location</span>: <span class="string">''</span></div><div class="line">  &#125;)</div><div class="line">]);</div></pre></td></tr></table></figure>
<p>更新的时候使用<code>setIn</code>方法，传递<code>Map</code>对象的序号，选中<code>location</code>这个属性，通过<code>action</code>传递过来的新值<code>action.location</code>更新值，并返回一个全新的数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">'SET_SYNC_FOLDER'</span>:</div><div class="line">      <span class="keyword">return</span> state.setIn([<span class="string">'syncFolder'</span>, action.index, <span class="string">'location'</span>], action.location);</div></pre></td></tr></table></figure>
<h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储:"></a>数据存储:</h4><p><strong>存：</strong></p>
<p>immutable的数据已经不是单纯的json数据格式，当我们要做json格式的数据存储的时候，可以使用<code>toJS()</code>方法抛出js对象，并通过<code>JSON.stringnify()</code>将js数据转换成json字符串，存入localstorage中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> saveState = <span class="function">(<span class="params">name = <span class="string">'state'</span>, state = <span class="string">'state'</span></span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">const</span> data = <span class="built_in">JSON</span>.stringify(state.toJS());</div><div class="line">    localStorage.setItem(name, data);</div><div class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'err'</span>, err);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>取：</strong></p>
<p>读取本地的json格式数据后，当需要加载进页面，首先需要把这段json数据转换会immutable.js数据格式，<code>immutable</code>提供了<code>fromJS()</code>方法，将js对象和数组转换成immtable的<code>Maps</code>和<code>Lists</code>格式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; fromJS, Iterable &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> loadState = <span class="function">(<span class="params">name = <span class="string">'setting'</span></span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">const</span> data = localStorage.getItem(name);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (data === <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">    &#125;P</div><div class="line"></div><div class="line">    <span class="keyword">return</span> fromJS(<span class="built_in">JSON</span>.parse(data), (key, value) =&gt; &#123;</div><div class="line">      <span class="keyword">const</span> isIndexed = Iterable.isIndexed(value);</div><div class="line">      <span class="keyword">return</span> isIndexed ? value.toList() : value.toMap();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h2 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h2><p>上文介绍了整个feWorkflow的UI技术实现方案，现在来介绍下实际上gulp在这里是如何工作的。</p>
<p><strong>思路</strong></p>
<p>我们知道<code>node</code>中调用<code>child_process</code>的<code>exec</code>可以执行系统命令，gulpfile.js本身会调用离自身最近的node_modules，而gulp提供了API可以通过flag的形式(—cwd)来执行不同的路径。以此为思路，以最简单的方式，在按钮上绑定执行状态（dev或者build，包括flag等），通过<code>exec</code>直接运行gulp file.js.</p>
<p><strong>实现</strong></p>
<p>当按钮点击的时候，判断是否在执行中，如果在执行中则杀掉进程，如果不在执行中则通过<code>exec</code>执行当前按钮状态的命令。然后扭转按钮的状态，等待下一次按钮点击。</p>
<p>命令模式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ListBtns = <span class="function">(<span class="params">&#123;btns, listId, listLocation, onProcess, cancelBuild, setSnackbar&#125;</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"btn-group btn-group__right"</span>&gt;</span></span></div><div class="line">    &#123;</div><div class="line">      btns.map((btn, i) =&gt; (</div><div class="line">        <span class="tag">&lt;<span class="name">RaisedButton</span></span></div><div class="line">          <span class="attr">key</span>=<span class="string">&#123;i&#125;</span></div><div class="line">          <span class="attr">className</span>=<span class="string">"btn"</span></div><div class="line">          <span class="attr">style</span>=<span class="string">&#123;style&#125;</span></div><div class="line">          <span class="attr">label</span>=<span class="string">&#123;btn.get(</span>'<span class="attr">name</span>')&#125;</div><div class="line">          <span class="attr">labelPosition</span>=<span class="string">"after"</span></div><div class="line">          <span class="attr">primary</span>=<span class="string">&#123;btn.get(</span>'<span class="attr">process</span>')&#125;</div><div class="line">          <span class="attr">secondary</span>=<span class="string">&#123;btn.get(</span>'<span class="attr">fail</span>')&#125;</div><div class="line">          <span class="attr">pid</span>=<span class="string">&#123;btn.get(</span>'<span class="attr">pid</span>')&#125;</div><div class="line">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt; &#123;</div><div class="line">            if (btn.get('process')) &#123;</div><div class="line">              kill(btn.get('pid'));</div><div class="line">            &#125; else &#123;</div><div class="line">              let child = exec(`gulp $&#123;btn.get('cmd')&#125; --cwd $&#123;listLocation&#125; $&#123;btn.get('flag')&#125; --gulpfile $&#123;cwd&#125;/gulpfile.js`,  &#123;</div><div class="line">                cwd</div><div class="line">              &#125;);</div><div class="line"></div><div class="line">              child.stderr.on('data', function (data) &#123;</div><div class="line">                let str = data.toString();</div><div class="line"></div><div class="line">                console.error('exec error: ' + str);</div><div class="line">                kill(btn.get('pid'));</div><div class="line">                cancelBuild(listId, i, btn.get('name'), child.pid, str, true);</div><div class="line">                dialog.showErrorBox('Oops， 出错了', str);</div><div class="line">              &#125;);</div><div class="line"></div><div class="line">              child.stdout.on('data', function (data) &#123;</div><div class="line">                console.log(data.toString())</div><div class="line">                onProcess(listId, i, btn.get('text'), child.pid, data.toString())</div><div class="line">              &#125;);</div><div class="line"></div><div class="line">              //关闭</div><div class="line">              child.stdout.on('close', function () &#123;</div><div class="line">                cancelBuild(listId, i, btn.get('name'), child.pid, '编译结束', false);</div><div class="line">                setSnackbar('编译结束');</div><div class="line"></div><div class="line">                console.info('编译结束');</div><div class="line">              &#125;);</div><div class="line">            &#125;</div><div class="line">          &#125;&#125;</div><div class="line">        /&gt;</div><div class="line">      ))</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p><code>—cwd</code>把gulp的操作路径指向了我们定义的src路径，<code>—gulpfile</code>则强行使用feWorkflow中封装的gulp file.js。我在js中对路径做了处理，以<code>src</code>做为截断点，拼接命令行，假设拖放了一个位于<code>D:\Code\work\vd\lottery\v3\src</code>下的路径，那么输出的命令格式为:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//执行命令</span></div><div class="line"><span class="keyword">let</span> child = exec(<span class="string">`gulp <span class="subst">$&#123;btn.get(<span class="string">'cmd'</span>)&#125;</span> --cwd <span class="subst">$&#123;listLocation&#125;</span> <span class="subst">$&#123;btn.get(<span class="string">'flag'</span>)&#125;</span> --gulpfile <span class="subst">$&#123;cwd&#125;</span>/gulpfile.js`</span>)</div><div class="line"></div><div class="line"><span class="comment">//编译输出命令：</span></div><div class="line">gulp dev --cwd D:\Code\work\vd\lottery\v3\src --development</div></pre></td></tr></table></figure>
<p>同时，通过<code>action</code>扭转了按钮状态：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">processing</span>(<span class="params">id, index, name, pid, data</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    id,</div><div class="line">    <span class="attr">type</span>: <span class="string">'PROCESSING'</span>,</div><div class="line">    <span class="attr">btns</span>: &#123;</div><div class="line">      index,</div><div class="line">      name,</div><div class="line">      pid,</div><div class="line">      data,</div><div class="line">      <span class="attr">process</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">cmd</span>: name</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用<code>dispatch</code>发送给<code>reducer</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> initState = List([]);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = initState, action) =&gt; &#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    ...</div><div class="line">      case <span class="string">'PROCESSING'</span>:</div><div class="line">      <span class="keyword">return</span> state.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (item.get(<span class="string">'id'</span>) == action.id) &#123;</div><div class="line">          <span class="keyword">return</span> item.withMutations(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</div><div class="line">            i</div><div class="line">              .set(<span class="string">'status'</span>, action.btns.cmd)</div><div class="line">              .set(<span class="string">'snackbar'</span>, action.snackbar)</div><div class="line">              .setIn([<span class="string">'btns'</span>, action.btns.index, <span class="string">'text'</span>], action.btns.name)</div><div class="line">              .setIn([<span class="string">'btns'</span>, action.btns.index, <span class="string">'name'</span>], <span class="string">'编译中...'</span>)</div><div class="line">              .setIn([<span class="string">'btns'</span>, action.btns.index, <span class="string">'process'</span>], action.btns.process)</div><div class="line">              .setIn([<span class="string">'btns'</span>, action.btns.index, <span class="string">'pid'</span>], action.btns.pid);</div><div class="line">          &#125;);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">return</span> item;</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">     ...</div></pre></td></tr></table></figure>
<p>这样，就是整个文件执行的过程。</p>
<hr>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这次的改版做了很多新的尝试，断断续续的花了不少时间，还没有达到最初的设想，也还缺失了一些重要的功能。后续还需要补充不少东西。成品确实还比较简单，代码也许也比较杂乱，所有代码开源在<a href="https://github.com/whatifhappen/feWorkflow" target="_blank" rel="external">github</a>上，欢迎斧正。</p>
<p>参考资料：</p>
<ol>
<li><a href="https://github.com/electron/electron/tree/master/docs-translations/zh-CN" target="_blank" rel="external">electron docs</a></li>
<li><a href="https://babeljs.io/blog/2015/06/07/react-on-es6-plus" target="_blank" rel="external">babel react-on-es6-plus</a></li>
<li><a href="https://webpack.github.io/" target="_blank" rel="external">webpack</a></li>
<li><a href="http://redux.js.org/" target="_blank" rel="external">redux</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;15年初创建了适用于目前团队的gulp工作流，旨在以一个gulpfile来操作和执行所有文件结构。随着项目依赖滚雪球式的增长，拉取npm包成了配置中最麻烦而极容易出错的一项。为了解决配置过程中遇到的种种问题，15年底草草实现了一个方案，用nw.js（基于Chromium和node.js的app执行工具）框架来编写了一个简单的桌面应用&lt;a href=&quot;http://whatifhappen.github.io/GulpUI-WX/&quot;&gt;gulp-ui&lt;/a&gt;, 所做的操作是打包gulpfile和所依赖的所有node_modules在一起，然后简单粗暴的在app内部执行gulpfile。&lt;/p&gt;
    
    </summary>
    
      <category term="NodeJS" scheme="https://aotu.io/cates/NodeJS/"/>
    
    
      <category term="React" scheme="https://aotu.io/tags/React/"/>
    
      <category term="Electron" scheme="https://aotu.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>第二界HiFSD分享会PPT讲义下载分享</title>
    <link href="https://aotu.io/notes/2016/07/03/HIFSD2-Summary/"/>
    <id>https://aotu.io/notes/2016/07/03/HIFSD2-Summary/</id>
    <published>2016-07-03T02:24:35.000Z</published>
    <updated>2016-10-20T07:06:32.427Z</updated>
    
    <content type="html"><![CDATA[<p>来晚了（Late is better than never），<a href="http://digg.tgideas.qq.com/hifsd/" target="_blank" rel="external">第二届HiFSD分享会</a>的PPT讲义下载地址分享~</p>
<a id="more"></a>
<h2 id="关于HiFSD"><a href="#关于HiFSD" class="headerlink" title="关于HiFSD"></a>关于HiFSD</h2><p>很多人不明所以，<a href="//aotu.io">凹凸实验室</a>作为协办方，还负责YY、映客的会议直播，我还是有义务照例简单介绍一下的哈。</p>
<p>HiFSD全称Hi Full Stack Developver，由腾讯TGIdeas主办的全栈工程师交流分享平台。</p>
<p>本届分享会以<code>前端</code>分享为主，邀请了京东、腾讯、微众银行和阿里的分享嘉宾，主题为：</p>
<ol>
<li>14:30 『webpack构建优化』</li>
<li>15:15 『数据会说话』</li>
<li>16:20 『浅谈VUE』</li>
<li>17:00 『主流电商网站前端性能浅析』</li>
</ol>
<h2 id="PPT在哪里"><a href="#PPT在哪里" class="headerlink" title="PPT在哪里"></a>PPT在哪里</h2><ol>
<li><a href="http://tgideas.qq.com/hiFSD/2nd/report/1wangxin.zip" target="_blank" rel="external">王鑫（阿里国际UED前端团队）《WEBPACK构建优化》</a></li>
<li><a href="http://tgideas.qq.com/hiFSD/2nd/report/2liusimin.zip" target="_blank" rel="external">刘思敏（腾讯TGIdeas前端团队）《数据会说话》</a></li>
<li><a href="http://tgideas.qq.com/hiFSD/2nd/report/3wanchun.zip" target="_blank" rel="external">万纯（微众MUMBLE团队）《浅谈VUE》</a></li>
<li><a href="http://tgideas.qq.com/hiFSD/2nd/report/4fanlizhi.pdf.zip" target="_blank" rel="external">范立之（京东JDC 凹凸实验室）</a></li>
</ol>
<h2 id="关于直播"><a href="#关于直播" class="headerlink" title="关于直播"></a>关于直播</h2><p><img src="https://img.aotu.io/Fi4G4OzGM1idinbuVDHEUm4qT3-_" alt="YY"></p>
<p>其实利用YY、映客做现场直播只是我们临时加进去的内容，应该是业界首次利用当红的直播APP做技术分享会的直播，效果虽然说不算完美，但最终还是有几乎近千位网友通过直播的方式观看了本次分享会的内容。<br>感谢伙伴们的支持，请期待凹凸实验室在下一次同类的分享会中做更给力的线上直播。</p>
<p>直播回放地址请<a href="http://w.3g.yy.com/s/play/moblive.html?pid=15013x03_1330966843_1560925621_1466663707_1466663696" target="_blank" rel="external">猛击这里</a>。</p>
<p>或扫描二维码进行观看：</p>
<p><img src="https://img.aotu.io/FtpJiOi-IAzwxu1L3RJ8nhz_Jdlh" alt="YY"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来晚了（Late is better than never），&lt;a href=&quot;http://digg.tgideas.qq.com/hifsd/&quot;&gt;第二届HiFSD分享会&lt;/a&gt;的PPT讲义下载地址分享~&lt;/p&gt;
    
    </summary>
    
      <category term="项目总结" scheme="https://aotu.io/cates/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="HiFSD" scheme="https://aotu.io/tags/HiFSD/"/>
    
      <category term="分享会" scheme="https://aotu.io/tags/%E5%88%86%E4%BA%AB%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>神奇的Shadow DOM</title>
    <link href="https://aotu.io/notes/2016/06/24/Shadow-DOM/"/>
    <id>https://aotu.io/notes/2016/06/24/Shadow-DOM/</id>
    <published>2016-06-24T02:39:04.000Z</published>
    <updated>2016-10-20T07:06:32.426Z</updated>
    
    <content type="html"><![CDATA[<p>你有好奇过这个问题吗，为什么只用video标签包裹着source标签，就可以完成一系列视频功能：播放/暂停按钮、进度条、视频时间显示、音量控制等等？既然 DOM 源码这么干净，你有想过实现这些组件的代码是从哪儿来的吗？</p>
<a id="more"></a>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>Shadow DOM它允许在文档（document）渲染时插入一棵DOM元素子树，但是这棵子树不在主DOM树中。</p>
<p>因此开发者可利用Shadow DOM 封装自己的 HTML 标签、CSS 样式和 JavaScript 代码。</p>
<p>看一个简单的video：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Shadow DOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">name</span>=<span class="string">"media"</span> <span class="attr">width</span>=<span class="string">"500"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">id</span>=<span class="string">"mp4"</span> <span class="attr">src</span>=<span class="string">"http://7ryl2t.com2.z0.glb.qiniucdn.com/572ffc37a2e5a.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>页面完成了，在浏览器chrome中打开，然后打开 Chrome 的开发者工具，点击右上角的“Settings”按钮，勾选“Show user agent shadow DOM”。</p>
<p><img src="//img.aotu.io/Fq09xC-qD04z43WYyVb4P0tPC-NC" alt="Show user agent shadow DOM"></p>
<p>浏览器截图：</p>
<p><img src="//img.aotu.io/FhgQ2ofckuyoCPD8RlAd3INcGRAx" alt="Video Shadow DOM"></p>
<p>#shadow-root称为影子根，可以看到它在video里面，换句话说，#shadow-root寄生在video上，所以video此时称为影子宿主。可以看到上图有两个#shadow-root，这是因为#shadow-root可以嵌套，形成节点树，即称为影子树（shadow trees）。影子树对其中的内容进行了封装，有选择性的进行渲染。这就意味着我们可以插入文本、重新安排内容、添加样式等等。如下所示：</p>
<p><img src="//img.aotu.io/FoF1XzsX8voCu3Gh9mJKBXkHeQDC" alt="影子树"></p>
<h2 id="2-怎样创建Shadow-DOM"><a href="#2-怎样创建Shadow-DOM" class="headerlink" title="2. 怎样创建Shadow DOM"></a>2. 怎样创建Shadow DOM</h2><p>使用createShadowRoot()来创建Shadow DOM，并赋值给一个变量，然后添加元素给变量即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Shadow DOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.shadowroot_son</span> &#123;</div><div class="line">            <span class="attribute">color</span>: <span class="number">#f00</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shadowhost"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">        <span class="comment">// 影子宿主（shadow host）</span></div><div class="line">        <span class="keyword">var</span> shadowHost = <span class="built_in">document</span>.querySelector(<span class="string">'.shadowhost'</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 创建影子根（shadow root）</span></div><div class="line">        <span class="keyword">var</span> shadowRoot = shadowHost.createShadowRoot();</div><div class="line"></div><div class="line">        <span class="comment">// 影子根作为影子树的第一个节点，其他的节点比如p节点都是它的子节点。</span></div><div class="line">        shadowRoot.innerHTML = <span class="string">'&lt;p class="shadowroot_son"&gt;夏天夏天悄悄过去留下小秘密！&lt;/p&gt;'</span>;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>浏览器截图：</p>
<p><img src="//img.aotu.io/FtgCUt4VAb4Y5JemQFBXnI3tvo4W" alt="创建Shadow DOM"></p>
<p>有没有注意到.shadowroot_son的样式color: #f00;不生效？！那是因为影子宿主和影子根之间存在影子边界（shadow boundary），影子边界保证主 DOM写的 CSS 选择器和 JavaScript 代码都不会影响到Shadow DOM，当然也保护主文档不受 shadow DOM 样式的侵袭。</p>
<h2 id="3-想要渲染影子宿主里的内容，那该怎么玩？"><a href="#3-想要渲染影子宿主里的内容，那该怎么玩？" class="headerlink" title="3. 想要渲染影子宿主里的内容，那该怎么玩？"></a>3. 想要渲染影子宿主里的内容，那该怎么玩？</h2><p>需要完成此项任务，需要两个利器：<code>&lt;content&gt;</code>和<code>&lt;template&gt;</code>。</p>
<h3 id="3-1-lt-content-gt"><a href="#3-1-lt-content-gt" class="headerlink" title="3.1 &lt;content&gt;"></a>3.1 <code>&lt;content&gt;</code></h3><p>通过 <code>&lt;content&gt;</code> 标签把来自主文档并添加到 shadow DOM 的内容被称为分布节点。</p>
<p> <code>&lt;content&gt;</code>的select属性告诉<code>&lt;content&gt;</code>标签有选择性的插入内容。select 属性使用 CSS 选择器来选取想要展示的内容，选择器包括类选择器、元素选择器等。</p>
<h3 id="3-2-lt-template-gt"><a href="#3-2-lt-template-gt" class="headerlink" title="3.2 &lt;template&gt;"></a>3.2 <code>&lt;template&gt;</code></h3><p>目前的模板HTML做法通常是在<code>&lt;script&gt;</code> 中嵌入模板HTML，让内部的HTML标签按照字符串处理的，从而使得内容不显示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;template&gt;</code>元素的出现旨在让HTML模板变得更加标准与规范。</p>
<p><code>&lt;template&gt;</code>在使用前不会被渲染，不会执行加载等操作，也能够实现隐藏标签内容，而且位置任意性，可以在<code>&lt;head&gt;</code>中，也可以在<code>&lt;body&gt;</code>或者<code>&lt;frameset&gt;</code>中。</p>
<h3 id="3-3-实例"><a href="#3-3-实例" class="headerlink" title="3.3 实例"></a>3.3 实例</h3><p>通过以上对 <code>&lt;content&gt;</code>和<code>&lt;template&gt;</code>的简单了解，我们来通过一个实例加深理解：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>content&amp;template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shadowhost"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"shadowhost_content1"</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"shadowhost_content2"</span>&gt;</span>跳舞<span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- S 模板标签 template --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">class</span>=<span class="string">"template"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你<span class="tag">&lt;<span class="name">content</span> <span class="attr">select</span>=<span class="string">".shadowhost_content1"</span>&gt;</span><span class="tag">&lt;/<span class="name">content</span>&gt;</span>我<span class="tag">&lt;<span class="name">content</span> <span class="attr">select</span>=<span class="string">".shadowhost_content2"</span>&gt;</span><span class="tag">&lt;/<span class="name">content</span>&gt;</span>!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- E 模板标签 template --&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> shadowHost = <span class="built_in">document</span>.querySelector(<span class="string">'.shadowhost'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> shadowRoot = shadowHost.createShadowRoot();</div><div class="line">    <span class="keyword">var</span> template = <span class="built_in">document</span>.querySelector(<span class="string">'.template'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// template.content会返回一个文档片段，可以理解为另外一个document。</span></div><div class="line">    <span class="comment">// 利用document.importNode获取节点，true表示深度克隆。</span></div><div class="line">    shadowRoot.appendChild(<span class="built_in">document</span>.importNode(template.content, <span class="literal">true</span>));</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>浏览器截图：</p>
<p><img src="//img.aotu.io/FswaNQUdHF17XfTya9wO4ZnKIryN" alt="content&amp;template"></p>
<p>我们来看一下下面三个属性的用途：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">console.<span class="built_in">log</span>(<span class="keyword">template</span>.innerHTML);   <span class="comment">// 获取完整的HTML片段</span></div><div class="line">console.<span class="built_in">log</span>(<span class="keyword">template</span>.content);  <span class="comment">// 返回一个文档片段#document-fragment</span></div><div class="line">console.<span class="built_in">log</span>(<span class="keyword">template</span>.childNodes);  <span class="comment">// 返回[]，说明childNodes无效</span></div></pre></td></tr></table></figure>
<p><strong>贪心插入点</strong>：如果把select=”.shadowhost_content1”改成select=””或者select=”*”，那么会有不一样的结果。因为贪心选择器放在了模板的第一个，他会将所有内容都抓取，不给其他select 选择器留一点内容。浏览器截图如下：</p>
<p><img src="//img.aotu.io/FgnGjHYb8sI1_jns_CViHrsXgc6n" alt="贪心插入点"></p>
<h2 id="4-关于样式"><a href="#4-关于样式" class="headerlink" title="4. 关于样式"></a>4. 关于样式</h2><h3 id="4-1-宿主样式-host"><a href="#4-1-宿主样式-host" class="headerlink" title="4.1 宿主样式:host"></a>4.1 宿主样式:host</h3><p>在shadow DOM中利用:host定义宿主的样式，当然用户可以在主文档中覆盖这个样式。</p>
<p>:host 是伪类选择器（Pseudo Selector）,:host或者 :host(*)是默认给所有的宿主添加样式，或者单独给一个宿主添加样式，即通过:host(x)，x可以是宿主的标签或者类选择器等。</p>
<p>另外:host还可以配合:hover、:active等状态来设置样式，如：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">:host(:hover)</span> &#123;</div><div class="line"><span class="code">    border: 2px solid #0ff;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-2-shadow"><a href="#4-2-shadow" class="headerlink" title="4.2 ::shadow"></a>4.2 ::shadow</h3><p>原则上来说，影子边界保证主 DOM写的 CSS 选择器和 JavaScript 代码都不会影响到Shadow DOM。<br>但你可能会想打破影子边界的所谓保证，主文档能够给Shadow DOM添加一些样式，这时可以使用::shadow。</p>
<h3 id="4-3-deep"><a href="#4-3-deep" class="headerlink" title="4.3 /deep/"></a>4.3 /deep/</h3><p>::shadow 选择器的一个缺陷是他只能穿透一层影子边界，如果你在一个影子树中嵌套了多个影子树，那么使用 /deep/ 。</p>
<h3 id="4-4-content"><a href="#4-4-content" class="headerlink" title="4.4 ::content"></a>4.4 ::content</h3><p>还记得什么叫分布节点吗？通过 <code>&lt;content&gt;</code> 标签把来自主文档并添加到 shadow DOM 的内容被称为分布节点。</p>
<p>分布节点的样式渲染需要用到 ::content。即使分布节点为em标签，直接写 em {} 不生效，应该写成::content &gt; em {}。</p>
<h3 id="4-5-实例"><a href="#4-5-实例" class="headerlink" title="4.5 实例"></a>4.5 实例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>::content&amp;::shadow&amp;/deep/<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">    /* ::shadow */</div><div class="line">    /*.shadowhost::shadow h1 &#123;</div><div class="line">        padding: 20px;</div><div class="line">        border: 1px solid #f00;</div><div class="line">    &#125;*/</div><div class="line"></div><div class="line">    /* /deep/  */</div><div class="line">    .shadowhost /deep/ h1 &#123;</div><div class="line">        padding: 20px;</div><div class="line">        border: 1px solid #000;</div><div class="line">    &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shadowhost"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"shadowhost_content1"</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"shadowhost_content2"</span>&gt;</span>跳舞<span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- S 模板标签 template --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">class</span>=<span class="string">"template"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="comment">/* 定义宿主样式:host */</span></div><div class="line">        <span class="selector-pseudo">:host</span> &#123;</div><div class="line">            <span class="attribute">color</span>: <span class="number">#E85E5E</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/* 定义宿主hover状态下的样式 */</span></div><div class="line">        <span class="selector-pseudo">:host(</span><span class="selector-pseudo">:hover)</span> &#123;</div><div class="line">            <span class="attribute">color</span>: <span class="number">#000</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* 分布节点的样式渲染需要用到 ::content,直接写 em &#123;&#125; 不生效 */</span></div><div class="line">        <span class="selector-pseudo">::content</span> &gt; <span class="selector-tag">em</span> &#123;</div><div class="line">            <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">            <span class="attribute">background</span>: <span class="number">#FFCC00</span>;</div><div class="line">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你<span class="tag">&lt;<span class="name">content</span> <span class="attr">select</span>=<span class="string">".shadowhost_content1"</span>&gt;</span><span class="tag">&lt;/<span class="name">content</span>&gt;</span>我<span class="tag">&lt;<span class="name">content</span> <span class="attr">select</span>=<span class="string">".shadowhost_content2"</span>&gt;</span><span class="tag">&lt;/<span class="name">content</span>&gt;</span>!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- E 模板标签 template --&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> shadowHost = <span class="built_in">document</span>.querySelector(<span class="string">'.shadowhost'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> shadowRoot = shadowHost.createShadowRoot();</div><div class="line">    <span class="keyword">var</span> template = <span class="built_in">document</span>.querySelector(<span class="string">'.template'</span>);</div><div class="line"></div><div class="line">    shadowRoot.appendChild(<span class="built_in">document</span>.importNode(template.content, <span class="literal">true</span>));</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>浏览器截图如下：</p>
<p><img src="//img.aotu.io/FojZYP5WW1JAGN-3fyW9jnFLGiuN" alt="::content&amp;::shadow&amp;/deep/"></p>
<h2 id="5-JavaScript"><a href="#5-JavaScript" class="headerlink" title="5. JavaScript"></a>5. JavaScript</h2><h3 id="5-1-重定向"><a href="#5-1-重定向" class="headerlink" title="5.1 重定向"></a>5.1 重定向</h3><p>Shadow DOM 里的 JS 与传统的 JS 一个真正不同的点在于事件调度（event dispatching）。要记住的一点是：原来绑定在 shadow DOM 节点中的事件被重定向了，所以他们看起来像绑定在影子宿主上一样。</p>
<p>当你点击“shadow text”的输入框时控制台却输出了宿主元素（就是 #host）的 id 。这是因为影子节点上的事件必须重定向，否则这将破坏封装性。</p>
<p>分布节点来自原有 DOM 结构，没必要重定向。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>select<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"normal-text"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"I'm normal text"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"host"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- “dustributed text”为分布节点，来自原有 DOM 结构，没必要重定向。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"distributed-text"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"I'm distributed text"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"shadow-text"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"I'm shadow text"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">content</span>&gt;</span><span class="tag">&lt;/<span class="name">content</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> host = <span class="built_in">document</span>.querySelector(<span class="string">'#host'</span>);</div><div class="line">    <span class="keyword">var</span> root = host.createShadowRoot();</div><div class="line">    <span class="keyword">var</span> template = <span class="built_in">document</span>.querySelector(<span class="string">'template'</span>);</div><div class="line">    root.appendChild(<span class="built_in">document</span>.importNode(template.content, <span class="literal">true</span>));</div><div class="line"></div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(e.target.id + <span class="string">' click!'</span>);</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>分别单击每个输入框，控制台打印截图如下：</p>
<p><img src="//img.aotu.io/FuPYA7rXQnnK78gC75QnvhRkzpqN" alt="事件重定向"></p>
<h3 id="5-2-被阻塞的事件（Blocked-Events）"><a href="#5-2-被阻塞的事件（Blocked-Events）" class="headerlink" title="5.2 被阻塞的事件（Blocked Events）"></a>5.2 被阻塞的事件（Blocked Events）</h3><p>事件abort、 error、 select 、change 、load 、reset 、resize 、scroll 、selectstart不会进行重定向而是直接被干掉，因此事件不能冒泡到文档中，事件监听重定向至文档，因此无法监听到这一事件。</p>
<p>把上面的监听事件click改成select，即改成：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'select'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(e.target.id + <span class="string">' select!'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>分别双击每个输入框，你会发现，shadow text的输入框没有打印，就是没有发生select事件。</p>
<p><img src="//img.aotu.io/FpPbkUQKdtodVkllgCc3K4-5miOe" alt="被阻塞的事件"></p>
<h3 id="6-兼容性"><a href="#6-兼容性" class="headerlink" title="6. 兼容性"></a>6. 兼容性</h3><p><img src="//img.aotu.io/FpSHZHqQtxYyUIO2vdUCRaVnJyaA" alt="template兼容性"></p>
<p><img src="//img.aotu.io/FuAGMDQSFdBe_xEdSolSbU-avlpd" alt="Shadow DOM兼容性"></p>
<p>看上去只能在chrome中愉快地玩耍。</p>
<p><a href="http://webcomponents.org/" target="_blank" rel="external">webcomponents.js</a>使得Shadow DOM在非 native 支持的浏览器上实现。</p>
<h2 id="7-参考链接"><a href="#7-参考链接" class="headerlink" title="7. 参考链接"></a>7. 参考链接</h2><p><a href="https://css-tricks.com/modular-future-web-components/" target="_blank" rel="external">A Guide to Web Components</a><br><a href="http://www.ituring.com.cn/article/177453" target="_blank" rel="external">Shadow DOM系列文章</a><br><a href="http://www.zhangxinxu.com/wordpress/2014/07/hello-html5-template-tag/" target="_blank" rel="external">HTML5 <code>&lt;template&gt;</code>标签元素简介</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你有好奇过这个问题吗，为什么只用video标签包裹着source标签，就可以完成一系列视频功能：播放/暂停按钮、进度条、视频时间显示、音量控制等等？既然 DOM 源码这么干净，你有想过实现这些组件的代码是从哪儿来的吗？&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Dom" scheme="https://aotu.io/tags/Dom/"/>
    
      <category term="ShadowDom" scheme="https://aotu.io/tags/ShadowDom/"/>
    
  </entry>
  
  <entry>
    <title>探究WebP一些事儿</title>
    <link href="https://aotu.io/notes/2016/06/23/explore-something-of-webp/"/>
    <id>https://aotu.io/notes/2016/06/23/explore-something-of-webp/</id>
    <published>2016-06-23T02:43:31.000Z</published>
    <updated>2016-10-20T07:06:32.425Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不管是PC还是移动端，图片一直是流量大头。不管是在京东首页还是频道页，商品图片以及广告图片占据了大部分的流量。</p>
<p>评价网站性能好坏的一个主要指标就是页面响应时间，也就是说用户打开完整页面的时间。基于JPEG还有PNG图片格式的网页，其图片资源加载往往都占据了页面耗时的主要部分，那么如何保证图片质量的前提下缩小图片体积，成为了一件有价值的事情。</p>
<p>而如今，对JPEG、PNG以及GIF这些格式的图片已经没有太大的优化空间。但是，Google推出的WebP图片格式给图片优化提供了另一种可能。</p>
<p>WebP是一种支持有损压缩和无损压缩的图片文件格式，根据Google的测试，无损压缩后的WebP比PNG文件少了26％的体积，有损压缩后的WebP图片相比于等效质量指标的JPEG图片减少了25％~34%的体积。</p>
<p>通过研究WebP图片格式，尽可能全面地了解WebP图片的优劣势以及应用WebP图片给我们带来的收益以及风险，最终提升用户体验。</p>
<h3 id="WebP探究"><a href="#WebP探究" class="headerlink" title="WebP探究"></a>WebP探究</h3><p>京东商品图以及频道页广告图目前基本为JPG图片，以下数据主要为JPG和WebP图片的对比，测试图片采用京东商品图。</p>
<h4 id="WebP兼容性"><a href="#WebP兼容性" class="headerlink" title="WebP兼容性"></a>WebP兼容性</h4><p><img src="//img.aotu.io/FmUIiSK5GnaMRnywosGR2wARtOhx" alt=""></p>
<p>WebP目前支持桌面上的Chrome和Opera浏览器，手机支持仅限于原生的Android浏览器、Android系统上的Chrome浏览器、Opera Mini浏览器。</p>
<p><img src="//img.aotu.io/FimDJyH6sC_n3qQeNQiVMHmBF831" alt=""></p>
<p>根据对目前浏览器占比与WebP的兼容性分析，如果采用WebP图片，大约有42%的用户可以直接体验到。</p>
<h4 id="WebP命令行工具安装"><a href="#WebP命令行工具安装" class="headerlink" title="WebP命令行工具安装"></a>WebP命令行工具安装</h4><p>Google提供了命令行工具用于将图片转换为webp。</p>
<p>在Mac下，可以使用homebrew安装webp工具：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install webp</div></pre></td></tr></table></figure>
<p>Linux采用源码包来安装（CentOS下）：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc make autoconf automake libtool libjpeg-devel libpng-devel<span class="comment"># 安装编译器以及依赖包</span></div><div class="line">wget https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-0.5.0.tar.gz</div><div class="line">tar -zxvf libwebp-0.5.0.tar.gz</div><div class="line"><span class="built_in">cd</span> libwebp-0.5.0</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<p>安装完命令行工具后，就可以使用cwebp将JPG或PNG图片转换成WebP格式。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cwebp [-preset &lt;...&gt;] [options] in_file [-o out_file]</div></pre></td></tr></table></figure>
<p>options参数列表中包含质量参数q，q为0～100之间的数字，比较典型的质量值大约为80。</p>
<p>也可以使用dwebp将WebP图片转换回PNG图片（默认）。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dwebp in_file [options] [-o out_file]</div></pre></td></tr></table></figure>
<p>更多细节详见<a href="https://developers.google.com/speed/webp/docs/using" target="_blank" rel="external">使用文档</a></p>
<h4 id="WebP优势"><a href="#WebP优势" class="headerlink" title="WebP优势"></a>WebP优势</h4><p>下面我们以一张图片为例，分别用不同质量进行压缩。</p>
<p><img src="//img.aotu.io/FsK4nvnPq8-LKmgUMAyQpPVzX0Wk" alt=""></p>
<p>WebP图片相比于JPG，拥有：</p>
<ol>
<li>更小的文件尺寸;</li>
<li>更高的质量——与其他相同大小不同格式的压缩图像比较。</li>
</ol>
<p>目标图像的质量和文件大小之间存在明显的折中关系。在很多情况下，可以很大程度降低图像的大小，而用户却几乎不会注意到其中的差别。</p>
<p>抽取100张商品图片，采用80%有损压缩，大约能减少60%的文件大小。</p>
<p>更多<a href="http://labs.qiang.it/wen/webp/compare.html" target="_blank" rel="external">测试</a>。</p>
<h4 id="WebP劣势"><a href="#WebP劣势" class="headerlink" title="WebP劣势"></a>WebP劣势</h4><p>根据Google的测试，目前WebP与JPG相比较，编码速度慢10倍，解码速度慢1.5倍。</p>
<p>在编码方面，一般来说，我们可以在图片上传时生成一份WebP图片或者在第一次访问JPG图片时生成WebP图片，对用户体验的影响基本忽略不计，主要问题在于1.5倍的解码速度是否会影响用户体验。</p>
<p>下面通过同样质量的WebP与JPG图片加载的速度进行<a href="http://labs.qiang.it/wen/webp/test.html" target="_blank" rel="external">测试</a>。测试的JPG和WebP图片大小如下：</p>
<p><img src="//img.aotu.io/Fng21Plg7-00b3HKFe48nLIgP_fn" alt=""></p>
<p>测试数据折线图如下：</p>
<p><img src="//img.aotu.io/FrvS4mf268RBStCsJSt-gbXuINrz" alt=""></p>
<p>从折线图可以看到，WebP虽然会增加额外的解码时间，但由于减少了文件体积，缩短了加载的时间，页面的渲染速度加快了。同时，随着图片数量的增多，WebP页面加载的速度相对JPG页面增快了。所以，使用WebP基本没有技术阻碍，还能带来性能提升以及带宽节省。</p>
<h3 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h3><p>在浏览器中可以采用JavaScript检测是否支持WebP，对支持WebP的用户输出WebP图片，否则输出其他格式的图片。</p>
<p>JavaScript检测是否支持WebP代码如下：（出自Google官方文档）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_webp_feature</span>(<span class="params">feature, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> kTestImages = &#123;</div><div class="line">        <span class="attr">lossy</span>: <span class="string">"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA"</span>,</div><div class="line">        <span class="attr">lossless</span>: <span class="string">"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA=="</span>,</div><div class="line">        <span class="attr">alpha</span>: <span class="string">"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA=="</span>,</div><div class="line">        <span class="attr">animation</span>: <span class="string">"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA"</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> result = (img.width &gt; <span class="number">0</span>) &amp;&amp; (img.height &gt; <span class="number">0</span>);</div><div class="line">        callback(feature, result);</div><div class="line">    &#125;;</div><div class="line">    img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        callback(feature, <span class="literal">false</span>);</div><div class="line">    &#125;;</div><div class="line">    img.src = <span class="string">"data:image/webp;base64,"</span> + kTestImages[feature];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在浏览器向服务器发起请求时，对于支持WebP图片的浏览器，会在请求头Accept中带上image/webp的信息，服务器便能识别到浏览器是否支持WebP，在服务器中处理图片。</p>
<h4 id="懒加载图片"><a href="#懒加载图片" class="headerlink" title="懒加载图片"></a>懒加载图片</h4><p>采用JavaScript能力检测的方式来加载WebP图片，通常的做法是通过图片懒加载的方式来完成。主要流程如下：</p>
<p><img src="//img.aotu.io/Fslo9RsJ9z99hptjl5aRIkFVrGU5" alt=""></p>
<p>页面加载会很快，无需等待图片加载。之后，javascript代码会动态地更新图片标签，根据浏览器支持WebP格式与否，动态生成WebP图像或JPG图像链接。</p>
<h4 id="PageSpeed自动转换模块"><a href="#PageSpeed自动转换模块" class="headerlink" title="PageSpeed自动转换模块"></a>PageSpeed自动转换模块</h4><p>Google开发的PageSpeed模块有一个功能，会自动将图像转换成WebP格式或者是浏览器所支持的其它格式。</p>
<p>以nginx为例，它的设置很简单。</p>
<p>首先在http模块开启pagespeed属性。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">pagespeed</span> <span class="literal">on</span>;</div><div class="line"><span class="attribute">pagespeed</span> FileCachePath <span class="string">"/var/cache/ngx_pagespeed/"</span>;</div></pre></td></tr></table></figure>
<p>然后在你的主机配置添加如下一行代码，就能启用这个特性。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pagespeed EnableFilters convert_png_to_jpeg,convert_jpeg_to_webp<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>我们可以看下经过转换后的代码：</p>
<p>页面原始代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>pagespeed<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./574ceeb8N73b24dc2.jpg"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./6597241290470949609.png"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Chrome打开后源码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>pagespeed<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"x574ceeb8N73b24dc2.jpg.pagespeed.ic.YcCPjxQL4t.webp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"x6597241290470949609.png.pagespeed.ic.6c5y5LYYUu.webp"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Safari打开如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>pagespeed<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"x574ceeb8N73b24dc2.jpg.pagespeed.ic.3TXX_PUg99.jpg"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"x6597241290470949609.png.pagespeed.ic.rrgw7vPMd6.png"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>更多详见ngx_pagespeed文档：<a href="https://developers.google.com/speed/pagespeed/module/build_ngx_pagespeed_from_source#dependencies" target="_blank" rel="external">https://developers.google.com/speed/pagespeed/module/build_ngx_pagespeed_from_source#dependencies</a></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>很明显，WebP格式是提升用户体验的又一利器，虽然浏览器对WebP的支持仍有很多需要改进的地方，但是通过是使用一些工具和技术，能够体会到WebP的好处，使得页面加载速度更快，同时节省了带宽。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;不管是PC还是移动端，图片一直是流量大头。不管是在京东首页还是频道页，商品图片以及广告图片占据了大部分的
    
    </summary>
    
      <category term="性能优化" scheme="https://aotu.io/cates/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="WebP" scheme="https://aotu.io/tags/WebP/"/>
    
      <category term="图片" scheme="https://aotu.io/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>让console充满情怀</title>
    <link href="https://aotu.io/notes/2016/06/22/An-interesting-experience-on-console/"/>
    <id>https://aotu.io/notes/2016/06/22/An-interesting-experience-on-console/</id>
    <published>2016-06-22T07:51:18.000Z</published>
    <updated>2016-10-20T07:06:32.426Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下只是用console 控制台输出简单的文字信息，但是当console遇到了前端的情怀，故事就不是这么发展的了~<br><a id="more"></a></p>
<h2 id="1-基本语法："><a href="#1-基本语法：" class="headerlink" title="1. 基本语法："></a>1. 基本语法：</h2><p>console.log的基本语法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(object [, object, …])</div></pre></td></tr></table></figure>
<h2 id="2-占位符"><a href="#2-占位符" class="headerlink" title="2. 占位符"></a>2. 占位符</h2><p>一打开天猫、知乎的页面console，招聘信息就袭来啦！</p>
<p>天猫招聘：<br><img src="//img.aotu.io/FpfNmVjqEJUN7rCqfdnj3vquPx--" alt="天猫招聘"></p>
<p>知乎招聘：<br><img src="//img.aotu.io/Fvyb5hkp0hBX79XvRc2IUNVJjddo" alt="知乎招聘"></p>
<p>小女子就好奇了，怎么做的呢，可以更酷炫一点吗？</p>
<p>原来啊，故事是这样开始的：浏览器提供了这么一个API：第一个参数可以包含一些格式占位符比如%c，console.log方法将依次用后面的参数替换占位符，然后再进行输出。</p>
<table>
<thead>
<tr>
<th>格式占位符</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>%s</td>
<td>字符串</td>
</tr>
<tr>
<td>%d or %i</td>
<td>整数</td>
</tr>
<tr>
<td>%f</td>
<td>浮点数</td>
</tr>
<tr>
<td>%o</td>
<td>可展开的DOM</td>
</tr>
<tr>
<td>%O</td>
<td>列出DOM的属性</td>
</tr>
<tr>
<td>%c</td>
<td>根据提供的css样式格式化字符串</td>
</tr>
</tbody>
</table>
<p>给爷来一段全部用上占位符的代码，然后小女子遵命了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一个参数有五个占位符（%s），第二~六个参数会依次替换掉占位符。</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"%c Look %o and %O , it %s and %d "</span>,<span class="string">"color: #6190e8;"</span>,&#123;<span class="attr">AA</span>: <span class="string">"WCN"</span>,<span class="attr">BB</span>: <span class="string">"wcn"</span>&#125;,&#123;<span class="attr">AA</span>: <span class="string">"WCN"</span>,<span class="attr">BB</span>: <span class="string">"wcn"</span>&#125;,<span class="string">"CC"</span>,<span class="number">123</span>);</div></pre></td></tr></table></figure>
<p>截图如下：</p>
<p><img src="//img.aotu.io/Fu_fT1Dl20to5hXQZ3hxeFP6Bxk9" alt="占位符"></p>
<p>%o和%O在普通对象上的表现是一样的，但是在DOM上就有区别了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 格式成可展开的的DOM，像在开发者工具Element面板那样可展开</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'%o'</span>,<span class="built_in">document</span>.body.firstElementChild)</div><div class="line"></div><div class="line"><span class="comment">// 像JS对象那样访问DOM元素，可查看DOM元素的属性</span></div><div class="line"><span class="comment">// 等同于console.dir(document.body.firstElementChild)</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'%O'</span>,<span class="built_in">document</span>.body.firstElementChild)</div></pre></td></tr></table></figure>
<p>随意打开的一个页面测试，firefox总是可以查看可展开的DOM节点，即行为是%o；IE不支持%o和%O ；chrome显示正常，截图如下</p>
<p><img src="//img.aotu.io/FmUiB4a7VIQWgYfMsP9DZWlaR-KL" alt="%o和%O的区别"></p>
<p>使用%c占位符时，对应的后面的参数必须是CSS语句，用来对输出内容进行CSS渲染。于是，利用%c配合CSS可以做出吊炸天的效果，比如背景色、字体颜色渐变、字体3D效果、图片等，情况允许再用颜文字、emoji卖个萌，萌萌哒~</p>
<p>什么，竟然也支持图片？！log一个图片试试：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"%c    "</span>,<span class="string">"background: url(http://aotu.io/assets/img/o2logo.png) no-repeat left center;font-size: 60px;"</span>,<span class="string">"\n"</span>);</div></pre></td></tr></table></figure>
<p>firebug截图如下：</p>
<p><img src="//img.aotu.io/FkqNNsDYs83oS2vgJNectandSuUI" alt="图片"></p>
<p>不过要注意了：</p>
<ul>
<li>console不能定义img，因此用背景图片代替。</li>
<li>console不支持width和height，利用空格和font-size代替；还可以使用padding和line-height代替宽高。</li>
<li>chrome没出来？没出来就对了……不支持啊！原因是<a href="https://src.chromium.org/viewvc/blink/trunk/Source/devtools/front_end/console/ConsoleViewMessage.js?pathrev=197345#l797" target="_blank" rel="external">ConsoleViewMessage.js源码把url和谐掉了</a>。不过可以下载firebug插件查看啦~ gif图片也是支持的~~~</li>
<li>console是默认换行的。</li>
</ul>
<p>学习了以上的东东，就是为了这个的出世，铛铛铛~~~：</p>
<p>firebug截图如下：</p>
<p><img src="//img.aotu.io/FriQlRjoEvbtEKmfRZWASrUfloej" alt="凹凸实验室招聘"></p>
<p>点击 <a href="http://labs.qiang.it/qqpai/test/wcn/console/console.html" target="_blank" rel="external">此处</a> 可查看例子啦~~</p>
<h2 id="3-字符画"><a href="#3-字符画" class="headerlink" title="3. 字符画"></a>3. 字符画</h2><p>那字符画是怎么做到的呢？臣妾可以做到，哈哈哈哈。</p>
<p>把下面的代码粘贴在console控制台可查看效果哟~~</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">console</span><span class="selector-class">.log</span>("%<span class="selector-tag">c</span>\<span class="selector-tag">n</span>                                           <span class="selector-pseudo">:J</span>:    \<span class="selector-tag">n</span>                                          <span class="selector-pseudo">:.</span> <span class="selector-tag">i</span>    \<span class="selector-tag">n</span>                  ..:::::::,<span class="selector-pseudo">:.</span>,.,..<span class="selector-pseudo">:..</span><span class="selector-pseudo">::rr</span>    <span class="selector-tag">J</span>   \<span class="selector-tag">n</span>               <span class="selector-pseudo">::i</span>:,               <span class="selector-tag">FB</span>         ,<span class="selector-tag">v</span>  \<span class="selector-tag">n</span>  <span class="selector-class">.i</span><span class="selector-pseudo">:i</span>:   .:<span class="selector-pseudo">::7</span>                     <span class="selector-tag">B</span>.         <span class="selector-pseudo">:7</span> \<span class="selector-tag">n</span>  7:  ,<span class="selector-tag">rri</span>:  @<span class="keyword">B</span>      .vOB@B@B@BY                ,:\n  Y          <span class="number">1</span>       B@B@BkB@Pr        <span class="number">7</span>,        :\n ::                                  ,<span class="number">7</span>:.:      .i\n.i          .                      :<span class="number">7</span>: .r.::i:::: \nr         i .<span class="number">7</span>:,               .:ri:  ;<span class="selector-tag">i</span>          \<span class="selector-tag">n7</span>        77;.  <span class="selector-class">.iii</span>:::::::<span class="selector-pseudo">::iii</span><span class="selector-pseudo">:.</span>    7,           \<span class="selector-tag">n</span> <span class="selector-pseudo">:i</span><span class="selector-pseudo">:.</span>,::;.  <span class="selector-pseudo">:r</span>,      .....         <span class="selector-tag">i7</span>             \<span class="selector-tag">n</span>   .. .       <span class="selector-pseudo">:ii.</span>               <span class="selector-class">.v</span>:              \<span class="selector-tag">n</span>                <span class="selector-class">.ii</span><span class="selector-pseudo">:.</span>          <span class="selector-class">.rr</span>                \<span class="selector-tag">n</span>                   <span class="selector-class">.iii</span>.      <span class="selector-tag">ii</span>.                 \<span class="selector-tag">n</span>                        <span class="selector-tag">i</span>@<span class="keyword">8GB</span>@                    \n                        vj1ULri                   \n                       <span class="number">7</span>.     r.                  \n                  .,  ,r      ,;                  \<span class="selector-tag">n</span>                  <span class="selector-class">.E</span>  0   %<span class="selector-tag">cJD</span>   %<span class="selector-tag">c7</span>                  \<span class="selector-tag">n</span>                   <span class="selector-tag">jii2</span>        <span class="selector-tag">u</span>                  \<span class="selector-tag">n</span>                    1<span class="selector-tag">i</span>,   <span class="selector-pseudo">::i.</span> <span class="selector-tag">J</span>                  \<span class="selector-tag">n</span>                    <span class="selector-tag">i</span> <span class="selector-tag">J</span>  <span class="selector-tag">E</span>   <span class="selector-tag">L</span> <span class="selector-tag">v</span>                  \<span class="selector-tag">n</span>                   ,<span class="selector-pseudo">:iY</span> 17   <span class="selector-pseudo">::7</span>                  \<span class="selector-tag">n</span>                   <span class="selector-tag">iL</span> ,<span class="selector-tag">iL7</span>    <span class="selector-tag">rr</span>                  \<span class="selector-tag">n</span>                   <span class="selector-tag">Si</span> <span class="selector-tag">r</span><span class="selector-pseudo">::5</span>    <span class="selector-tag">i7</span>                  \<span class="selector-tag">n</span>                   ,  <span class="selector-tag">r</span>       <span class="selector-class">.v</span>                  ","<span class="selector-tag">color</span>: <span class="selector-id">#000</span>","<span class="selector-tag">color</span>: <span class="selector-id">#f00</span>","<span class="selector-tag">color</span>: <span class="selector-id">#000</span>")</div></pre></td></tr></table></figure>
<p>没错了，效果是长这样子的：</p>
<p><img src="//img.aotu.io/Fp9tde_TaaPqxthmzlGhXkU1NLCn" alt="JOY"></p>
<p>你不会天真地认为，我是手打这个京东狗出来的吧？！</p>
<p>不不不，有神器相助！</p>
<p>这里推荐三个ASCII字符画制作工具：</p>
<ul>
<li><p>在线工具<a href="http://picascii.com/" target="_blank" rel="external">picascii</a></p>
</li>
<li><p>在线工具<a href="http://www.degraeve.com/img2txt.php" target="_blank" rel="external">img2txt</a></p>
</li>
<li><p>ASCII Generator功能比较齐全，不过需要下载使用噢~ 下载参考地址：<a href="http://pan.baidu.com/share/link?shareid=3161588673&amp;uk=3509597415" target="_blank" rel="external">ASCII Generator Portable(将图片转为字符画) v2.0下载</a></p>
</li>
</ul>
<p>ASCII Generator使用方法如下：</p>
<ol>
<li><p>首先载入图片，然后调节大小、字体、亮度对比度、抖动程度，直到自己满意后，将其复制出来： <img src="//img.aotu.io/FpT2xLD8nYAoIP7Lq-8sBusUPBfJ" alt="joy and ascii gen"></p>
</li>
<li><p>复制到sublime中，将每行开头的换行删除，且替换成\n。最后只有一行代码，即保证没有换行。</p>
</li>
<li><p>最后再丢到console.log(“”)代码中即可，当然，也可以添加结合%c做出更酷炫的效果。</p>
</li>
</ol>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>关于兼容性总结：</p>
<ul>
<li>只有开发者工具打开的时候IE8/9才支持console；IE6/7不支持console且抛出错误。</li>
<li>%c以及%o、%O，IE不支持；而firefox的%o和%O的行为都支持%o。</li>
<li>%c的背景图展示目前只有firebug支持，chrome故意不支持。</li>
<li>链接的不同显示：chrome可点击跳转；火狐默认开发者工具的链接前面需要有一个空格隔开文本才可点击跳转，而firebug总是不可点击；IE不可点击跳转。</li>
</ul>
<p>最后想说的： 前端人对chrome情有独钟，那招聘信息就只在chrome或者webkit浏览器下显示吧，哈哈。</p>
<h2 id="5-参考链接："><a href="#5-参考链接：" class="headerlink" title="5. 参考链接："></a>5. 参考链接：</h2><p><a href="https://developers.google.com/web/tools/chrome-devtools/debug/console/console-write#string-substitution-and-formatting" target="_blank" rel="external">Diagnose and Log to Console | Web Tools - Google Developers</a></p>
<p><a href="https://developer.chrome.com/devtools/docs/console-api" target="_blank" rel="external">Console API Reference - Google Chrome</a></p>
<p><a href="http://7demo.github.io/Javascript%E7%94%9F%E6%88%90%E5%AD%97%E7%AC%A6-%E5%B7%A5%E5%85%B7%E7%AF%87/" target="_blank" rel="external">Javascript生成字符画</a></p>
<p><a href="http://caniuse.com/#search=console" target="_blank" rel="external">Can I use console </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般情况下只是用console 控制台输出简单的文字信息，但是当console遇到了前端的情怀，故事就不是这么发展的了~&lt;br&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="console" scheme="https://aotu.io/tags/console/"/>
    
      <category term="占位符" scheme="https://aotu.io/tags/%E5%8D%A0%E4%BD%8D%E7%AC%A6/"/>
    
      <category term="字符画" scheme="https://aotu.io/tags/%E5%AD%97%E7%AC%A6%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>假如HTTP/2已经普及</title>
    <link href="https://aotu.io/notes/2016/06/14/http2/"/>
    <id>https://aotu.io/notes/2016/06/14/http2/</id>
    <published>2016-06-14T09:55:35.000Z</published>
    <updated>2016-10-20T07:06:32.425Z</updated>
    
    <content type="html"><![CDATA[<p>一项新技术的来临，总是自上而下的，从标准推出到软硬件支持再到实施，然后普及，这中间总要经历漫长的更新之路。本文我们跨过慢慢长夜，直接讨论<code>假如</code>HTTP/2已经普及，我们前端跟现在会有哪些不同，也许你会觉得太操之过急，没必要这么早开始讨论，然而回看历史，各种技术总会在我们不经意间闯入我们的工作，更新我们的生活，与其措手不及不如提早部署，只有心怀远方我们才能走的更远。</p>
<a id="more"></a>
<p>如果不清楚什么是 HTTP/2 的可以先了解下，前面有一篇图文并茂的介绍HTTP/2的文章 <a href="//aotu.io/notes/2016/03/17/http2-char/">传送门</a></p>
<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>去年（2015年5月）HTTP/2标准正式发布，各大浏览器，服务器厂商都开始大面积支持这一标准，国内外各大应用网站也都开始纷纷踏入HTTP/2的阵营，Facebook、Google、Twitter、<a href="https://www.amazon.com/" target="_blank" rel="external">国外亚马逊</a>（部分请求）、<a href="https://www.tmall.com/" target="_blank" rel="external">天猫</a>（部分请求）、<a href="https://www.taobao.com/" target="_blank" rel="external">淘宝</a>（部分请求），还有一些小型站点比如 <a href="https://isux.tencent.com/" target="_blank" rel="external">ISUX</a> 等。</p>
<p>一些大型公司，因为架构体系原因导致迁移带来的阵痛，拖累了升级HTTP/2的进度，有心无力，反而一些小型网站，架构合理的公司升级起来更迅速一些，提早体验到了HTTP/2带来的快感。</p>
<p>现在软硬件都已基本到位，“趟雷”的已经探好了路，就等后续大军杀到。买房子的时候，都说早买早享受，HTTP/2也一样，房子买晚了，HTTP/2你还要再等么，你要做的其实就是尽早升级尽快享受。</p>
<h2 id="HTTP-2已经普及"><a href="#HTTP-2已经普及" class="headerlink" title="HTTP/2已经普及"></a>HTTP/2已经普及</h2><p>也许HTTP/2真正全面普及，可能还得一两年，或者是三四年，那么我就直接穿越到未来的一天，<code>假设</code>HTTP/2已经普及了，那么很快会有很多问题摆在我们面前：以前的架构还需要么？如何组织代码更能合理支持HTTP/2？我们十几年的优化总结还有用么？雅虎军规还是我们的优化的标准么？</p>
<p>在讨论这之前我们再来回顾下，HTTP/2给我们提供了什么。</p>
<h3 id="HTTP-2给我们的好处"><a href="#HTTP-2给我们的好处" class="headerlink" title="HTTP/2给我们的好处"></a>HTTP/2给我们的好处</h3><ul>
<li><strong> 多路复用 </strong>：一次TCP握手，多个同域并行请求，请求和响应同时发送接受，然后再拼装组合，不阻塞；</li>
<li><strong> 优先级和依赖性（Priority） </strong>：可以请求的时候告知服务器端，资源分配权重，优先加载重要资源；</li>
<li><strong> 服务器推送（Server Push） </strong>：根据客户端需求，服务端主动推送资源，减少请求耗时；</li>
</ul>
<p>概念网上大把，我们直接用几个例子来分析，把概念直接体现在实例中：</p>
<h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h4><p><a href="https://l-zhi.com:8081/item1.html" target="_blank" rel="external">Demo HTTP/2 和 HTTP1.1 图片请求对比</a></p>
<p>示例分别用169张图片拼合成一整张大图，第一组图片请求为HTTP1.1，第二组请求为HTTP/2，下面我截取的加载过程的动画。</p>
<p><strong> HTTP1.1 vs HTTP/2 请求速度 </strong><br><img src="//img.aotu.io/FqFshsS87Z4RBBjVkGA80JkxMD1j" alt="http1 vs http2"></p>
<p>同时导出了 <a href="https://l-zhi.com/demo/http2/har/http-images.har" target="_blank" rel="external">http1.1-images.har</a> 和 <a href="https://l-zhi.com/demo/http2/har/http2-images.har" target="_blank" rel="external">http2-images.har</a> 文件，我们借助第三方服务<a href="http://www.softwareishard.com/har/viewer/" target="_blank" rel="external">HAR Viewer</a> 来看下，请求细节：</p>
<blockquote>
<p>HAR文件 是以.har结尾的JSON文件，用于记录了HTTP请求的详细信息。<a href="https://www.maxcdn.com/one/visual-glossary/har-file/" target="_blank" rel="external">这里</a>有详细介绍，可以在Chrome中开发者工具的Network中点右键导出.har文件。</p>
</blockquote>
<p>下图就是HAR文件分析的截图：</p>
<p><strong> HTTP1.1 </strong><br><img src="//img.aotu.io/FsVkpfzc6-um1kWxhdI7-TjE3dpG" alt="http1.1"></p>
<p>上图为HTTP1.1的图片请求，请求基本上是6个一组，然后6个完成后再 <strong>串行请求</strong> 下一组。</p>
<p><strong> HTTP/2 </strong><br><img src="//img.aotu.io/Fneyvmj5x-SWWjAxPoNsYO_3Dvst" alt="http2"></p>
<p>从上面的部分截图，可以清晰看到，所有请求基本都是并行请求，由于数据发送量较大，所以会有“等待”，这里的等待应该是数据流在客户端或服务器端重新组合的过程，正是因为这样所以单个请求时间相对更长。但是就整体速度来说 HTTP/2 为1.53s， HTTP1.1为 2.47s。速度快了近<strong>40%</strong>。</p>
<p><img src="//img.aotu.io/FlrXK_Y8m2Vk301nl4dQBuC9Yw_s" alt="http2"></p>
<p>上面这张图也是HTTP/2的一部分，从另一面也可以体现出，并行请求的短板，就是<a href="http://baike.baidu.com/view/47735.htm" target="_blank" rel="external">木桶理论</a>。所以请求尽量做到细粒度,能更快返回数据。</p>
<blockquote>
<p>PS：当然我只截取了比较能突出差别的图，具体的完整版可以点进<a href="http://www.softwareishard.com/har/viewer/" target="_blank" rel="external">HAR Viewer</a>，然后拖进去我们上面提供的har文件。</p>
</blockquote>
<p>这就是HTTP/2为我们带来的最大的好处<strong>多路重复</strong>。</p>
<p><strong>服务器推送（Server Push）</strong></p>
<p><a href="https://l-zhi.com:8081/generalpage" target="_blank" rel="external">Demo 普通加载</a> &amp; <a href="https://l-zhi.com:8081/serverpush" target="_blank" rel="external">Demo Server Push</a></p>
<p>示例分别用Server Push推送，和传统的加载，带来的性能上的差异，同时我也导出了两个HAR文件，如果需要可自行下载 <a href="https://l-zhi.com/demo/http2/har/serverpush.har" target="_blank" rel="external">serverpush.har</a> 和 <a href="https://l-zhi.com/demo/http2/har/nomalrequest.har" target="_blank" rel="external">nomalrequest.har</a>。</p>
<p>下面是这两个文件的请求截图（下面是Server Push， 上面是普通HTTP/2的请求）：</p>
<p><img src="//img.aotu.io/FpT69QRgLeIs4r8wzXkS-3TXyO-m" alt="server push"></p>
<p>HTTP/2 Server Push 和 普通请求相比，去掉了请求阶段，直接返回数据（Content Download），数据获取速度更快，而且push中可以嵌入逻辑，并且请求还可以进行缓存。</p>
<p>贴一小段代码，下面的代码为请求接口的时候，主动推送zepto代码给客户端的核心代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/serverpush'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> zepto = fs.readFileSync(resolve(root, <span class="string">'public/js/zepto.js'</span>), &#123; <span class="attr">encoding</span>: <span class="string">'UTF-8'</span> &#125;)</div><div class="line">  <span class="keyword">var</span> html = fs.readFileSync(resolve(root, <span class="string">'public/item2_1.html'</span>), &#123; <span class="attr">encoding</span>: <span class="string">'UTF-8'</span> &#125;)</div><div class="line">  ctx.res.push(<span class="string">'/zepto.js'</span>, options, <span class="function"><span class="keyword">function</span>(<span class="params">err, stream</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span>;</div><div class="line">      zlib.gzip(zepto,<span class="function"><span class="keyword">function</span>(<span class="params">err, buf</span>)</span>&#123;</div><div class="line">        stream.end(buf)</div><div class="line">      &#125;)</div><div class="line">  &#125;);</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><a href="https://github.com/l-zhi/http2-example/blob/master/serve/router.js" target="_blank" rel="external">这里可以查看完整的Server Push代码</a></p>
<p><strong>关于优先级和依赖性（Priority）</strong></p>
<p>优先级的设置可以看下<a href="https://nghttp2.org/blog/2014/11/16/visualization-of-http-slash-2-priority/" target="_blank" rel="external">这一篇文章</a>，通过设置请求资源的Pripority，达到资源获取的优先级。</p>
<p><strong>没有设置Pripority</strong><br><img src="//img.aotu.io/FgFkcpBOqiEASlhjSxUzFRLKKegl" alt="pripority"></p>
<p><strong>设置CSS 和 JS 的 Pripority后</strong><br>![pripority]//img.aotu.io/Fr9ScV9DSWoyn8yr0RWvbpWhQq30)</p>
<p>设置Pripority后，CSS 和 JS 明显速度更快了，但是代价是牺牲了图片的部分请求的速度。</p>
<p>通过上面的示例，牛B闪闪的<strong>HTTP/2</strong>已经在屏幕上熠熠生辉了。</p>
<p>那么回过头来再看看我们以前针对HTTP1.1的优化，我觉得很多其实都是应对HTTP1.1不足的HACK，HTTP/2中这些都已经不是问题了，所以HACK可以去掉了，比如下面这些。</p>
<h3 id="雪碧图（Sprite）"><a href="#雪碧图（Sprite）" class="headerlink" title="雪碧图（Sprite）"></a>雪碧图（Sprite）</h3><p>这里同样我写了一个测试示例 <a href="https://l-zhi.com:8081/item4-1.html" target="_blank" rel="external">Demo 雪碧图</a> &amp; <a href="https://l-zhi.com:8081/item4-2.html" target="_blank" rel="external">Demo 没有雪碧图</a>，如下图上面为使用雪碧图的页面请求， 下面是普通的请求页面。<br><img src="//img.aotu.io/Fp7MpCvakuWNCeo0RoRghoEcpznK" alt="Sprite"></p>
<p>由于木桶理论，在非雪碧图请求中，由于最后返回速度决定于那个最慢的请求，所以非雪碧图单张524B的文件速度，跟雪碧图6.9K速度比，还慢一些，虽然如此，我们再看onload事件触发时间，因为多路复用的特性，虽然请求超过4倍但是请求总时长并不是多4倍，而是多了119ms（1-2张图片的请求时长），而且根据请求更多其实差距不会体现在请求的多少，而只会体现在请求的响应时间和下载数据的大小，而雪碧图占用的请求应该都是很小的，所以合并与否其实不明显，再考虑到雪碧图的维护成本，其实就HTTP/2来说并不推荐再使用雪碧图了。（不过为了兼容HTTP1.1，其实现阶段多版本并存的时候还是建议保留，不用再单独处理逻辑）</p>
<p>HTTP1.1中，所有为了减少请求而做出的HACK，在HTTP/2中都已经不再是性能优化考虑的主要点了。</p>
<h3 id="分域名"><a href="#分域名" class="headerlink" title="分域名"></a>分域名</h3><p>HTTP1.1时代，我们经常会用多个域名来做请求优化，因为浏览器同域名下会有并行请求数限制（根据浏览器不同2-8个，比如IE6只有两个），然而DNS解析又得额外花时间，所以以前对域名的个数还需要根据各自网站找一个平衡点。HTTP/2就不用理会这个了，因为多路复用，并行请求不再是瓶颈，收敛了域名后还能减少DNS解析时间，所以HTTP/2中我们不用再细分域名了。</p>
<h3 id="接口请求"><a href="#接口请求" class="headerlink" title="接口请求"></a>接口请求</h3><p>HTTP1.1的时候，我们经常会根据当前的页面，将请求合并成一个。HTTP/2中可以更细粒度的组合你的接口，不用再根据某个页面所需数据，来组合一个专门的无意义的接口了（不用合并请求），不怕请求多，就怕单个请求太慢。</p>
<h3 id="内联资源"><a href="#内联资源" class="headerlink" title="内联资源"></a>内联资源</h3><p>有人说Server Push就是另外一种形式的内联，其实不是，内联太Low了，完全无法跟它来比较。</p>
<p>首先我们来回顾下，HTTP1.1时代，我们为什么要内联，因为我们希望减少请求，我们为了加快首页的渲染速度，甚至会把首页第一屏的样式内联到HTML中，一起返回，加速首屏渲染。然而当有人想改动首屏任何内容，无论多小都得重新替换掉整个页面。</p>
<p>在HTTP/2下我们可以通过推送的方式给你想要的资源，跟你的HTML请求一块儿返回给你，不仅如此，push的内容还可以进行缓存，多页面共享。</p>
<h3 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h3><p><strong>先来看下兼容和各版本客户端占有率统计</strong></p>
<p>数据来自<a href="http://caniuse.com/" target="_blank" rel="external">caniuse</a><br><img src="//img.aotu.io/FsBNKh9HeJfE9WIfM-hMEaw3YxFe" alt="can i use"></p>
<p><strong> PC浏览器占有率 </strong><br>数据来自百度统计<br><img src="//img.aotu.io/FvwDB2Ijc9PgYC5ov7c14DXlewwR" alt="pc"></p>
<p><strong> IOS &amp; Andorid 操作系统版本占有率 </strong><br>数据来自友盟 2016年 6月5日统计数据，红色为支持版本<br><img src="//img.aotu.io/FiQfDsFbETYR95vJ8rRUPfrHGtqV" alt="占有率"></p>
<p>结论：PC 端 Chrome 占有率已经近 40%，移动 Android5.0 以上占 26%，IOS9.2 占 60% 以上，所以保守估计，至少现阶段升级HTTP/2，就已经能保证 1/3 的人能享受到HTTP/2带来的快感，而且这个数字随着时间会快速增长。<br>同时HTTP是支持向前兼容的，如果你的浏览器不支持HTTP/2可以降级成HTTP1.1，而且服务端也可以通过请求来判断客户端是不是支持HTTP/2，如此一来我们可以通过请求来返回HTTP/2版本的网站。这样就能尽量让更多人体验到HTTP/2的一些特性了，并且不影响其他人的使用。</p>
<p>以前当我们无法快速提升网络速度，无法改变一些硬件上的性能，能做的可能只有代码阶段，然而现在有了一种强劲的性能提升方案，那就是HTTP/2，也是目前性价比最高的性能提升方案了。</p>
<p>当然，如果你还是很纠结HTTP/2的兼容性，推荐另一个HTTP协议 <strong>SPDY</strong>，虽然HTTP/2的出现，迟早会替换掉SPDY，但是作为HTTP/2的前身，兼容性会更好,比如淘宝，天猫都已经支持SPDY了，个人觉得替换SPDY就是时间问题，所以还是推荐从HTTP/2开始吧。</p>
<p>不过既然提到就先看看兼容性：<br><img src="//img.aotu.io/Flx6_y_f3ZCJdDKy1WaZHBhTITHd" alt="兼容性"></p>
<p>SPDY不是本文重点就推荐一些资料：<br><a href="https://zh.wikipedia.org/zh/SPDY" target="_blank" rel="external">SPDY介绍</a><br><a href="http://nginx.org/en/docs/http/ngx_http_spdy_module.html" target="_blank" rel="external">nginx 配置SPDY</a><br><a href="https://github.com/indutny/node-spdy" target="_blank" rel="external">node-spdy 一个node库支持HTTP/2 和 SPDY</a><br><a href="https://blog.cloudflare.com/introducing-http2/" target="_blank" rel="external">HTTP/2 is here! Goodbye SPDY? Not quite yet</a></p>
<h2 id="本文的Demo-及-测试代码"><a href="#本文的Demo-及-测试代码" class="headerlink" title="本文的Demo 及 测试代码"></a>本文的Demo 及 测试代码</h2><p><a href="https://github.com/l-zhi/http2-example" target="_blank" rel="external">代码地址</a><br><a href="https://l-zhi.com:8081/" target="_blank" rel="external">测试Demo</a></p>
<h3 id="本文参考资料"><a href="#本文参考资料" class="headerlink" title="本文参考资料"></a>本文参考资料</h3><p><a href="https://nghttp2.org/blog/2014/11/16/visualization-of-http-slash-2-priority/" target="_blank" rel="external">nghttp2.org</a><br><a href="https://kinsta.com/learn/what-is-http2/" target="_blank" rel="external">很棒的介绍HTTP/2的文章</a><br><a href="http://www.softwareishard.com/har/viewer" target="_blank" rel="external">HAR Viewer 最棒的har预览服务</a><br><a href="https://imququ.com/series.html" target="_blank" rel="external">Jerry Qu 的博客</a><br><a href="https://http2.github.io/" target="_blank" rel="external">HTTP/2版本发布页</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一项新技术的来临，总是自上而下的，从标准推出到软硬件支持再到实施，然后普及，这中间总要经历漫长的更新之路。本文我们跨过慢慢长夜，直接讨论&lt;code&gt;假如&lt;/code&gt;HTTP/2已经普及，我们前端跟现在会有哪些不同，也许你会觉得太操之过急，没必要这么早开始讨论，然而回看历史，各种技术总会在我们不经意间闯入我们的工作，更新我们的生活，与其措手不及不如提早部署，只有心怀远方我们才能走的更远。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="HTTP2" scheme="https://aotu.io/tags/HTTP2/"/>
    
      <category term="前端技术" scheme="https://aotu.io/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Adobe Spark试用手记</title>
    <link href="https://aotu.io/notes/2016/05/27/adobe-spark/"/>
    <id>https://aotu.io/notes/2016/05/27/adobe-spark/</id>
    <published>2016-05-27T02:24:35.000Z</published>
    <updated>2016-10-20T07:06:32.424Z</updated>
    
    <content type="html"><![CDATA[<p>5月，夏，初夏。一个不起眼的日子，起眼的是一家公司，一款产品，它叫Adobe，它叫Spark。没有人知道Adobe究竟有没有发布过多终端产品，真正意义的多终端产品，它俨然动手了，就在一周之前，干脆利落，不带一丝迟疑。</p>
<p>世人尽知Adobe之名，源于其客户端软件之研发，尤长于Photoshop，显于Flash、After Effects… 后来诸类产品悉数归于大全-Creative Suite，当今设计类软件以它为尊，所向无敌。即便后来的Creative Cloud，也只是产品运营方式的改变、数据层面的云服务化，并没有脱离传统客户端软件的实质范畴，谈不上多终端产品。</p>
<p>而随着云服务、HTML5、CSS3等越来越高端的移动开发技术的成熟与广泛应用，以及浏览器体验与性能的迅猛发展，Web产品与传统客户端产品的使用体验差距正在迅速缩小。也许在移动互联网的年代，整合云服务以浏览器为客户端宿主的Web应用结合APP客户端的多终端产品才是未来。风吹花动，花动花落，如此背景下，Adobe探索自家传统软件产品Web化、多终端化，以及研发新的多终端产品形式也在情理之中。而看似突然的Spark，兴许只是这个过程中的一小步。这个世界上很多事情就是这样的，你来了，我也来了，不管它该不该来，终究都已经来了！</p>
<a id="more"></a>
<h2 id="Spark究竟是什么？"><a href="#Spark究竟是什么？" class="headerlink" title="Spark究竟是什么？"></a>Spark究竟是什么？</h2><p><img src="//img.aotu.io/FqP4YgiLCxNkUHnviioVU9SkcHHw" alt="Spark"></p>
<p>Spark也许是Adobe真正意义上的第一款多终端产品。</p>
<p>它包括三部分功能：Post（海报制作）、Page（页面制作）以及Video（视频制作），三者之间其实是相互独立的，在PC端可以通过统一的Web应用入口spark.adobe.com访问使用，每部分功能对应一个独立的可视化编辑器，但各自又有单独的IOS APP客户端。看上去更像是一个可视化媒体内容创作的套装，哪天说不定会增加其他的独立功能，例如Slide（幻灯片）。</p>
<p>更多关于Spark的介绍，可以查看官方落地页（移动端扫描二维码，PC端点击二维码）。</p>
<p><a href="https://spark.adobe.com/about" target="_blank"><img src="//img.aotu.io/FrSDJWzXbL9xgr7LqGYP6updg8Gg" alt="spark-qrcode"></a></p>
<p>鉴于Spark的IOS客户端目前只有Spark Page能够在国内下载使用，我们这次试用围绕它的Web应用（<a href="https://spark.adobe.com" target="_blank" rel="external">spark.adobe.com</a>）进行，另依据大数据统计的文章篇幅长度建议，本次试用仅针对其中的一个功能-Spark Post。</p>
<h2 id="Spark的社交迎合"><a href="#Spark的社交迎合" class="headerlink" title="Spark的社交迎合"></a>Spark的社交迎合</h2><p>迎合了用户一种或多种生活或工作习惯的产品才是好滴产品，大多数产品深谙此道。</p>
<p>Spark自然也不例外，看看它首页的Slogan：『分分钟将你的想法变成极具冲击力的社交图形、网页故事和动态映像』（Turn your ideas into impactful social graphics, web stories and animated videos—in minutes.）。老外的网络社交习惯离不开facebook和google，Sparks的登录界面在刻意引导用户使用Facebook或Google第三方账号登录，弱化自身的账号体系，其实就是要安利用户：小姐呀，快来用我呀，我制作的漂漂的图片、网页、视频可以一键分享给你Facebook里的好友，视频还可以保存到google家的youtube哟！。</p>
<p>可惜的是，Facebook和Google对于国内用户来说，在凛冬之城墙的另一边。而我们的社交习惯是微信朋友圈，是不是约等于『Spark在国内火不起』了呢。</p>
<p>没有FQ经验的童鞋仍可以注册adobe账号来试用Spark。</p>
<p><img src="//img.aotu.io/FhsWurne9iDpJsQlKWnTooErnYjU" alt="login"></p>
<h2 id="Post-傻瓜式海报制作"><a href="#Post-傻瓜式海报制作" class="headerlink" title="Post - 傻瓜式海报制作"></a>Post - 傻瓜式海报制作</h2><p>Spark Post让我想到2、3年前Bucket Labs出的一款海报制作APP - Phoster，其实核心功能差不多：基于既定的模板，组合拖放更换背景图、文字，再配合各种样式调整，最后生成美美的海报图片。Post是否强大关键要看它的模板是否好用，元素零件的组合配置是否足够灵活智能。国内也有很多具有类似功能的产品，只是不叫『Post』罢了，美图秀秀、Pitu等等。</p>
<p>Web版的Spark Post操作界面如下面的图示，非常简洁大气上档次，操作栏集中在头部和右侧，和PS的设计基本一致。交互傻瓜式的人性化，所以灰常容易上手，第一次用完后不直接奇经八脉全部打通进阶炉火纯青阶段的童鞋都可以自我怀疑一下天赋加点是否恰当，符文是否带错，点燃换成疾跑再试一次吧。</p>
<p>浸淫设计图形制作软件研发多年的Adobe，其Spark海报制作功能当然不会仅落于『界面简洁大气上档次，交互傻瓜人性化』而已。Spark Post的5大核心编辑功能兼具实用和新意。</p>
<h3 id="Resize-社交平台优先的尺寸选择器"><a href="#Resize-社交平台优先的尺寸选择器" class="headerlink" title="Resize - 社交平台优先的尺寸选择器"></a>Resize - 社交平台优先的尺寸选择器</h3><p>可以快速制作适用于第三方社交平台的海报图片，instagram（默认）、facebook、twitter、pinterest。。。应用尽有。如果它开源，我倒愿意卖鹅厂一个人情把微信的900x500以及200x200两个公众号图片尺寸加进去。</p>
<p><img src="//img.aotu.io/FvC8qru2nkqO9ubs4C_vqRoYoCmB" alt="resize"></p>
<h3 id="Theme-实用的模板"><a href="#Theme-实用的模板" class="headerlink" title="Theme - 实用的模板"></a>Theme - 实用的模板</h3><p>模板的功能和同类软件的模板功能差不多，傻瓜实用，特别适合没有设计基础的童鞋，这里就不多提了。</p>
<h3 id="Palette-专业的配色方案"><a href="#Palette-专业的配色方案" class="headerlink" title="Palette - 专业的配色方案"></a>Palette - 专业的配色方案</h3><p>Spark Post的色板功能算是同类软件中的首创。也许因为我还算年轻貌美经验眼光不够粗大，至今在美图、批图等国产软件里面还没有碰到过。利用模板，只给用户解决了基本的元素构图需求，对于缺乏设计审美基础的人来说，元素间的颜色搭配也是一大难题，而Spark Post恰好迎难而解之！</p>
<p><img src="//img.aotu.io/FngbRyjZyMRh3x5Cqk9Xn_IbWgvG" alt="palette"></p>
<h3 id="Photo-8个精选滤镜"><a href="#Photo-8个精选滤镜" class="headerlink" title="Photo - 8个精选滤镜"></a>Photo - 8个精选滤镜</h3><p>Post只提供了8个滤镜效果，少但是减少用户犹豫抉择的时间，个人感觉比Instagram的滤镜有特点，大部分滤镜效果偏向浓郁的大海报感觉。</p>
<p><img src="//img.aotu.io/FihxHbyNFaxO3_BjP6dy21OrygPs" alt="photo"></p>
<h3 id="Text-字体颜色智能推荐"><a href="#Text-字体颜色智能推荐" class="headerlink" title="Text - 字体颜色智能推荐"></a>Text - 字体颜色智能推荐</h3><p>Post能根据背景图色板智能推荐文字的配色。这个功能已经完爆许多同类应用了吧~</p>
<p><img src="//img.aotu.io/Fnxt7wbqwJZTU5raR_B2-V9yXxJ5" alt="text"></p>
<p>总的来说，Post的使用体验感觉灰常顺畅良好，简单的英文海报制作基本上可以不用找视觉设计师了哎。遗憾的是目前不支持自定义中文字体，也没有打通微信、手Q等社交渠道，本大大猜测国内同行应该很快会有对应的中文高仿版出现了吧。<br>有一个问题留给大家讨论，如果你是产品经理，Post该如何加入怎样的盈利手段？欢迎留言YY。</p>
<h2 id="Spark的技术扒"><a href="#Spark的技术扒" class="headerlink" title="Spark的技术扒"></a>Spark的技术扒</h2><p>出于好奇和学习的态度，最后顺手瞄了下Spark站点涉及的一些技术点，不局限于前端。</p>
<ol>
<li><p>原型设计 - Marvel</p>
<p> 这个只是猜测的，在源码中有看到Marvel ui，也许Spark站点使用Marvel做的原型设计。这个我要试用了Marvel之后才能下定论。</p>
</li>
<li><p>Webfont - Typekit</p>
<p> 用了Adobe Typekit的服务。</p>
</li>
<li><p>Material Design</p>
<p> 不少地方应用了Google的Material设计风格。</p>
</li>
<li><p>资源构建-Webpack</p>
</li>
<li><p>Web worker</p>
<p> worker-color.js</p>
</li>
<li><p>SVG</p>
<p> 好多图标都直接用的SVG。</p>
</li>
</ol>
<p>今天的Spark试用手记就此为止，我是『凹凸实验室/阿尔法突击队/LV主唱大人』。请期待我们Alpha下一期的互联网新品试用手记。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;5月，夏，初夏。一个不起眼的日子，起眼的是一家公司，一款产品，它叫Adobe，它叫Spark。没有人知道Adobe究竟有没有发布过多终端产品，真正意义的多终端产品，它俨然动手了，就在一周之前，干脆利落，不带一丝迟疑。&lt;/p&gt;
&lt;p&gt;世人尽知Adobe之名，源于其客户端软件之研发，尤长于Photoshop，显于Flash、After Effects… 后来诸类产品悉数归于大全-Creative Suite，当今设计类软件以它为尊，所向无敌。即便后来的Creative Cloud，也只是产品运营方式的改变、数据层面的云服务化，并没有脱离传统客户端软件的实质范畴，谈不上多终端产品。&lt;/p&gt;
&lt;p&gt;而随着云服务、HTML5、CSS3等越来越高端的移动开发技术的成熟与广泛应用，以及浏览器体验与性能的迅猛发展，Web产品与传统客户端产品的使用体验差距正在迅速缩小。也许在移动互联网的年代，整合云服务以浏览器为客户端宿主的Web应用结合APP客户端的多终端产品才是未来。风吹花动，花动花落，如此背景下，Adobe探索自家传统软件产品Web化、多终端化，以及研发新的多终端产品形式也在情理之中。而看似突然的Spark，兴许只是这个过程中的一小步。这个世界上很多事情就是这样的，你来了，我也来了，不管它该不该来，终究都已经来了！&lt;/p&gt;
    
    </summary>
    
      <category term="体验报告" scheme="https://aotu.io/cates/%E4%BD%93%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="Spark" scheme="https://aotu.io/tags/Spark/"/>
    
      <category term="新品试用" scheme="https://aotu.io/tags/%E6%96%B0%E5%93%81%E8%AF%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>CSS3动画之逐帧动画</title>
    <link href="https://aotu.io/notes/2016/05/17/css3-animation-frame/"/>
    <id>https://aotu.io/notes/2016/05/17/css3-animation-frame/</id>
    <published>2016-05-17T02:00:00.000Z</published>
    <updated>2016-10-20T07:06:32.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是逐帧动画"><a href="#什么是逐帧动画" class="headerlink" title="什么是逐帧动画"></a>什么是逐帧动画</h2><hr>
<p>要了解 CSS3 逐帧动画，首先要明确什么是逐帧动画。</p>
<p>看一下<a href="https://zh.wikipedia.org/zh-cn/%E5%AE%9A%E6%A0%BC%E5%8A%A8%E7%94%BB" target="_blank" rel="external">维基百科</a>中的定义：</p>
<blockquote>
<p>定格动画，又名逐帧动画，是一种动画技术，其原理即将每帧不同的图像连续播放，从而产生动画效果。</p>
</blockquote>
<p>简而言之，实现逐帧动画需要两个条件：<strong>（1）相关联的不同图像，即动画帧；（2）连续播放。</strong></p>
<p><a href="http://zhuanlan.zhihu.com/p/19855108" target="_blank" rel="external"></a></p>
<p>我们儿时的记忆，手翻书，他所实现的就是逐帧动画：</p>
<p><img src="//img.aotu.io/Yettyzyt/css3-animation-frame/sfs.jpg" alt="逐帧动画"></p>
<p>（图片来源：<a href="http://zhuanlan.zhihu.com/p/19855108" target="_blank" rel="external">知乎</a>）</p>
<h2 id="前端逐帧动画实现方案"><a href="#前端逐帧动画实现方案" class="headerlink" title="前端逐帧动画实现方案"></a>前端逐帧动画实现方案</h2><hr>
<p>在细聊 css3 逐帧动画之前，我们先大致了解下前端实现逐帧动画有哪些方案。</p>
<p>其实不外乎三种技术（视频可以实现所有类型的动画，暂不纳入）：gif、JavaScript、CSS3 Animation。</p>
<p>前文提到，实现逐帧动画需要两个条件：（1）动画帧；（2）连续播放。</p>
<p>下面我们仔细自己分析下这三种技术是怎么实现上述条件的：</p>
<h3 id="（1）gif"><a href="#（1）gif" class="headerlink" title="（1）gif"></a>（1）gif</h3><p>在触屏页中，gif 常被用来做加载动画。如<a href="http://w.benbun.com/momo/shaibingxiang/?from=timeline&amp;isappinstalled=0" target="_blank" rel="external">《陌陌不孤独饭局》</a>的加载动画：</p>
<p><img src="//img.aotu.io/Yettyzyt/css3-animation-frame/momo_loading.gif" alt="gif"></p>
<p><strong>gif 可以有多个动画帧，连续播放是其自身属性，是否循环也是由其本身决定的。</strong>它往往用来实现小细节动画，成本较低、使用方便。</p>
<p>但其缺点也是很明显的：</p>
<ul>
<li>画质上，gif 支持颜色少(最大256色)、Alpha 透明度支持差，图像锯齿毛边比较严重；</li>
<li>交互上，不能直接控制播放、暂停、播放次数，灵活性差；</li>
<li>性能上，gif 会引起页面周期性的 paint ，性能较差。</li>
</ul>
<h3 id="（2）JavaScript"><a href="#（2）JavaScript" class="headerlink" title="（2）JavaScript"></a>（2）JavaScript</h3><p><strong>JS 与 CSS3，一般是将动画帧放到背景图中。</strong></p>
<p>不同的是， <strong>JS 是使用脚本来控制动画的连续播放的</strong>：</p>
<ul>
<li>可以直接改变元素的 <code>background-image</code></li>
<li>也可以将动画帧合并成雪碧图，通过改变 <code>background-position</code> 来实现</li>
</ul>
<p>还是<a href="http://w.benbun.com/momo/shaibingxiang/?from=timeline&amp;isappinstalled=0" target="_blank" rel="external">《陌陌不孤独饭局》</a>的例子：</p>
<p>其中有一个伸手取饭盒的动画，一共有19帧，且在第11帧处有一个交互，将雪碧图放入背景中，通过不同的样式实现不同的 <code>background-position</code> ，使用 JS 改变样式名：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.sprite-rice-1</span>,</div><div class="line"><span class="selector-class">.sprite-rice-2</span>,</div><div class="line">…</div><div class="line"><span class="selector-class">.sprite-rice-19</span>&#123;</div><div class="line">	<span class="attribute">background-image</span>:<span class="built_in">url</span>(http://7xnvb2.com2.z0.glb.qiniucdn.com/img/rice.jpg);</div><div class="line">	<span class="attribute">background-repeat</span>:no-repeat</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.sprite-rice-1</span>&#123;<span class="attribute">background-position</span>:-<span class="number">1800px</span> <span class="number">0</span>&#125;</div><div class="line"><span class="selector-class">.sprite-rice-2</span>&#123;<span class="attribute">background-position</span>:-<span class="number">900px</span> -<span class="number">489px</span>&#125;</div><div class="line">…</div><div class="line"><span class="selector-class">.sprite-rice-19</span>&#123;<span class="attribute">background-position</span>:-<span class="number">1200px</span> <span class="number">0</span>&#125;</div></pre></td></tr></table></figure>
<p><img src="//img.aotu.io/Yettyzyt/css3-animation-frame/momo_rice.jpg" alt="sprite"></p>
<p>使用 JS 的优点是兼容性佳，交互灵活。</p>
<h3 id="（3）CSS3-Animation"><a href="#（3）CSS3-Animation" class="headerlink" title="（3）CSS3 Animation"></a>（3）CSS3 Animation</h3><p><strong>CSS3 实际上是使用 <code>animation-timing-function</code> 的阶梯函数 <code>steps(number_of_steps, direction)</code> 来实现逐帧动画的连续播放的。</strong></p>
<p>在移动端，CSS3 Animation 兼容性良好，相对于 JS，CSS3 逐帧动画使用简单，且效率更高，因为许多优化都在浏览器底层完成。</p>
<p>因此在触屏页面中 CSS3 逐帧动画使用广泛，下文将对其进行详细介绍。</p>
<h2 id="CSS3-逐帧动画的实现"><a href="#CSS3-逐帧动画的实现" class="headerlink" title="CSS3 逐帧动画的实现"></a>CSS3 逐帧动画的实现</h2><hr>
<h3 id="（1）将动画帧合并为雪碧图"><a href="#（1）将动画帧合并为雪碧图" class="headerlink" title="（1）将动画帧合并为雪碧图"></a>（1）将动画帧合并为雪碧图</h3><p>在触屏页面中，动画往往承担页面样式实现的角色（即不需要替换），因此我们会将图片放到元素的背景中（<code>background-image</code>）。</p>
<p>逐帧动画有不同的动画帧，我们可以通过更改 <code>background-image</code> 的值实现帧的切换，但多张图片会带来多个 HTTP 请求，且不利于文件的管理。</p>
<p>比较合适的做法，是将所有的动画帧合并成一张雪碧图（sprite），通过改变 <code>background-position</code> 的值来实现动画帧切换。因此，逐帧动画也被称为“精灵动画（sprite animation）”。</p>
<p>以京东到家的触屏页面<a href="http://jdc.jd.com/fd/promote/201601/djnianhuo/" target="_blank" rel="external">《年货送到家》</a>为例：</p>
<p>这个动画一个有三帧，将3个动画帧合并，并放到 <code>.p8 .page_key</code> 的背景中：</p>
<p><img src="//img.aotu.io/Yettyzyt/css3-animation-frame/p8.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.p8</span> <span class="selector-class">.page_key</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">width</span>: <span class="number">572px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">586px</span>;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"../img/p8.png"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="（2）使用-steps-实现动画播放"><a href="#（2）使用-steps-实现动画播放" class="headerlink" title="（2）使用 steps 实现动画播放"></a>（2）使用 steps 实现动画播放</h3><p>steps 指定了一个阶梯函数，包含两个参数：</p>
<ul>
<li>第一个参数指定了函数中的间隔数量（必须是正整数）；</li>
<li>第二个参数可选，指定在每个间隔的起点或是终点发生阶跃变化，接受 start 和 end 两个值，默认为 end。</li>
</ul>
<p>（参考自<a href="https://www.w3.org/TR/2012/WD-css3-transitions-20120403/#transition-timing-function-property" target="_blank" rel="external">W3C</a>）</p>
<p>通过<a href="https://www.w3.org/TR/css3-transitions/" target="_blank" rel="external">W3C</a>中的这张图片来理解 steps 的工作机制：</p>
<p><img src="//img.aotu.io/Yettyzyt/css3-animation-frame/1-2.png" alt="steps"></p>
<p>回到上述的例子，我们在 keyframes 中定义好每个动画帧：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> p8&#123;</div><div class="line">    0%&#123;<span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;&#125;</div><div class="line">    33<span class="selector-class">.33</span>%&#123;<span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">586px</span>;&#125;</div><div class="line">    66<span class="selector-class">.66</span>%&#123;<span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">1172px</span>;&#125;</div><div class="line">    100%&#123;<span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">1758px</span>;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，给他加上 <code>animation</code>：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.p8</span> <span class="selector-class">.page_key</span>&#123;</div><div class="line">	<span class="attribute">-webkit-animation</span>: p8 <span class="built_in">steps</span>(1,end) <span class="number">1.5s</span> infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>为什么第一个参数是1？</strong></p>
<p>前文中提到，steps 是 <code>animation-timing-function</code> 的一个属性值，在 <a href="https://www.w3.org/TR/css3-animations/#animation-timing-function-property" target="_blank" rel="external">W3C</a> 中有如下说明：</p>
<blockquote>
<p>For a keyframed animation, the ‘animation-timing-function’ applies between keyframes, not over the entire animation. </p>
</blockquote>
<p>也就是说，<code>animation-timing-function</code> 应该于两个 keyframes 之间，而非整个动画。在上面的 keyframes 中，我们已经把每个帧都写出来了，所以两个 keyframes 之间的间隔是1。</p>
<p><strong>更加简便的写法？</strong></p>
<p>既然说 steps 第一个参数是指函数的间隔数量，那么我们就可以把 keyframes 的计算直接交给 steps 来完成。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.p8</span> <span class="selector-class">.page_key</span>&#123;</div><div class="line">	<span class="attribute">-webkit-animation</span>: p8 <span class="built_in">steps</span>(3,end) <span class="number">1.5s</span> infinite;</div><div class="line">&#125;</div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> p8 &#123;</div><div class="line">    100% &#123;<span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">1758px</span>;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上两种写法效果是等同的。</p>
<h2 id="CSS3-逐帧动画使用技巧"><a href="#CSS3-逐帧动画使用技巧" class="headerlink" title="CSS3 逐帧动画使用技巧"></a>CSS3 逐帧动画使用技巧</h2><hr>
<h3 id="（1）step-start-与-step-end"><a href="#（1）step-start-与-step-end" class="headerlink" title="（1）step-start 与 step-end"></a>（1）step-start 与 step-end</h3><p>除了 <code>steps</code> 函数，<code>animation-timing-function</code> 还有两个与逐帧动画相关的属性值 <code>step-start</code> 与 <code>step-end</code>：</p>
<ul>
<li><code>step-start</code> 等同于 <code>steps(1,start)</code>：动画执行时以开始端点为开始；</li>
<li><code>step-end</code> 等同于 <code>steps(1,end)</code>：动画执行时以结尾端点为开始。</li>
</ul>
<h3 id="（2）动画帧的计算："><a href="#（2）动画帧的计算：" class="headerlink" title="（2）动画帧的计算："></a>（2）动画帧的计算：</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$spriteWidth</span>: <span class="number">140px</span>; <span class="comment">// 精灵宽度 </span></div><div class="line">@keyframes ani &#123;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">background-position</span>: -(<span class="variable">$spriteWidth</span> * <span class="number">12</span>) <span class="number">0</span>; <span class="comment">// 12帧</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="（3）适配方案：rem-scale"><a href="#（3）适配方案：rem-scale" class="headerlink" title="（3）适配方案：rem+scale"></a>（3）适配方案：rem+scale</h3><p>我们知道，rem 的计算会存在误差，因此使用雪碧图时我们并不推荐用 rem。如果是逐帧动画的话，由于计算的误差，会出现抖动的情况。</p>
<p>那么在触屏页中，如何实现页面的适配？</p>
<p>这里小编提供一个思路：</p>
<ul>
<li>非逐帧动画部分，使用 <code>rem</code> 做单位；</li>
<li>逐帧动画部分，使用 <code>px</code> 做单位，再结合 <code>js</code> 对动画部分使用 <code>scale</code> 进行缩放。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是逐帧动画&quot;&gt;&lt;a href=&quot;#什么是逐帧动画&quot; class=&quot;headerlink&quot; title=&quot;什么是逐帧动画&quot;&gt;&lt;/a&gt;什么是逐帧动画&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;要了解 CSS3 逐帧动画，首先要明确什么是逐帧动画。&lt;/p&gt;
&lt;p&gt;看一下&lt;a href
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="动画" scheme="https://aotu.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>CSS3动画之补间动画</title>
    <link href="https://aotu.io/notes/2016/05/06/Guide-To-Tween-Animation/"/>
    <id>https://aotu.io/notes/2016/05/06/Guide-To-Tween-Animation/</id>
    <published>2016-05-06T03:03:09.000Z</published>
    <updated>2016-10-20T07:06:32.424Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p><strong>补间动画</strong>是动画的基础形式之一，指的是人为设定动画的关键状态，也就是关键帧，而关键帧之间的过渡过程只需要由计算机处理渲染的一种动画形式。</p>
<p>在触屏页面中，常见的实现补间动画以下几种形式：</p>
<p>第一，CSS3 Animation。</p>
<p>通过animation(除steps()以外的时间函数)属性在每个关键帧之间插入补间动画。</p>
<p>第二，CSS3 Transition。</p>
<p>区别于animation，transition只能设定初始和结束时刻的两个关键帧状态。</p>
<p>第三，利用JavaScript实现动画，例如JavaScript动画库或框架，著名的<a href="http://createjs.cc/tweenjs/" target="_blank" rel="external">TweenJS</a>，它是CreateJS的其中一个套件。另外，在Flash业界久负盛名的<a href="http://greensock.com/" target="_blank" rel="external">GreenSock</a>推出的GSAP(GreenSock Animation Platform)也新引入了对Javascript动画的支持。</p>
<p>第四，SVG 动画。</p>
<p>基于移动端对SVG技术的友好的支持性，利用SVG技术实现动画也是一种可行的方案。</p>
<p>对于利用Transition实现的动画而言，是有一定局限的。</p>
<p>引述阮一峰老师的文章<a href="http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html" target="_blank" rel="external">《CSS动画简介》</a>里的总结，</p>
<blockquote>
<p>transition的优点在于简单易用，但是它有几个很大的局限。<br>（1）transition需要事件触发，所以没法在网页加载时自动发生。<br>（2）transition是一次性的，不能重复发生，除非一再触发。<br>（3）transition只能定义开始状态和结束状态，不能定义中间状态，也就是说只有两个状态。<br>（4）一条transition规则，只能定义一个属性的变化，不能涉及多个属性。</p>
</blockquote>
<p>囿于这样的局限，在触屏页面中很少见到Transition动画的身影，但是并不意味着没有，譬如翻页动画的实现可以利用Javascript脚本配合transition与transform属性来实现。</p>
<blockquote>
<p>案例截图来源于<a href="http://wqs.jd.com/promote//2015/paper/index.html" target="_blank" rel="external">《京东：2015JDC燃爆事件》</a></p>
</blockquote>
<p><img src="//img.aotu.io/Tingglelaoo/20160506/1.gif" alt="《京东：2015JDC燃爆事件》截图" style="display:block;margin: 0 auto;"></p>
<blockquote>
<p>对应的 Chrome Dev Tool 代码调试截图</p>
</blockquote>
<p><img src="//img.aotu.io/Tingglelaoo/20160506/2.png" alt="《京东：2015JDC燃爆事件》Chrome Dev Tool 代码调试截图" style="display:block;max-width:640px;margin:0 auto;"></p>
<p>所以，利用CSS3实现动画的重头戏都在于<strong>Animation</strong>的运用。<br>然而想写好CSS3 Animation动画需要花费一些力气，这是看似简单实则需要把握好细节的活儿。</p>
<h2 id="动画过程要预先规划好，这可不是是敲敲脑壳就能码出来的事儿。"><a href="#动画过程要预先规划好，这可不是是敲敲脑壳就能码出来的事儿。" class="headerlink" title="动画过程要预先规划好，这可不是是敲敲脑壳就能码出来的事儿。"></a>动画过程要预先规划好，这可不是是敲敲脑壳就能码出来的事儿。</h2><p>可以是一张把与设计师沟通的结果加之分析输出一张动画属性分解表。</p>
<blockquote>
<p>动画属性分解表示例，来源于<a href="http://isux.tencent.com/h5active.html" target="_blank" rel="external">《常见动效制作手法》</a></p>
</blockquote>
<p><img src="//img.aotu.io/Tingglelaoo/20160506/3.png" alt="《动画属性分解表示例》" style="display:block;max-width:640px;margin: 0 auto;"></p>
<p>又或者是根据沟通分析规划出来的动画时间轴。</p>
<blockquote>
<p>动画时间轴，来源于<a href="http://aotu.io/notes/2016/01/04/css3-animation/">《CSS3动画实践》</a></p>
</blockquote>
<p><img src="//img.aotu.io/Tingglelaoo/20160506/4.png" alt="《动画时间轴示例》" style="display:block;margin: 0 auto;"></p>
<h2 id="动画要自然不生硬，十二法则你值得拥有"><a href="#动画要自然不生硬，十二法则你值得拥有" class="headerlink" title="动画要自然不生硬，十二法则你值得拥有"></a>动画要自然不生硬，十二法则你值得拥有</h2><p>不管是在影视动画界，还是前端动画界里遵循的都是同一套配方，追求同样的味道——「迪士尼九老」总结的<a href="http://markgeyer.com/pres/the-art-of-ui-animations/#/2/5" target="_blank" rel="external">十二黄金动画法则</a>（以下简称“十二法则”），一直沿用至今、备受推崇不是没有道理的。</p>
<p>在一些优秀的触屏页面案例里，可以追寻到它的踪迹。</p>
<blockquote>
<p>案例截图来源于《腾讯：微众银行》中的摩托车<a href="http://www.sunnyzhen.com/course/demo/motorcycle/index.html?from=message&amp;isappinstalled=0" target="_blank" rel="external">demo</a></p>
</blockquote>
<p><img src="//img.aotu.io/Tingglelaoo/20160506/5.gif" alt="《腾讯：微众银行》截图" style="display:block;max-width:320px;margin: 0 auto;"><br><img src="//img.aotu.io/Tingglelaoo/20160506/5.png" alt="《腾讯：微众银行》截图" style="display:block;max-width:320px;margin: 0 auto;"></p>
<p>作者对轮子和摩托车的处理就体现出“挤压和拉伸”的法则，带出颠簸的现实感。</p>
<p>小编是非常推荐大家去认真研究这个案例的，因为作者陈在真就此说明过他的这部作品就完全是遵循迪士尼动画十二原则所码出来的。</p>
<p>但是很可惜，案例已经下线了。</p>
<p>不过，你还可以欣赏到另一位对迪士尼十二法则同样有心得的大神EC的作品<a href="http://jdc.jd.com/fd/pp/weixiaodian_welcome/index.html" target="_blank" rel="external">《拍拍小店全新上线》</a>。</p>
<blockquote>
<p>案例截图来源于<a href="http://jdc.jd.com/fd/pp/weixiaodian_welcome/index.html" target="_blank" rel="external">《拍拍小店全新上线》</a></p>
</blockquote>
<p><img src="//img.aotu.io/Tingglelaoo/20160506/6.gif" alt="《拍拍小店全新上线》截图1" style="display:block;max-width:320px;margin: 0 auto;"><br><img src="//img.aotu.io/Tingglelaoo/20160506/6.png" alt="《拍拍小店全新上线》截图1" style="display:block;max-width:320px;margin: 0 auto;"></p>
<p>盒子的打开过程就带有一个往上展开预备动作(ANTICIPATION)，并且展开撒开的碎彩纸带有慢出(SLOW OUT)的效果，拍拍小店的logo弹出符合弧形(ARCS)的运动轨迹。</p>
<p><img src="//img.aotu.io/Tingglelaoo/20160506/7.gif" alt="《拍拍小店全新上线》截图1" style="display:block;max-width:320px;margin: 0 auto;"><br><img src="//img.aotu.io/Tingglelaoo/20160506/7.png" alt="《拍拍小店全新上线》截图1" style="display:block;max-width:320px;margin: 0 auto;"></p>
<p>除此之外弧形运动轨迹最为明显的地方就是页面切换的过程。</p>
<p>整个案例处处都非常生动自然、利落感满满，令人赞叹。</p>
<p>如果你想了解怎么去实现才能够符合十二法则，可以进一步阅读这篇文章<a href="https://www.smashingmagazine.com/2011/09/the-guide-to-css-animation-principles-and-examples/#more-105335" target="_blank" rel="external">《The Guide To CSS Animation: Principles and Examples》</a>喔，不谢。</p>
<p>另外，在把控十二法则时为了动画更加自然，时间函数(animation-timing-function)的设计绝对是举足轻重的一环，因为动画可以说是一种关于时间函数的运动演变过程。要码好动画，这篇关注介绍缓动函数的<a href="http://isux.tencent.com/animation-factor.html" target="_blank" rel="external">《让界面动画更自然》</a>说不定能够助你一臂之力。</p>
<h2 id="码好了动画，做好了页面，以为就此结束了吗？不要太天真，移动端对性能的要求也是一道需要迈过的坎儿。"><a href="#码好了动画，做好了页面，以为就此结束了吗？不要太天真，移动端对性能的要求也是一道需要迈过的坎儿。" class="headerlink" title="码好了动画，做好了页面，以为就此结束了吗？不要太天真，移动端对性能的要求也是一道需要迈过的坎儿。"></a>码好了动画，做好了页面，以为就此结束了吗？不要太天真，移动端对性能的要求也是一道需要迈过的坎儿。</h2><p>Google在有关动画性能渲染优化的文章<a href="https://developers.google.com/web/fundamentals/design-and-ui/animations/?hl=zh-cn" target="_blank" rel="external">《动画 | Web Fundamentals - Google Developers》</a>（对不起，这里有道墙）中提出建议:</p>
<blockquote>
<p><strong>避免为开销大的属性设置动画</strong>，要让每次在设置动画时必须注意保持 60fps。</p>
</blockquote>
<p>那么，哪些是开销大的属性呢？<br>（下面是科普环节，清楚的童鞋可以跳过）。</p>
<p>页面渲染的一般过程为JS &gt; CSS &gt; 计算样式 &gt; 布局 &gt; 绘制 &gt; 渲染层合并。</p>
<p><img src="//img.aotu.io/Tingglelaoo/20160506/8.png" alt="《页面渲染的一般过程》" style="display:block;max-width:640px;margin: 0 auto;"></p>
<p>其中，<strong>Layout(重排)和Paint(重绘)是整个环节中最为耗时的两环</strong>，所以我们尽量避免着这两个环节。从性能方面考虑，最理想的渲染流水线是没有布局和绘制环节的，只需要做渲染层的合并即可。</p>
<p><img src="//img.aotu.io/Tingglelaoo/20160506/9.png" alt="《页面渲染的一般过程》" style="display:block;max-width:640px;margin: 0 auto;"></p>
<p>那怎么知道哪些CSS属性的改变是会影响这两个环节的呢？诺，下面就是各CSS属性与其影响的环节。</p>
<blockquote>
<p>截图来源于<a href="http://csstriggers.com/" target="_blank" rel="external">CSS Triggers</a>，更为详细地翻墙去拿吧</p>
</blockquote>
<p><img src="//img.aotu.io/Tingglelaoo/20160506/10.png" alt="《各种CSS属性影响的渲染环节》" style="display:block;max-width:640px;margin: 0 auto;"></p>
<p>在实际的应用里，最为简单的一个注意点就是，触发动画的开始不要用diaplay:none属性值，因为它会引起Layout、Paint环节，通过切换类名就已经是一种很好的办法。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 根据类名触发动画</div><div class="line">.active &#123;</div><div class="line">	 &amp;.flow_away &#123;</div><div class="line">		.mobile,</div><div class="line">		.ground,</div><div class="line">		.platform,</div><div class="line">		.words &#123;</div><div class="line">		  -webkit-animation: flowAwayUp ease .5s forwards;</div><div class="line">		  animation: flowAwayUp ease .5s forwards;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有就是，translate属性值来替换top/left/right/bottom的切换，scale属性值替换width/height，opacity属性替换display/visibility等等。</p>
<p>除此之外，对动画渲染的优化还有其他方式，上面贴出Google文章链接就有一系列的文章解读，小编就不卖弄按下不表了，这里顺便抛出前辈对这方面相关的总结：</p>
<blockquote>
<p>总结来源于@登平登平的<a href="http://weibo.com/p/1001603865643593165786" target="_blank" rel="external">《H5动画60fps之路》</a></p>
</blockquote>
<p><img src="//img.aotu.io/Tingglelaoo/20160506/12.png" alt="《H5动画60fps之路》" style="display:block;max-width:640px;margin: 0 auto;"></p>
<p>最后总结下要点就是</p>
<ul>
<li>事先做好规划</li>
<li>码的时候注意十二法则</li>
<li>谨记避免导致layout/paint的属性</li>
</ul>
<p>搞定！</p>
<blockquote>
<p>最后的最后，由于本文主推的是CSS3 Animation，其余的实现方式不在讨论范围内：P，拜拜，下次再见。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;补间动画&lt;/strong&gt;是动画的基础形式之一，指的是人为设定动画的关键状态，也就是关键帧，而关键帧之间的过渡过程只需要由计算机处理渲染的一种动画形式。&lt;/p&gt;
&lt;p&gt;在触屏页面中，常见的实现补间动画以下几种形式：&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS3" scheme="https://aotu.io/tags/CSS3/"/>
    
      <category term="Aniamtion" scheme="https://aotu.io/tags/Aniamtion/"/>
    
      <category term="动画" scheme="https://aotu.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>CSS3动画之3D动画</title>
    <link href="https://aotu.io/notes/2016/05/06/CSS3-3D-Animation/"/>
    <id>https://aotu.io/notes/2016/05/06/CSS3-3D-Animation/</id>
    <published>2016-05-06T02:00:00.000Z</published>
    <updated>2016-10-20T07:06:32.423Z</updated>
    
    <content type="html"><![CDATA[<p>所有东西一跟3D扯上关系，复杂指数都是噌噌噌往上走。不过也正常，毕竟多了一个维度，要有三维应有的尊严。</p>
<p>3D Transforms要怎么写？能写翻牌效果吗？能写翻书效果吗？能写出立体书的效果吗？点进来，答案都在这里面。</p>
<a id="more"></a>
<p>很多时候，仅仅将元素进行二维层面的变换显然不是人类的终点，毕竟十二维空间都可能不是极限（视频: <a href="http://v.youku.com/v_show/id_XNjA0MjU5NzA4.html?from=s1.8-1-1.2" target="_blank" rel="external">从一维空间到十二维空间</a>）。</p>
<p><a href="https://desandro.github.io/3dtransforms/" target="_blank" rel="external">Intro to 3D Transforms</a> 的作者David DeSandro 说，现在可是21世纪，可我们竟然还在跟三十年前的二维空间界面扯皮。所幸2011年，我们有了CSS3，我们还有了3D Transforms，真是一个值得奔走相告的大事件。</p>
<h2 id="Transform-2d-3d"><a href="#Transform-2d-3d" class="headerlink" title="Transform 2d 3d"></a>Transform 2d 3d</h2><p>3D变换相较2D变换，坐标系中多了Z轴，也就意味着物体除了上下左右，还可以前后移动。而rotate在2D中的旋转方式，在3D中与rotateZ相当。</p>
<p>那么，单纯地将transform中的参数扩展出Z维度，就能实现3D效果了吗？我看见CSS3笑了。</p>
<h2 id="perspective-概念理解"><a href="#perspective-概念理解" class="headerlink" title="perspective 概念理解"></a>perspective 概念理解</h2><p>什么是perspective？词典中翻译为观点、远景、透视图。这是一个非常抽象的概念，需要一点空间想象力。</p>
<p>我们先抛开这个概念，尝试使用刚才说到的知识点进行翻牌（咦）效果的尝试，聪明的你一定分分钟码出来：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"card"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 卡牌正面 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">figure</span> <span class="attr">class</span>=<span class="string">"front"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 卡牌反面 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">figure</span> <span class="attr">class</span>=<span class="string">"back"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#card</span> <span class="selector-class">.front</span> &#123;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#card</span> <span class="selector-class">.back</span> &#123;</div><div class="line">	<span class="attribute">background</span>: blue;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">rotateY</span>( 180deg );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 翻牌动作 */</span></div><div class="line"><span class="selector-id">#card</span><span class="selector-class">.flipped</span> &#123;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">rotateY</span>( 180deg );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是放浏览器一看，这不对呀，为什么用3D的代码写出了2D的效果。</p>
<p><img src="//img.aotu.io/FnsJjBpYlSYLBuEe0icU12X37rzk" alt="说起来你可能不信，这是一个延Y轴旋转了45的牌"></p>
<p>这个时候有请我们的perspective透视君。</p>
<p>学过素描的人一定对透视的概念不陌生，透视是保证素描写生真实合理的基础。</p>
<blockquote>
<p>视频：<a href="http://www.qiangwaiba.com/youtube/watch/aI3_R6WAeuQ" target="_blank" rel="external">透视学之一点透视法</a></p>
</blockquote>
<p>CSS3中的perspetive在这样一个体系里就代表着元素与观者之间的距离，形象点说，就是元素3D效果的强度。CSS3中的3D效果消失点固定，变化的是观者与元素之间的距离。不过perspective数值与3D效果强度是成反比的，数值越大，元素的3D效果越不明显——2000px的视点意味着你看的是远方的物体，而100px则意味着这个物体就在你眼前。</p>
<p>这里有个图或许能帮助我们想象3D效果强度这个概念——</p>
<p><img src="//img.aotu.io/FrPCDSbOxepqWV8JrDRIzamARiP9" alt="perspective(graphic)"></p>
<p><em>（图片来源：<a href="https://en.wikipedia.org/wiki/Perspective_%28graphical%29" target="_blank" rel="external">维基百科</a>）</em></p>
<p>如果还是不懂，还有一个办法，就是在浏览器中边调整perspective数值边观察3D效果。</p>
<p><img src="//img.aotu.io/FvxF4EoQ7xliwof1HArQO_0UKAZn" alt="浏览器中的perspective"></p>
<h2 id="消失点"><a href="#消失点" class="headerlink" title="消失点"></a>消失点</h2><p><img src="//img.aotu.io/FnvhLwboKDByIz9skLKAifm-TbVZ" alt="perspective-children01"></p>
<p><em>（图片来源：<a href="https://desandro.github.io/3dtransforms/docs/perspective.html" target="_blank" rel="external">Intro to CSS 3D transforms - Perspective</a>）</em></p>
<p>左图与右图的元素均绕Y轴旋转了45度，但差别很明显，右图更容易让人想到一个画面中集体开启的窗户。左图的问题就在于，每个元素的消失点各自为政，都在元素的中心点位置，而右图的消失点则统一在实线方框的中心位置。实现方法就是将元素的perspetive设置转移至元素父容器上。</p>
<p>讲到这里，这种简单的3D其实在很多非立体设计的触屏页中已经够用，稍微使用一点就能产生非凡的效果，比如第1期中介绍过的<a href="http://drose6.adidasevent.com/" target="_blank" rel="external">D Rose触屏案例</a>。</p>
<p>明眼人会说，这样子可以画个正方体出来了也。我看见CSS3又笑了。</p>
<h2 id="建立三维空间体系"><a href="#建立三维空间体系" class="headerlink" title="建立三维空间体系"></a>建立三维空间体系</h2><p><img src="//img.aotu.io/Fp3RHvtFL4VVmPE09kkdVPALrgcP" alt="你所期待的正方体，浏览器给你的“正方体”"></p>
<p><em>现实总是乳齿残酷</em></p>
<p>有了perspetive属性，我们顶多是一群会在纸上画素描的家伙，要想徒手造模型，还是太嫩。就拿刚才的翻牌效果来说，如果你翻滚card父容器，无论怎么翻，能看到的只有正面的卡片，因为现在的体系就是一张素描绘画，你拿着再逼真的素描画翻到背面，也是看不到真实物体的背面的对吧。超越平面3D的关隘就在于transform-style: preserve-3d的属性设置，默认值为flat，即“素描作品”。这个属性的设置旨在告诉子元素需要遵循怎样的空间体系规则。这个属性不能继承，因此只要有子元素需要设置空间体系规则，就得在父元素声明这个属性。</p>
<p>有了浏览器为我们处理空间体系规则，可以省不少事，不需要你担心层级问题、不需要你操心哪个元素转到哪里要消失哪个元素转到哪里要出现，嗯，小编从没自己这么干过，从没。</p>
<h2 id="从翻牌到翻书"><a href="#从翻牌到翻书" class="headerlink" title="从翻牌到翻书"></a>从翻牌到翻书</h2><p>翻牌那是皇帝干的事儿，我们文化人得翻书。刚才的翻牌都是在方块的中部为轴进行的变换，我们把变换原点一换，就变成书页在翻了。</p>
<p>一本合上的书正常来说是在Y轴右侧，每一页都包含两面，也就是说一本书是由若干个翻页效果组合而成，每一页的变换原点在元素左侧。由此可以在翻牌的基础上迅速整出一个翻书demo（猛戳查看<a href="http://lyxuncle.github.io/pageturning/demo/demo.html" target="_blank" rel="external">翻书demo</a>）。</p>
<p>阴影的使用能让翻书效果变得更真实</p>
<p><img src="//img.aotu.io/FnW5R4z2f1Ho3BobCx_yC1uH3PNe" alt="带阴影的翻书demo"></p>
<p><em>（<a href="http://lyxuncle.github.io/pageturning/demo/demo2.html" target="_blank" rel="external">猛戳查看demo</a>）</em></p>
<h2 id="3D动画之Hard-Level：立体书"><a href="#3D动画之Hard-Level：立体书" class="headerlink" title="3D动画之Hard Level：立体书"></a>3D动画之Hard Level：立体书</h2><p>立体书在外国叫Pop-Up Book，满满的“Surprise!”感。这种超越传统平面书籍的阅读模式常被用于儿童书籍。</p>
<p><img src="//img.aotu.io/FkhE7EbeXLorH_KIyPT6p5BMW9BJ" alt="A Guided Tour of THE MEL BIRNKRANT COLLECTION"></p>
<p><em>（图片来源：<a href="http://melbirnkrant.com/collection/page48.html" target="_blank" rel="external">A Guided Tour of THE MEL BIRNKRANT COLLECTION</a>）</em></p>
<p>要用CSS3实现这种效果，想想还有点小激动。</p>
<p>首先建立一个立体书规则：</p>
<blockquote>
<p>书开，元素起<br>元素竖起速度小于等于书页开启速度<br>元素折叠后不可露出书边<br>元素层叠关系不可反自然<br>剩下的事也就水到渠成，无非是在每一页建立3D体系、立体元素从rotateX(90deg)转换到rotateX(0deg)的事儿。</p>
</blockquote>
<p><img src="//img.aotu.io/Fu3qwoFnTKfxqsvE_p3MX_1Vsrl7" alt="Mozzilla的小demo"></p>
<p><em>（<a href="http://www.html5tricks.com/demo/css3-3d-book/index.html" target="_blank" rel="external">Mozzilla的小demo</a>）</em></p>
<p>小编曾做过一个丧心病狂的立体书触屏页，由于立体书左右两页互相关联的特性，翻牌的方式不太适合用在这里，这里使用的是另一种较为麻烦的方式——不像翻牌方式中的前后两页捆绑，这里的书页左右两页属于一个3D体系，通过translateZ值的变换控制层级关系，因为在3D体系里，z-index已被抛弃。</p>
<p><a href="http://jdc.jd.com/fd/pp/maimang/index.html" target="_blank" rel="external">猛戳进入：麦芒推广页</a></p>
<h2 id="终端支持"><a href="#终端支持" class="headerlink" title="终端支持"></a>终端支持</h2><p>由于截至目前为止，CSS3的3D功能还止于炫技的阶段，安卓机与iOS的支持效果存在差异且难以调和，从上面那个案例中肉眼可见的坑就能看出，因此除了简单的3D转换，不建议在大项目中大面积使用3D深层功能。</p>
<p><img src="//img.aotu.io/Fvr8c6UqAazgEMtw4HtO-tBrhGn9" alt="3D在浏览器中的支持情况"></p>
<h2 id="3D与硬件加速"><a href="#3D与硬件加速" class="headerlink" title="3D与硬件加速"></a>3D与硬件加速</h2><p>坊间流传这这样一个传说：一旦使用3D属性，就能触发设备的硬件加速，从而使得浏览器的表现更佳。但这句话也得看情境——</p>
<blockquote>
<p>想象使用GPU加速的动画就像是Vin Diesel（速度与激情的主角）开着Dominic标志性的汽车 —— Dodge Charger。它的定制900 hp引擎可以让它在一瞬间从0加速到60码。但是如果你开着它在拥挤的高速公路上又有什么用呢？这种情况下你选择的车辆Charger是正确的。但是问题是你还在一个拥堵的高速公路上。——《<a href="http://efe.baidu.com/blog/hardware-accelerated-css-the-nice-vs-the-naughty/" target="_blank" rel="external">CSS硬件加速的好与坏</a>》</p>
</blockquote>
<p>因此千万别贪心，将3D效果数量控制在一定范围内，页面性能才是重中之重。——来自得到惨痛教训的小编的忠告</p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://desandro.github.io/3dtransforms/" target="_blank" rel="external">Intro to CSS3 3D transforms</a> by David DeSandro <em>——详尽又新鲜的3D Transformers手册，包含许多一看就懂的小Demo，妈妈再也不用担心我的3D了。</em></p>
<p><a href="https://en.wikipedia.org/wiki/Perspective_%28graphical%29" target="_blank" rel="external">Perspective (graphical)</a><em>——对透视学还一知半解的可以看看维基的详细说明。</em></p>
<p><a href="http://rupl.github.io/unfold/" target="_blank" rel="external">Unfolding the Box Model: Exploring CSS 3D Transforms</a> by Chris Ruppel <em>——非常赞的3D Transforms介绍，从2D到3D过渡，启动联想学习法，一看就明白，就怕你不看。</em></p>
<p><a href="http://efe.baidu.com/blog/hardware-accelerated-css-the-nice-vs-the-naughty/" target="_blank" rel="external">CSS硬件加速的好与坏</a><em>——很多事情都不是一两句能讲清楚的，但是只要深入了解原理，一两句都不用讲就清楚了。</em></p>
<hr>
<p><a href="http://jdc.jd.com/h5/case/maga.html" target="_blank" rel="external">拇指期刊</a>·<a href="http://jdc.jd.com/h5/case/maga.html?vol=8" target="_blank" rel="external">第8期·CSS3动画开发手册</a><br>《CSS3动画之补间动画》<br>《CSS3动画之逐帧动画》<br>《CSS3动画之3D动画》</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;所有东西一跟3D扯上关系，复杂指数都是噌噌噌往上走。不过也正常，毕竟多了一个维度，要有三维应有的尊严。&lt;/p&gt;
&lt;p&gt;3D Transforms要怎么写？能写翻牌效果吗？能写翻书效果吗？能写出立体书的效果吗？点进来，答案都在这里面。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS3" scheme="https://aotu.io/tags/CSS3/"/>
    
      <category term="动画" scheme="https://aotu.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="H5" scheme="https://aotu.io/tags/H5/"/>
    
      <category term="触屏页" scheme="https://aotu.io/tags/%E8%A7%A6%E5%B1%8F%E9%A1%B5/"/>
    
      <category term="3D" scheme="https://aotu.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>Swift Package Manager 快速入门指引</title>
    <link href="https://aotu.io/notes/2016/04/28/SPM/"/>
    <id>https://aotu.io/notes/2016/04/28/SPM/</id>
    <published>2016-04-28T02:53:03.000Z</published>
    <updated>2016-10-20T07:06:32.423Z</updated>
    
    <content type="html"><![CDATA[<p>大部分语言都有官方的代码分配解决方案，幸好苹果也在开发能替代 <a href="https://cocoapods.org/" target="_blank" rel="external">Cocoapods</a> 和 <a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Carthage</a> 的管理工具。<strong>Swift Package Manager</strong>（Swift 包管理器，下面我们简称 SPM ）就是一个用来管理 Swift 代码的分配的官方工具，它为 Swift 编译系统集成了自动进行下载、编译和连接依赖的过程。</p>
<p>目前，SPM 还处于早期阶段，现在仅支持 OS X 和 Linux 系统，尚不支持 iOS, watchOS 以及 tvOS 平台，但未来很大希望会支持上述平台。</p>
<p>本文使用苹果官方的例子来讲解 SPM 的使用，希望这篇文章能够帮到有意进行尝试的人！ :)</p>
<a id="more"></a>
<h2 id="概念概述"><a href="#概念概述" class="headerlink" title="概念概述"></a>概念概述</h2><p>这个章节我们先来了解一下关于 SPM 功能的一些基本概念。</p>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>在 Swift 中我们使用模块来管理代码，每个模块指定一个命名空间并强制指定模块外哪些部分的代码是可以被访问控制的。</p>
<p>一个程序可以将它所有代码聚合在一个模块中，也可以将它作为依赖关系导入到其他模块。除了少量系统提供的模块，像 OS X 中的 Darwin 或者 Linux 中的 Glibc 等的大多数依赖需要代码被下载或者内置才能被使用。</p>
<p>当你将编写的解决特定问题的代码独立成一个模块时，这段代码可以在其他情况下被重新利用。例如，一个模块提供了发起网络请求的功能，在一个照片分享的 app 或者 一个天气的 app 里它都是可以使用的。使用模块可以让你的代码建立在其他开发者的代码之上，而不是你自己去重复实现相同的功能。</p>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>一个包由 Swift 源文件和一个清单文件组成。这个清单文件称为 Package.swift，定义包名或者它的内容使用 <code>PackageDescription</code> 模块。</p>
<p>一个包有一个或者多个目标，每个目标指定一个产品并且可能声明一个或者多个依赖。</p>
<h3 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h3><p>一个目标可能构建一个库或者一个可执行文件作为其产品。库是包含可以被其他 Swift 代码导入的模块。可执行文件是一段可以被操作系统运行的程序。</p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>目标依赖是指包中代码必须添加的模块。依赖由包资源的绝对或者相对 URL 和一些可以被使用的包的版本要求所组成。包管理器的作用是通过自动为工程下载和编译所有依赖的过程中，减少协调的成本。这是一个递归的过程：依赖能有自己的依赖，其中每一个也可以具有依赖，形成了一个依赖相关图。包管理器下载和编译所需要满足整个依赖相关图的一切。</p>
<blockquote>
<p>下一个章节可能需要你了解一些 Swift 的基本知识，如果你是 Swift 的新手，可以先进这个传送门学习一下 Swift 的基本知识: <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-ID1" target="_blank" rel="external">Swift 入门教程</a></p>
</blockquote>
<h2 id="开源-Swift-入门"><a href="#开源-Swift-入门" class="headerlink" title="开源 Swift 入门"></a><span id="开源 Swift 入门">开源 Swift 入门</span></h2><p>接下来，我们还需要了解一下开源 Swift 的一些入门知识。</p>
<ul>
<li>下载和安装 Swift</li>
<li>使用 REPL </li>
<li>使用编译系统</li>
<li>使用 LLDB 调试器</li>
</ul>
<p>由于本文重点不在这里，所以我们就简单介绍下如何下载和安装 Swift 以及如何使用编译系统， 关于 使用 REPL 和 LLDB 调试器的内容具体可以参阅官方文档 <a href="https://swift.org/getting-started/#using-the-repl" target="_blank" rel="external">使用 REPL</a> 和 <a href="https://swift.org/getting-started/#using-the-lldb-debugger" target="_blank" rel="external">使用 LLDB 调试器</a></p>
<h3 id="下载和安装-Swift"><a href="#下载和安装-Swift" class="headerlink" title="下载和安装 Swift"></a><span id="下载和安装 Swift">下载和安装 Swift</span></h3><p>刚开始使用 Swift 需要下载并安装编译器和其他必备组件。进入到 <a href="https://swift.org/download/#releases" target="_blank" rel="external">https://swift.org/download/#releases</a> 按目标平台的说明进行。</p>
<blockquote>
<p>下载的时候需要注意下，由于 SPM 还不是特别的成熟，我们在这个教程中将不使用 Releases 的 Swift，我们需要下载开发版的 Snapshots。如下图所示，我们使用日期为 April 12, 2016 的 Snapshots，另外千万不要点击下载 Debugging Symbols 或者 Signature 的安装包，因为那样会缺失一些内置的依赖库！！</p>
</blockquote>
<p><img src="//img.aotu.io/FvuhoI_27Eif1mIrbdEylkSexuXO" alt="image"></p>
<p>下载完成后点击按步骤安装就可以了！</p>
<h4 id="OS-X"><a href="#OS-X" class="headerlink" title="OS X"></a>OS X</h4><p>在 OS X 上下载工具链默认的地址是 <code>/Library/Developer/Toolchains</code>。接着我们输入以下命令导出编译路径</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">export</span> PATH=/Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin:<span class="string">"<span class="variable">$&#123;PATH&#125;</span>"</span></div></pre></td></tr></table></figure>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>首先需要安装 clang :</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install clang</div></pre></td></tr></table></figure>
<p>如果你在 Linux 上安装的 Swift 工具链在系统根目录以外的目录，你需要使用你安装 Swift 的实际路径来运行下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">export</span> PATH=/path/to/Swift/usr/bin:<span class="string">"<span class="variable">$&#123;PATH&#125;</span>"</span></div></pre></td></tr></table></figure>
<p>导出路径之后，你可以通过输入 <code>swift</code> 命令并传入 <code>--version</code> 标志来校验你是否运行了 Swift 的预期版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ swift --version</div><div class="line">Apple Swift version 3.0-dev (LLVM ..., Clang ..., Swift ...)</div></pre></td></tr></table></figure>
<p>在版本号的后缀<code>-dev</code>用来表明它是一个开发的编译，而不是一个发布的版本。</p>
<h3 id="使用编译系统"><a href="#使用编译系统" class="headerlink" title="使用编译系统"></a>使用编译系统</h3><p>Swift 编译系统为编译库、可执行文件和在不同工程之间共享代码提供了基本的约定。</p>
<h4 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h4><p>创建一个新的 Swift 包，首先创建并进入到一个新的目录命名为 <code>Hello</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir Hello</div><div class="line">$ <span class="built_in">cd</span> Hello</div></pre></td></tr></table></figure>
<p>每个包在其根目录下都必须拥有一个命名为 <code>Package.swift</code> 清单文件。如果清单文件为空，那包管理器将会使用常规默认的方式来编译包。创建一个空的清空文件使用命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ touch Package.swift</div></pre></td></tr></table></figure>
<p>当使用默认方式时，包管理器预计将包含在 <code>Sources/</code> 子目录下的所有源代码。创建方式：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mkdir Sources</div></pre></td></tr></table></figure>
<h4 id="编译可执行文件"><a href="#编译可执行文件" class="headerlink" title="编译可执行文件"></a>编译可执行文件</h4><p>默认方式下，目录中包含一个文件称为 <code>main.swift</code> 将会将文件编译成与包名称相同的二进制可执行文件。</p>
<p>在这个例子中，包将生成一个可以输出 <code>Hello, world!</code> 的可执行文件命名为 <code>Hello</code>。</p>
<p>在 <code>Sources/</code> 目录下创建一个命名为 <code>main.swift</code> 的文件，并使用你喜欢的任意一种编辑器输入如下代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Hello, world!"</span>)</div></pre></td></tr></table></figure>
<p>返回到 <code>Hello</code> 目录中，通过运行 <code>swift build</code> 命令来编译包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ swift build</div></pre></td></tr></table></figure>
<p>当命令完成之后，编译产品将会出现在 <code>.build</code> 目录中。通过如下命令运行 <code>Hello</code> 程序:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ .build/debug/Hello</div><div class="line">Hello, world!</div></pre></td></tr></table></figure>
<p>下一步，让我们在新的资源文件里定义一个新的方法 <code>sayHello(_:)</code> 然后直接用 <code>print(_:)</code> 替换执行调用的内容。 </p>
<h4 id="多个源文件协作"><a href="#多个源文件协作" class="headerlink" title="多个源文件协作"></a>多个源文件协作</h4><p>在 <code>Sources/</code> 目录下创建一个新文件命名为 <code>Greeter.swift</code> 然后输入如下代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(name: String)</span></span> &#123;</div><div class="line">	<span class="built_in">print</span>(<span class="string">"Hello, <span class="subst">\(name)</span>!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>sayHello(_:)</code> 方法带一个单一的字符串参数，然后在前面打印一个 “Hello”，后面跟着函数参数单词 “World”。</p>
<p>现在打开 <code>main.swift</code>， 然后替换原来的内容为下面代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="type">Process</span>.arguments.<span class="built_in">count</span> != <span class="number">2</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Usage: hello NAME"</span>)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">let</span> name = <span class="type">Process</span>.arguments[<span class="number">1</span>]</div><div class="line">    sayHello(name)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跟之前的硬编码不同，<code>main.swift</code> 现在从命令行参数中读取。替代之前直接调用 <code>print(_:)</code>， <code>main.swift</code> 现在调用 <code>sayHello(_:)</code> 方法。因为这个方法是 <code>Hello</code> 模块的一部分，所以不需要使用到 <code>import</code> 语句。</p>
<p>运行 <code>swift build</code> 并尝试 <code>Hello</code> 的新版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ swift build</div><div class="line">$ .build/debug/Hello <span class="string">'whoami'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>目前为止，你已经能够运用开源 Swift 来运行一些你想要的程序了。接下来我们就可以进入正题开始入手 SPM 。</p>
</blockquote>
<h2 id="快速入门实例"><a href="#快速入门实例" class="headerlink" title="快速入门实例"></a>快速入门实例</h2><p>在 <a href="#开源 Swift 入门">开源 Swift 入门</a> 章节中，我们简单地学会了编译一个 “Hello world!” 程序。</p>
<p>为了了解 SPM 究竟能够做什么，我们来看一下下面这个由4个独立的包组成的例子：</p>
<ul>
<li><a href="https://github.com/marklin2012/O2PlayingCard.git" target="_blank" rel="external">O2PlayingCard</a> - 定义了 <code>O2PlayingCard</code>， <code>O2Suit</code>， <code>O2Rank</code>， 3个类型。</li>
<li><a href="https://github.com/marklin2012/O2FisherYates.git" target="_blank" rel="external">O2FisherYates</a> - 定义了 <code>shuffle()</code> 和 <code>shuffleInPlace()</code> 方法实现的扩展。</li>
<li><a href="https://github.com/marklin2012/O2DeckOfPlayingCards.git" target="_blank" rel="external">O2DeckOfPlayingCards</a> - 定义了一个 <code>O2Deck</code> 类型对 <code>O2PlayingCard</code> 值得数据进行洗牌和抽牌。</li>
<li><a href="https://github.com/marklin2012/O2Dealer.git" target="_blank" rel="external">O2Dealer</a>  - 定义了一个用来创建 <code>O2DeckOfPlayingCards</code> 进行洗牌和抽出前10个卡片的可执行文件。</li>
</ul>
<blockquote>
<p>你可以从 <a href="https://github.com/marklin2012/O2Dealer.git" target="_blank" rel="external">O2Dealer from GitHub</a> 编译并运行完整例子，然后运行如下命令：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> O2Dealer</div><div class="line">$ swift build</div><div class="line">$ .build/debug/O2Dealer</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="创建一个库包"><a href="#创建一个库包" class="headerlink" title="创建一个库包"></a>创建一个库包</h3><p>我们将从创建一个代表一副标准的52张扑克牌的模块开始。<code>O2PlayingCard</code> 模块定义了 由 <code>O2Suit</code> 枚举值（Clubs, Diamonds, Hearts, spades）和 <code>O2Rank</code> 枚举值（Ace, Two, Three, …, Jack, Queen, King）组成的 <code>O2PlayingCard</code> 类。各个类的核心代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">O2Rank</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Ace</span> = <span class="number">1</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Two</span>, <span class="type">Three</span>, <span class="type">Four</span>, <span class="type">Five</span>, <span class="type">Six</span>, <span class="type">Seven</span>, <span class="type">Eight</span>, <span class="type">Nine</span>, <span class="type">Ten</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Jack</span>, <span class="type">Queen</span>, <span class="type">King</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">O2Suit</span>: <span class="title">String</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Spades</span>, <span class="type">Hearts</span>, <span class="type">Diamonds</span>, <span class="type">Clubs</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">O2PlayingCard</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> rank: <span class="type">O2Rank</span></div><div class="line">    <span class="keyword">let</span> suit: <span class="type">O2Suit</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一般来说， 一个包包括任何位于 <code>Sources/</code> 的源文件。 </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">O2PlayingCard</div><div class="line">├── Sources</div><div class="line">│   ├── O2PlayingCard<span class="selector-class">.swift</span></div><div class="line">│   ├── O2Rank<span class="selector-class">.swift</span></div><div class="line">│   └── O2Suit<span class="selector-class">.swift</span></div><div class="line">└── Package.swift</div></pre></td></tr></table></figure>
<p>由于 <code>O2PlayingCard</code> 模块并不会生成可执行文件，这里应该称为<strong>库</strong>。 库表示被编译成一个可以被其他包导入的模块的包。默认情况下，库模块公开所有位于 <code>Sources/</code> 目录下源代码中声明的公共类型和方法。</p>
<p>运行 <code>swift build</code> 开始启动 Swift 编译的过程。如果一切进行顺利，将会在 <code>.build/debug</code> 目录下生成 <code>O2PlayingCard.build</code> 目录。</p>
<p>接下来我们在 <code>Package.swift</code> 文件中定义包名，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> PackageDescription</div><div class="line"></div><div class="line"><span class="keyword">let</span> package = <span class="type">Package</span>(</div><div class="line">  name: <span class="string">"O2PlayingCard"</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>然后我们只要将 <code>O2PlayingCard</code> 提交到 Github 上，并且给他发布一个 Release 版本即可完成该库包。这里可以自己手动添加一个 <code>.gitignore</code> 文件，忽略掉 <code>/.build</code> ，因为我们的包是不需要包括生成的编译结果的内容的。</p>
<blockquote>
<p>完整 <code>O2PlayingCard</code> 代码可以在 <a href="https://github.com/marklin2012/O2PlayingCard.git" target="_blank" rel="external">https://github.com/marklin2012/O2PlayingCard.git</a> 查看。</p>
</blockquote>
<h3 id="使用编译配置语句"><a href="#使用编译配置语句" class="headerlink" title="使用编译配置语句"></a>使用编译配置语句</h3><p>下一个即将编译的模块是 <code>O2FisherYates</code>。跟之前 <code>O2PlayingCard</code> 有所不同，该模块没有定义新的类。取而代之的是该模块拓展了一个已经存在的特殊的 <code>CollectionType</code> 和 <code>MutableCollectionType</code> 接口协议， 用来添加 <code>shuffle()</code> 方法和对应的 <code>shuffleInPlace()</code> 方法。</p>
<p><code>shuffleInPlace()</code> 方法的实现使用了 <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" target="_blank" rel="external">Fisher-Yates</a> 经典洗牌算法来随机交换集合中的元素。由于 Swift 标准库没有提供一个随机数生成方法，该方法需要调用一个从系统模块导入的函数。为了使这个方法能够同时适配 OSX 和 Linux， 代码将要用到编译配置语句。</p>
<p>在 OS X 中，系统模块是 <code>Darwin</code>, 提供的函数是 <code>arc4random_uniform(_:)</code>。在 Linux 中， 系统模块是 <code>Glibc</code>， 提供的函数是 <code>random()</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#<span class="keyword">if</span> os(<span class="type">Linux</span>)</div><div class="line">  <span class="keyword">import</span> Glibc</div><div class="line">#<span class="keyword">else</span></div><div class="line">  <span class="keyword">import</span> Darwin.C</div><div class="line">#endif</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">Collection</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">shuffle</span><span class="params">()</span></span> -&gt; [<span class="type">Generator</span>.<span class="type">Element</span>] &#123;</div><div class="line">    <span class="keyword">var</span> array = <span class="type">Array</span>(<span class="keyword">self</span>)</div><div class="line">    array.shuffleInPlace()</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> array</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">MutableCollection</span> <span class="title">where</span> <span class="title">Index</span> == <span class="title">Int</span> </span>&#123;</div><div class="line">  <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">shuffleInPlace</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="built_in">count</span> &gt; <span class="number">1</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">    v </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> - <span class="number">1</span> &#123;</div><div class="line">      #<span class="keyword">if</span> os(<span class="type">Linux</span>)</div><div class="line">        <span class="keyword">let</span> j = <span class="type">Int</span>(random() % (<span class="built_in">count</span> - i)) + i</div><div class="line">      #<span class="keyword">else</span></div><div class="line">        <span class="keyword">let</span> j = <span class="type">Int</span>(arc4random_uniform(<span class="type">UInt32</span>(<span class="built_in">count</span> - i))) + i</div><div class="line">      #endif</div><div class="line">      <span class="keyword">guard</span> i != j <span class="keyword">else</span> &#123; <span class="keyword">continue</span> &#125;</div><div class="line">      <span class="built_in">swap</span>(&amp;<span class="keyword">self</span>[i], &amp;<span class="keyword">self</span>[j])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>剩下的步骤和前面的类似，编译通过后上传到 Github ， 发布 Release 版本。</p>
<blockquote>
<p>完整的 <code>O2FisherYates</code> 代码可以在如下地址找到 <a href="https://github.com/marklin2012/O2FisherYates.git" target="_blank" rel="external">https://github.com/marklin2012/O2FisherYates.git</a>。</p>
</blockquote>
<h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p><code>O2DeckOfPlayingCards</code>包把前两个包聚合到一起：它定义了一个在 <code>O2PlayingCard</code> 数组中使用 <code>O2FisherYates</code> 的 <code>shuffle()</code> 方法的 <code>Deck</code> 类型。</p>
<p>为了使用 <code>O2FisherYates</code> 和 <code>O2PlayingCards</code> 模块， <code>O2DeckOfPlayingCards</code> 包必须在 <code>Package.Swift</code> 清单中将上述模块声明为依赖。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> PackageDescription</div><div class="line"></div><div class="line"><span class="keyword">let</span> package = <span class="type">Package</span>(</div><div class="line">    name: <span class="string">"O2DeckOfPlayingCards"</span>,</div><div class="line">    dependencies: [</div><div class="line">        .<span class="type">Package</span>(url: <span class="string">"https://github.com/marklin2012/O2PlayingCard.git"</span>,</div><div class="line">                 majorVersion: <span class="number">1</span>),</div><div class="line">        .<span class="type">Package</span>(url: <span class="string">"https://github.com/marklin2012/O2FisherYates.git"</span>,</div><div class="line">                 majorVersion: <span class="number">1</span>),</div><div class="line">    ]</div><div class="line">)</div></pre></td></tr></table></figure>
<p>每个依赖都需要制定一个源 URL 和版本号。源 URL 是指允许当前用户解析到对应的 Git 仓库。版本号遵循 <a href="http://semver.org/lang/zh-CN/" target="_blank" rel="external">语义化版本号 2.0.0</a>  的约定，用来决定检出或者使用哪个 Git 标签版本来建立依赖。对于 <code>FisherYates</code> 和 <code>PlayingCard</code> 这两个依赖来说， 最新的将要被使用的主版本号为 <code>1</code> （例如： 1.0.0）。</p>
<p>当你运行 <code>swift build</code> 命令时，包管理器将会下载所有的依赖， 并将他们编译成静态库，再把它们链接到包模块中。这样将会使 <code>O2DeckOfPlayingCards</code> 可以访问依赖 <code>import</code> 语句的模块的公共成员。</p>
<p>你可以看到这些资源被下载到你工程根目录的 <code>Packages</code> 目录下，并且会生成编译产品在你工程根目录的 <code>.build</code> 目录下。</p>
<blockquote>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> O2DeckOfPlayingcards</div><div class="line">├── <span class="selector-class">.build</span></div><div class="line">│   └── debug</div><div class="line">│       ├── O2DeckOfPlayingCards<span class="selector-class">.build</span></div><div class="line">│       ├── O2DeckOfPlayingCards<span class="selector-class">.swiftdoc</span></div><div class="line">│       ├── O2DeckOfPlayingCards<span class="selector-class">.swiftmodule</span></div><div class="line">│       ├── O2FisherYates<span class="selector-class">.build</span></div><div class="line">│       ├── O2FisherYates<span class="selector-class">.swiftdoc</span></div><div class="line">│       ├── O2FisherYates<span class="selector-class">.swiftmodule</span></div><div class="line">│       ├── O2PlayingCard<span class="selector-class">.build</span></div><div class="line">│       ├── O2PlayingCard<span class="selector-class">.swiftdoc</span></div><div class="line">│       └── O2PlayingCard<span class="selector-class">.swiftmodule</span></div><div class="line">└── Packages</div><div class="line">    └── O2FisherYates-<span class="number">1.0</span>.<span class="number">0</span></div><div class="line">    │   ├── Package<span class="selector-class">.swift</span></div><div class="line">    │   ├── README<span class="selector-class">.md</span></div><div class="line">    │   └── Sources</div><div class="line">    └── O2Playingcard-<span class="number">1.0</span>.<span class="number">1</span></div><div class="line">        ├── Package<span class="selector-class">.swift</span></div><div class="line">        ├── README<span class="selector-class">.md</span></div><div class="line">        └── Sources</div></pre></td></tr></table></figure>
</blockquote>
<p><code>Packages</code> 目录包含了被复制的包依赖的所有仓库。这样将使你能修改源代码并直接推送这些修改到他们的源，而不需要再对每个包在单独进行复制。剩下的步骤参考前面内容。</p>
<blockquote>
<p>完整的 <code>O2DeckOfPlayingCards</code> 包可以在如下地址查看： <a href="https://github.com/marklin2012/O2DeckOfPlayingCards.git" target="_blank" rel="external">https://github.com/marklin2012/O2DeckOfPlayingCards.git</a>。</p>
</blockquote>
<h3 id="解决子依赖"><a href="#解决子依赖" class="headerlink" title="解决子依赖"></a>解决子依赖</h3><p>到这一步，你已经可以建立 <code>O2Dealer</code> 模块了。 <code>O2Dealer</code> 模块依赖于 <code>O2DeckOfPlayingCards</code> 包，而该模块又依赖于 <code>O2PlayingCard</code> 和 <code>O2FisherYates</code> 包。然而，由于 SPM 会自动解决子依赖，所以你需要声明 <code>O2DeckOfPlayingCards</code> 包作为依赖即可。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> PackageDescription</div><div class="line"></div><div class="line"><span class="keyword">let</span> package = <span class="type">Package</span>(</div><div class="line">    name: <span class="string">"O2Dealer"</span>,</div><div class="line">    dependencies: [</div><div class="line">        .<span class="type">Package</span>(url: <span class="string">"https://github.com/marklin2012/O2DeckOfPlayingCards.git"</span>,</div><div class="line">                 majorVersion: <span class="number">1</span>),</div><div class="line">    ]</div><div class="line">)</div></pre></td></tr></table></figure>
<p>对于在代码中引用任意类型， Swift 需要在源文件中导入模块。在 <code>O2Dealer</code> 模块的 <code>main.swift</code> 文件中， <code>O2DeckOfPlayingCards</code> 中的 <code>O2Deck</code> 类型和 <code>O2PlayingCard</code> 的 <code>O2PlayingCard</code> 类型是引用。虽然 <code>O2Deck</code> 类型中的 <code>shuffle()</code> 方法使用在 <code>O2FisherYates</code> 模块内，但是 <code>O2FisherYates</code> 模块并不需要在 <code>main.swift</code> 中被导入。</p>
<p>核心代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> O2DeckOfPlayingCards</div><div class="line"></div><div class="line"><span class="keyword">let</span> numberOfCards = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> deck = <span class="type">O2Deck</span>.standard52CardDeck()</div><div class="line">deck.shuffle()</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;numberOfCards &#123;</div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> card = deck.deal() <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"No More Cards!"</span>)</div><div class="line">    <span class="keyword">break</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="built_in">print</span>(card)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一般来说，一个包在根目录中包含一个命名为 <code>main.swift</code> 的文件生成一个可执行文件。</p>
<p>运行 <code>swift build</code> 命令开始用 Swift 编译来生成可以被运行在 <code>.build/debug</code> 目录下的可执行文件 <code>O2Dealer</code>。</p>
<blockquote>
<p>注：这里测试的时候会报错没有子模块，需要再运行 <code>swift build</code> 就可以通过了。原因不知道是不是因为没有加证书，这里我们先编译，后续再查找原因。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ swift build</div><div class="line">$ ./.build/debug/O2Dealer</div><div class="line">♠︎6</div><div class="line">♢K</div><div class="line">♢2</div><div class="line">♡8</div><div class="line">♠︎7</div><div class="line">♣︎10</div><div class="line">♣︎5</div><div class="line">♢A</div><div class="line">♡Q</div><div class="line">♡7</div></pre></td></tr></table></figure>
<blockquote>
<p>完整关于 <code>O2Dealer</code> 代码可以在如下地址查阅 <a href="https://github.com/marklin2012/O2Dealer.git" target="_blank" rel="external">https://github.com/marklin2012/O2Dealer.git</a>。</p>
</blockquote>
<p>更多关于 SPM 信息查看文档： <a href="https://github.com/apple/swift-package-manager" target="_blank" rel="external">Swift package Manager project on GitHub</a></p>
<h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><p>到此，我们已经完整地对 SPM 有了开发的经验了！如果你有过 NodeJS 的开发经历，你也许会有似曾相似的感觉，但我们用的可是 Swift！</p>
<p>Swift 是一门先进的语言， SPM 的社区也在不断地完善中。在 Swift 开源之后，我们很容易可以看到它的潜力，看来掌握这门语言必将是一个大趋势。而实践完这篇文章，我们已经快人一步啦！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大部分语言都有官方的代码分配解决方案，幸好苹果也在开发能替代 &lt;a href=&quot;https://cocoapods.org/&quot;&gt;Cocoapods&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; 的管理工具。&lt;strong&gt;Swift Package Manager&lt;/strong&gt;（Swift 包管理器，下面我们简称 SPM ）就是一个用来管理 Swift 代码的分配的官方工具，它为 Swift 编译系统集成了自动进行下载、编译和连接依赖的过程。&lt;/p&gt;
&lt;p&gt;目前，SPM 还处于早期阶段，现在仅支持 OS X 和 Linux 系统，尚不支持 iOS, watchOS 以及 tvOS 平台，但未来很大希望会支持上述平台。&lt;/p&gt;
&lt;p&gt;本文使用苹果官方的例子来讲解 SPM 的使用，希望这篇文章能够帮到有意进行尝试的人！ :)&lt;/p&gt;
    
    </summary>
    
      <category term="移动开发" scheme="https://aotu.io/cates/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="https://aotu.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://aotu.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>如何用ArrayBuffer构造一个form请求</title>
    <link href="https://aotu.io/notes/2016/04/21/form-request/"/>
    <id>https://aotu.io/notes/2016/04/21/form-request/</id>
    <published>2016-04-21T02:53:03.000Z</published>
    <updated>2016-10-20T07:06:32.422Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍form数据的格式以及如何用代码手动构造一个请求。</p>
<a id="more"></a>
<h2 id="一、常用的form-enctype类型："><a href="#一、常用的form-enctype类型：" class="headerlink" title="一、常用的form enctype类型："></a>一、常用的form enctype类型：</h2><ol>
<li>application/x-www-form-urlencoded<br>form默认的编码方式，会编码特殊文字，也是jq等库ajax提交数据默认的编码格式</li>
<li>multi/formdata<br>这种方式可以提交文本+二进制格式</li>
<li>text/plain<br>只编码空格符，这种方式不太常用</li>
</ol>
<p>其中比较复杂的是multi/formdata类型的，可混合提交文本数据与二进制数据(图片、zip等)，下面主要介绍一下这种编码的规律以及在js以及nodejs的构造的方法。</p>
<h2 id="二、分析一个multi-formdata的例子"><a href="#二、分析一个multi-formdata的例子" class="headerlink" title="二、分析一个multi/formdata的例子"></a>二、分析一个multi/formdata的例子</h2><p>以下是一个formdata的格式（chrome中）：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">------WebKitFormBoundary0yB3cIYoABZUBzEm</span></div><div class="line"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name="user"</span></div><div class="line"></div><div class="line"><span class="title">aotu</span>.io</div><div class="line"><span class="comment">------WebKitFormBoundary0yB3cIYoABZUBzEm</span></div><div class="line"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name="psw"</span></div><div class="line"></div><div class="line"><span class="number">123456</span></div><div class="line"><span class="comment">------WebKitFormBoundary0yB3cIYoABZUBzEm</span></div><div class="line"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name="onefile"; filename="onefile-1460812719250.png"</span></div><div class="line"><span class="type">Content</span>-<span class="type">Type</span>: image/png</div><div class="line"></div><div class="line">.... (png binary <span class="class"><span class="keyword">data</span>) ....</span></div><div class="line"><span class="comment">------WebKitFormBoundary0yB3cIYoABZUBzEm--</span></div></pre></td></tr></table></figure></p>
<p>分析一下这种编码格式的特点：</p>
<p>1、request header里声明Content-Type，并且在其后加上数据分界符：boundary，即：Content-Type:multipart/form-data; boundary=—-WebKitFormBoundary0yB3cIYoABZUBzEm。</p>
<p>boundary的字符应该是随机的，防止提交的数据里有相同字符而影响服务器的数据解析。</p>
<p>2、request body的部分，规律可看下面的图解：</p>
<p><img src="//img.aotu.io/FqTCYAQuN8OeV8yFvva4_TUvCgxs" alt="request body说明"></p>
<p>可以看出：</p>
<ul>
<li>body里的boundary总比Content-Type声明的boundary前面多两个中划线；</li>
<li>而body结束部分的boundary则在后面再加上两个中划线;</li>
<li>每行后面都应该有一个换行符『\r\n』，field name行与field值行之间还有一行仅有一个换行符的空白行。</li>
</ul>
<h2 id="三、如何构造"><a href="#三、如何构造" class="headerlink" title="三、如何构造"></a>三、如何构造</h2><p>以上介绍完了multi/formdata的编码结构，下面说说在js里面是怎么构造的这样的一个请求的。</p>
<p>有同学问了，为啥不用new FormData()直接构造数据呢？嗯。。。</p>
<ul>
<li><p>1)第一种情况比较简单，就是表单字段只有文本（数字）的情况。我们可以按照上面的结构，进行简单的字符串拼接，并设置好header，最后xhr.send(form_str)；</p>
</li>
<li><p>2)这种是混合了文本与二进制数据的情况，即上图表示的情况，这时候需要结合xhr2、ArrayBuffer、FileReader等api。</p>
</li>
</ul>
<p>请看以下代码以及注释：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"J_form"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"aotu.io"</span> <span class="attr">readonly</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"psw"</span> <span class="attr">value</span>=<span class="string">"123456"</span> <span class="attr">readonly</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"onefile"</span>&gt;</span>png图片：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"onefile"</span> <span class="attr">id</span>=<span class="string">"onefile"</span> <span class="attr">class</span>=<span class="string">"J_file"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">class</span>=<span class="string">"J_submit"</span> <span class="attr">title</span>=<span class="string">"请选择文件后再提交"</span> <span class="attr">style</span>=<span class="string">"font-size:14px;"</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-size:12px;color:#999;"</span>&gt;</span>(请选择文件后再提交)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>返回结果：<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"J_ret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"J_img"</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> picBuffer = <span class="literal">null</span>; <span class="comment">// 图片数据</span></div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.J_file'</span>).onchange = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</div><div class="line">        <span class="keyword">var</span> file = evt.target.files[<span class="number">0</span>];</div><div class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'.J_submit'</span>).removeAttribute(<span class="string">'disabled'</span>);</div><div class="line">        fileReader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            picBuffer = e.target.result; <span class="comment">// 文件的ArrayBuffer数据</span></div><div class="line">        &#125;</div><div class="line">        fileReader.readAsArrayBuffer(file);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.J_submit'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> boundary_key = <span class="string">'aotu_lab'</span>; <span class="comment">// 数据分割符，一般是随机的字符串</span></div><div class="line">        <span class="keyword">var</span> boundary = <span class="string">'--'</span> + boundary_key;</div><div class="line">        <span class="keyword">var</span> end_boundary = <span class="string">'\r\n'</span> + boundary + <span class="string">'--'</span>;</div><div class="line">        <span class="comment">// 以下是拼接文本域的的数据。为了方便演示以下数据都是单字节、并没有考虑兼容中文</span></div><div class="line">        <span class="keyword">var</span> retsult = <span class="string">''</span>;</div><div class="line">          retsult += boundary + <span class="string">'\r\n'</span>;</div><div class="line">          retsult += <span class="string">'Content-Disposition: form-data; name="user"'</span> + <span class="string">'\r\n\r\n'</span>;</div><div class="line">          retsult += <span class="built_in">document</span>.querySelector(<span class="string">'input[name=user]'</span>).value + <span class="string">'\r\n'</span>; </div><div class="line">          <span class="comment">// 另外一个拼接文本域的的数据</span></div><div class="line">          retsult += boundary + <span class="string">'\r\n'</span>;</div><div class="line">          retsult += <span class="string">'Content-Disposition: form-data; name="psw"'</span> + <span class="string">'\r\n\r\n'</span>;</div><div class="line">          retsult += <span class="built_in">document</span>.querySelector(<span class="string">'input[name=psw]'</span>).value + <span class="string">'\r\n'</span>;</div><div class="line">          <span class="comment">// 拼接二进制数据，这里为了方便演示只用了png的数据</span></div><div class="line">          retsult += boundary + <span class="string">'\r\n'</span>;</div><div class="line">          retsult += <span class="string">'Content-Disposition: form-data; name="onefile"; filename="pic.png"'</span> + <span class="string">'\r\n'</span>;</div><div class="line">          retsult += <span class="string">'Content-Type: image/png'</span> + <span class="string">'\r\n\r\n'</span>;</div><div class="line">         </div><div class="line">        <span class="keyword">var</span> resultArray = [];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; retsult.length; i++) &#123; <span class="comment">// 取出文本的charCode（10进制）</span></div><div class="line">           resultArray.push(retsult.charCodeAt(i));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> pic_typedArray = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(picBuffer); <span class="comment">// 把buffer转为typed array数据、再转为普通数组使之可以使用数组的方法</span></div><div class="line">        <span class="keyword">var</span> endBoundaryArray = [];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; end_boundary.length; i++) &#123; <span class="comment">// 最后取出结束boundary的charCode</span></div><div class="line">           endBoundaryArray.push(end_boundary.charCodeAt(i));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> postArray = resultArray.concat(<span class="built_in">Array</span>.prototype.slice.call(pic_typedArray), endBoundaryArray); <span class="comment">// 合并文本、图片数据得到最终要发送的数据</span></div><div class="line">        <span class="keyword">var</span> post_typedArray = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(postArray); <span class="comment">// 把最终结果转为typed array，以便最后取得buffer数据</span></div><div class="line">        </div><div class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</div><div class="line">                <span class="comment">//do something</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        xhr.open(<span class="string">"POST"</span>, <span class="string">"/submit"</span>);</div><div class="line">        xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'multipart/form-data; boundary='</span>+boundary_key); <span class="comment">// 记得在头部带上boundary</span></div><div class="line">        xhr.send(post_typedArray.buffer); <span class="comment">// 发送buffer数据，这是xhr2的一个特性</span></div><div class="line">    &#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在上面的代码里，由于暂时没能在官方文档找到拷贝或concat整段buffer的方法，所以合并字符数据与图片数据的方法并不十分高效，需要转为普通数组，合并数据后再次转为typed array以获得buffer数据。经过一番转换后计算效率在大文件下或者手机端这种方法的效率还待验证，因为处理普通数组会比直接操作二进制慢不少。</p>
<p>注意，以上代码并不兼容发送中文的情况，大概就是思路用合适字节长度去存储经过encodeURIComponent(或charCode)后的字符，字符code与二进制编码之间的转换这不在本文的讨论范围，有兴趣的同学可参考文后的参考资料。</p>
<p>FormData的api使我们可以处理blob(buffer)、text等数据的提交，平常开发已足够。但是通过了解formdata的数据底层组装方式，或许有助于我们在浏览器端更灵活的处理一些二进制数据、提供一些新思路。</p>
<p>最后再附上nodejs版的构造方式的主要代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> boundary_key = <span class="string">'aotu_lab'</span>;</div><div class="line"><span class="keyword">var</span> boundary = <span class="string">'--'</span> + boundary_key;</div><div class="line"><span class="keyword">var</span> end_boundary = boundary + <span class="string">'--'</span>;</div><div class="line"><span class="keyword">var</span> request = http.request(&#123;</div><div class="line">    <span class="attr">host</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</div><div class="line">    <span class="attr">path</span>: <span class="string">'/submit'</span>,</div><div class="line">    <span class="attr">method</span>: <span class="string">'post'</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">req</span>) </span>&#123;</div><div class="line">req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">buf</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'response from node:'</span>);</div><div class="line">    <span class="built_in">console</span>.log(buf.toString()); <span class="comment">// 接口返回的json string结果</span></div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">request.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'multipart/form-data; boundary='</span>+ boundary_key);</div><div class="line"><span class="keyword">var</span> retsult = <span class="string">''</span>;</div><div class="line">retsult += boundary + <span class="string">'\r\n'</span>;</div><div class="line">retsult += <span class="string">'Content-Disposition: form-data; name="user"'</span> + <span class="string">'\r\n\r\n'</span>;</div><div class="line">retsult += <span class="string">'aotu.io'</span> + <span class="string">'\r\n'</span>;</div><div class="line">retsult += boundary + <span class="string">'\r\n'</span>;</div><div class="line">retsult += <span class="string">'Content-Disposition: form-data; name="psw"'</span> + <span class="string">'\r\n\r\n'</span>;</div><div class="line">retsult += <span class="string">'123456'</span> + <span class="string">'\r\n'</span>;</div><div class="line">retsult += boundary + <span class="string">'\r\n'</span>;</div><div class="line">retsult += <span class="string">'Content-Disposition: form-data; name="onefile"; filename="pic.png"'</span> + <span class="string">'\r\n'</span>;</div><div class="line">retsult += <span class="string">'Content-Type: image/png'</span> + <span class="string">'\r\n\r\n'</span>;</div><div class="line">request.write(retsult); <span class="comment">// 写入文本数据，该方法会自动编码字符为二进制</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> picStream = fs.createReadStream(<span class="string">'./public/images/o2logo.png'</span>); <span class="comment">// 读取一张图片</span></div><div class="line">picStream.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            request.write(<span class="string">'\r\n'</span> + end_boundary); <span class="comment">// 写入结束符</span></div><div class="line">            request.end();</div><div class="line">            res.end(<span class="string">'post form data success!'</span>);</div><div class="line">         &#125;)</div><div class="line">         .pipe(request, &#123;<span class="attr">end</span>: <span class="literal">false</span>&#125;); <span class="comment">// 写入图片数据request</span></div></pre></td></tr></table></figure></p>
<p>有兴趣的同学可以clone这个git地址获取代码：<a href="https://github.com/cos2004/formrequest_app.git" target="_blank" rel="external">https://github.com/cos2004/formrequest_app.git</a></p>
<p>代码介绍：</p>
<p>首先npm install，然后npm start启动服务器</p>
<p><a href="http://127.0.0.1:3000/" target="_blank" rel="external">http://127.0.0.1:3000/</a> ，可演示js版的提交，请选择png格式文件</p>
<p><a href="http://127.0.0.1:3000/formdata" target="_blank" rel="external">http://127.0.0.1:3000/formdata</a> 演示nodejs版提交，在terminal可以看到输出结果</p>
<p><a href="http://127.0.0.1:3000/submit" target="_blank" rel="external">http://127.0.0.1:3000/submit</a> 表单数据提交接口</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.w3.org/TR/html401/interact/forms.html" target="_blank" rel="external">W3C关于Forms的说明</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="external">字符编码笔记：ASCII，Unicode和UTF-8</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="external">MDN docs</a></p>
<p><a href="http://www.cnblogs.com/hustskyking/p/javascript-array.html" target="_blank" rel="external">你所不知道的JavaScript数组</a></p>
<p><a href="http://cnodejs.org/topic/4ffed8544764b729026b1da3" target="_blank" rel="external">如何用nodejs通过post发送multipart/form-data类型的http请求</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍form数据的格式以及如何用代码手动构造一个请求。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="form" scheme="https://aotu.io/tags/form/"/>
    
      <category term="xhr2" scheme="https://aotu.io/tags/xhr2/"/>
    
      <category term="ArrayBuffer" scheme="https://aotu.io/tags/ArrayBuffer/"/>
    
      <category term="构造form数据" scheme="https://aotu.io/tags/%E6%9E%84%E9%80%A0form%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中reduce()方法不完全指南</title>
    <link href="https://aotu.io/notes/2016/04/14/js-reduce/"/>
    <id>https://aotu.io/notes/2016/04/14/js-reduce/</id>
    <published>2016-04-14T08:41:22.000Z</published>
    <updated>2016-10-20T07:06:32.420Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="JavaScript中reduce-方法不完全指南"><a href="#JavaScript中reduce-方法不完全指南" class="headerlink" title="JavaScript中reduce()方法不完全指南"></a>JavaScript中reduce()方法不完全指南</h2><p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终为一个值，是ES5中新增的又一个数组逐项处理方法，那reduce方法跟foreach、map等数组方法又有啥区别呢。</p>
<h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><blockquote>
<p>arr.reduce(callback[, initialValue])   —<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="external">More From MDN</a></p>
</blockquote>
<h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><ul>
<li>callback（一个在数组中每一项上调用的函数，接受四个函数：）<ul>
<li>previousValue（上一次调用回调函数时的返回值，或者初始值）</li>
<li>currentValue（当前正在处理的数组元素）</li>
<li>currentIndex（当前正在处理的数组元素下标）</li>
<li>array（调用reduce()方法的数组）</li>
</ul>
</li>
<li>initialValue（可选的初始值。作为第一次调用回调函数时传给previousValue的值）</li>
</ul>
<h4 id="图解参数"><a href="#图解参数" class="headerlink" title="图解参数"></a>图解参数</h4><p><img src="http://ww3.sinaimg.cn/large/80c4aaf9gw1f2rxtqh8nqj20ur07jaam.jpg" alt="img"></p>
<p><strong>抛开上面晦涩难懂的语法介绍，下面我们直接上实例：</strong></p>
<h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><p>数组 arr = [1,2,3,4] 求数组的和</p>
<h5 id="forEach-实现"><a href="#forEach-实现" class="headerlink" title="forEach 实现"></a>forEach 实现</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</div><div class="line">sum = <span class="number">0</span>;</div><div class="line">arr.forEach(function(e)&#123;sum += e;&#125;); <span class="comment">// sum = 10  just for demo</span></div></pre></td></tr></table></figure>
<h5 id="map-实现"><a href="#map-实现" class="headerlink" title="map 实现"></a>map 实现</h5><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</div><div class="line"><span class="built_in">sum</span> = <span class="number">0</span>;</div><div class="line">arr.<span class="built_in">map</span>(function(obj)&#123;<span class="built_in">sum</span> += obj&#125;);//<span class="built_in">return</span> undefined <span class="built_in">array</span>. <span class="built_in">sum</span> = <span class="number">10</span>  just <span class="keyword">for</span> <span class="built_in">demo</span></div></pre></td></tr></table></figure>
<h5 id="reduce实现"><a href="#reduce实现" class="headerlink" title="reduce实现"></a>reduce实现</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span><span class="params">(pre,cur)</span></span>&#123;<span class="keyword">return</span> pre + cur&#125;); <span class="comment">// return 10</span></div></pre></td></tr></table></figure>
<p>没错，reduce 专为累加这种操作而设计，为累加这类操作而设计的参数，十分方便。<br>那么问题来了，reduce方法的参数到底有哪些用法呢？</p>
<h5 id="参数分解"><a href="#参数分解" class="headerlink" title="参数分解"></a>参数分解</h5><h6 id="1-不传initialValue值"><a href="#1-不传initialValue值" class="headerlink" title="1. 不传initialValue值"></a>1. 不传initialValue值</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur,index,arr</span>)</span>&#123;<span class="keyword">debugger</span>;<span class="keyword">return</span> pre+cur&#125;);</div></pre></td></tr></table></figure>
<p>探查Arguments数组得到：</p>
<ul>
<li>第一次debugger<br>![img](<a href="http://ww4.sinaimg.cn/large/80c4aaf9gw1f2s2mrbkk4j205b045dft.jpg" target="_blank" rel="external">http://ww4.sinaimg.cn/large/80c4aaf9gw1f2s2mrbkk4j205b045dft.jpg</a> [JavaScript/reduce] %}</li>
<li>第二次debugger<br>![img](<a href="http://ww1.sinaimg.cn/large/80c4aaf9gw1f2s2n930loj205r046glk.jpg" target="_blank" rel="external">http://ww1.sinaimg.cn/large/80c4aaf9gw1f2s2n930loj205r046glk.jpg</a> [JavaScript/reduce] %}</li>
<li>第三次debugger<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="number">6</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<h6 id="2-传入initialValue-值"><a href="#2-传入initialValue-值" class="headerlink" title="2. 传入initialValue 值"></a>2. 传入initialValue 值</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur,index,arr</span>)</span>&#123;<span class="keyword">debugger</span>;<span class="keyword">return</span> pre+cur&#125;,<span class="number">10</span>);</div></pre></td></tr></table></figure>
<ul>
<li>第一次debugger<br>![img](<a href="http://ww3.sinaimg.cn/large/80c4aaf9gw1f2s2nlfrt3j205y044glk.jpg" target="_blank" rel="external">http://ww3.sinaimg.cn/large/80c4aaf9gw1f2s2nlfrt3j205y044glk.jpg</a> [JavaScript/reduce] %}</li>
<li>第二次debugger<br>![img](<a href="http://ww4.sinaimg.cn/large/80c4aaf9gw1f2s2ns1hnuj205o040mx5.jpg" target="_blank" rel="external">http://ww4.sinaimg.cn/large/80c4aaf9gw1f2s2ns1hnuj205o040mx5.jpg</a> [JavaScript/reduce] %}</li>
<li>第三次debugger<br>![img](<a href="http://ww1.sinaimg.cn/large/80c4aaf9gw1f2s2o49b49j205n0420sq.jpg" target="_blank" rel="external">http://ww1.sinaimg.cn/large/80c4aaf9gw1f2s2o49b49j205n0420sq.jpg</a> [JavaScript/reduce] %}</li>
<li>第四次debugger<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="number">16</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以看出传入initialValue 会多递归一次，而initialValue的值的作用大家应该也明了了：为累加等操作传入起始值（额外的加值）。<br>而callbackfn中的四个参数也可以在debugger的动态变化中查看出具有的特性。<br>那么利用reduce方法还可以做哪些事情呢?</p>
<h4 id="更多实例"><a href="#更多实例" class="headerlink" title="更多实例"></a>更多实例</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div></pre></td></tr></table></figure>
<p>求乘积<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pro = arr.reduce(<span class="function"><span class="keyword">function</span><span class="params">(pre,cur,index,arr)</span></span>&#123;<span class="keyword">return</span> pre * cur&#125;)</div></pre></td></tr></table></figure></p>
<p>求最大值<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> max = a.reduce(<span class="function"><span class="keyword">function</span><span class="params">(pre,cur,inde,arr)</span></span>&#123;<span class="keyword">return</span> pre&gt;cur?pre:cur;&#125;);</div></pre></td></tr></table></figure></p>
<p>另外，如果你在NodeJs的环境中使用reduce几乎没有任何问题，但是如果你在客户端的浏览器使用reduce方法，那可能就要兼容IE8以下的浏览器了。<br>当然，我们可以引入库来解决这个问题，有趣的是，在jQuery官网中，有一个对reduce长达8年的讨论<a href="https://bugs.jquery.com/ticket/1886" target="_blank" rel="external">Add jQuery.reduce()</a> 而Jquery官方至今仍然坚持reduce适合作为Jquery的一个插件存在。即使后来ES5中加入了reduce的实现。</p>
<blockquote>
<p>This won’t be useful in the core, it can always be included in a plugin. —- by flesler</p>
</blockquote>
<ul>
<li><p>因此，如果在Jquery中使用reduce方法，需引入reduce插件<a href="https://github.com/xhroot/jQuery-reduce-plugin" target="_blank" rel="external">jQuery-reduce-plugin</a></p>
</li>
<li><p>underscorejs 中早已实现reduce方法 <a href="http://underscorejs.org/#reduce" target="_blank" rel="external">http://underscorejs.org/#reduce</a></p>
</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>至此，我们可以很形象的归纳出来forEach、map以及reduce的不同点：</p>
<ul>
<li>forEach 方法是将数组中的每一个值取出做一些程序员想让他们做的事情</li>
<li>map 方法 是将数组中的每一个值放入一个方法中做一些程序员想让他们做的事情后返回一个新的数组</li>
<li>reduce 方法 将数组中的每一个值与前面的被返回相加的总和(初试值为数组的第一个值或者initialValue)</li>
</ul>
<h4 id="Final-insert-a-little-deeper"><a href="#Final-insert-a-little-deeper" class="headerlink" title="Final: insert a little deeper"></a>Final: insert a little deeper</h4><p>reduce方法在数组对象中的运用：</p>
<blockquote>
<p>搬砖工小王拿到了这样的数据格式：<code>var arr =  [ {name: &#39;brick1&#39;}, {name: &#39;brick2&#39;}, {name: &#39;brick3&#39;} ]</code><br>希望得到这样的数据格式： <code>&#39;brick1, brick2 &amp; brick3&#39;</code><br>当然数组异常流：[ {name: ‘brick1’} ] 和 空数组传入得到<code>&#39;brick1&#39;</code> 和 空</p>
</blockquote>
<h6 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr =  [ &#123;name: <span class="string">'brick11'</span>&#125;, &#123;name: <span class="string">'brick12'</span>&#125;, &#123;name: <span class="string">'brick13'</span>&#125; ]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">carryBricks</span><span class="params">(arr)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span><span class="params">(prev, current, index, array)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>)&#123;</div><div class="line">      <span class="keyword">return</span> current.name;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="keyword">array</span>.length - <span class="number">1</span>)&#123;</div><div class="line">      <span class="keyword">return</span> prev + <span class="string">' &amp; '</span> + current.name;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> prev + <span class="string">', '</span> + current.name;</div><div class="line">    &#125;</div><div class="line">  &#125;, <span class="string">''</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>返回结果：<code>brick11, brick12 &amp; brick13</code></p>
<p>此时进一步延伸如果原来有一堆砖已经堆好，传入 initialValue值：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr =  [ &#123;name: <span class="string">'brick11'</span>&#125;, &#123;name: <span class="string">'brick12'</span>&#125;, &#123;name: <span class="string">'brick13'</span>&#125; ]</div><div class="line"><span class="keyword">var</span> bricks = <span class="string">'brick1, brick2, brick3, '</span> <span class="comment">//已经堆好的砖</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">carryBricks</span><span class="params">(arr,bricks)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span><span class="params">(prev, current, index, array)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>)&#123;</div><div class="line">      <span class="keyword">return</span> prev + current.name;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="keyword">array</span>.length - <span class="number">1</span>)&#123;</div><div class="line">      <span class="keyword">return</span> prev + <span class="string">' &amp; '</span> + current.name;</div><div class="line">    &#125;</div><div class="line">      <span class="keyword">return</span> prev + <span class="string">', '</span> + current.name;</div><div class="line">  &#125;, bricks);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>返回结果：<code>brick1, brick2, brick3, brick11, brick12 &amp; brick13</code></p>
<p>-EOF-</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;JavaScript中reduce-方法不完全指南&quot;&gt;&lt;a href=&quot;#JavaScript中reduce-方法不完全指南&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中reduce()方法不完全
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://aotu.io/tags/JavaScript/"/>
    
      <category term="reduce" scheme="https://aotu.io/tags/reduce/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中Math.random的种子设定方法</title>
    <link href="https://aotu.io/notes/2016/04/14/math-random/"/>
    <id>https://aotu.io/notes/2016/04/14/math-random/</id>
    <published>2016-04-14T08:30:45.000Z</published>
    <updated>2016-10-20T07:06:32.421Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h3 id="JavaScript中Math-random的种子设定方法"><a href="#JavaScript中Math-random的种子设定方法" class="headerlink" title="JavaScript中Math.random的种子设定方法"></a>JavaScript中Math.random的种子设定方法</h3><p> CodeWars上有这么个题目： <code>《Don&#39;t rely on luck》</code> 的奇葩题目，先看一下题目描述：</p>
<h5 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h5><blockquote>
<p>The test fixture I use for this kata is pre-populated.<br>It will compare your guess to a random number generated in  JavaScript by:<br><code>Math.floor(Math.random() * 100 + 1)</code><br>You can pass by relying on luck or skill but try not to rely on luck.<br>“The power to define the situation is the ultimate power.” - Jerry Rubin<br>Good luck!</p>
</blockquote>
<h5 id="给出的Test-Case"><a href="#给出的Test-Case" class="headerlink" title="给出的Test Case:"></a>给出的Test Case:</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lucky_number = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">100</span> + <span class="number">1</span>);</div><div class="line">Test.assertEquals(guess, lucky_number, <span class="string">"Sorry. Unlucky this time."</span>);</div></pre></td></tr></table></figure>
<p>出题者大约是想让每次随机数与你guess到的数字相同，So ‘Don’t rely on luck’.<br>这是一个大坑，原本读完题后百思不得其解，当UnSolution后，心里真的是万马奔腾。</p>
<p>This is solution<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.random=<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</div><div class="line"><span class="keyword">var</span> guess = <span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> guess = <span class="number">10</span></div><div class="line"><span class="built_in">Math</span>.floor = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123; <span class="keyword">return</span> guess; &#125;</div></pre></td></tr></table></figure></p>
<p>是的，你没看错。就是将Math.random 或者 Math.floor 重写。<br>看到有个老外估计也是UnLock solution后心里愤恨写了这么一个答案：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.floor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="string">"F*** ***"</span>; &#125;</div><div class="line">guess = <span class="string">"F*** ***"</span>;</div></pre></td></tr></table></figure></p>
<p>然而这道题目明显是想让你了解伪随机数产生的原理以及种子随机数在JavaScript实现方法。</p>
<blockquote>
<p>代码虐我千百遍，我待代码如初恋。</p>
</blockquote>
<h4 id="那么JavaScript中的种子随机数到底怎么实现呢？"><a href="#那么JavaScript中的种子随机数到底怎么实现呢？" class="headerlink" title="那么JavaScript中的种子随机数到底怎么实现呢？"></a>那么JavaScript中的种子随机数到底怎么实现呢？</h4><p>在C或者Ruby中都有低层的重置seed的方法，比如C中的seed值当计算机正常开机后，这个种子的值是定了的，C提供了 <code>srand()</code>函数，它的原形是<code>void srand( int a)</code>。而Ruby中默认是根据系统时间、进程id、一个可升序的数字来生成随机数种子。然而JavaScript中并没有类似上面底层语言提供的seedRandomR函数，我的第一反应就是自己实现一个，也就是重写<code>Math.random()</code>方法。</p>
<blockquote>
<p>在开始我的重写<code>Math.random()</code>方法前还是需要做一些知识储备工作：<br>实现随机函数的方法很多，如斐波那契法、线性同余法、梅森旋转算法Mersenne twister， 现在最好的随机数产生算法是梅森旋转算法Mersenne twister。<a href="https://zh.wikipedia.org/zh/%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95" target="_blank" rel="external">维基百科</a></p>
</blockquote>
<p>chrome v8 引擎使用的随机函数算法：(每个浏览器厂商实现Math.random并不相同)<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ECMA 262 - 15.8.2.14</span></div><div class="line"><span class="keyword">var</span> rngstate;  <span class="comment">// Initialized to a Uint32Array during genesis.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MathRandom</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> r0 = (MathImul(<span class="number">18030</span>, rngstate[<span class="number">0</span>] &amp; <span class="number">0xFFFF</span>) + (rngstate[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">16</span>)) | <span class="number">0</span>;</div><div class="line">  rngstate[<span class="number">0</span>] = r0;</div><div class="line">  <span class="keyword">var</span> r1 = (MathImul(<span class="number">36969</span>, rngstate[<span class="number">1</span>] &amp; <span class="number">0xFFFF</span>) + (rngstate[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">16</span>)) | <span class="number">0</span>;</div><div class="line">  rngstate[<span class="number">1</span>] = r1;</div><div class="line">  <span class="keyword">var</span> x = ((r0 &lt;&lt; <span class="number">16</span>) + (r1 &amp; <span class="number">0xFFFF</span>)) | <span class="number">0</span>;</div><div class="line">  <span class="comment">// Division by 0x100000000 through multiplication by reciprocal.</span></div><div class="line">  <span class="keyword">return</span> (x &lt; <span class="number">0</span> ? (x + <span class="number">0x100000000</span>) : x) * <span class="number">2.3283064365386962890625e-10</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Non-standard extension.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MathImul</span><span class="params">(x, y)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> %NumberImul(TO_NUMBER_INLINE(x), TO_NUMBER_INLINE(y));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>From: <a href="https://github.com/v8/v8/blob/dae6dfe08ba9810abbe7eee81f7c58e999ae8525/src/math.js#L144" target="_blank" rel="external">chrome v8引擎随机数实现方法</a></p>
<p>可以看得出V8引擎中的seed 值是通过<code>MathImul</code>方法创造出来的。所以并没有为我们预留开发者传入seed值的参数。</p>
<p>那我们要想实时掌握每次随机产生的值相同（预留seed参数），只能自己重写<code>Math.random</code>方法了。 ##### 比较经典的获取随机数的写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.random = <span class="function"><span class="keyword">function</span>(<span class="params">seed</span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> (<span class="string">'0.'</span>+<span class="built_in">Math</span>.sin(seed).toString().substr(<span class="number">6</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>打开Node终端跑一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.random = <span class="function"><span class="keyword">function</span>(<span class="params">seed</span>)</span>&#123;<span class="keyword">return</span> (<span class="string">'0.'</span>+<span class="built_in">Math</span>.sin(seed).toString().substr(<span class="number">6</span>));&#125;</div><div class="line"><span class="built_in">Math</span>.random(<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>seed值始终为1时始终得到：<code>0.709848078965</code><br>至此我们可以探索种子随机数的用途：</p>
<blockquote>
<p>比如我们在开发京东的H5活动页面的小游戏时，可能需要随机产生一些背景、随机掉落道具、小怪物；当用户中途退出(微信不小心右滑，一定有不少人被这个恶心到[当然现在已经优化])，当用户重新打开小游戏时，用户整体进度、积分我们可以很容易记录到本地或者存储到微信ID建立的存储机制中从而得以恢复，但是随机产生的场景、随机掉落道具、小怪物等并不是那么容易存储恢复，重新获取场景、小怪物那未免用户体验太差！！！把画布上的所有物件、怪物属性全部存储下来更是没有必要。此时我们就可以利用我们重写的<code>Math.random()</code>(此时可不重写内置方法，可另起别名)。只要我们保存下来一个随机数seed值，利用seed值来恢复所有的场景就好了。</p>
</blockquote>
<p>另外<a href="https://github.com/davidbau/seedrandom" target="_blank" rel="external"> David Bau</a>提供了一个seedrandom库以供开发者调用:</p>
<h6 id="Script-tag-usage"><a href="#Script-tag-usage" class="headerlink" title="Script tag usage"></a>Script tag usage</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/seedrandom/2.4.0/seedrandom.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h6 id="Require-js-usage"><a href="#Require-js-usage" class="headerlink" title="Require.js usage"></a>Require.js usage</h6><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">bower </span><span class="keyword">install </span>seedrandom</div></pre></td></tr></table></figure>
<h6 id="Node-js-usage"><a href="#Node-js-usage" class="headerlink" title="Node.js usage"></a>Node.js usage</h6><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> seedrandom</div></pre></td></tr></table></figure>
<p>当然不管我们如何优化种子随机数，产生的随机数都是伪随机数也就是假的随机数，它是根据某种已知的方法获取随机数，本质上已经去除了真正随机的可能。这种方法一旦重复，则获取到的随机数也会重复。</p>
<p>那么计算机能否产生真的随机数呢？<br>GitHub上有一个叫<a href="https://github.com/maik/RealRand" target="_blank" rel="external">RealRand</a> 的项目。包装了3个真正的随机数服务生成服务：(基于Ruby)</p>
<ul>
<li>random.org：此网站根据大气噪声来生成随机数</li>
<li>FourmiLab（HotBits）：使用放射性衰变来生成随机数</li>
<li>random.hd.org（EntropyPool）：声称使用各种来源来产生随机数，包括本地程序/文件/设备，网页的点击率，以及远程Web站点。</li>
</ul>
<p>跑偏了，再回到JavaScript中种子随机数的话题：</p>
<blockquote>
<p>可以看出来：随机数种子的存在可以让随机数在开发者手中实现可控。而实现随机数“种子的随机”可以来实现H5小游戏道具的随机掉落的可控性更甚至真随机数的可能性(像上文中提到的通过大气噪声、放射性衰变等物理随机坏境来产生随机数种子)。</p>
</blockquote>
<p>-EOF-</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;JavaScript中Math-random的种子设定方法&quot;&gt;&lt;a href=&quot;#JavaScript中Math-random的种子设定方法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中Math.
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://aotu.io/tags/JavaScript/"/>
    
      <category term="Random" scheme="https://aotu.io/tags/Random/"/>
    
  </entry>
  
  <entry>
    <title>Canvas虹膜消除转场</title>
    <link href="https://aotu.io/notes/2016/04/13/Iris-Wipe/"/>
    <id>https://aotu.io/notes/2016/04/13/Iris-Wipe/</id>
    <published>2016-04-13T02:59:20.000Z</published>
    <updated>2016-10-20T07:06:32.420Z</updated>
    
    <content type="html"><![CDATA[<p>一个用代码实现影视转场效果的脑洞之作。</p>
<a id="more"></a>
<h2 id="从需求说起"><a href="#从需求说起" class="headerlink" title="从需求说起"></a>从需求说起</h2><p>有一天阿婆主接到了一个触屏页需求。</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/design.png" alt="img"></p>
<ul>
<li>设计师：吉吉</li>
</ul>
<p>让我们上上下下打量打量这个需求。</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/omg_yue.gif" alt="img"></p>
<p>loading跟正片背景完全不一样！<br>整个需求还分成三个阶段：导语部分（开片）、职位介绍部分（正片）、结束部分（字幕）；每个阶段之间的元素少则三四个，多则四五个，如果一个一个地transition，想想都替浏览器觉得卡。<br>这个时候，一个童年的久远记忆浮出水面——好像有个类似舞台聚光灯的转场来着……</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/tom_and_jerry_01_16.gif" alt="img"></p>
<ul>
<li>童年的回忆：猫和老鼠</li>
</ul>
<p>于是阿婆主开始了漫长的考据征途。</p>
<h2 id="转场（Transition）的初形态"><a href="#转场（Transition）的初形态" class="headerlink" title="转场（Transition）的初形态"></a>转场（Transition）的初形态</h2><p>不知大家注意到没有，凡是有presentation的地方就有转场的存在。<br>利器PPT以及更为高端的Keynote都为我们提供了现成的五花八门的转场效果。</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/ppt_keynote_transition.png" alt="img"></p>
<p>再往人生前半段推，小学老师偶尔会用黑白幻灯片来展示一些图案内容，即便是这种形式也有着其独特的转场效果。</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/the_man_from_uncle.gif" alt="img"></p>
<ul>
<li>[秘密特工]</li>
</ul>
<p>最原始的知识海洋黑板，你可能会说，这可没有转场效果了吧？其实，擦黑板也是一种转场呀。</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/wipe_blackboard.gif" alt="img"></p>
<ul>
<li>图片来源：<a href="http://blog.yzjy.com.cn/group/916/post/109251.aspx" target="_blank" rel="external">扬州市汶河小学教师博客群</a></li>
</ul>
<p>转场这个概念最先出现于影视界。在影像由动态照片的简单功能一直发展到现在可商业可艺术的多元电影行业的过程中，经历了数代影视人的探索与创新，才有了现在各式各样的转场形式的沉淀。</p>
<p>维基百科中对转场的定义——</p>
<blockquote>
<p>影片转场是一种用于影片、视频剪辑后期制作的技术，用于连接场景或镜头。常见的转场方式是生切（normal cut）。大多数影片会选择性地使用其他方式的转场，以便更好地传达一种情绪、指明一个时间段，或者将一个故事段落化。转场方式包含溶解（dissolves）、L型剪辑（L cuts）、渐出（fades，常见方式是渐渐黑屏）、对称剪辑（match cuts）、消除（wipes）。 </p>
</blockquote>
<p>所有的这些转场方式都能在PPT中一一映射。</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/ppt_transition.png" alt="img"></p>
<p>能和PPT一一映射的还有一种东西，那就是就是九十年代的MV……</p>
<p>仔细想想，浮夸的消除转场似乎大多数是在presentation的场合见到，不过最近除了电子幻灯片这样的载体，又增加了一种常见载体——触屏页。没错，触屏页也是一种presentation的途径。</p>
<p>在触屏页飞速发展的这几年，业界的能人挖掘出不少宝藏，转场效果也是乱花渐欲迷人眼，包括但不止于生切，滑动，覆盖，元素过渡。其中的覆盖转场，就是上面所说的消除转场的一种。</p>
<p>在遍历了维基中罗列的转场类型之后，初步认定阿婆主脑内的转场属于消除转场。</p>
<h2 id="消除转场（Wipe）是什么样的"><a href="#消除转场（Wipe）是什么样的" class="headerlink" title="消除转场（Wipe）是什么样的"></a>消除转场（Wipe）是什么样的</h2><p>再次请出我们的维基君——</p>
<blockquote>
<p>一个镜头从画面的一头消除到画面的另一头，或者以一个特殊的形状消除，显示下一个镜头的方式叫做消除转场。如果消除的方式是从画面的两侧往中心轴或从中心往两侧消除，这种消除称为仓门消除（a barn door wipe），因为效果类似打开或者关闭仓门。</p>
</blockquote>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/barn.jpg" alt="img"></p>
<ul>
<li>谷仓</li>
</ul>
<p>看看维基君给出的浮夸例子</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/wiki_wipes_s.gif" alt="img"></p>
<p>眼见着胜利就在前方，这就是我要的转场方式，只是形状换成了圆形。</p>
<p>继续往下阅读，哎我去，众里寻他千百度啊——</p>
<h2 id="虹膜消除（Iris-slow）转场"><a href="#虹膜消除（Iris-slow）转场" class="headerlink" title="虹膜消除（Iris slow）转场"></a>虹膜消除（Iris slow）转场</h2><p>出来吧，维基神兽——</p>
<blockquote>
<p>虹膜转场是消除转场的一种，画面中一个逐渐变大或变小的圆圈负责画面间的切换。常见于动画短片，比如兔八哥（头一回知道原来八哥叫Looney Tunes）啊、（阿婆主没听说过的）Merrie Melodies等动画系列啊，用于表示故事结束。在这种情景下，虹膜消除可以用于聚焦在某个特定的点，还可以作为一个道具让人物来个结束语，或者作为第四面墙任由人物钻进钻出，以及其他。</p>
</blockquote>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/I_Love_to_Singa.gif" alt="img"></p>
<ul>
<li>Merrie Melodies（恍然大悟）出品的动画短片：<a href="http://www.dailymotion.com/video/x2ijkn_i-love-to-singa_shortfilms" target="_blank" rel="external">I Love to Singa</a>小猫头鹰与第四面墙的互动</li>
</ul>
<p>消除转场借鉴了舞台表演中幕布的转场形式，并利用电脑剪辑比较自由的优势在幕布上增加了一些形状。在视频这个特殊的媒介中，屏幕被看作银幕世界中的第四面墙。</p>
<p>有些影视作品中的角色会与观众对话，称为打破第四面墙，这种做法出现在了美剧《纸牌屋》中，鼻祖是莎翁的哈姆莱特。</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/House.Of.Cards.S02E01.jpg" alt="img"></p>
<ul>
<li>《纸牌屋》</li>
</ul>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/iris-pupil-anatomy-illustration_medical512.png" alt="img"></p>
<ul>
<li>虹膜位于瞳孔后部，瞳孔的放大缩小就类似虹膜消除转场中的圆圈缩放。</li>
</ul>
<h2 id="虹膜消除转场的应用场景"><a href="#虹膜消除转场的应用场景" class="headerlink" title="虹膜消除转场的应用场景"></a>虹膜消除转场的应用场景</h2><p>触屏页作为一种类幻灯片的展示手段，市面上的作品中也几乎涵盖了上面提到的转场方式，除了那些较为高级的需要与音频配合紧密的转场方式。但虹膜转场却很少见，嗯，阿婆主此生未见。</p>
<p>虽说这种简陋的转场在现代影视作品中已经销声匿迹，但并不妨碍它在触屏页中的应用。使用这种转场，说好听了叫复古，说不好听了叫偷懒。因为一旦使用了这中一黑到底的转场，你完全不用考虑前后两屏之间有何视觉联系，这个元素怎么消失那个元素怎么出现，简直是懒癌患者的福音。</p>
<p>根据虹膜转场的历史特点与视觉特点，虹膜转场的应用场景如下：</p>
<ul>
<li>复古风 </li>
<li>中心点明确 </li>
<li>其他转场性能过差 </li>
</ul>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>都说授人以鱼不如授人以渔，接下来咱们就先来探讨一下实现虹膜消除转场的思路（明明是代码写得烂不敢放出来）。<br>在各大制图工具中，如果你是高级玩家，你一定对这个图标不陌生。</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/substract.png" alt="img"></p>
<p>这个图标在大部分的制图软件中都是一个功能，减去上层形状。</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/substract_compare.png" alt="img"></p>
<p>这个功能是实现虹膜消除转场乃至所有消除转场的基本思路。顺着这条路，可以设想出无数种实现技术：</p>
<ul>
<li>png+CSS3（通过放大缩小带有透明圆圈的png图实现，缺点：剩余区域补全较费事）</li>
<li>SVG/clip-path（通过改变矢量图路径，绘制出变化中的黑幕加圆圈，缺点：算法较复杂，不够直观）</li>
<li>border＋border-radius＋CSS3（通过改变元素宽度与边框宽度实现，缺点：造成页面重绘，影响性能）</li>
<li>Canvas（globalCompositeOperation属性完美同步制图软件中的减去上层形状功能，甚至还有各种奇形怪状的其它功能，具体参见<a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing" target="_blank" rel="external">Compositing and clipping</a>）</li>
</ul>
<p>显然，Canvas的globalCompositeOperation属性最接近我们的需求。</p>
<h2 id="globalCompositeOperation"><a href="#globalCompositeOperation" class="headerlink" title="globalCompositeOperation"></a>globalCompositeOperation</h2><p>这个属性拥有11个值，为矢量图绘制打开了无数扇大门。</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/mdn_globalcompsiteoperation.png" alt="img"><br><img src="//img.aotu.io/lyxuncle/iriswipe/destination-out.png" alt="img"></p>
<p>有了这样一个方法，搞出虹膜消除转场简直是分分钟的事。</p>
<p>首先我们来撸一撸我们需要哪些值来进行一个虹膜消除转场的绘制。</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/precious_sketch.png" alt="img"></p>
<ul>
<li>来自阿婆主的珍（chou）贵（lou）手稿</li>
</ul>
<p><strong>首先是画布尺寸。</strong>这就不用多说了，没有画布再大的虹膜也什么都不是。</p>
<p><strong>接着确定虹膜的圆心位置。</strong>这直接决定着转场中圆圈的最大半径值。聪明的你一定知道这个值怎么算（勾股定理）。</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/Pythagorean_theorem.png" alt="img"></p>
<ul>
<li>他们说放个公式会高大上一点。</li>
</ul>
<p><strong>然后就是虹膜的收缩速度。</strong></p>
<p>有了这几个值，就可以叫来RAF一起搞一搞了。</p>
<p>整体代码思路就是：</p>
<ul>
<li>如果是缩小圆圈，则半径缩小至0结束。</li>
<li>如果是放大圆圈，则半径增加至最大半径结束。</li>
<li>变化速度通过每帧半径变化的差值大小来控制。</li>
</ul>
<p>由于触屏页的转场相比动画短片中出现的频率要高得多，且触屏页基本没有黑屏退场的场景需求，因此单纯的放大或者缩小圆圈显然不太现实。</p>
<p>我们可以在调用绘制画布的方法中加入一个标志符，用于判定是否还有下一个转场，如果有，则设为1，并在第4个参数传入下一个转场的圆心位置以及计算好的最大半径（避免每次迭代都计算一次）。</p>
<p>具体代码参见<a href="https://github.com/lyxuncle/iriswipe" target="_blank" rel="external">https://github.com/lyxuncle/iriswipe</a></p>
<p>好啦，健康又卫生的虹膜消除转场就完成啦，放到需求里就是这样哒～</p>
<p><img src="//img.aotu.io/lyxuncle/iriswipe/iris_mobi.gif" alt="img"></p>
<ul>
<li>线上地址：<a href="http://jdc.jd.com/fd/h5/xin/index/index.html" target="_blank" rel="external">新通路事业部招聘</a></li>
</ul>
<p>最后，按照惯例要装逼，放上考据过程中看到的一句话，干了这杯鸡汤：</p>
<blockquote>
<p>Fades, wipes, cuts and dissolves are always great tools for telling stories on video, but true video artists use editing techniques that cannot be selected from a pull-down menu.<br>    by Don Dollins in <a href="http://www.videomaker.com/article/c3/7998-computer-editing-split-man" target="_blank" rel="external">Computer Editing: Split Man</a></p>
</blockquote>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://en.wikipedia.org/wiki/Film_transition" target="_blank" rel="external">Transition</a>，维基百科<br><a href="https://en.wikipedia.org/wiki/Wipe_(transition" target="_blank" rel="external">Wipe (transition)</a>)，维基百科<br><a href="http://www.videomaker.com/article/c3/7998-computer-editing-split-man" target="_blank" rel="external">COMPUTER EDITING: SPLIT MAN</a>，Don Collins<br><a href="https://vimeo.com/blog/post/j-cuts-l-cuts" target="_blank" rel="external">J-Cuts &amp; L-Cuts</a>，Cameron Christopher<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing" target="_blank" rel="external">Compositing and clipping</a>，MDN<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation" target="_blank" rel="external">CanvasRenderingContext2D.globalCompositeOperation</a>，MDN</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个用代码实现影视转场效果的脑洞之作。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Canvas" scheme="https://aotu.io/tags/Canvas/"/>
    
      <category term="转场" scheme="https://aotu.io/tags/%E8%BD%AC%E5%9C%BA/"/>
    
      <category term="触屏页转场" scheme="https://aotu.io/tags/%E8%A7%A6%E5%B1%8F%E9%A1%B5%E8%BD%AC%E5%9C%BA/"/>
    
      <category term="消除转场" scheme="https://aotu.io/tags/%E6%B6%88%E9%99%A4%E8%BD%AC%E5%9C%BA/"/>
    
      <category term="虹膜" scheme="https://aotu.io/tags/%E8%99%B9%E8%86%9C/"/>
    
  </entry>
  
  <entry>
    <title>前端优化实践总结</title>
    <link href="https://aotu.io/notes/2016/04/12/jcloud-opt/"/>
    <id>https://aotu.io/notes/2016/04/12/jcloud-opt/</id>
    <published>2016-04-12T07:50:35.000Z</published>
    <updated>2016-10-20T07:06:32.420Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>记得前百度工程师张云龙说过，页面前端优化问题绝对不仅仅是为页面提速的问题，更是工程的问题，有兴趣的同学可以阅读《<a href="https://github.com/fouber/blog/issues/3" target="_blank" rel="external">前端工程与性能优化</a>》。里面有提到根据雅虎14条优化原则，《高性能网站建设指南》以及《高性能网站建设进阶指南》中提到的优化点梳理出来的优化方向：</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_31.png" alt="img"></p>
<p>张云龙先生提及到的优化方向从提出到现在虽已相隔两年时间，前端技术也在飞速发展，但其提到的工程化思想仍是前端优化的一个大方向，亦有很大的指导意义。</p>
<p>当然这是另外更大的话题了，这篇文章并不是将本次的优化点按照萌妹子暖暖写的《<a href="http://aotu.io/notes/2016/03/16/optimization/#comments">前端优化不完全指南</a>》一一列出（当然并没有那么多，前端优化永远写不完，写不完：- O），而是<strong>重点结合项目总结</strong>这一次优化中<strong>如何寻找优化点</strong>以及<strong>收益比较大的常见方法</strong>，希望可以对遇到相似问题的同学有帮助，前端大神可轻轻淡笑而过。</p>
<h2 id="高清图适配优化"><a href="#高清图适配优化" class="headerlink" title="高清图适配优化"></a>高清图适配优化</h2><p>我们所说的高清图一般是指至少具有 Retina 屏级别精度的图片，就是平时所说的『2x』图。对于高清图的适配，一般会根据图片特点以及项目实际情况去制定适配方案。</p>
<h3 id="纯色图"><a href="#纯色图" class="headerlink" title="纯色图"></a>纯色图</h3><p>纯色图一般应用到装饰性的小 icon，如侧导航的标题 icon：</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_1.jpg" alt="img"> </p>
<p>此类图标由单色组成，可以根据一定的绘制规则制成 iconfont 图标，iconfont 的图标具有矢量性，其大小和颜色可以都可以通过样式来控制。</p>
<p>新版首页出现了 33 个单色图标，这些图标复用性很强，同一个图标在不同页面都有出现，而且同一个图标还有不一样的尺寸，如果用传统方法做成图片的话图片数量会很多，即使全部合并成 sprite 图，图片的 K 数也会很大，而且后期如果有修改的话还得重新合并 sprite 图，因此这次首页改版所有的纯色图标的高清适配全部使用 iconfont 图标：</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_4.jpg" alt="img"> </p>
<h4 id="ICONFONT图标管理"><a href="#ICONFONT图标管理" class="headerlink" title="ICONFONT图标管理"></a>ICONFONT图标管理</h4><p>改版所用到的 ICONFONT 图标生成以及管理选择了『<a href="http://iconfont.cn/" target="_blank" rel="external">阿里巴巴矢量图标库</a>』线上服务，在上面通过上传图标的 SVG 文件生成对应的字体文件，还可以根据图标分项目管理：</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_7.jpg" alt="img"></p>
<p>图标生成后，该服务还会自动打包好所需文件，并制成 DEMO 网页，供本地预览查找图标对应的字体编码以及使用方法：</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_8.png" alt="img"></p>
<p>相信前端的同学很早就使用过 ICONFONT 服务，笔者衷心感谢提供 ICONFONT 服务的 <a href="http://thx.github.io/" target="_blank" rel="external">THX</a> 组织，除了 ICONFONT 服务，THX 还提供了不少业界良心的前端精品工具服务，感谢他们为业界作出的贡献。</p>
<h3 id="非纯色图"><a href="#非纯色图" class="headerlink" title="非纯色图"></a>非纯色图</h3><p>非纯色图通常用『2X』图适配，适配方案可以有很多选择：媒体查询、srcset属性、image-set属性、脚本控制。</p>
<p>媒体查询、srcset属性 和 image-set属性成功匹配的基本是高端浏览器，兼容性略差，脚本控制兼容性更佳，项目具体用哪一种要看『国情』了：</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_32.png" alt="img"> </p>
<p>上图是我国PC端操作系统市场份额的大概分布情况，可以看出 95% 以上的用户都是使用 Windows 系统的，使用 Windows 系统的用户设备屏幕大部分都是普清屏，而使用高清屏的用户基本都是使用 Mac OS 系统，Mac OS 系统的浏览器又以『高富帅』Chrome 和 Safari 为主，因此只考虑适配 Mac OS 设备，最终选择比媒体查询更为方便的『srcset属性』和『image-set属性』方案：内容图使用 srcset 属性适配，背景图使用 image-set 属性适配高清图：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/bg_eco_v2_@1x.png"</span> <span class="attr">srcset</span>=<span class="string">"images/bg_eco_v2_@1x.png 1x, images/bg_eco_v2_@2x.png 2x"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.chain_item_icon</span>&#123;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-image-set</span>(url(<span class="string">"images/bg_chains_@1x.png"</span>) <span class="number">1</span>x, <span class="built_in">url</span>(<span class="string">"images/bg_chains_@2x.png"</span>) <span class="number">2</span>x);</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">image-set</span>(url(<span class="string">"images/bg_chains_@1x.png"</span>) <span class="number">1</span>x, <span class="built_in">url</span>(<span class="string">"images/bg_chains_@2x.png"</span>) <span class="number">2</span>x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="设计类字体"><a href="#设计类字体" class="headerlink" title="设计类字体"></a>设计类字体</h3><p>新版京东云出现了很多设计类字体，也就是我们平时所说的非系统字体，如新版京东云首页版块标题用的字体 —-『方正兰亭超细黑体』</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_9.png" alt="img"></p>
<p>对于设计类字体，前端和视觉会达成共识不会大面积使用，因为该类字体的实现只能用图片或通过样式 <code>@font-face</code> 属性去实现：</p>
<ul>
<li><p><strong>图片方案：</strong>虽然可以高精度还原，兼容性强，但是每改动一处地方都需要换图，不方便维护，内容扩展性差，而且如果要适配高清设备，又得多一套图。</p>
</li>
<li><p><strong><code>@font-face</code> 属性方案：</strong>字体具有矢量性，高清设备可以轻松适配，内容扩展性强，但是不同的浏览器存在渲染的差异，兼容性略弱，<code>@font-face</code> 字体文件大小一般又是 M 级别，会不同程度影响页面加载体验。</p>
</li>
</ul>
<p>如果非系统字体应用的地方只有几个标题，而且不常改动的话，用图片方案较优，但是新版京东云在其它频道的首页也会应用到，内容较多，而且要适配高清图，所以图片方案并不适用，<code>@font-face</code> 属性方案更合适。</p>
<p>针对 『<code>@font-face</code> 属性方案』<strong>文件体积大</strong>和<strong>浏览器渲染差异</strong>的两个不足之处，采取了一个折中的方案，也就是<strong>浏览器的渲染差异在视觉可以接受的范围下，只抽取要用到的字体生成体积相对较小的字体文件。</strong></p>
<p>Junmer 出品的 <a href="http://ecomfe.github.io/fontmin/tw#feature" target="_blank" rel="external">Fontmin</a> 工具可以大大满足这个需求，只需要将用到了字体源以及需要生成的文字内容加入到工具中，就可以生成相应的字体文件：</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_10.png" alt="img"></p>
<p>原来 2MB 的字体</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_12.png" alt="img"></p>
<p>生成的字体文件只有 11KB，字体文件体积减少达到了 99%</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_11.png" alt="img"></p>
<h2 id="图片资源优化"><a href="#图片资源优化" class="headerlink" title="图片资源优化"></a>图片资源优化</h2><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><h4 id="额外请求数过多"><a href="#额外请求数过多" class="headerlink" title="额外请求数过多"></a>额外请求数过多</h4><p>旧版首页加载的时候，一共有40个请求，其中图片的请求就有 31 个，占总请求数的 77%</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_14.png" alt="img"></p>
<p>有些可以合并的图片并没有做处理：</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_16.png" alt="img"> </p>
<p>其中至少有 11 张图片是可以合并成一张图片的，也就是至少多了 27% 的额外请求数</p>
<h4 id="资源浪费"><a href="#资源浪费" class="headerlink" title="资源浪费"></a>资源浪费</h4><p>首屏的图片资源加载了 31个，但其可见的图片只有 2 张，加载了 100% 的图片资源，首屏图片资源利用率只有 6%</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_15.png" alt="img"></p>
<p>只要用户没有完全浏览完网页就跳到其它页面的话，都会造成资源浪费。</p>
<h4 id="图片加载体验差"><a href="#图片加载体验差" class="headerlink" title="图片加载体验差"></a>图片加载体验差</h4><p>首屏耗时较长的大图加载过程并没有做 Loading占位图 提示，有机会出现轮播图区域空白时间过长：</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_17.png" alt="img"></p>
<p>上图显示页面加载 1.8s 后，Banner 背景图还是没有出来，虽然网速飞快的用户有可能不出现这种情况，但是不排除网络慢的用户会碰上。</p>
<p>除此之外，图片加载失败的时候也没有做容错处理，就有机会出现图片加载失败的系统默认图标样式，会影响页面的美观性：</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_18.png" alt="img"> </p>
<h3 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h3><p>虽然新版首页的图片资源的排版和内容有所不同，但至少可以针对旧版额外请求数多、资源浪费、加载体验差这三个方向去改进。</p>
<h4 id="减少额外请求数"><a href="#减少额外请求数" class="headerlink" title="减少额外请求数"></a>减少额外请求数</h4><p>减少图片额外请求数，收益比较明显的一般有三个方法：图片合并、iconfont 图标、Base64，三个方法都有各自的优缺点：</p>
<ul>
<li><p>图片合并</p>
<p>优点：兼容性强可缓存可提前加载多态图可提升图片加载显示体验</p>
<p>缺点：维护性差、合并图片类型以及大小控制限制高、有可能造成资源浪费</p>
<p>适合：修改更新少的常驻型低色位的装饰小图</p>
</li>
<li><p>Iconfont</p>
<p>优点：可缓存矢量性可控性强</p>
<p>缺点：存在浏览器渲染差异性、只能纯色、文件体积略大</p>
<p>适合：纯色图标</p>
</li>
<li><p>Base64</p>
<p>优点：无额外请求</p>
<p>缺点：不可缓存、兼容性差、代码冗余、可读性差、维护不便、CPU内存耗损大</p>
<p>适合：体积小复用率低的背景装饰图标</p>
</li>
</ul>
<p>新版首页一共有 70 个图片资源，其中有 49 个是纯色图标，16 个是低色位非纯色图，5 个是高色位图。</p>
<p>49 个纯色图标全部使用了 Iconfont 方法处理，13 个低色位非纯色图使用了合并方法，一共有 62 个图片做了减少额外请求处理，最终图片资源请求数一共只有 14 个，其中纯色图的请求数占 2 个，低色位非纯色图请求数占 6 个，<strong>图片总请求数减少了 80% ，图片合并和 Iconfont 的额外请求处理率分别达到了 56% 和 96%</strong></p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_19.png" alt="img"></p>
<p>可以看到 Iconfont 的额外请求处理率相当出色，因为适合应用他的对象特点比较简单，而图片合并会受到合并图片的格式、资源分布、模块分布等情况影响，其额外请求处理率会相对低于 Iconfont。</p>
<p>我们可以得到一个优化图片额外请求的小结论：<strong>纯色图标优先考虑 Iconfont，低色位非纯色图片根据项目实际需要来做合并优化，Base64非特殊图片不使用</strong></p>
<h4 id="资源按需加载"><a href="#资源按需加载" class="headerlink" title="资源按需加载"></a>资源按需加载</h4><p>新版首页需要加载的图片资源一共有 14个，其中首屏的图片资源有 8 个，可见图片有 5 个，如果不作处理，那么首屏图片资源的利用率只有 35%</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_20.png" alt="img"></p>
<p>如果进行资源按需加载，在非首屏的图片资源实行懒加载，将轮播图不可见的两张图片做触发加载处理，这样首屏的加载图片资源只有 8 个，首屏图片资源利用率则可达到 60%，提高了 70% 的图片资源利用率，<strong>资源按需加载不失为一种避免资源浪费的最挂实践方法</strong></p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_21.png" alt="img"></p>
<h4 id="占位提示图提高加载体验"><a href="#占位提示图提高加载体验" class="headerlink" title="占位提示图提高加载体验"></a>占位提示图提高加载体验</h4><p>图片加载的时间长短由很多因素决定，如服务器响应时间、用户所用网络带宽、图片大小等，但无论是哪一种情况，总有一个等待的过程，在这过程总会有一个空白时间，特别是占屏面积比较大的首屏轮播大图和采取懒加载的图片，即使图片空白时间很短，用户也会有不同程度的感知，会给用户带来一种唐突或漫长等待的感觉，如果加载过程给图片加上体积比较小的占位提示图，则会让用户有一个图片加载预知，当图片加载完成后再呈现给用户看，这样用户在图片加载过程中看到的都是完整的图片</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_24.png" alt="img"></p>
<p>当图片加载失败的时候，展示占位图，避免系统默认的图片加载失败图标出现</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_23.png" alt="img"> </p>
<h2 id="渐进增强优化"><a href="#渐进增强优化" class="headerlink" title="渐进增强优化"></a>渐进增强优化</h2><p>渐进增强是指从最基本的功能出发，在保证系统在任何环境中的可用性基础上，逐步增加功能，提高用户体验，</p>
<h3 id="动画性能渐进增强"><a href="#动画性能渐进增强" class="headerlink" title="动画性能渐进增强"></a>动画性能渐进增强</h3><p>出现在页面比较重要位置的模块，如轮播图、导航等，如果需要做动画效果的话，在高低端浏览器上都应该能统一实现出来，新旧版首页首屏都以轮播图为主，轮播图切换都使用了渐隐渐现的动画效果。</p>
<p>旧版的动画实现在高低端浏览器都使用了 JQ 第三方动画库</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jcloud_new/jquery.SuperSlide.2.1.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">..</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">//banner</span></div><div class="line">$(<span class="string">".banner-slider"</span>).slide(&#123;<span class="attr">mainCell</span>:<span class="string">".bd ul"</span>,<span class="attr">effect</span>:<span class="string">"fold"</span>,<span class="attr">autoPlay</span>:<span class="literal">true</span>,<span class="attr">interTime</span>:<span class="number">4000</span>,<span class="attr">delayTime</span>:<span class="number">1000</span>&#125;);</div><div class="line">$(<span class="string">".box-slider"</span>).slide(&#123;<span class="attr">mainCell</span>: <span class="string">".bd ul"</span>, <span class="attr">effect</span>: <span class="string">"left"</span>, <span class="attr">autoPlay</span>: <span class="literal">true</span>, <span class="attr">interTime</span>: <span class="number">5000</span>, <span class="attr">scroll</span>: <span class="number">6</span>, <span class="attr">vis</span>: <span class="number">6</span>&#125;);</div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其实渐隐渐现的效果 CSS3 动画也能实现。新版首页的轮播图动画设置了 CSS3 动画后，再利用脚本控制样变化以触发 CSS3 动画，这样支持动画属性的浏览器就能以 CSS3 动画实现效果，而不支持的浏览器则通过脚本的属性判断，用 JQ 动画实现：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.fc_item</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">filter</span>: alpha(opacity=<span class="number">0</span>);</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">    @<span class="keyword">include</span> trst(opacity 0.8s linear);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 轮播图切换</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgChange</span>(<span class="params">opt</span>)</span>&#123;  </div><div class="line">    ...   </div><div class="line">    <span class="comment">// 如果支持 transform 属性，使用CSS3动画</span></div><div class="line">    <span class="keyword">if</span>(supports(<span class="string">'transform'</span>))&#123;</div><div class="line">      $imgList.eq(opt).addClass(<span class="string">'active'</span>).css(<span class="string">'opacity'</span>,<span class="string">'1'</span>).siblings().removeClass(<span class="string">'active'</span>).css(<span class="string">'opacity'</span>,<span class="string">'0'</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="comment">// 如果不支持 transform 属性，使用JQ动画</span></div><div class="line">      $imgList.eq(opt).stop().animate(&#123;</div><div class="line">        <span class="string">'opacity'</span>: <span class="string">'1'</span></div><div class="line">      &#125;,<span class="number">800</span>).addClass(<span class="string">'active'</span>).siblings().stop().animate(&#123;</div><div class="line">        <span class="string">'opacity'</span>: <span class="string">'0'</span></div><div class="line">      &#125;,<span class="number">800</span>).removeClass(<span class="string">'active'</span>);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>JQ 动画虽然兼容性好，但其动画性能远远不及 CSS3 动画，<strong>因此我们可以用以下的方法对动画性能实现渐进增强：高端浏览器可以通过触发 CSS3 动画实现效果，低端浏览器则使用 JQ 动画实现。</strong></p>
<h3 id="视觉渐进增强"><a href="#视觉渐进增强" class="headerlink" title="视觉渐进增强"></a>视觉渐进增强</h3><p><strong>视觉渐进增强通常可以通过 CSS3 属性和增加 CSS3 动画来实现</strong>，现主流的网站基本都会对视觉做渐进增强处理。本次首页改版主要在多态元素、切换元素上做了处理</p>
<p>支持 CSS3 动画的 SexyGuy</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_25.gif" alt="img"></p>
<p>不支持 CSS3 动画的 PoorGuy</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_33.gif" alt="img">  </p>
<h2 id="Tab-键锚点聚焦优化"><a href="#Tab-键锚点聚焦优化" class="headerlink" title="Tab 键锚点聚焦优化"></a>Tab 键锚点聚焦优化</h2><p>浏览页面的时候，通过 Tab 键可以聚焦页面上的链接锚点，这时候浏览器会在锚点增加一个系统默认边框样式告诉用户锚点已选中，按 <code>Enter</code> 就可以打开选中的锚点，如 Chrome 浏览器上 google 首页的语音搜索按钮：</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_26.png" alt="img"> </p>
<p>即使用户在浏览页面的时候鼠标突然失灵了也可以通过键盘操作继续完成浏览网页，这样的设计显然是为了增强页面的可用性。</p>
<p>但很多时候，在一些重要位置的内容，如全站的导航，产品经理或视觉设计师会要求将这个系统的样式去掉，于是很多同学可能会选择设置<code>outline:none</code>去掉边框样式，有些甚至会在全局 a 标签上设置，如旧版的京东云首页：</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_27.png" alt="img"></p>
<p><code>outline:none</code>设置之后，页面上的所有链接虽然能通过<code>Tab</code>键聚焦，但链接并没有被选中的样式，没有办法直观辨出选中的链接</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_28.gif" alt="img"></p>
<p>虽然并非所有用户都会用到 Tab 键，但还是会有少数用户会用到，如键盘党，而这种降低可用性的体验存在表明页面并没有健全，因此并不建议去掉<code>outline</code>样式。</p>
<p>如果真的有去掉 <code>outline</code>样式的需求怎么办？其实，页面链接一般都会被设计为多态的，利用链接的多态样式，为链接加上<code>:focus</code>伪类选中样式，Tab 选中链接后就会展示 <code>:focus</code>伪类样式了，如新版首页的导航：</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_29.png" alt="img"></p>
<p>可以为链接加上<code>:focus</code>伪类样式</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.mod_hd_nav_sub_col</span>&#123;</div><div class="line">	...</div><div class="line">	<span class="selector-tag">a</span>&#123;</div><div class="line">		<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">		<span class="attribute">text-decoration</span>: none;</div><div class="line">		<span class="attribute">outline</span>: none;</div><div class="line">		&amp;:hover,&amp;:focus&#123;</div><div class="line">			<span class="attribute">color</span>: <span class="number">#ffe400</span>;</div><div class="line">			<span class="attribute">text-decoration</span>: none;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当选中链接还绑定有事件的时候，也应该为之绑定相应事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">$navBox.on(&#123;</div><div class="line">	<span class="string">'mouseenter'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		...</div><div class="line">	&#125;,</div><div class="line">	</div><div class="line">	<span class="string">'focus'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$(<span class="keyword">this</span>).trigger(<span class="string">'mouseenter'</span>); <span class="comment">// Tab 操作支持</span></div><div class="line">	&#125;,</div><div class="line"></div><div class="line">	<span class="string">'mouseleave'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		...</div><div class="line">	&#125;,</div><div class="line">	</div><div class="line">	<span class="string">'blur'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$(<span class="keyword">this</span>).trigger(<span class="string">'mouseleave'</span>); <span class="comment">// Tab 操作支持</span></div><div class="line">	&#125;</div><div class="line">&#125;, <span class="string">'.mod_hd_nav_item'</span>);</div><div class="line">...</div></pre></td></tr></table></figure>
<p>处理完，虽然 <code>outline</code>样式去掉了，但依然可以用 Tab 键完成链接的选中</p>
<p><img src="//img.aotu.io/mihanX/jcloud-opt/img_30.gif" alt="img"></p>
<h2 id="静态资源更新发布"><a href="#静态资源更新发布" class="headerlink" title="静态资源更新发布"></a>静态资源更新发布</h2><p>旧版首页所有的静态资源的更新发布方式都是采用覆盖式更新：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jcloud_new/jquery-1.7.2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jcloud_new/jquery.SuperSlide.2.1.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jcloud_new/login_w.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://jcms.jd.com/resource/js/cms.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>覆盖式更新发布有机会遇到缓存问题以及在发布的时候导致页面错乱问题，详情可以看一下张云龙前辈在知乎对问题『<a href="https://www.zhihu.com/question/20790576/answer/32602154" target="_blank" rel="external">大公司里怎样开发和部署前端代码？</a>』的回答，解决覆盖式更新产生的问题，现主流方法就是使用 MD5 文件名进行非覆盖式发布，京东云新版首页所有的静态资源的更新发布都采用了这种方式。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//labs.qiang.it/pc/jcloud/gb/js/lib.min_2f4dab0c.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//labs.qiang.it/pc/jcloud/gb/js/gb.min_b599b860.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//labs.qiang.it/pc/jcloud/home/js/index.min_9d957a15.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>OK，优化永远说不完的，以上所说的只是前端优化的冰山一角，业界绝不缺高大上的优秀优化方案，但从业务实际规模出发的话，这些小优化在本次改版中已得到很明显的收益，期待以后有更具规模的项目可以挥霍高大上的优化方案，最后把新旧版的页面都放到预览服务器上了</p>
<ul>
<li><a href="http://labs.qiang.it/pc/jcloud_com/index.html" target="_blank" rel="external">旧版首页</a></li>
<li><a href="http://labs.qiang.it/pc/jcloud/home/index.html" target="_blank" rel="external">新版首页</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;记得前百度工程师张云龙说过，页面前端优化问题绝对不仅仅是为页面提速的问题，更是工程的问题，有兴趣的同学可以阅读《&lt;a href=&quot;https://github.com/fouber/blog/issues/3&quot; target=&quot;_blan
    
    </summary>
    
      <category term="项目总结" scheme="https://aotu.io/cates/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="项目总结" scheme="https://aotu.io/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
      <category term="页面优化" scheme="https://aotu.io/tags/%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Node读写Excel文件探究实践</title>
    <link href="https://aotu.io/notes/2016/04/07/node-excel/"/>
    <id>https://aotu.io/notes/2016/04/07/node-excel/</id>
    <published>2016-04-07T10:32:18.000Z</published>
    <updated>2016-10-20T07:06:32.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文介绍用 Node.js 中的依赖库来处理 Excel 文件，深入分析对比常见npm库处理Excel 文件存在的优缺点，主要阐述用js-xlsx、excel-export 库来处理 Excel 文件。 </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>有哪些外部模块支持读写Excel</li>
<li>引入依赖模块</li>
<li>编写业务逻辑函数</li>
<li>实践应用</li>
</ul>
<h2 id="支持读写Excel的node-js模块"><a href="#支持读写Excel的node-js模块" class="headerlink" title="支持读写Excel的node.js模块"></a>支持读写Excel的node.js模块</h2><p>通过npm搜索，支持读写excel文件的模块有很多，但是都各有忧缺点，有些仅支持xls/xlsx的一种格式，有些仅支持读取数据，有些仅支持导出文件，有些需要依赖python解析。常见的npm依赖模块如下：</p>
<blockquote>
<ul>
<li><a href="https://github.com/SheetJS/js-xlsx" target="_blank" rel="external">js-xlsx</a>: 目前 Github 上 star 数量最多的处理 Excel 的库，支持解析多种格式表格XLSX / XLSM / XLSB / XLS / CSV，解析采用纯js实现，写入需要依赖nodejs或者<a href="https://github.com/eligrey/FileSaver.js/" target="_blank" rel="external">FileSaver</a>.js实现生成写入Excel，可以生成子表Excel，功能强大，但上手难度稍大。不提供基础设置Excel表格api例单元格宽度，文档有些乱，不适合快速上手；</li>
<li><a href="https://github.com/mgcrea/node-xlsx" target="_blank" rel="external">node-xlsx</a>: 基于Node.js解析excel文件数据及生成excel文件，仅支持xlsx格式文件；</li>
<li><a href="https://github.com/leftshifters/excel-parser" target="_blank" rel="external">excel-parser</a>: 基于Node.js解析excel文件数据，支持xls及xlsx格式文件，需要依赖python，太重不太实用；</li>
<li><a href="https://github.com/functionscope/Node-Excel-Export" target="_blank" rel="external">excel-export</a> : 基于Node.js将数据生成导出excel文件，生成文件格式为xlsx，可以设置单元格宽度，API容易上手，无法生成worksheet字表，比较单一，基本功能可以基本满足；</li>
<li><a href="https://segmentfault.com/a/1190000004062768" target="_blank" rel="external">node-xlrd</a>: 基于node.js从excel文件中提取数据，仅支持xls格式文件,不支持xlsx,有点过时，常用的都是XLSX 格式。</li>
</ul>
</blockquote>
<p>通过以上分析对比，本人比较推崇<code>js-xlsx</code>、<code>excel-export</code>来读写Excel文件，可以结合使用<code>js-xlsx</code>解析Excel、<code>excel-export</code>生成，效果更加，接下来分别实践<code>js-xlsx</code>、<code>excel-export</code>。</p>
<h2 id="第一讲：利用-js-xlsx-处理-Excel-文件"><a href="#第一讲：利用-js-xlsx-处理-Excel-文件" class="headerlink" title="第一讲：利用 js-xlsx 处理 Excel 文件"></a>第一讲：利用 js-xlsx 处理 Excel 文件</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>node中使用通过npm：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> xlsx</div></pre></td></tr></table></figure></p>
<p>浏览器使用：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"javascript"</span> <span class="attr">src</span>=<span class="string">"dist/xlsx.core.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>通过bower安装：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bower </span><span class="keyword">install </span><span class="keyword">js-xlsx</span></div></pre></td></tr></table></figure></p>
<p><code>注意</code>，在客户端使用时，建议使用<code>dist/xlsx.full.min.js</code>，包含了js-xlsx所有模块。</p>
<h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><p>在使用这个库之前，先介绍库中的一些概念。</p>
<blockquote>
<ul>
<li>workbook 对象，指的是整份 Excel 文档。我们在使用 js-xlsx 读取 Excel 文档之后就会获得 workbook 对象。</li>
<li>worksheet 对象，指的是 Excel 文档中的表。我们知道一份 Excel 文档中可以包含很多张表，而每张表对应的就是 worksheet 对象。</li>
<li>cell 对象，指的就是 worksheet 中的单元格，一个单元格就是一个 cell 对象。</li>
</ul>
</blockquote>
<p>它们的关系如下：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// workbook</div><div class="line">&#123;</div><div class="line">    SheetNames: [<span class="string">'sheet1'</span>, <span class="string">'sheet2'</span>],</div><div class="line">    Sheets: &#123;</div><div class="line">        // worksheet</div><div class="line">        <span class="string">'sheet1'</span>: &#123;</div><div class="line">            // cell</div><div class="line">            <span class="string">'A1'</span>: &#123; ... &#125;,</div><div class="line">            // cell</div><div class="line">            <span class="string">'A2'</span>: &#123; ... &#125;,</div><div class="line">            ...</div><div class="line">        &#125;,</div><div class="line">        // worksheet</div><div class="line">        <span class="string">'sheet2'</span>: &#123;</div><div class="line">            // cell</div><div class="line">            <span class="string">'A1'</span>: &#123; ... &#125;,</div><div class="line">            // cell</div><div class="line">            <span class="string">'A2'</span>: &#123; ... &#125;,</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p><strong>基本用法</strong></p>
<p>1.用 <code>XLSX.read</code> 读取获取到的 Excel 数据，返回 workbook<br>2.用 <code>XLSX.readFile</code> 打开 Excel 文件，返回 workbook<br>3.用 <code>workbook.SheetNames</code> 获取表名<br>4.用 <code>workbook.Sheets[xxx]</code> 通过表名获取表格<br>5.用 <code>worksheet[address]</code>操作单元格<br>6.用<code>XLSX.utils.sheet_to_json</code>针对单个表获取表格数据转换为json格式<br>7.用<code>XLSX.writeFile(wb, &#39;output.xlsx&#39;)</code>生成新的 Excel 文件</p>
<p><strong>具体用法</strong><br>读取 Excel 文件<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">workbook</span> ＝ <span class="selector-tag">XLSX</span><span class="selector-class">.read</span>(excelData, &#123;<span class="attribute">type</span>: <span class="string">'base64'</span>&#125;);</div><div class="line"><span class="selector-tag">workbook</span> ＝ <span class="selector-tag">XLSX</span><span class="selector-class">.writeFile</span>(<span class="string">'someExcel.xlsx'</span>, opts);</div></pre></td></tr></table></figure></p>
<p>获取 Excel 文件中的表<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 Excel 中所有表名</span></div><div class="line"><span class="keyword">var</span> sheetNames = workbook.SheetNames; <span class="comment">// 返回 ['sheet1', 'sheet2',……]</span></div><div class="line"><span class="comment">// 根据表名获取对应某张表</span></div><div class="line"><span class="keyword">var</span> worksheet = workbook.Sheets[sheetNames[<span class="number">0</span>]];</div></pre></td></tr></table></figure></p>
<p>通过 <code>worksheet[address]</code> 来操作表格，以 ! 开头的 key 是特殊的字段。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 获取 A1 单元格对象</div><div class="line">let a1 = worksheet[<span class="string">'A1'</span>]; <span class="regexp">//</span> 返回 &#123; v: <span class="string">'hello'</span>, t: <span class="string">'s'</span>, ... &#125;</div><div class="line"><span class="regexp">//</span> 获取 A1 中的值</div><div class="line">a1.v <span class="regexp">//</span> 返回 <span class="string">'hello'</span></div><div class="line"></div><div class="line"><span class="regexp">//</span> 获取表的有效范围</div><div class="line">worksheet[<span class="string">'!ref'</span>] <span class="regexp">//</span> 返回 <span class="string">'A1:B20'</span></div><div class="line">worksheet[<span class="string">'!range'</span>] <span class="regexp">//</span> 返回 range 对象，&#123; s: &#123; r: <span class="number">0</span>, c: <span class="number">0</span>&#125;, e: &#123; r: <span class="number">100</span>, c: <span class="number">2</span> &#125; &#125;</div><div class="line"></div><div class="line"><span class="regexp">//</span> 获取合并过的单元格</div><div class="line">worksheet[<span class="string">'!merges'</span>] <span class="regexp">//</span> 返回一个包含 range 对象的列表，[ &#123;s: &#123; r: <span class="number">0</span>, c: <span class="number">0</span> &#125;, c: &#123; r: <span class="number">2</span>, c: <span class="number">1</span> &#125; &#125; ]</div></pre></td></tr></table></figure></p>
<p>获取 Excel 文件中的表转换为json数据<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">XLSX<span class="selector-class">.utils</span><span class="selector-class">.sheet_to_json</span>(worksheet)  <span class="comment">//针对单个表，返回序列化json数据</span></div></pre></td></tr></table></figure></p>
<p>生成新的 Excel 文件<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//服务端通过XLSX.writeFile</span></div><div class="line">XLSX = <span class="built_in">require</span>(<span class="string">"xlsx"</span>);</div><div class="line">XLSX.writeFile(wb, <span class="string">'output.xlsx'</span>)   </div><div class="line"></div><div class="line"><span class="comment">//客服端，只能通过XLSX.write(wb, write_opts) 写入 表格数据，借助FileSaver生成，且只支持在高版本浏览器。</span></div><div class="line"><span class="keyword">var</span> wopts = &#123; bookType:<span class="string">'xlsx'</span>, bookSST:<span class="literal">false</span>, <span class="keyword">type</span>:<span class="string">'binary'</span> &#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> wbout = XLSX.write(wb,wopts);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">s2ab</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(s.length);</div><div class="line">  <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i!=s.length; ++i) view[i] = s.charCodeAt(i) &amp; <span class="number">0xFF</span>;</div><div class="line">  <span class="keyword">return</span> buf;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* the saveAs call downloads a file on the local machine */</span></div><div class="line">saveAs(<span class="keyword">new</span> Blob([s2ab(wbout)],&#123;<span class="keyword">type</span>:<span class="string">""</span>&#125;), <span class="string">"test.xlsx"</span>)</div></pre></td></tr></table></figure></p>
<h2 id="js-xlsx实战"><a href="#js-xlsx实战" class="headerlink" title="js-xlsx实战"></a>js-xlsx实战</h2><p><strong>解析 Excel 生成 JSON</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">to_json</span>(<span class="params">workbook</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> result = &#123;&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 获取 Excel 中所有表名</span></div><div class="line">	<span class="keyword">var</span> sheetNames = workbook.SheetNames; <span class="comment">// 返回 ['sheet1', 'sheet2']</span></div><div class="line"></div><div class="line">	workbook.SheetNames.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sheetName</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> worksheet = workbook.Sheets[sheetName];</div><div class="line">		result[sheetName] = XLSX.utils.sheet_to_json(worksheet);</div><div class="line">	&#125;);	</div><div class="line"></div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"打印表信息"</span>,<span class="built_in">JSON</span>.stringify(result, <span class="number">2</span>, <span class="number">2</span>));  <span class="comment">//显示格式&#123;"表1":[],"表2":[]&#125;</span></div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>导出表格</strong><br>1.构建特定的数据结构，通过new Blob如下。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// workbook</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">SheetNames</span>: [<span class="string">'mySheet'</span>],</div><div class="line">    <span class="attribute">Sheets</span>: &#123;</div><div class="line">        <span class="string">'mySheet'</span>: &#123;</div><div class="line">            <span class="string">'!ref'</span>: <span class="string">'A1:E4'</span>, <span class="comment">// 必须要有这个范围才能输出，否则导出的 excel 会是一个空表</span></div><div class="line">            <span class="attribute">A1</span>: &#123; <span class="attribute">v</span>: <span class="string">'id'</span> &#125;,</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.调用 XLSX.write， 借助FileSaver中new Blob生成即可。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line">var _headers = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'country'</span>, <span class="string">'remark'</span>]</div><div class="line">var _data = [ &#123; id: <span class="string">'1'</span>,</div><div class="line">                name: <span class="string">'test1'</span>,</div><div class="line">                age: <span class="string">'30'</span>,</div><div class="line">                country: <span class="string">'China'</span>,</div><div class="line">                remark: <span class="string">'hello'</span> &#125;,</div><div class="line">              &#123; id: <span class="string">'2'</span>,</div><div class="line">                name: <span class="string">'test2'</span>,</div><div class="line">                age: <span class="string">'20'</span>,</div><div class="line">                country: <span class="string">'America'</span>,</div><div class="line">                remark: <span class="string">'world'</span> &#125;,</div><div class="line">              &#123; id: <span class="string">'3'</span>,</div><div class="line">                name: <span class="string">'test3'</span>,</div><div class="line">                age: <span class="string">'18'</span>,</div><div class="line">                country: <span class="string">'Unkonw'</span>,</div><div class="line">                remark: <span class="string">'???'</span> &#125; ];</div><div class="line"></div><div class="line">var headers = _headers</div><div class="line">                // 为 _headers 添加对应的单元格位置</div><div class="line">                // [ &#123; v: <span class="string">'id'</span>, position: <span class="string">'A1'</span> &#125;,</div><div class="line">                //   &#123; v: <span class="string">'name'</span>, position: <span class="string">'B1'</span> &#125;,</div><div class="line">                //   &#123; v: <span class="string">'age'</span>, position: <span class="string">'C1'</span> &#125;,</div><div class="line">                //   &#123; v: <span class="string">'country'</span>, position: <span class="string">'D1'</span> &#125;,</div><div class="line">                //   &#123; v: <span class="string">'remark'</span>, position: <span class="string">'E1'</span> &#125; ]</div><div class="line">                .<span class="keyword">map</span>((v, i) =&gt; Object.assign(&#123;&#125;, &#123;v: v, position: String.fromCharCode(<span class="number">65</span>+i) + <span class="number">1</span> &#125;))</div><div class="line">                // 转换成 worksheet 需要的结构</div><div class="line">                // &#123; A1: &#123; v: <span class="string">'id'</span> &#125;,</div><div class="line">                //   B1: &#123; v: <span class="string">'name'</span> &#125;,</div><div class="line">                //   C1: &#123; v: <span class="string">'age'</span> &#125;,</div><div class="line">                //   D1: &#123; v: <span class="string">'country'</span> &#125;,</div><div class="line">                //   E1: &#123; v: <span class="string">'remark'</span> &#125; &#125;</div><div class="line">                .reduce((prev, <span class="keyword">next</span>) =&gt; Object.assign(&#123;&#125;, prev, &#123;[next.position]: &#123;v: next.v&#125;&#125;), &#123;&#125;);</div><div class="line"></div><div class="line">var data = _data</div><div class="line">              // 匹配 headers 的位置，生成对应的单元格数据</div><div class="line">              // [ [ &#123; v: <span class="string">'1'</span>, position: <span class="string">'A2'</span> &#125;,</div><div class="line">              //     &#123; v: <span class="string">'test1'</span>, position: <span class="string">'B2'</span> &#125;,</div><div class="line">              //     &#123; v: <span class="string">'30'</span>, position: <span class="string">'C2'</span> &#125;,</div><div class="line">              //     &#123; v: <span class="string">'China'</span>, position: <span class="string">'D2'</span> &#125;,</div><div class="line">              //     &#123; v: <span class="string">'hello'</span>, position: <span class="string">'E2'</span> &#125; ],</div><div class="line">              //   [ &#123; v: <span class="string">'2'</span>, position: <span class="string">'A3'</span> &#125;,</div><div class="line">              //     &#123; v: <span class="string">'test2'</span>, position: <span class="string">'B3'</span> &#125;,</div><div class="line">              //     &#123; v: <span class="string">'20'</span>, position: <span class="string">'C3'</span> &#125;,</div><div class="line">              //     &#123; v: <span class="string">'America'</span>, position: <span class="string">'D3'</span> &#125;,</div><div class="line">              //     &#123; v: <span class="string">'world'</span>, position: <span class="string">'E3'</span> &#125; ],</div><div class="line">              //   [ &#123; v: <span class="string">'3'</span>, position: <span class="string">'A4'</span> &#125;,</div><div class="line">              //     &#123; v: <span class="string">'test3'</span>, position: <span class="string">'B4'</span> &#125;,</div><div class="line">              //     &#123; v: <span class="string">'18'</span>, position: <span class="string">'C4'</span> &#125;,</div><div class="line">              //     &#123; v: <span class="string">'Unkonw'</span>, position: <span class="string">'D4'</span> &#125;,</div><div class="line">              //     &#123; v: <span class="string">'???'</span>, position: <span class="string">'E4'</span> &#125; ] ]</div><div class="line">              .<span class="keyword">map</span>((v, i) =&gt; _headers.<span class="keyword">map</span>((k, j) =&gt; Object.assign(&#123;&#125;, &#123; v: v[k], position: String.fromCharCode(<span class="number">65</span>+j) + (i+<span class="number">2</span>) &#125;)))</div><div class="line">              // 对刚才的结果进行降维处理（二维数组变成一维数组）</div><div class="line">              // [ &#123; v: <span class="string">'1'</span>, position: <span class="string">'A2'</span> &#125;,</div><div class="line">              //   &#123; v: <span class="string">'test1'</span>, position: <span class="string">'B2'</span> &#125;,</div><div class="line">              //   &#123; v: <span class="string">'30'</span>, position: <span class="string">'C2'</span> &#125;,</div><div class="line">              //   &#123; v: <span class="string">'China'</span>, position: <span class="string">'D2'</span> &#125;,</div><div class="line">              //   &#123; v: <span class="string">'hello'</span>, position: <span class="string">'E2'</span> &#125;,</div><div class="line">              //   &#123; v: <span class="string">'2'</span>, position: <span class="string">'A3'</span> &#125;,</div><div class="line">              //   &#123; v: <span class="string">'test2'</span>, position: <span class="string">'B3'</span> &#125;,</div><div class="line">              //   &#123; v: <span class="string">'20'</span>, position: <span class="string">'C3'</span> &#125;,</div><div class="line">              //   &#123; v: <span class="string">'America'</span>, position: <span class="string">'D3'</span> &#125;,</div><div class="line">              //   &#123; v: <span class="string">'world'</span>, position: <span class="string">'E3'</span> &#125;,</div><div class="line">              //   &#123; v: <span class="string">'3'</span>, position: <span class="string">'A4'</span> &#125;,</div><div class="line">              //   &#123; v: <span class="string">'test3'</span>, position: <span class="string">'B4'</span> &#125;,</div><div class="line">              //   &#123; v: <span class="string">'18'</span>, position: <span class="string">'C4'</span> &#125;,</div><div class="line">              //   &#123; v: <span class="string">'Unkonw'</span>, position: <span class="string">'D4'</span> &#125;,</div><div class="line">              //   &#123; v: <span class="string">'???'</span>, position: <span class="string">'E4'</span> &#125; ]</div><div class="line">              .reduce((prev, <span class="keyword">next</span>) =&gt; prev.concat(<span class="keyword">next</span>))</div><div class="line">              // 转换成 worksheet 需要的结构</div><div class="line">              //   &#123; A2: &#123; v: <span class="string">'1'</span> &#125;,</div><div class="line">              //     B2: &#123; v: <span class="string">'test1'</span> &#125;,</div><div class="line">              //     C2: &#123; v: <span class="string">'30'</span> &#125;,</div><div class="line">              //     D2: &#123; v: <span class="string">'China'</span> &#125;,</div><div class="line">              //     E2: &#123; v: <span class="string">'hello'</span> &#125;,</div><div class="line">              //     A3: &#123; v: <span class="string">'2'</span> &#125;,</div><div class="line">              //     B3: &#123; v: <span class="string">'test2'</span> &#125;,</div><div class="line">              //     C3: &#123; v: <span class="string">'20'</span> &#125;,</div><div class="line">              //     D3: &#123; v: <span class="string">'America'</span> &#125;,</div><div class="line">              //     E3: &#123; v: <span class="string">'world'</span> &#125;,</div><div class="line">              //     A4: &#123; v: <span class="string">'3'</span> &#125;,</div><div class="line">              //     B4: &#123; v: <span class="string">'test3'</span> &#125;,</div><div class="line">              //     C4: &#123; v: <span class="string">'18'</span> &#125;,</div><div class="line">              //     D4: &#123; v: <span class="string">'Unkonw'</span> &#125;,</div><div class="line">              //     E4: &#123; v: <span class="string">'???'</span> &#125; &#125;</div><div class="line">              .reduce((prev, <span class="keyword">next</span>) =&gt; Object.assign(&#123;&#125;, prev, &#123;[next.position]: &#123;v: next.v&#125;&#125;), &#123;&#125;);</div><div class="line"></div><div class="line">// 合并 headers 和 data</div><div class="line">var output = Object.assign(&#123;&#125;, headers, data);</div><div class="line">// 获取所有单元格的位置</div><div class="line">var outputPos = Object.keys(output);</div><div class="line">// 计算出范围</div><div class="line">var ref = outputPos[<span class="number">0</span>] + <span class="string">':'</span> + outputPos[outputPos.length - <span class="number">1</span>];</div><div class="line"></div><div class="line">// 构建 workbook 对象</div><div class="line">var wb = &#123;</div><div class="line">    SheetNames: [<span class="string">'mySheet'</span>],</div><div class="line">    Sheets: &#123;</div><div class="line">        <span class="string">'mySheet'</span>: Object.assign(&#123;&#125;, output, &#123; <span class="string">'!ref'</span>: ref &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 导出 Excel</div><div class="line">//XLSX.writeFile(wb, <span class="string">'output.xlsx'</span>);</div><div class="line"></div><div class="line">var wopts = &#123; bookType:<span class="string">'xlsx'</span>, bookSST:false, type:<span class="string">'binary'</span> &#125;;</div><div class="line"></div><div class="line">var wbout = XLSX.write(wb,wopts);</div><div class="line"></div><div class="line"><span class="keyword">function</span> s2ab(s) &#123;</div><div class="line">  var buf = new ArrayBuffer(s.length);</div><div class="line">  var view = new Uint8Array(buf);</div><div class="line">  for (var i=<span class="number">0</span>; i!=s.length; ++i) view[i] = s.charCodeAt(i) &amp; <span class="number">0xFF</span>;</div><div class="line">  return buf;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* the saveAs call downloads a file on the local machine */</div><div class="line">saveAs(new Blob([s2ab(wbout)],&#123;type:<span class="string">""</span>&#125;), <span class="string">"test.xlsx"</span>)</div></pre></td></tr></table></figure></p>
<p>实践Demo：<a href="http://doc.pfan123.com/excel.html" target="_blank" rel="external">RD快速生成excel表</a></p>
<h2 id="第二讲：利用-excel-export-生成-Excel-文件"><a href="#第二讲：利用-excel-export-生成-Excel-文件" class="headerlink" title="第二讲：利用 excel-export 生成 Excel 文件"></a>第二讲：利用 excel-export 生成 Excel 文件</h2><p>excel-export模块，上手起来就比较容易了，其中原理是通过修改，修改header 信息、拼接字符串、修改字符集、输出字符串的形式实现的，在部分firefox低版本下载中文名会出现乱码情况。我们只需要按照API设置好数据参数，通过nodeExcel.execute调用执行，系统调用模版”styles.xml”就可以生成Excel文件，比较好的就是，它可以设置单元格的宽度，类型。<br>我们先看看，官方提供的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> nodeExcel = <span class="built_in">require</span>(<span class="string">'excel-export'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/Excel'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> conf =&#123;&#125;;</div><div class="line">    conf.stylesXmlFile = <span class="string">"styles.xml"</span>;</div><div class="line">    conf.name = <span class="string">"mysheet"</span>;</div><div class="line">    conf.cols = [&#123;</div><div class="line">        <span class="attr">caption</span>:<span class="string">'string'</span>,</div><div class="line">        <span class="attr">type</span>:<span class="string">'string'</span>,</div><div class="line">        <span class="attr">beforeCellWrite</span>:<span class="function"><span class="keyword">function</span>(<span class="params">row, cellData</span>)</span>&#123;</div><div class="line">             <span class="keyword">return</span> cellData.toUpperCase();</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">width</span>:<span class="number">28.7109375</span></div><div class="line">    &#125;,&#123;</div><div class="line">        <span class="attr">caption</span>:<span class="string">'date'</span>,</div><div class="line">        <span class="attr">type</span>:<span class="string">'date'</span>,</div><div class="line">        <span class="attr">beforeCellWrite</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> originDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">1899</span>,<span class="number">11</span>,<span class="number">30</span>));</div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">row, cellData, eOpt</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span> (eOpt.rowNum%<span class="number">2</span>)&#123;</div><div class="line">                    eOpt.styleIndex = <span class="number">1</span>;</div><div class="line">                &#125;  </div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    eOpt.styleIndex = <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (cellData === <span class="literal">null</span>)&#123;</div><div class="line">                  eOpt.cellType = <span class="string">'string'</span>;</div><div class="line">                  <span class="keyword">return</span> <span class="string">'N/A'</span>;</div><div class="line">                &#125; <span class="keyword">else</span></div><div class="line">                  <span class="keyword">return</span> (cellData - originDate) / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</div><div class="line">            &#125; </div><div class="line">        &#125;()</div><div class="line">    &#125;,&#123;</div><div class="line">        <span class="attr">caption</span>:<span class="string">'bool'</span>,</div><div class="line">        <span class="attr">type</span>:<span class="string">'bool'</span></div><div class="line">    &#125;,&#123;</div><div class="line">        <span class="attr">caption</span>:<span class="string">'number'</span>,</div><div class="line">         <span class="attr">type</span>:<span class="string">'number'</span>              </div><div class="line">    &#125;];</div><div class="line">    conf.rows = [</div><div class="line">        [<span class="string">'pi'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2013</span>, <span class="number">4</span>, <span class="number">1</span>)), <span class="literal">true</span>, <span class="number">3.14</span>],</div><div class="line">        [<span class="string">"e"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2012</span>, <span class="number">4</span>, <span class="number">1</span>), <span class="literal">false</span>, <span class="number">2.7182</span>],</div><div class="line">        [<span class="string">"M&amp;M&lt;&gt;'"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2013</span>, <span class="number">6</span>, <span class="number">9</span>)), <span class="literal">false</span>, <span class="number">1.61803</span>],</div><div class="line">        [<span class="string">"null date"</span>, <span class="literal">null</span>, <span class="literal">true</span>, <span class="number">1.414</span>]  </div><div class="line">    ];</div><div class="line">    <span class="keyword">var</span> result = nodeExcel.execute(conf);</div><div class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/vnd.openxmlformats'</span>);</div><div class="line">    res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; filename="</span> + <span class="string">"Report.xlsx"</span>);</div><div class="line">    res.end(result, <span class="string">'binary'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Listening on port 3000'</span>);</div></pre></td></tr></table></figure></p>
<p><strong> 分析生成excel流程：</strong><br>1.配置excel文件名conf.name<br>2.设置表caption，每列单元格数据类型，宽度<br>3.填充表中每行数据conf.rows，nodeExcel.execute生成数据结构，设置头部，拼接生成表</p>
<p><strong>写在最后，以上仅为个人观点，如有纰漏之处，欢迎各位大侠拍砖！</strong> </p>
<p>参考资料：</p>
<ul>
<li><a href="https://github.com/functionscope/Node-Excel-Export" target="_blank" rel="external">Node-Excel-Export excel导出</a></li>
<li><a href="https://segmentfault.com/a/1190000004062768" target="_blank" rel="external">node.js读写excel文件</a></li>
<li><a href="http://www.uedsc.com/js-xlsx.html" target="_blank" rel="external">JS-XLSX读取和解析Excel表格文件(xls/xlsx)的JavaScript插件</a> </li>
<li><a href="http://scarletsky.github.io/2016/01/30/nodejs-process-excel/" target="_blank" rel="external">在 Node.js 中利用 js-xlsx 处理 Excel 文件</a> </li>
<li><a href="https://segmentfault.com/a/1190000004062768" target="_blank" rel="external">node-xlrd</a></li>
<li><a href="https://github.com/leftshifters/excel-parser" target="_blank" rel="external">excel-parser</a></li>
<li><a href="https://github.com/eligrey/FileSaver.js/" target="_blank" rel="external">FileSaver浏览器保存excel</a> </li>
<li><a href="http://stackoverflow.com/questions/30859901/parse-xlsx-with-node-and-create-json" target="_blank" rel="external">stackoverflow xlsx相关问题</a> </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;本文介绍用 Node.js 中的依赖库来处理 Excel 文件，深入分析对比常见npm库处理Excel 文件存在的优缺点，主要阐述用js-x
    
    </summary>
    
      <category term="NodeJS" scheme="https://aotu.io/cates/NodeJS/"/>
    
    
      <category term="node" scheme="https://aotu.io/tags/node/"/>
    
      <category term="excel" scheme="https://aotu.io/tags/excel/"/>
    
      <category term="JS-XLSX" scheme="https://aotu.io/tags/JS-XLSX/"/>
    
      <category term="Node-Excel-Export" scheme="https://aotu.io/tags/Node-Excel-Export/"/>
    
  </entry>
  
  <entry>
    <title>提升代码的可读性系列(一)--基础篇</title>
    <link href="https://aotu.io/notes/2016/03/31/readable/"/>
    <id>https://aotu.io/notes/2016/03/31/readable/</id>
    <published>2016-03-31T05:30:12.000Z</published>
    <updated>2016-10-20T07:06:32.418Z</updated>
    
    <content type="html"><![CDATA[<p>编程是一门艺术活，好的代码应该就像住的房子一样，有整体的框架，有门，有窗户，相互独立又完美组合。你觉得门不够结实，就拆下来换个实心的；你觉得窗户不够明亮就换个全玻璃的，总之对房子的其他部位没有任何影响。所以说每一个程序员都应该有一颗设计师的心。本文主要从<strong>编码</strong>、<strong>变量</strong>、<strong>处理错误</strong>、<strong>对象</strong>等基础方面进行简单的探讨，希望能对大家的工作有所帮助~~</p>
<a id="more"></a>
<h2 id="1-编码风格"><a href="#1-编码风格" class="headerlink" title="1 编码风格"></a>1 编码风格</h2><p>老生常谈，我们先从最基础的编码说起吧！好的编码规范不仅仅能够提升代码的可读性与可维护性，提高团队的工作效率，也能够避开一些低级的错误，减少bug的隐患，提升程序员的自我修养。编码虽小，但却是万丈高楼的基础，对于编写清晰连贯的代码来说，每一个字符都是非常重要的。以下部分编码规范参考自<a href="http://aotu.io">凹凸实验室</a>。</p>
<h4 id="1-1-缩进"><a href="#1-1-缩进" class="headerlink" title="1.1 缩进"></a>1.1 缩进</h4><p>通常使用四个空格进行代码缩进，有些也用tab来缩进，这主要根据团队的风格跟个人喜好</p>
<h4 id="1-2-空格"><a href="#1-2-空格" class="headerlink" title="1.2 空格"></a>1.2 空格</h4><ul>
<li>左括号与类名之间一个空格</li>
<li>冒号与属性值之间一个空格</li>
<li>操作符前后</li>
<li>匿名函数表达式之后等</li>
</ul>
<h4 id="1-3-空行"><a href="#1-3-空行" class="headerlink" title="1.3 空行"></a>1.3 空行</h4><p>这是一个容易被大家忽略的点，但它所带来的效果是毋庸置疑的！通常一段代码的语义和另一段代码不相关，就应该用空行隔开，避免一大段的代码揉在一起，比如</p>
<ul>
<li>在方法之间；</li>
<li>方法中的局部变量和第一条语句之间；</li>
<li>注释之前</li>
<li>方法内的逻辑片段之间</li>
</ul>
<h4 id="1-4-命名约定"><a href="#1-4-命名约定" class="headerlink" title="1.4 命名约定"></a>1.4 命名约定</h4><p>有一位大师曾说过，计算机科学只存在两个难题：<strong>缓存</strong>和<strong>命名</strong>。由此可见命名不仅是一门科学，也是一门技术。<br>通常情况下，变量与函数一般使用驼峰大小写命名法，其中为了区分变量与函数，变量命名前缀应当是名词，函数前缀应当是动词，也就是说我们应当让命名<strong>承载一定的含义</strong>，因此要避免使用没有意义的命名。</p>
<h4 id="1-4-注释"><a href="#1-4-注释" class="headerlink" title="1.4 注释"></a>1.4 注释</h4><p>通常我们在编写完一段代码的短时间内，会清楚这段代码的工作原理。但是当过一段时间再次回到代码中，可能会花很长的时间才能读懂。这种情况下，编写注释就变得尤为重要了。</p>
<h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2 变量"></a>2 变量</h2><p>首先说一说全局变量存在哪些的问题吧！<strong>命名冲突</strong>、<strong>测试难度大</strong>、<strong>深耦合</strong>等等。在创建变量的时候，我们应该注意以下几个方面</p>
<h4 id="2-1-避免隐性的创建全局变量"><a href="#2-1-避免隐性的创建全局变量" class="headerlink" title="2.1 避免隐性的创建全局变量"></a>2.1 避免隐性的创建全局变量</h4><p>什么是隐性的全局变量呢？官方的回答是：<strong>任何变量，如果未经声明，就为全局对象所有</strong>。啥意思呢？其实就是没有加<strong>var</strong>声明的，请看下面的例子</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj</span><span class="params">()</span> </span>&#123;</div><div class="line">    name = <span class="string">"aotu"</span>;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外一种容易创建隐形全局变量的情况就是var声明的链式赋值，如下代码所示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>（） </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = b = <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上这段代码的执行结果是：a是局部变量，b是全局变量，主要原因是<strong>从右至左</strong>的操作符优先级，它实际执行的结果等同于<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var a</span> = ( b = 0 );</div></pre></td></tr></table></figure></p>
<p>综上所述，隐式全局变量并不是我们平时用var声明的变量，而是全局对象的属性，既然是属性，那么它可以通过delete操作符删除，但变量不可以，且在<strong>ES5 strict</strong>以上会抛出错误。</p>
<h4 id="2-2-在函数顶部声明变量"><a href="#2-2-在函数顶部声明变量" class="headerlink" title="2.2 在函数顶部声明变量"></a>2.2 在函数顶部声明变量</h4><p>在javascript中，声明变量有一个“提升”的概念，即无论在函数哪里声明，效果都等同于在函数顶部进行声明。所以我们统一把变量在函数顶部声明，既有利于可读性与可维护行，也不易出错。</p>
<h4 id="2-3-使用单一var模式"><a href="#2-3-使用单一var模式" class="headerlink" title="2.3 使用单一var模式"></a>2.3 使用单一var模式</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = <span class="number">1</span>,</div><div class="line">    b = <span class="number">1</span>,</div><div class="line">    c = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>这样声明的变量不仅可读性好，而且可以防止变量在定义前就被使用的逻辑错误，且编码更少。</p>
<h4 id="2-4-单全局变量方式"><a href="#2-4-单全局变量方式" class="headerlink" title="2.4 单全局变量方式"></a>2.4 单全局变量方式</h4><p>虽然全局变量的容易污染命名空间，但有些功能的需要，难以避免使用，关键是我们应该做到避免全局变量超出我们的掌控，最佳的方法是依赖尽可能少的全局变量。我们可以使用单全局变量的方式来开启我们的项目，这种方式在许多的javascript类库中都有这样使用。如jQuery,它定义了两个全局变量$和jQuery。</p>
<h2 id="3-UI松耦合"><a href="#3-UI松耦合" class="headerlink" title="3 UI松耦合"></a>3 UI松耦合</h2><p>什么是松耦合？当修改一个组件的逻辑，而对另一个组件没有影响，就说这叫松耦合。通常一个大型的web应用，都是由多人共同开发维护，这时候松耦合显得至关重要，假如你修改了某一处的代码而影响了团队其他人的功能，这是非常不友好的。通常我们主要注意以下几点</p>
<ul>
<li>将javascript从css中抽离，如避免使用css表达式</li>
<li>将csst从javascrip中抽离,如避免使用javascript直接修改css，最佳的方法是操作css的className;</li>
<li>将javascript从HTML中抽离，如避免将函数直接嵌入到html执行，我们应该尽量做到将所有的js代码都放入外置文件中，确保<br>html中不会有内联的js代码。</li>
<li>将html从javascript中抽离,如避免在js中拼接html结构，我们可以用模板引擎，也可以使用Vue、React等。</li>
</ul>
<h2 id="4-错误处理"><a href="#4-错误处理" class="headerlink" title="4 错误处理"></a>4 错误处理</h2><h4 id="4-1-为什么要抛出错误？"><a href="#4-1-为什么要抛出错误？" class="headerlink" title="4.1 为什么要抛出错误？"></a>4.1 为什么要抛出错误？</h4><p>在javascript开发中，总是会悄无声息的出现一些超出我们预期的，携带的信息稀少的，隐晦含糊的bug，让我们措手不及，大大增加了我们调试错误、定位错误的难度，影响开发效率。假设错误中包含这样的信息：“由于某某情况，导致某某函数执行错误”，那么是不是马上就可以开始调试而不用花大量的时候去定位错误？</p>
<h4 id="4-2-何时抛出错误"><a href="#4-2-何时抛出错误" class="headerlink" title="4.2 何时抛出错误?"></a>4.2 何时抛出错误?</h4><p>主要是辨识代码中哪些部分在特定的情况下最后可能导致错误,这里的错误通常都是我们在思考的过程中的一些可预期的错误。</p>
<h4 id="4-3-怎样抛出错误？"><a href="#4-3-怎样抛出错误？" class="headerlink" title="4.3 怎样抛出错误？"></a>4.3 怎样抛出错误？</h4><h5 id="4-3-1-使用try-catch"><a href="#4-3-1-使用try-catch" class="headerlink" title="4.3.1 使用try-catch"></a>4.3.1 使用try-catch</h5><p>将可能引发错误的代码放在try块中，处理错误的代码放在catch中，如<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    someMethod();</div><div class="line">&#125; <span class="keyword">catch</span> (ex) &#123;</div><div class="line">    catchError(ex);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也可以增加一个finally块，这里需注意的是finally块中的代码块不管是否有错误发生，最后都会被执行。</p>
<h5 id="4-3-2-throw"><a href="#4-3-2-throw" class="headerlink" title="4.3.2 throw"></a>4.3.2 throw</h5><p>当我们能清晰的捕捉到错误的时候，最好的做法就是抛出这个错误，避免在不经意的时候又遇到它，让大家尴尬。这里需注意的是当遇到throw操作符时，代码会立即停止执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"method(): descdescdesc"</span>);</div></pre></td></tr></table></figure></p>
<p>也可以自定义一个错误类型,总之就是尽可能用最短的字符描述清楚<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">throw</span> &#123; </div><div class="line">    <span class="attribute">name</span>: <span class="string">"myErrorType"</span>,</div><div class="line">    message: <span class="string">"arguments must be a DOM element"</span>,</div><div class="line">    errorMethod: errorMethod</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="5-创建对象"><a href="#5-创建对象" class="headerlink" title="5 创建对象"></a>5 创建对象</h2><h4 id="5-1-对象字面量"><a href="#5-1-对象字面量" class="headerlink" title="5.1 对象字面量"></a>5.1 对象字面量</h4><p>所谓的对象字面量其实就是我们通常所说的键值对哈希表，这种方式不仅富有表现力，可读性好，且字符更短，没有作用域解析。它的语法规则如下</p>
<ul>
<li>对象包装在大括号中</li>
<li>逗号分隔属性和方法</li>
<li>用冒号分隔属性名称和属性的值<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    name: <span class="string">"aotu"</span>,</div><div class="line">    job: <span class="string">"farmer"</span>,</div><div class="line">    getName: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用方式</span></div><div class="line">obj.getName();</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="实现私有属性"><a href="#实现私有属性" class="headerlink" title="实现私有属性"></a>实现私有属性</h5><p>以上例子的name、job属性都是可直接访问的。有些时候我们可能想实现一些私有的属性，然后提供一个公有的接口来对外访问。虽然javascript并没有特殊的语法来表示私有、公共属性和方法，但是可以通过<strong>匿名闭包</strong>来实现，内部的任意变量都不会暴露，来看以下代码<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj;</div><div class="line">   </div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//这样就能实现私有成员</span></div><div class="line">    <span class="keyword">var</span> name = <span class="string">"aotu"</span>,</div><div class="line">        job = <span class="string">"farmer"</span>;</div><div class="line">       </div><div class="line">    obj = &#123;</div><div class="line">        getName: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;())</div></pre></td></tr></table></figure></p>
<p>更优雅的写法<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">"aotu"</span>,</div><div class="line">        job = <span class="string">"farmer"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        getName: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;());</div></pre></td></tr></table></figure></p>
<p>这种写法也是<strong>模块模式</strong>的基础框架，后续会有详细介绍。</p>
<p>熟悉了这种模式之后它还有很多种玩法，比如可以像jQuery这样链式调用：“$(‘#id’).siblings(‘ul’).find(“li”).addClass();<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">num</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">add</span>: <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.num += arg;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">red</span>: <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.num -= arg;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">setTotal</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//调用方式</span></div><div class="line">obj.add(<span class="number">5</span>).red(<span class="number">2</span>).setTotal(); <span class="comment">//3</span></div></pre></td></tr></table></figure></p>
<h4 id="5-2-构造函数"><a href="#5-2-构造函数" class="headerlink" title="5.2 构造函数"></a>5.2 构造函数</h4><p>我们先来看看构造函数的基础框架<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//公有属性</span></div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"aotu"</span>;</div><div class="line">    <span class="keyword">this</span>.job = <span class="string">"farmer"</span>;</div><div class="line">       </div><div class="line">    <span class="comment">//公有方法</span></div><div class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用方式</span></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Obj();</div><div class="line">obj.getName();</div></pre></td></tr></table></figure></p>
<p>在使用new方式实例化构造函数通常会经历以下几个步骤</p>
<ul>
<li>创建一个对象并且this变量引用了该对象，且继承了该对象的原型     </li>
<li>属性和方法被加入到this引用的对象中</li>
<li>隐式的返回新对象</li>
</ul>
<h5 id="忘记使用NEW的情况"><a href="#忘记使用NEW的情况" class="headerlink" title="忘记使用NEW的情况"></a>忘记使用NEW的情况</h5><p>当然我们有时候会忘记使用new操作符的实例化的情况，然而这并不会导致语法错误，但构造函数的this指向了全局对象，可能会发生逻辑错误或者意外，来看下面执行的结果<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var obj = Obj();</div><div class="line">obj.getName(); //Cannot <span class="keyword">read</span> <span class="keyword">property</span><span class="title"> </span>'get<span class="literal">Inf</span>o' of undefined</div></pre></td></tr></table></figure></p>
<p>为了避免这种意外发生，我们也可以在构造函数中检查this是否为构造函数的一个实例，强制使用new操作符，继续看下面的例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Obj))&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Obj();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"aotu"</span>;</div><div class="line">    <span class="keyword">this</span>.age = <span class="number">25</span>;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再看执行的结果<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var obj = Obj()<span class="comment">;</span></div><div class="line">obj.getName()<span class="comment">; //"aotu"</span></div></pre></td></tr></table></figure></p>
<h5 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h5><p>在javascript中，并没有特殊的语法来表示静态成员，但我们可以为构造函数添加属性这种方式来实现这种语法，请看下面的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//添加静态方法</span></div><div class="line">Obj.getAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">25</span>); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//注意这里的调用方式</span></div><div class="line">Obj.getAge(); <span class="comment">//25</span></div><div class="line"></div><div class="line"><span class="comment">//如果使用实例对象调用</span></div><div class="line">obj.getAge(); <span class="comment">//Object #&lt;Obj&gt; has no method 'getAge'</span></div></pre></td></tr></table></figure></p>
<p>这里大家需要注意调用静态方法的方式，若以实例对象调用一个静态方法是无法正常运行的，反之同理。</p>
<h5 id="私有属性与方法"><a href="#私有属性与方法" class="headerlink" title="私有属性与方法"></a>私有属性与方法</h5><p>在以上例子中构造函数的属性与方法都属于公有方法，我们也可以给构造函数添加私有方法与私有属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"auto"</span>;</div><div class="line">    <span class="keyword">this</span>.age = <span class="number">25</span>;</div><div class="line">     </div><div class="line">    <span class="comment">//私有属性</span></div><div class="line">    <span class="keyword">var</span> address = <span class="string">"sz"</span>,</div><div class="line">        that = <span class="keyword">this</span>;</div><div class="line">      </div><div class="line">    <span class="comment">//私有方法</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAddress</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(that.address);</div><div class="line">    &#125;</div><div class="line">       </div><div class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="构造函数存在的问题"><a href="#构造函数存在的问题" class="headerlink" title="构造函数存在的问题"></a>构造函数存在的问题</h5><p>构造函数的主要问题就是当多次实例化这个构造函数的时候，每个方法都会重新创建一遍，这样就等于在内存中的拷贝。解决问题的第一种思路就是将函数中的方法通过函数定义转移到函数外面，并将指针传递给构造函数，来看下面的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"aotu"</span>;</div><div class="line">    <span class="keyword">this</span>.age = <span class="number">25</span>;</div><div class="line"></div><div class="line">    <span class="comment">//将指针赋给getName</span></div><div class="line">    <span class="keyword">this</span>.getName = getName;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;   </div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Obj();</div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Obj()</div></pre></td></tr></table></figure></p>
<p>虽然也解决了以上的问题，但并没有达到封装的效果。接下来我们引入原型<strong>prototype</strong>的概念。</p>
<h4 id="5-3-原型模式"><a href="#5-3-原型模式" class="headerlink" title="5.3 原型模式"></a>5.3 原型模式</h4><p>每一个构造函数都有一个原型prototype，原型对象包含一个指向构造函数的指针，这个指针指向一个可以由特定类型的所有实例共享的属性和方法，所以使用原型对象可以让所有对象实例共享它的属性和方法，来看下面的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">Obj.prototype.name = <span class="string">"aotu"</span>;</div><div class="line">Obj.prototype.age = <span class="number">25</span>;</div><div class="line">Obj.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用方式</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Obj();</div><div class="line">obj1.getName() <span class="comment">//"aotu"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Obj();</div><div class="line">obj2.getName() <span class="comment">//"aotu"</span></div><div class="line"></div><div class="line">alert(obj1.getName == obj2.getName); <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>由此可见obj1 和 obj2 访问的是同一个getName函数</p>
<h5 id="更好的写法"><a href="#更好的写法" class="headerlink" title="更好的写法"></a>更好的写法</h5><p>我们可以将所有的原型都写在一个对象字面量里，这样整个代码看起来更加简洁清晰，继续往下看<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">Obj.prototype = &#123;</div><div class="line">    name: <span class="string">"aotu"</span>,</div><div class="line">    age: <span class="number">25</span>,</div><div class="line">    getName: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="使用字面量的方式需注意的问题"><a href="#使用字面量的方式需注意的问题" class="headerlink" title="使用字面量的方式需注意的问题"></a>使用字面量的方式需注意的问题</h5><p>在使用这种字面量的方式的时候需注意以下两点</p>
<p>1.将prototype设置为等于一个对象字面量形式创建的对象，它本质上已经完全重写了默认的prototype对象，最终结果虽然相同但是其constructor属性不再指向该对象。</p>
<p>constructor是个什么鬼？在默认情况下，所有原型对象都会自动获得一个constructor，它指向prototype属性所在函数的指针，换句话说这个constructor就是指这个构造函数。以上代码执行结果如下所示<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj= <span class="function"><span class="keyword">new</span> <span class="title">Obj</span>();</span></div><div class="line"><span class="title">alert</span>(obj.cnstructor == <span class="type">Obj</span>) <span class="comment">//false;</span></div></pre></td></tr></table></figure></p>
<p>我们可以在重写prototype的时候给constructor指定构造函数，接着往下看<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">Obj.prototype = &#123;</div><div class="line">    constructor: Obj,</div><div class="line">    name: <span class="string">"aotu"</span>,</div><div class="line">    age: <span class="number">25</span>,</div><div class="line">    getName: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj= <span class="keyword">new</span> Obj();</div><div class="line">alert(obj.cnstructor == Obj) <span class="comment">//true;</span></div></pre></td></tr></table></figure></p>
<p>2.当我们重写整个原型的时候如果先创建了实例，就会切断构造函数与原型之间的联系，因为<strong>实例的指针仅仅指向原型，而不是构造函数</strong>，在实际的操作过程中，应该尽量避免这种错误<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Obj();</div><div class="line"></div><div class="line">Obj.prototype = &#123;</div><div class="line">    constructor: Obj,</div><div class="line">    name: <span class="string">"aotu"</span>,</div><div class="line">    age: <span class="number">25</span>,</div><div class="line">    getName: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">obj.getName();  <span class="comment">//error</span></div></pre></td></tr></table></figure></p>
<h5 id="组合使用二者"><a href="#组合使用二者" class="headerlink" title="组合使用二者"></a>组合使用二者</h5><p>在我们的具体应用中，通常比较多的是组合使用构造函数模式与原型模式。<strong>构造函数用于定义实例属性，原型用于定于共享的属性和方法</strong>，这样能够最大限度的节省内存。以下是一个基本的组合使用构造函数与原型的例子<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!（<span class="keyword">this</span> <span class="keyword">instanceof</span> Obj）)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Obj();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"aotu"</span>;</div><div class="line">    <span class="keyword">this</span>.age = <span class="number">25</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Obj.prototype = &#123;</div><div class="line">    constructor: Obj,</div><div class="line">    getName: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = Obj();</div><div class="line">obj.getName();</div></pre></td></tr></table></figure></p>
<h4 id="5-4-模块模式"><a href="#5-4-模块模式" class="headerlink" title="5.4 模块模式"></a>5.4 模块模式</h4><p>模块模式是一种非常通用的模式，也是使用频率比较高的模式，它具有以下几个特点</p>
<ul>
<li>模块化</li>
<li>可复用</li>
<li>松耦合</li>
<li>区分了私有方法与公共方法</li>
</ul>
<p>我们先看看模块模式的基础框架<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testModule = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//私有成员</span></div><div class="line">    <span class="keyword">var</span> testNode = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//也可在此定义私有方法</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"this is Private method!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="comment">//对外公开的方法</span></div><div class="line">        setHtml: <span class="function"><span class="keyword">function</span> (<span class="params">txt</span>) </span>&#123;</div><div class="line">            testNode.innerHTML = txt;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用方式</span></div><div class="line"><span class="keyword">var</span> testModule = <span class="keyword">new</span> testModule();</div><div class="line">testModule.setHtml(<span class="string">"Hello"</span>);</div></pre></td></tr></table></figure></p>
<p>这种方式看起来比较清晰、简洁，但就是每次调用的时候都需要用new来实例化，我们知道每个实例在内存里都是一份拷贝。如何解决这个问题呢？…我们可以采用一个匿名闭包来完美的解决这个问题。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</div><div class="line">   //将所有的变量和<span class="function"><span class="keyword">function</span>放在这里声明，其作用域也只能在这个匿名闭包里面,既达到了封装的目的，也能防止命名冲突</span></div><div class="line">&#125;<span class="params">()</span>)</div></pre></td></tr></table></figure></p>
<p>接下来我们将它应用到具体的实例中，以下就是一个基本的Module模式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testModule =(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> my = &#123;&#125;,</div><div class="line">        testNode = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</div><div class="line">     </div><div class="line">    my.setHtml = <span class="function"><span class="keyword">function</span>(<span class="params">txt</span>) </span>&#123;</div><div class="line">        testNode.innerHTML = txt;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> my;</div><div class="line">&#125; ())</div><div class="line"></div><div class="line"><span class="comment">//调用方式</span></div><div class="line">testModule.setHtml(<span class="string">"Hello"</span>);</div></pre></td></tr></table></figure></p>
<p>通常在一个大型的项目中，会有多人共同开发一个功能的情况，这个时候我们可以运用这种模式将全局变量当作参数传递，然后通过变量返回，从而达到多人协作的目的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testModule =(<span class="function"><span class="keyword">function</span> (<span class="params">my</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> testNode = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</div><div class="line">     </div><div class="line">    my.setHtml = <span class="function"><span class="keyword">function</span>(<span class="params">txt</span>) </span>&#123;</div><div class="line">        testNode.innerHTML = txt;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> my;</div><div class="line">&#125; (testModule || &#123;&#125;))</div></pre></td></tr></table></figure>
<p>我们也可以通过这个模式将私有的对象或者属性保护起来，然后设置一些公共接口对外访问，继续来看下面的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testModule =(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> testNode = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>),</div><div class="line">     </div><div class="line">        setHtml = <span class="function"><span class="keyword">function</span>(<span class="params">txt</span>) </span>&#123;</div><div class="line">            testNode.innerHTML = txt;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">//设置公共调用方法</span></div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">setHtml</span>: setHtml</div><div class="line">        &#125;</div><div class="line">    &#125; ())</div></pre></td></tr></table></figure></p>
<p>以上几种方式仅仅只是一些创建对象的基础，通过灵活运用这些基础，可以变换出传说中各种各样的模式，如迭代器模式、工厂模式、装饰者模式等，对于后续学习其他的技术也是极有帮助的，如<strong>React</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyTitle = React.createClass(&#123;</div><div class="line">    <span class="attr">getDefaultProps</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">title</span> : <span class="string">'Hello World'</span></div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;this.props.title&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>Vue</strong>:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">Vue</span>(&#123;</div><div class="line">    <span class="attribute">el</span>: <span class="string">'#app'</span>,</div><div class="line">    data: &#123;</div><div class="line">        message: <span class="string">'Hello Vue.js!'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="selector-tag">methods</span>: &#123;</div><div class="line">        <span class="attribute">reverseMessage</span>: function () &#123;</div><div class="line">            this.message = this.message.<span class="built_in">split</span>(<span class="string">''</span>).<span class="built_in">reverse</span>().<span class="built_in">join</span>(<span class="string">''</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>以上就是本期的所有内容，如有错漏，恳请指正，大家共同进步！在下一期中，会继续跟大家探讨更多好玩的东西，敬请期待~~~</p>
<h2 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6 参考资料"></a>6 参考资料</h2><p>《编写可维护的JavaScript》[美] Nicholas C. Zakas 著<br>《JavaScript设计模式》[美] Addy Osmani 著<br>《JavaScript高级程序设计(第3版)》<br>博文：<a href="http://www.cnblogs.com/TomXu/tag/JavaScript/" target="_blank" rel="external">深入理解JavaScript系列</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编程是一门艺术活，好的代码应该就像住的房子一样，有整体的框架，有门，有窗户，相互独立又完美组合。你觉得门不够结实，就拆下来换个实心的；你觉得窗户不够明亮就换个全玻璃的，总之对房子的其他部位没有任何影响。所以说每一个程序员都应该有一颗设计师的心。本文主要从&lt;strong&gt;编码&lt;/strong&gt;、&lt;strong&gt;变量&lt;/strong&gt;、&lt;strong&gt;处理错误&lt;/strong&gt;、&lt;strong&gt;对象&lt;/strong&gt;等基础方面进行简单的探讨，希望能对大家的工作有所帮助~~&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="编码风格" scheme="https://aotu.io/tags/%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    
      <category term="变量" scheme="https://aotu.io/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="UI松耦合" scheme="https://aotu.io/tags/UI%E6%9D%BE%E8%80%A6%E5%90%88/"/>
    
      <category term="错误处理" scheme="https://aotu.io/tags/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
      <category term="创建对象" scheme="https://aotu.io/tags/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="可读性" scheme="https://aotu.io/tags/%E5%8F%AF%E8%AF%BB%E6%80%A7/"/>
    
      <category term="可维护性" scheme="https://aotu.io/tags/%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅地在Storyboard中设置圆角</title>
    <link href="https://aotu.io/notes/2016/03/30/cornerRadius-in-Storyboard/"/>
    <id>https://aotu.io/notes/2016/03/30/cornerRadius-in-Storyboard/</id>
    <published>2016-03-30T08:56:03.000Z</published>
    <updated>2016-10-20T07:06:32.418Z</updated>
    
    <content type="html"><![CDATA[<p>项目中经常遇到一些设计使用圆角，不得不说这样的设计经常能够为App的视图润色不少！<br><a id="more"></a></p>
<h3 id="通常做法"><a href="#通常做法" class="headerlink" title="通常做法"></a>通常做法</h3><p>对于代码党来说，很简单的加上一行代码就能够搞定：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">view<span class="selector-class">.layer</span><span class="selector-class">.cornerRadius</span> = <span class="number">5</span></div></pre></td></tr></table></figure>
<p>对于 Storyboard 狂魔，一般情况下，很多人会先把视图拉一个 IBOutlet 然后再到 <code>awakeFromeNib:</code> 或者 <code>viewDidLoad:</code> 方法中去设置圆角，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> customView: <span class="type">UIView</span>!</div><div class="line"></div><div class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="keyword">super</span>.viewDidLoad()</div><div class="line">       customView.layer.cornerRadius = <span class="number">5</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>但是对代码有一定洁癖的强迫症患者来说，这样的做法经常是要命的！实在无法忍受一个小小圆角都不能在IB中设置，需要另外单独加一行代码来完成，违背了低耦合，高内聚的原则。有人马上提出建议，那就使用IB的运行时属性（Runtime Attributes），有些新手可能对它还不太熟悉：</p>
<p><img src="http://mark2012.qiniudn.com/runtime_attributes.png" alt="IB的运行时属性设置"></p>
<p>这的确也是个不错的方法，可以达到高内聚的效果。不过用过的人都知道，很容易就把 keyPath 拼写错，而且由于这个设置和其他属性的设置分开，可读性可以说很差很差。那有没有什么好的方法呢？</p>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>Xcode6之后运行时属性升级到了 <strong>@IBInspectable</strong> ，利用这个我们可以给 UIView 添加一个属性，然后就可以在IB中进行设置，例如我们想给 <strong>ViewController</strong> 添加一个数值到IB中设置，在上述代码的最前面插入代码：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> customNumber: <span class="built_in">Int</span>?</div></pre></td></tr></table></figure>
<p>然后我们就能在属性检查器上看到如图所示内容，很容易地对数值进行设置:</p>
<p><img src="http://mark2012.qiniudn.com/custom_number.png" alt="自定义属性设置"></p>
<blockquote>
<p><strong>@IBInspectable</strong> 还支持以下类型属性：</p>
<ul>
<li><strong>Boolean</strong></li>
<li><strong>Number</strong></li>
<li><strong>String</strong></li>
<li><strong>Point</strong></li>
<li><strong>Size</strong> </li>
<li><strong>Rect</strong></li>
<li><strong>Range</strong></li>
<li><strong>Color</strong></li>
<li><strong>Image</strong></li>
<li><strong>nil</strong></li>
</ul>
</blockquote>
<p>回到正题，我们视图的圆角该怎么实现呢？也许你们马上想到了继承，实现一个 <strong>UIView</strong> 的基类，基类中添加圆角的 <strong>@IBInspectable</strong> 属性。但这样你马上嗅到了不好的味道，你所有想要使用该属性的视图都要继承自该基类，那岂不是更加麻烦！</p>
<p>其实最好的解决方法你应该心里有数，如果说在 Object-C 中给已有的类添加方法，你肯定马上能想到 <strong>Category</strong> ！不过可能有些人还没不清楚应该如何在 <strong>Category</strong> 中添加属性。由于这里我们用的是 Swift ，稍后我们再说OC中应该如何实现。 Swift 中应该使用 <strong>extension</strong> 来对 <strong>UIView</strong> 进行扩展，并且我们需要添加 <strong>@IBInspectable</strong> 来扩展属性，所以我们需要同时实现 <strong>setter &amp; getter</strong> ，创建一个命名为 <code>UIView+O2CornerRadius.swift</code> 的文件，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</div><div class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> cornerRadius: <span class="type">CGFloat</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> layer.cornerRadius</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// also  set(newValue)</span></div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            layer.cornerRadius = newValue</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只需要如此简单地添加一个扩展，不需要 <strong>import</strong> ，不必任何多余代码，我们就可以非常非常方便地在任意IB的属性检查器中对圆角进行设置了！这不就是我们梦寐以求的解耦吗？！！:)</p>
<p><img src="http://mark2012.qiniudn.com/corner_radius.png" alt="自定义圆角属性设置"></p>
<p>实际上， <strong>@IBInspectable</strong> 是对运行时的一种扩展，你所有的设置都会在上述提到的运行时属性（Runtime Attributes）有所体现。</p>
<h3 id="接下来做什么？"><a href="#接下来做什么？" class="headerlink" title="接下来做什么？"></a>接下来做什么？</h3><p>我们还可以增加很多内容的扩展，例如阴影、边框、边框颜色等等！学会了这样的奇淫技巧，还不赶紧到你的项目中去实践！</p>
<p>说说 Object-C 的代码实现，我们使用 <strong>Category</strong> 同样需要同时实现 <strong>setter &amp; getter</strong> :</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//UIView+O2CornerRadius.h</span></div><div class="line"><span class="variable">@interface</span> UIView (O2CornerRadius)</div><div class="line"> </div><div class="line"><span class="variable">@property</span> (nonatomic, assign) IBInspectable CGFloat cornerRadius;</div><div class="line"> </div><div class="line"><span class="variable">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//UIView+O2CornerRadius.m</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIView</span> (<span class="title">O2CornerRadius</span>)</span></div><div class="line"> </div><div class="line">- (<span class="keyword">void</span>)setCornerRadius:(<span class="built_in">CGFloat</span>)cornerRadius</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span>.layer.cornerRadius = cornerRadius;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">- (<span class="built_in">CGFloat</span>)cornerRadius</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.layer.cornerRadius;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中经常遇到一些设计使用圆角，不得不说这样的设计经常能够为App的视图润色不少！&lt;br&gt;
    
    </summary>
    
      <category term="移动开发" scheme="https://aotu.io/cates/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="https://aotu.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://aotu.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>前端开发与 HTTP/2 的羁绊——安利篇</title>
    <link href="https://aotu.io/notes/2016/03/17/http2-char/"/>
    <id>https://aotu.io/notes/2016/03/17/http2-char/</id>
    <published>2016-03-17T08:54:00.000Z</published>
    <updated>2016-10-20T07:06:32.418Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>HTTP/2 是万维网（WWW）基础协议 HTTP 16年来的首次重大升级。共经历了18版草案（00-17），于2015年2月18日正式定稿，2015年5月14日 HTTP/2 正式版发布，正式版 HTTP/2 规格标准叫做 RFC7540 。</p>
</blockquote>
<p>好吧，我相信你一转身就忘了上面提到的这一长串你内容，特别是这个复杂的规范名称。恩~没关系，要了解 HTTP/2，还是先要了解它的新特性以及实现原理。</p>
<h2 id="一、首先你必须知道一点儿-HTTP-1-x"><a href="#一、首先你必须知道一点儿-HTTP-1-x" class="headerlink" title="一、首先你必须知道一点儿 HTTP/1.x"></a>一、首先你必须知道一点儿 HTTP/1.x</h2><p>作为一个前端小白，前些天我做了一个简单的活动，本地调试完后我把它放到服务器（假设域名为：jdc.jd.com）上，这时候你通过在客户端（浏览器）访问以下：jdc.jd.com/act/index.html，就可以看到我的活动页面了（当然，要经过一小段时间的等待）。</p>
<p>那么客户端是如何取得服务端的这些资源的？它们之间的通信是怎样的？</p>
<p>侧重讲讲三个过程：</p>
<ul>
<li><strong>TCP 连接：</strong> 浏览器与服务器三次握手，建立 TCP 连接</li>
<li><strong>客户端请求：</strong> 建立 TCP 连接后，客户端就会向服务器发送一个 HTTP 请求信息（比如请求 HTML 资源，我们暂且就把这个称为“ HTML 请求”）</li>
<li><strong>服务器响应：</strong> 服务器接收到请求后进行处理并发回一个 HTTP 响应信息</li>
</ul>
<p>当然，接下来还有浏览器解析渲染的过程~巴拉巴拉~我们才能最终看到页面~~</p>
<p>着重看下 HTTP/1.0 和 HTTP/1.1 这三个的过程不同：</p>
<h3 id="HTTP-1-0-的通信"><a href="#HTTP-1-0-的通信" class="headerlink" title="HTTP/1.0 的通信"></a>HTTP/1.0 的通信</h3><p>在 HTTP/1.0 下，每完成一次请求和响应，TCP 连接就会断开。但我们知道，客户端发送一个请求只能请求一个资源，而我们的网站不可能只有单单一个 HTML 文件吧？至少还要有 CSS 吧？还要有图片吧？于是又要一次 TCP 连接，然后请求和响应。</p>
<p>下图展示了 HTTP/1.0 请求一个 HTML 和一个 CSS 需要经历的两次 TCP 连接：</p>
<p><img src="//img.aotu.io/Yettyzyt/http2-1/1.png" alt="img"></p>
<h3 id="HTTP-1-1-的通信"><a href="#HTTP-1-1-的通信" class="headerlink" title="HTTP/1.1 的通信"></a>HTTP/1.1 的通信</h3><p>要知道，TCP 连接有 RTT（Round Trip Time，即往返时延）的，每请求一个资源就要有一次 RTT ，用户可是等不得这种慢节奏的响应的。于是到了 HTTP/1.1 ，TCP 可以持久连接了，也就是说，一次 TCP 连接要等到同域名下的所有资源请求/响应完毕了连接才会断开。恩！听起来情况好像好了很多，请求同域名下的 n 个资源，可以节约 (n-1)*RTT 的时间。</p>
<p>下图展示了 HTTP/1.1 时请求一个 HTML 和一个 CSS 只需要经历一次 TCP 连接：</p>
<p><img src="//img.aotu.io/Yettyzyt/http2-1/2.png" alt="img"></p>
<p>但前面提到了，客户端发送一个请求只能请求一个资源，那么我们会产生如下疑问：</p>
<p><strong>Q：为什么不一次发送多个请求？</strong></p>
<p>事实上，HTTP/1.x 多次请求必须严格满足先进先出（FIFO）的队列顺序：发送请求，等待响应完成，再发送客户端队伍中的下一个请求。也就是说，每个 TCP 连接上只能同时有一个请求/响应。这样一来，服务器在完成请求开始回传到收到下一个请求之间的时间段处于空闲状态。</p>
<p><strong>Q：有什么办法去改变吗？</strong></p>
<p>“ HTTP 管道”技术实现了客户端向服务器并行发送多个请求。而服务器也是可以并行处理多个请求的。这么一来，不就可以多路复用了吗？但是， HTTP/1.x 有严格的串行返回响应机制，通过 TCP 连接返回响应时，就是必须 one by one ，前一个响应没有完成，下一个响应就不能返回。所以使用“ HTTP 管道”技术时，万一第一个响应时间很长，那么后面的响应处理完了也无法发送，只能被缓存起来，占用服务器内存，这就是传说中的“队首阻塞”。</p>
<p><strong>Q：既然一个 TCP 连接解决不了问题，那么可以开多个吗？</strong></p>
<p>既然一条通道（TCP 连接）通信效率低，那么就开多条通道呗！的确，HTTP/1.1 下，浏览器是支持同时打开多个 TCP 会话的（一般为6个）。一个 TCP 只能响应一个请求，那么六个 TCP 岂不就能达到六倍速？想想还有点儿小激动！但事情往往不是这么简单。开启多个 TCP 会话，无疑会给客户端和服务器都带来负担，比如缓存、CPU 时钟周期等，而且并行的 TCP 也会竞争带宽，并行能力也是受限制的，往往无法达到理想状态下的六倍速。</p>
<p>可见，我们采取了许多方法，希望可以并行处理请求/响应，但都不能从根本上解决问题。况且，很多方法与 HTTP/1.x 的设计理念是背道而驰的，在 HTTP/1.x 下，却没有正确利用好 HTTP/1.x 的特性。</p>
<p>于是， HTTP/2 带着提高性能的使命，应运而生。</p>
<h2 id="二、那么-HTTP-2-做了什么改变"><a href="#二、那么-HTTP-2-做了什么改变" class="headerlink" title="二、那么 HTTP/2 做了什么改变"></a>二、那么 HTTP/2 做了什么改变</h2><p>先对 HTTP/2 产生的影响有一个直观的认识：</p>
<p>这是<a href="https://http2.akamai.com/demo" target="_blank" rel="external">Akamai公司（全球最大的CDN服务商）的一个官方演示</a>，HTTP/1.1 和 HTTP/2 请求300+张图片的对比：</p>
<p><img src="//img.aotu.io/Yettyzyt/http2-1/3.gif" alt="img"></p>
<p>明显可以看出， HTTP/2 下加载时间为 HTTP/1.1 的 1/5 不到，那么 HTTP/2 到底为什么这么快？我们还是从它的新特性来进行全面的了解。</p>
<p>以下着重介绍五个特性：二进制分帧层、多向请求与响应、优先级和依赖性、首部压缩、服务器推送。</p>
<h3 id="二进制分帧层（Binary-Framing-Layer）"><a href="#二进制分帧层（Binary-Framing-Layer）" class="headerlink" title="二进制分帧层（Binary Framing Layer）"></a>二进制分帧层（Binary Framing Layer）</h3><blockquote>
<p>指的是位于套接字接口与应用可见的高层 HTTP API 之间的一个新机制：<strong>HTTP 的语义，包括各种动词、方法、首部，都不受影响，</strong>不同的是传输期间对它们的<strong>编码方式</strong>变了。</p>
</blockquote>
<p>在新引进的二进制分帧层上，HTTP/2 将所有传输的信息分割为更小的消息和帧，且都采用二进制格式的编码。如下图所示：</p>
<p><img src="//img.aotu.io/Yettyzyt/http2-1/4.png" alt="img"></p>
<p>从图上可以看到：在高层 HTTP API 和低层 TCP 连接中引入了一个二进制分帧层；在二进制分帧层上，HTTP/1.1 的一个 POST 请求（起始行、首部、实体正文），被分割成了更小的 HEADERS 帧和 DATA 帧。起始行、首部被分割到 HEADERS 帧，实体正文被分割到 DATA 帧。</p>
<p>接下来，我们再深入地了解下这些被分割后的二进制帧是怎么工作的：</p>
<blockquote>
<p>HTTP/2 同域名的所有通信都是在<strong>一个 TCP 连接</strong>上完成，这个连接可以承载任意数量的<strong>双向数据流</strong>。而每个数据流都是以<strong>消息</strong>的形式发送的，消息由<strong>一个帧或多个帧</strong>组成。</p>
<ul>
<li><strong>流：</strong>已建立的连接上的双向字节流</li>
<li><strong>消息：</strong>与逻辑消息对应的完整的一系列数据帧</li>
<li><strong>帧：</strong>HTTP/2 通信的最小单位，每个帧包含帧首部</li>
</ul>
</blockquote>
<p>好像很复杂的样子，咱们来捋一捋：</p>
<p>TCP 连接在客户端和服务器间建立了一条运输的通道，可以双向通行，当一端要向另一端发送消息时，会先把这个消息拆分成几部分（帧），然后通过发起一个流对这些帧进行发送，最后在另一端将同一个流的帧重新组合。</p>
<p>这个过程就好像我们在搬家的时候，会把一个桌子先拆散成零部件，然后通过几次的搬运，到了新家后，再把桌子重新拼装起来。</p>
<p>下图展示了流、消息与帧的关系（注意到没，HEADERS 帧总是在最前面的）：</p>
<p><img src="//img.aotu.io/Yettyzyt/http2-1/5.png" alt="img"></p>
<p>HTTP/2 规范一共规定了 10 种不同的帧， 其中最基础的两种分别对应于 HTTP/1.1 的 DATA 帧 和 HEADERS 帧 。</p>
<h3 id="多向请求与响应（多路复用）"><a href="#多向请求与响应（多路复用）" class="headerlink" title="多向请求与响应（多路复用）"></a>多向请求与响应（多路复用）</h3><blockquote>
<p>多路复用允许同时通过单一的 TCP 连接发起<strong>多重的请求/响应消息</strong>，客户端和服务器可以把 HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端根据 <strong>Stream ID</strong> 把它们重新组合起来。</p>
</blockquote>
<p>前面提到的一端发送消息会先对消息进行拆分，与此同时，也会给同一个消息拆分出来的帧带上一个编号（Stream ID），这样在另一端接收这些帧后就可以根据编号对它们进行组合。</p>
<p>也正是有了这种编号的方式，当某一端发送消息时，可以发送多个消息拆分出来的多个帧（发起多个流），且这些帧可以乱序发送，因为这些帧都有自己的编号，它们之间互不影响。</p>
<p>下图展示了单一的 TCP 连接上有多个请求/响应并行交换：</p>
<p><img src="//img.aotu.io/Yettyzyt/http2-1/6.png" alt="img"></p>
<p>从图上可以看出，服务器向客户端发送 stream1 的多个 DATA 帧（说明 HEADERS 帧已发送完毕）与 stream3 的 HEADERS 帧和 DATA 帧 ，客户端正在向服务器发送 stream5 的 DATA 帧，可见，帧的发送是乱序的，且请求/响应是并行的。</p>
<p>细心的你会发现，stream1 中有多个 DATA 帧，这是为什么呢？因为有 DATA 帧有长度的控制（2的14次方-1 字节，约 16383 个字节），应用数据过大时，会被拆分成多个 DATA 帧（还记得讲二进制分帧层展示的 HTTP/1.1 的请求被分割成更小的帧吗？DATA 帧就是用来携带应用数据的）。</p>
<h3 id="优先级和依赖性"><a href="#优先级和依赖性" class="headerlink" title="优先级和依赖性"></a>优先级和依赖性</h3><blockquote>
<p>新建流的终端可以在<strong>报头帧</strong>中包含优先级信息来<strong>对流标记优先级</strong>。</p>
<p>优先级的目的是允许终端表达它如何让对等端管理并发流时<strong>分配资源</strong>。更重要的是，在发送容量有限时优先级能用来选择流来传输帧。</p>
</blockquote>
<p>HTTP/2 中，流可以有一个优先级属性（即“权重”）：</p>
<ul>
<li>可以在 HEADERS 帧中包含优先级 priority 属性；</li>
<li>可以单独通过 PRIORITY 帧专门设置流的优先级属性。</li>
</ul>
<p>流的优先级用于发起流的终端（客户端/服务器）向对端（接收的一方）表达需要多大比重的资源支持，但这只是一个建议，不能强制要求对端一定会遵守。</p>
<blockquote>
<p>借助于 <strong>PRIORITY 帧</strong>，客户端同样可以告知服务器当前的流依赖于其他哪个流。该功能让客户端能建立一个<strong>优先级“树”</strong>，所有<strong>“子流”</strong>会依赖于<strong>“父流”</strong>的传输完成情况。</p>
<p>不依赖任何流的流的流依赖为 <strong>0x0</strong>。换句话说，不存在的流标识 0 组成了树的根。</p>
</blockquote>
<p>我们通过以下几个例子来理解下优先级“树”：<br><img src="//img.aotu.io/Yettyzyt/http2-1/9.png" alt="img"></p>
<ul>
<li><strong>第一种情况：</strong>流 A 和流 B 不依赖流，即为 0x0 ；流 A 的权重为 12 ，流 B 的权重为 4 ；则流 A 分配到的资源占比为 12/(12+4)= 12/16，流 B 分配到的资源占比为 4/(12+4)= 4/16。</li>
<li><strong>第二种情况：</strong>流 D 为 0x0 ，流 C 依赖于流 D ；流 D 能被分配到全额资源，等到流 D 关闭后，依赖于流 D 的流 C 也会被分配到全额资源（它是唯一依赖于流 D 的流，它的权重的大小此时并不重要，因为没有竞争的流）。</li>
<li><strong>第三种情况：</strong>流 D 为 0x0 ，流 C 依赖于流 D ，流 A 和 流 B 依赖于流 C ；流 D 能被分配到全额资源，等到流 D 关闭后，依赖于流 D 的流 C 也会被分配到全额资源；等到流 C 关闭后，依赖于流 C 的流 A 和流 B 根据权重分配资源（3：1）。</li>
<li><strong>第四种情况：</strong>流 D 为 0x0 ，流 C 和流 E 依赖于流 D ，流 A 和 流 B 依赖于流 C ；流 D 能被分配到全额资源，等到流 D 关闭后，依赖于流 D 的流 C 的流 E 和流 B 根据权重分配资源（1：1）；等到流 C 关闭后，依赖于流 C 的流 A 和流 B 根据权重分配资源（3：1）。</li>
</ul>
<p>前面说到，“可以单独通过 PRIORITY 帧专门设置流的优先级属性”，也就是说可以对原本没有优先级属性（包括依赖关系）的流进行设置，也可以对原本已有优先级属性的流进行修改。因此，优先级可以在传输过程中被动态的改变。</p>
<h3 id="首部压缩"><a href="#首部压缩" class="headerlink" title="首部压缩"></a>首部压缩</h3><p>HPACK 是专门为 HTTP/2 量身定制的压缩技术。</p>
<blockquote>
<p>在服务器和客户端各维护一个<strong>“首部表”</strong>，表中用索引代表<strong>首部名</strong>，或者<strong>首部键 - 值对</strong>，上一次发送两端都会记住已发送过哪些首部，下一次发送只需要传输差异的数据，相同的数据直接用索引表示即可。</p>
</blockquote>
<p>具体实现如下图所示：</p>
<p><img src="//img.aotu.io/Yettyzyt/http2-1/7.png" alt="img"></p>
<p>这个过程比较容易理解：通过索引表的对应关系，来标记首部表中的不同信息。</p>
<p>同一个域名下的请求/响应的首部往往有很多重复的信息，当客户端要向服务器发送某个请求时，通过查找索引表，发现该信息的首部已经发送过，此时服务器端的索引表也应该有对应的信息，则不需要再次发送；若查找发现部分首部信息不在索引表中，则发送该部分信首部息即可。</p>
<p>如在上图的示例中，第二个请求只需要发送变化了的路径首部（:path），其他首部没有变化，就不用再发送了。</p>
<h3 id="服务器推送（server-Push）"><a href="#服务器推送（server-Push）" class="headerlink" title="服务器推送（server Push）"></a>服务器推送（server Push）</h3><blockquote>
<p>服务器可以对一个客户端请求发送多个响应。也就是说，除了对最初请求的响应外，服务器还可以<strong>额外向客户端推送资源</strong>。</p>
</blockquote>
<p>在了解“二进制分帧层”的时候我们提到，“HTTP/2 规范规定了10种不同的帧”，其中有一种名为“PUSH_PROMISE”，就是在服务器推送的时候发送的。当客户端解析帧时，发现它是一个 PUSH_PROMISE 类型，便会准备接收服务端要推送的流。</p>
<p><img src="//img.aotu.io/Yettyzyt/http2-1/8.png" alt="img"></p>
<p>从上图可以看出，当服务器响应了 HTML 请求后，可以知道客户端接下来要发送 JS 请求、CSS 请求，于是服务器通过推送的方式（主动发起新流，而不是等客户端请求然后再响应），向客户端发出要约（PUSH_PROMISE）。当然，客户端可以选择缓存这个资源，也可以拒绝这个资源。</p>
<p>这个过程有点类似于我们常用的资源内嵌的手段：将一个图片资源转为 base64 编码嵌入 CSS 文件中，当客户端发起 CSS 请求时，也会请求该图片。因此在响应 CSS 请求后，服务器会强制（客户端是无法拒绝的）向客户端发送图片响应。但内嵌资源是无法被单独缓存的，而服务器推送的资源是可以被缓存的。</p>
<p>需要注意，服务器必须遵循请求-响应的循环，只能借着请求的响应来推送资源，也就是说，如果客户端没有发送请求，服务器是没法先手推送的。而且，如上图中 stream4 ，PUSH_PROMISE 帧必须在返回响应（DATA 帧）之前发送，因为万一客户端请求的恰好是服务器打算推送的资源，那传输过程就会混乱了。</p>
<p>注：由客户端发起的流 Stream ID 为奇数，由服务器发起的流 Stream ID 为偶数，回顾上面的图就能发现啦！</p>
<h2 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h2><ul>
<li>HTTP/2 通过二进制分帧与多路复用机制，有效解决了 HTTP/1.x 下请求/响应延迟的问题</li>
<li>新的首部压缩技术使 HTTP/1.x 首部信息臃肿的问题得到解决</li>
<li>优先级和依赖性与服务器推送使得我们可以更有效地利用好这个单一的 TCP 连接</li>
</ul>
<p>可见，HTTP/2 在 HTTP/1.1 的基础上有了一个较大的性能提升。这时候你会发现，我们针对 HTTP/1.x 的一些优化手段（如上文提到的资源内嵌）似乎有点不适用了。</p>
<p>下一次的文章《前端开发与 HTTP/2 的羁绊——性能篇》，将和大家一起深入探讨 HTTP/2 下的性能优化问题。</p>
<hr>
<p>文章撰写参考：</p>
<ul>
<li>书籍：<a href="http://chimera.labs.oreilly.com/books/1230000000545/" target="_blank" rel="external">《High Performance Browser Networking》(Ilya Grigorik)</a></li>
<li>译本：<a href="http://www.ituring.com.cn/book/1194" target="_blank" rel="external">《Web性能权威指南》（李松峰）</a></li>
<li>博文：<a href="http://www.blogjava.net/yongboy/archive/2015/03/19/423611.html" target="_blank" rel="external">《HTTP/2笔记之流和多路复用》(聂永)</a></li>
<li>博文：<a href="http://www.2cto.com/kf/201510/446824.html" target="_blank" rel="external">《Web性能优化与Http2》（孙飞）</a></li>
<li>博文：<a href="https://imququ.com/post/header-compression-in-http2.html" target="_blank" rel="external">《HTTP/2 头部压缩技术介绍》（屈光宇）</a></li>
<li>译本：<a href="http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99" target="_blank" rel="external">《HTTP/2.0中文翻译（FEX）》</a></li>
<li>译本：<a href="https://www.gitbook.com/book/ye11ow/http2-explained/details" target="_blank" rel="external">《http2讲解》（ye11ow）</a></li>
</ul>
<p>图片来源：</p>
<ul>
<li>书籍：<a href="http://chimera.labs.oreilly.com/books/1230000000545/" target="_blank" rel="external">《High Performance Browser Networking》(Ilya Grigorik)</a></li>
<li>译本：<a href="http://www.ituring.com.cn/book/1194" target="_blank" rel="external">《Web性能权威指南》（李松峰）</a></li>
</ul>
<p>如有错漏，欢迎斧正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;HTTP/2 是万维网（WWW）基础协议 HTTP 16年来的首次重大升级。共经历了18版草案（00-17），于2015年2月18日正式定稿，2015年5月14日 HTTP/2 正式版发布，正式版 HTTP/2 规格标准叫做 RFC7540 。&lt;/
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="HTTP2" scheme="https://aotu.io/tags/HTTP2/"/>
    
  </entry>
  
  <entry>
    <title>前端优化不完全指南</title>
    <link href="https://aotu.io/notes/2016/03/16/optimization/"/>
    <id>https://aotu.io/notes/2016/03/16/optimization/</id>
    <published>2016-03-16T07:26:12.000Z</published>
    <updated>2016-10-20T07:06:32.417Z</updated>
    
    <content type="html"><![CDATA[<p>篇幅可能有点长，我想先聊一聊阅读的方式，我希望你阅读的时候，能够把我当作你的竞争对手，你的梦想是超越我。你想超越我，就得了解我懂什么对吧，好，开始阅读~ ~ 哈哈哈 ~ ~ ~</p>
<p>历时144000000毫秒出山的前端优化篇，若你问我有什么感悟？<br>那我告诉你，看到毫秒啊，火箭啊，这些与优化相关的词，都有莫名的亲切感。<br>本文主要从<strong>工作效率</strong>、<strong>速度性能</strong>、<strong>稳定性</strong>、<strong>响应式</strong>、<strong>兼容性</strong>、<strong>搜索SEO</strong>、<strong>信息无障碍</strong>等方面进行讲解。<br>前端优化是一个让人技术提升的point，希望你也能从这里学到一些东西。<br><a id="more"></a></p>
<h2 id="1-工作效率"><a href="#1-工作效率" class="headerlink" title="1 工作效率"></a>1 工作效率</h2><p>你是否经常处于这样的场景：从早上忙到晚上八九点，一会与产品经理沟通，一会在部门群聊一下新奇的东西，一会被设计美眉纠缠住拖不了身，有时还开不了部门的会议因为页面急着上线，然后继续加班~~~</p>
<p>怎么提高我们的工作效率？下面从四个方面讲解：</p>
<ul>
<li>时间管理</li>
<li>利用工具</li>
<li>经验和阅历 </li>
<li>使用新技术</li>
</ul>
<h3 id="1-1-时间管理"><a href="#1-1-时间管理" class="headerlink" title="1.1 时间管理"></a>1.1 时间管理</h3><p>凡是时间管理，都会联想到计划这个词。我们先看看别人家的月计划表和周计划表，之所以周计划表为空，是希望你能把它下载并打印出来，行动从计划开始：<br>月计划表：<br><img src="//img.aotu.io/wangcainuan/2016-03-16-optimization/月计划.jpg" alt="img"><br>周计划表：<br><img src="//img.aotu.io/wangcainuan/2016-03-16-optimization/周计划.jpg" alt="img"></p>
<p>当然计划不要做得过于琐碎，且不要占用自己太多时间。做好计划之余，在执行过程中需要注意几点：</p>
<ul>
<li><strong>正确的时间点做正确的事，比如早上比较精神，可选择比较难的项目开展，可容易达到高效率</strong>。</li>
<li><strong>专注一件事情，尽量不要被琐碎或其他事情影响，而且不要频繁地去看计划表，最好是做完一件再去看，否则容易焦虑导致无法专心</strong>。</li>
</ul>
<h3 id="1-2-利用工具"><a href="#1-2-利用工具" class="headerlink" title="1.2 利用工具"></a>1.2 利用工具</h3><p>第一样工具，比如程序员杯子：<br><img src="//img.aotu.io/wangcainuan/2016-03-16-optimization/git马克杯.jpg" alt="img"></p>
<p>利用工具有什么好处呢？</p>
<ul>
<li>减少重复性工作。</li>
<li>减少繁琐工作流程，一键式化。</li>
</ul>
<h4 id="1-2-1-编辑器"><a href="#1-2-1-编辑器" class="headerlink" title="1.2.1 编辑器"></a>1.2.1 编辑器</h4><p>选择好一个前端编辑器是比较重要的。目前sublime、webstorm和vim是比较常见的，建议不使用Dreamweaver。<br>sublime目前还是不错的选择，可以安装插件，比如BracketHighlighter 高亮显示、JsFormat、Emmet html/CSS快速编辑以及DocBlockr插件，快速输入jsDoc注释等，还可以自定义代码段snippets。<br>无论你使用哪种编辑器，你需要的是<strong>熟悉这个编辑器并熟练它的快捷键</strong>。</p>
<h4 id="1-2-2-浏览器开发者工具"><a href="#1-2-2-浏览器开发者工具" class="headerlink" title="1.2.2 浏览器开发者工具"></a>1.2.2 浏览器开发者工具</h4><p>作为前端人员，首选的浏览器当然是chrome。推荐阅读<a href="http://web.jobbole.com/82558/" target="_blank" rel="external">Chrome开发者工具不完全指南</a>一系列文章，它从一些基础的功能开始到它的一些高级性能分析器（Timeline、Profiles），熟悉chrome对我们的开发工作有很大的作用。</p>
<h4 id="1-2-3-其他常用工具"><a href="#1-2-3-其他常用工具" class="headerlink" title="1.2.3 其他常用工具"></a>1.2.3 其他常用工具</h4><p>切图工具：<a href="http://jingyan.baidu.com/article/e73e26c0c9971524adb6a7a6.html" target="_blank" rel="external">photoshop cc切图之智能切图</a>、 <a href="http://www.cutterman.cn/v2/cutterman" target="_blank" rel="external">cutterman</a><br>量色、测距工具：FastStone Capture、<a href="http://www.getmarkman.com/" target="_blank" rel="external">马克鳗 - 设计稿标注</a><br>图片压缩：<a href="https://tinypng.com/" target="_blank" rel="external">tinypng</a>、<a href="http://zhitu.isux.us/" target="_blank" rel="external">智图</a><br>生成雪碧图：<a href="http://www.spritebox.net/" target="_blank" rel="external">spritebox</a>、<a href="http://www.cn.spritegen.website-performance.org/" target="_blank" rel="external">CSS Sprite Generator</a>、cssgaga<br>调试工具：Fiddler 、weinre 、微信调试工具；</p>
<h4 id="1-2-4-前端工程化"><a href="#1-2-4-前端工程化" class="headerlink" title="1.2.4 前端工程化"></a>1.2.4 前端工程化</h4><p>凡是重复的，必须使用工具自动完成。<br>工具众多，我们就有一种想法，能不能有一种工具能帮我们自动生成雪碧图、 css压缩、图片压缩等等，然后就出现了前端工程化。前端工程化一般可分为五个步骤：<br>（1） 初始，生成基础目录结构和样式库。<br>（2） 开发，实时预览、预编译。<br>（3） 构建，预编译、合并、压缩。<br>（4） 发布，将构建后静态文件发布上线。<br>（5） 打包，资源路径转换，源码打包 。</p>
<p>这里推荐一个工具<a href="http://fis.baidu.com/" target="_blank" rel="external">fis</a>，解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题。还有凹凸实验室研发的<a href="http://aotu.io/athena/">athena</a>，O2Team构建项目流程工具，可以生成相应目录和代码，同时对项目进行编译， 一次安装，到处运行。</p>
<h3 id="1-3-阅历和经验"><a href="#1-3-阅历和经验" class="headerlink" title="1.3 阅历和经验"></a>1.3 阅历和经验</h3><p>我所理解的程序员兼并聪明以及“懒惰”精神，推崇懒惰式开发，即把问题理解清楚，确保将要写的代码能真正的解决问题，这将会避免之后写出大量无用的代码，正所谓“懒”出效率。<br>我们的阅历和经验可以大大提高开发效率，思考代码的时间增加从而选出最优方案，因此写代码速度更快以及代码长度更短，对问题的透彻理解使调试代码的速度也更快。<br>根据阅历和经验，或借助其他人的，我们进行整理从而形成自己或团队的规范，这可大大提高我们的写码速度。</p>
<h3 id="1-4-使用新技术"><a href="#1-4-使用新技术" class="headerlink" title="1.4 使用新技术"></a>1.4 使用新技术</h3><p>使用新技术如何提高我们的工作效率。一贯我们都使用我们熟悉的技术去开发一个技术处理方案，毕竟学习新技术的时间成本还是存在的。但是还是不能忽略一些新技术的存在，一般新技术包含了一些很棒的新特性，可以更加方便的实现很多复杂的操作，提高开发人员的效率，比如ES6。<strong>用你的慧眼去积累新技术，会派上用场的</strong>。</p>
<h2 id="2-速度性能"><a href="#2-速度性能" class="headerlink" title="2 速度性能"></a>2 速度性能</h2><p>为什么需要前端性能优化？性能优化可以从哪几个方面入手？<br>遇到一个页面，5秒还没加载完成，那个菊花转啊转，或者页面完全白屏，那简直把人逼疯了。从用户体验的角度看，前端性能优化是非常有必要的。网页最长加载时间一般不能超过3秒。<br>首先我们需要确定网页的性能指标，可量化的目标以及可持续跟踪的优化数据是性能优化工作得以持续进行的保障，同时也是源动力！比如：</p>
<ul>
<li>首屏加载时长</li>
<li>DOM加载时长</li>
<li>页面白屏时长</li>
</ul>
<p>我们一般通过三种方式来检验我们的网页性能：</p>
<ul>
<li>通过浏览器开发者工具或浏览器插件、Fiddler、Charles等查看页面加载情况。原理是通过追踪HTTP请求与响应的时间，以图形的方式列出所有资源的下载情况。缺点是人为操作，难以实现批量测试与统计。</li>
<li>在页面中引入额外的代码钩子来记录时间等相关数据。缺点是加重了开发者与测试人员的负担，还有可能因为检测代码本身的潜在问题影响页面的性能。如果好一点的话，会接入一个性能数据收集系统，采取并分析数据。</li>
<li>使用第三方的工具如Page Speed、YSlow和WebPagetest，能够选择在不同浏览器和不同地域进行测试，并且给出各方面的评分以及提供一些优化建议。但某些服务需要排队等待，并且难以实现批量测试与统计。下面是使用WebPagetest测试京东首页的情况：<br><img src="//img.aotu.io/wangcainuan/2016-03-16-optimization/webpagetest.jpg" alt="img"></li>
</ul>
<p>可喜可贺，W3C推出了一套<strong><a href="https://www.w3.org/wiki/Web_Performance/Publications" target="_blank" rel="external">性能API标准</a></strong>，目的是简化开发者对网站性能进行精确分析与控制的过程，最终实现性能的提高。比如通过Navigation Timing记录的关键时间点来统计页面完成所用的时间，部分使用方法：    </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> timing = <span class="built_in">window</span>.performance.timing</div><div class="line">timing.domLoading  <span class="comment">//浏览器开始解析 HTML 文档第一批收到的字节</span></div><div class="line">timing.domInteractive  <span class="comment">// 浏览器完成解析并且所有 HTML 和 DOM 构建完毕</span></div><div class="line">timing.domContentLoadedEventStart <span class="comment">//DOM 解析完成后，网页内资源加载开始的时间</span></div><div class="line">timing.domContentLoadedEventEnd <span class="comment">// DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）</span></div><div class="line">timing.domComplete <span class="comment">//网页上所有资源（图片等）下载完成,且准备就绪的时间</span></div></pre></td></tr></table></figure>
<p><strong>持续追踪性能数据，要选择合适的页面性能测量工具或API，一旦选定后，不再更换，以保证历史数据的可参照性。</strong>我们还要形成一种意识，达成性能联盟小组，对于重要的业务或者页面，一定要从性能的角度考虑问题，有理有据地拒绝有损于前端性能的业务需求或改动。</p>
<p>人人都知道雅虎军规，那我就来个截图吧！</p>
<p><img src="//img.aotu.io/wangcainuan/2016-03-16-optimization/雅虎35条军规.jpg" alt="img"></p>
<p>以下，我们从服务端、网络、客户端三个方面来一一突破速度性能的提升。</p>
<h3 id="2-1-没事少烦我-服务端"><a href="#2-1-没事少烦我-服务端" class="headerlink" title="2.1 没事少烦我-服务端"></a>2.1 没事少烦我-服务端</h3><h4 id="2-1-1-使用内容分发网络（Content-Delivery-Network，CDN）"><a href="#2-1-1-使用内容分发网络（Content-Delivery-Network，CDN）" class="headerlink" title="2.1.1 使用内容分发网络（Content Delivery Network，CDN）"></a>2.1.1 使用内容分发网络（Content Delivery Network，CDN）</h4><p>通过在现有的Internet中增加一层新的网络架构，将网站的内容发布到最接近用户的 cache服务器内，通过DNS负载均衡的技术，<strong>判断用户来源就近访问cache服务器取得所需的内容</strong>。深圳用户访问遥远的美国服务器，当然不理想了。把静态内容分布到CDN可以减少用户响应时间20%或更多。</p>
<h4 id="2-1-2-静态资源缓存，移动端离线缓存"><a href="#2-1-2-静态资源缓存，移动端离线缓存" class="headerlink" title="2.1.2 静态资源缓存，移动端离线缓存"></a>2.1.2 静态资源缓存，移动端离线缓存</h4><p>如果可以减少服务端的负担，在应用离线时可使用资源或加载资源更快，岂不乐哉？<br>缓存利用可包括：添加 Expires 头，配置 ETag，使 Ajax 可缓存等。其实，恰当的缓存设置可以大大的减少 HTTP请求，也可以节省带宽 。</p>
<ul>
<li>配置 ETag：即If-None-Match: 上次 ETag 的内容。浏览器会发出请求询问服务端，资源是否过期；服务端发现,没有过期，直接返回一个状态码为 304、正文为空的响应，告知浏览器使用本地缓存；如果资源有更新，服务端返回状态码 200、Etag 和正文。这个过程被称之为 HTTP 的协商缓存，通常也叫做弱缓存。</li>
<li>添加 Expires 头：服务端通过响应头告诉浏览器，在什么时间之前（Expires）或在多长时间之内（Cache-Control: Max-age=xxx），不要再请求服务器了。这个机制我们通常称之为 HTTP 的强缓存。一般会对 CSS、JS、图片等资源使用强缓存，而入口文件（HTML）一般使用协商缓存或不缓存。</li>
<li><p>AppCache：</p>
<p>  AppCache主要利用manifest 文本文件，告知浏览器被缓存的内容以及不缓存的内容。<br><img src="//img.aotu.io/wangcainuan/2016-03-16-optimization/离线存储.jpg" alt="img"></p>
<p>  manifest 文件可分为三个部分：<br>  （1） CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存，等价于CACHE<br>  （2） NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存<br>  （3） FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面    </p>
<p>  使用AppCache方案的步骤：<br>  （1） 整理出需要缓存的静态文件列表，如juqery.js和gb.css。<br>  （2） 配置服务器支持。<br>  （3） 确定内容更新机制和浏览器兼容方案。</p>
</li>
</ul>
<ul>
<li>LocalStorage：用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</li>
</ul>
<h3 id="2-2-省着点用-网络"><a href="#2-2-省着点用-网络" class="headerlink" title="2.2 省着点用-网络"></a>2.2 省着点用-网络</h3><h4 id="2-2-1-减少请求数"><a href="#2-2-1-减少请求数" class="headerlink" title="2.2.1 减少请求数"></a>2.2.1 减少请求数</h4><p>可通过以下方式减少请求数：</p>
<ul>
<li>小图片合并雪碧图；</li>
<li>JS、CSS文件选择性合并；</li>
<li>避免重复的资源请求。</li>
</ul>
<p>减少请求数对于速度优化来说最重要最有效的，特别是网络差的用户。一个完整的请求需要经过域名解析以及DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据的过程；每个请求都需要携带数据，因此每个请求都需要占用带宽；浏览器进行并发请求的请求数是有上限的。请求多了的情况，明显增加了网页的响应时间。一个页面由多个模块拼接而成，几个模块中请求了同样的资源时，就会导致资源的重复请求。</p>
<h4 id="2-2-2-减少文件大小（减少请求带宽）"><a href="#2-2-2-减少文件大小（减少请求带宽）" class="headerlink" title="2.2.2 减少文件大小（减少请求带宽）"></a>2.2.2 减少文件大小（减少请求带宽）</h4><ul>
<li>压缩CSS、JS、图片；</li>
<li>尽可能控制DOM节点数；</li>
<li>精简css、 JavaScript，移除注释、空格、重复css和脚本。</li>
<li>开启Gzip，Gzip的思想就是把文件先在服务器端进行压缩，且压缩率达到85%，然后再传输，传输完毕后浏览器会 重新对压缩过的内容进行解压缩，并执行。。好处在于Gzip的支持已经很好，且爬虫可识别，压缩率达到66%-85%显著减少了文件传输的大小。另外，gzip对pdf文件的压缩效果不大，而且会浪费CPU。</li>
</ul>
<h4 id="2-2-3-合理使用静态资源域名"><a href="#2-2-3-合理使用静态资源域名" class="headerlink" title="2.2.3 合理使用静态资源域名"></a>2.2.3 合理使用静态资源域名</h4><p><strong>域名的要求是短小且独立</strong>。<br>短小可以减少头部开销，因为域名越短请求头起始行的 URI 就越短。之所以要求独立，因为独立域名不会共享主域的 Cookie，可以有效减小请求头大小，这个策略一般称之为 Cookie-Free Domain；另外一个原因是浏览器对相同域名的并发连接数限制，一般允许同域名并发 6~8 个连接，域名不是越多越好，每个域名的第一个连接都要经历 DNS 查询（DNS Lookup），导致会耗费一定的时间，控制域名使用在2-4个之间。另外注意：同一静态资源在不同页面被散列到不同子域下，会导致无法利用 HTTP 缓存。</p>
<h4 id="2-2-4-使用HTTP-2"><a href="#2-2-4-使用HTTP-2" class="headerlink" title="2.2.4 使用HTTP 2"></a>2.2.4 使用HTTP 2</h4><p>HTTP 2 相比 HTTP 1.1 的更新大部分集中于：</p>
<ul>
<li><strong>多路复用</strong>：多路复用很好地解决如何让重要资源尽快加载这个问题。同域名下或者不同域但是同时满足同一个 IP以及使用同一个证书的这两个条件中的所有通信都在<strong>单个连接</strong>上完成，此连接上同时打开任意数量的双向数据流（ HTTP 1.1 有连接数限制）。使用多域名加上相同的 IP 和证书部署 Web 服务有特殊的意义：让支持 HTTP/2 的终端只建立一个连接，用上 HTTP/2 协议带来的各种好处；而只支持 HTTP/1.1 的终端则会建立多个连接，达到同时更多并发请求的目的。</li>
<li><strong>HEAD 压缩</strong>：HTTP/2 将请求和响应数据分割为更小的帧，并对它们采用二进制编码（ Binary Framing ）。在 HTTP/1 中，HTTP 请求和响应都是由「状态行、请求 / 响应头部、消息主体」三部分组成，状态行和头部却没有经过任何压缩，直接以纯文本传输。如下图的比较：<br> <img src="//img.aotu.io/wangcainuan/2016-03-16-optimization/http2.png" alt="img"><br>在 HTTP/2 中，每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。</li>
<li><strong>请求优先级</strong>：服务器可以根据流的优先级，控制资源分配(CPU、内存、带宽)，而在响应数据准备好之后，优先将最高优先级的帧发送给客户端。</li>
<li><strong>服务器推送</strong>：启动Server Push，意味着服务端可以在发送页面HTML时主动推送其它资源，有自己独立的URL，可以被浏览器缓存；如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送 RST_STREAM 帧来拒收。</li>
</ul>
<h3 id="2-2-学会持家，让家变得简洁漂亮-客户端"><a href="#2-2-学会持家，让家变得简洁漂亮-客户端" class="headerlink" title="2.2 学会持家，让家变得简洁漂亮-客户端"></a>2.2 学会持家，让家变得简洁漂亮-客户端</h3><ul>
<li>使用外链CSS和JS，CSS放头，JS放尾，防止阻塞以减少对并发下载的影响，尽早刷新文档的输出。</li>
<li>html的代码优化，如：<ul>
<li>避免空的图片src；</li>
<li>协议自适应，减少html文件大小，将<a href="https://和http://都替换成//。" target="_blank" rel="external">https://和http://都替换成//。</a></li>
</ul>
</li>
<li>css的代码优化，如：<ul>
<li>建议使用类选择器，访问比较快；</li>
<li>不建议使用很长的base64；</li>
<li>避免CSS表达式；</li>
<li>避免使用Filters。</li>
</ul>
</li>
<li>js的代码优化，如：<ul>
<li>避免使用eval和width；</li>
<li>减少作用域链查找；</li>
<li>减少DOM访问，尽量缓存DOM；</li>
<li>充分利用事件委托；</li>
<li>减少Repaint（重绘）和Reflow（重排）最好通过批量更新元素减少重排次数，如设置类class统一更新样式，在添加多个li</li>
<li>元素将会触发多次页面重排的情况下使用 DOM fargment 在内存中创建完整的 DOM 节点，然后再一次性添加到 DOM 中。</li>
</ul>
</li>
<li>图片格式的选择：<ul>
<li>颜色较为丰富的图片而且文件比较大的（40KB - 200KB）或者有内容的图片优先考虑 jpg；图标等颜色比较简单、文件体积不大、起修饰作用的图片，优先考虑使用 PNG8 格式；图像颜色丰富而且图片文件不太大的（40KB 以下）或有半透明效果的优先考虑 PNG24 格式。</li>
<li>条件允许的，使用新格式WEBP和BPG。</li>
<li>用SVG和ICONFONT代替简单的图标。</li>
<li>用<a href="https://isux.tencent.com/font-spider.html" target="_blank" rel="external">字蛛</a>来代替艺术字体切图，它可剔除没有使用的字符，从而解决中文字体过大的问题，并编码成跨平台兼容的格式。</li>
</ul>
</li>
<li>合理分配资源加载时间，按需加载，包括CSS、JS文件以及图片、业务模块等。<br>根据我们网页最初加载需要的最小内容集推断其他内容延迟加载；无条件提前加载公共内容或根据用户行为推断提前加载某些内容，如根据搜索框输入的文字来判断加载的内容。加载机制如下：<ul>
<li>预加载</li>
<li>Dom Ready后加载</li>
<li>onLoad后加载</li>
<li>滚动加载</li>
</ul>
</li>
<li>减少DNS 查询：DNS 查询一般需要几毫秒到几百毫秒，移动环境下会更慢。我们可以预先读取DNS，减少用户等待时间。<br><img src="//img.aotu.io/wangcainuan/2016-03-16-optimization/dns_prefetch.jpg" alt="img"></li>
</ul>
<h2 id="3-稳定性"><a href="#3-稳定性" class="headerlink" title="3 稳定性"></a>3 稳定性</h2><p>稳定性的第一要求是可用。最起码的要求是页面得出来，要不然没法用了。<br>其次讲究的是页面的可维护性，假如页面挂了，多久可以恢复过来，另外考虑页面挂的期间是否可以采取静态页面处理等方式。<br>页面的稳定性其实和前端安全挂钩，即使页面可以出来了，但是不能保证不会被黑掉，下文从前端安全的方面讲解。</p>
<h3 id="3-1-常见攻击："><a href="#3-1-常见攻击：" class="headerlink" title="3.1 常见攻击："></a>3.1 常见攻击：</h3><ul>
<li><p>XSS (Cross Site Script) ，跨站脚本攻击，往Web页面里插入恶意html代码。特点是攻击者的代码必须能获取用户浏览器端的执行权限，要杜绝此类攻击出现可以在入口和出口进行严格的过滤。<br>  三种类型：<br>  （1） 反射型XSS：一次性；将包含注入脚本的恶意链接发送给受害者。<br>  （2） 持久型XSS：用户输入的数据“存储”在服务器端，比如一条包含XSS代码的留言。<br>  （3） DOM XSS：使用一些eval等有输出的语句意味着多了一份被XSS的风险。</p>
<p>  应对策略：</p>
<ul>
<li>当恶意代码值被作为某一标签的内容显示：在不需要html输入的地方对html 标签及一些特殊字符( ” &lt; &gt; &amp; 等等 )做过滤，将其转化为不被浏览器解释执行的字符。</li>
<li>当恶意代码被作为某一标签的属性显示，通过用 “将属性截断来开辟新的属性或恶意方法：属性本身存在的 单引号和双引号都需要进行转码；对用户输入的html 标签及标签属性做白名单过滤，也可以对一些存在漏洞的标签和属性进行专门过滤。</li>
</ul>
</li>
</ul>
<ul>
<li><p>CSRF(Cross Site Request Forgery)，跨站点伪造请求，通过伪造连接请求在用户不知情的情况下，让用户以自己的身份来完成攻击者需要达到的一些目的。</p>
</li>
<li><p>cookie劫持，通过获取页面的权限，在页面中写一个简单的到恶意站点的请求，并获取用户的cookie登录某些站点。</p>
</li>
</ul>
<p>对于crsf 和cookie 劫持的策略：</p>
<ul>
<li>通过 referer、token 或者 验证码 来检测用户提交。</li>
<li>尽量不要在页面的链接中暴露用户隐私信息。</li>
<li>对于用户修改删除等操作最好都使用post 操作 。</li>
<li>避免全站通用的cookie，严格设置cookie的域。</li>
</ul>
<h3 id="3-2-数据通道安全"><a href="#3-2-数据通道安全" class="headerlink" title="3.2 数据通道安全"></a>3.2 数据通道安全</h3><p>国内的众多网站都没有实现全站HTTPS。这是目前为止最重要的一步，所有的数据在发送之前就会被加密，攻击者无法查看或篡改数据包的内容。HTTPS可以理解为HTTP+SSL/TLS，通过数据加密、校验数据完整性和身份认证三种机制来保障安全。HTTPS的缺点是网站在加上TLS证书时，可能导致RTT往返时延增加，并且 HTTPS通信过程的非对称和对称加解密计算会产生更多的服务器性能和时间上的消耗，但是这是可以优化的，这里就不细说了。</p>
<h3 id="3-3浏览器安全"><a href="#3-3浏览器安全" class="headerlink" title="3.3浏览器安全"></a>3.3浏览器安全</h3><h4 id="3-3-1-同源策略"><a href="#3-3-1-同源策略" class="headerlink" title="3.3.1 同源策略"></a>3.3.1 同源策略</h4><p>首先了解一下同源策略：</p>
<ul>
<li>源指的是有相同的HOST、相同的协议、相同的端口。</li>
<li>同源策略以源为单位，把资源天然分隔，保护了用户的信息安全。</li>
<li>绕过同源策略让javascript访问其他源的资源的方法，如：JSONP、CORS、flash等。</li>
<li>同源策略不是绝对安全的，面对很多攻击是无能为力的，比如XSS，因为此时攻击者就在同源之内。</li>
</ul>
<p>不建议使用JSONP，因为JSONP通常在脚本中写一个回调函数，然后把回调函数的名字写在请求的URL中，因此如果请求数据的服务器被黑了，那么黑客就能在返回的数据中植入恶意代码，从而窃取用户的隐私信息。</p>
<p>跨域资源共享CORS允许资源提供方在响应头中加入一个特殊的标记，使你能通过XHR来获取、解析并验证数据。这样就能避免恶意代码在你的应用中执行。在响应头中加入的标记如下：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Access</span>-Control-Allow-Origin: allowed origins</div></pre></td></tr></table></figure>
<p>如果对Access–Control-Allow-Origin设置为*其实是比较危险的，如果没有携带会话认证意味着信息被公开在全网，建议设置具体的域名，而且跨域的时候记得带上session id；严格审查请求信息，比如请求参数，还有http头信息，因为 http头可以伪造。</p>
<h4 id="3-3-2-CSP-Content-Security-Policy"><a href="#3-3-2-CSP-Content-Security-Policy" class="headerlink" title="3.3.2 CSP(Content Security Policy)"></a>3.3.2 CSP(Content Security Policy)</h4><p>CSP指定网站上所有脚本和图片等资源的源站点，也能阻止所有内联（inline）的脚本和样式。即使有人在页面评论或者留言中嵌入了脚本标签，这些脚本代码也不会被执行。可通过两种方式设置，如果 HTTP 头与 Meta 定义同时存在，则优先采用 HTTP 头中的定义：</p>
<ul>
<li>通过 HTTP 头，比如只允许脚本从本源加载：Content-Security-Policy: script-src ‘self’，其中script-src ‘self’是策略。</li>
<li><p>通过HTML的Meta标签，比如只允许脚本从本源加载：</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"script-src 'self'"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>其他策略：</p>
<ul>
<li>script-src – 设置可以接受的JavaScript代码的源站点</li>
<li>style-src – 设置可以接受的CSS样式代码的源站点</li>
<li>connect-src – 定义浏览器可以通过XHR、WebSocket或者 EventSource访问哪些站点</li>
<li>font-src – 设置可以接受的字体文件的源站点</li>
<li>frame-src – 定义浏览器可以通过iframe访问哪些站点</li>
<li>img-src – 设置可以接受的图片的源站点</li>
<li>media-src – 设置可以接受的音频和视频文件的源站点</li>
<li>object-src – 设置可以接受的Flash和其它插件的源站点</li>
</ul>
<p>缺点：<br>默认情况下，所有的内联JavaScript脚本都不会被执行，因为浏览器无法区分自己的内联脚本和黑客注入的脚本。<br>CSP还会默认阻止所有eval()风格的代码的执行，包括setInterval/setTimeout中的字符串和类似于new Function(‘return false’)之类的代码。</p>
<h4 id="3-3-3-iframe-沙箱环境"><a href="#3-3-3-iframe-沙箱环境" class="headerlink" title="3.3.3 iframe 沙箱环境"></a>3.3.3 iframe 沙箱环境</h4><p>利用iframe进行跨源：HTML5为iframe提供了安全属性 sandbox，iframe的能力将会被限制。</p>
<h4 id="3-3-4-Secure和HttpOnly属性"><a href="#3-3-4-Secure和HttpOnly属性" class="headerlink" title="3.3.4 Secure和HttpOnly属性"></a>3.3.4 Secure和HttpOnly属性</h4><p>Secure能确保cookie的内容只能通过SSL连接进行传输。Secure和HttpOnly属性告诉浏览器cookie的内容只能分别通过HTTP(S)协议进行访问，从而避免了被轻易窃取，比如禁止从JavaScript中的document.cookie访问，因此cookie在浏览器document中不可见了。如果单独使用的话，无法全面抵御跨站点脚本攻击，通常和其他技术组合使用。使用方法如下：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-Cookie: <span class="xml"><span class="tag">&lt;<span class="name">name</span>&gt;</span></span>=<span class="xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span></span>[<span class="string">; &lt;name&gt;=&lt;value&gt;</span>] [<span class="string">; expires=&lt;date&gt;</span>][<span class="symbol">; domain=&lt;domain_name&gt;</span>][<span class="string">; path=&lt;some_path&gt;</span>][<span class="symbol">; secure</span>][<span class="string">; HttpOnly</span>]</div></pre></td></tr></table></figure></p>
<h4 id="3-3-5-其他安全相关的HTTP-头"><a href="#3-3-5-其他安全相关的HTTP-头" class="headerlink" title="3.3.5 其他安全相关的HTTP 头"></a>3.3.5 其他安全相关的HTTP 头</h4><ul>
<li><p>X-Content-Type-Options 告诉浏览器相信此服务器下发的资源的类型，防止类型嗅探攻击。</p>
</li>
<li><p>HPKP(Public Key Pinning) Public Key Pinning 是一个response 头，用来检测一个证书的公钥是否发生了改变，防止中间人攻击。</p>
</li>
<li><p>HSTS (HTTP Strict-Transport-Security) 强制使用TSL作为数据通道。</p>
</li>
</ul>
<h3 id="3-4-HTML5-对web安全的影响"><a href="#3-4-HTML5-对web安全的影响" class="headerlink" title="3.4 HTML5 对web安全的影响"></a>3.4 HTML5 对web安全的影响</h3><p>html5有很多新的特性能力，然而能力越大，被攻破后的危险就越大。<br>HTML5 对xss的影响主要体现在:</p>
<ul>
<li>攻击面更大，html5带来更多的标签和更多的属性如<code>&lt;video&gt;,&lt;audio&gt;,&lt;canvas&gt;</code>等；</li>
<li>危害更大，HTML5更多的资源可以被xss利用。黑客可以利用浏览器的一切权限，比如本地存储、GEO、服务器推送机制WebSocket，js多线程执行Webworker等。</li>
</ul>
<p>比如localstorage只能通过js设置和获取，导致的结果是不能像cookie一样设置httponly等属性，所以localstorage中不能存放敏感信息，最好能够在服务端进行加密，可以配合CORS来获取网站的localstorage的信息。</p>
<h2 id="4-响应式"><a href="#4-响应式" class="headerlink" title="4 响应式"></a>4 响应式</h2><p>响应式布局简而言之，就是一个网站能够兼容多个终端，可以为不同终端的用户提供更加舒适的界面和更好的用户体验。</p>
<ul>
<li>基于栅格布局规划响应式设计，每个模块尽可能严格遵循栅格布局，符合栅格的小模块能很灵活的适应多个分辨率的展示。</li>
<li>拥抱flexbox。</li>
<li>使用动态的字体大小单位+rem单位使用。</li>
<li>使用CSS3 mediaQuery 技术响应用户设备。</li>
<li>利用百分比。</li>
<li>对低版本浏览器使用JS动态响应。</li>
<li>一套“自适应”素材兼容各种分辨率，提升页面性能，比如自适应的图片/视频素材。</li>
</ul>
<p>比如<a href="http://aotu.io/notes/">凹凸实验室博客</a>页面在PC端、iPad、手机端的排版：<br>PC端：<br><img src="//img.aotu.io/wangcainuan/2016-03-16-optimization/凹凸实验室1.jpg" alt="img"></p>
<p>iPad：<br><img src="//img.aotu.io/wangcainuan/2016-03-16-optimization/凹凸实验室2.jpg" alt="img"></p>
<p>手机端：<br><img src="//img.aotu.io/wangcainuan/2016-03-16-optimization/凹凸实验室3.jpg" alt="img"></p>
<h2 id="5-兼容性"><a href="#5-兼容性" class="headerlink" title="5 兼容性"></a>5 兼容性</h2><p>估计很多人对这句话都有体会：IE虐我千百遍，我待IE如初恋。当然，除了 IE 上有兼容性问题，其他浏览器比如 Android 上的低版本浏览器也有较多问题。<br>是否继续保持对低端浏览器的兼容性，我们可以用数据跟产品经理或者老板说话，减少我们的工作量，最好在项目之前就定下来支持最低支持的版本是什么，然后设计一个对应兼容方案。以下是百度统计的2015年的浏览器市场份额数据：</p>
<p><img src="//img.aotu.io/wangcainuan/2016-03-16-optimization/浏览器市场份额报告_2015.01-2015.12.jpg" alt="img"></p>
<p>兼容性的原则：<strong>渐进增强与平稳退化</strong>。就是说，在低级浏览器能够保证其可用性和可访问性；渐进增强，在保证代码、页面在低级浏览器中的可用性及可访问性的基础上，逐步增加功能及用户体验。<br>如果出现兼容性问题了，怎么处理：</p>
<ol>
<li>确认触发场景，什么浏览器、版本、什么情况下会出现这个问题，做到稳定复现。</li>
<li>找到问题原因，为什么会出现这样的问题（自己琢磨、网上搜、问同事）。</li>
<li>确定解决办法：参考现成的规范，比如某些属性不能使用以及一些hack的处理。</li>
<li>积累兼容性处理方法。</li>
</ol>
<p>淘宝首页在兼容性上做了一个小创新：Html钩子<br>在html上加上操作系统、浏览器内核、浏览器类型、CSS3动画支持、IE各版本类，好处在于：</p>
<ul>
<li>渐进增强 可以实现不同浏览器下差异化体验。</li>
<li>能快速定位并修复某个浏览器下的特定bug。</li>
</ul>
<p>淘宝首页html钩子：<br><img src="//img.aotu.io/wangcainuan/2016-03-16-optimization/淘宝首页浏览器类.png" alt="img"></p>
<p>兼容性问题是老生常谈的问题了，团队之间共同努力形成一个bug兼容性积累文档，是最好不过的了。</p>
<h2 id="6-搜索SEO"><a href="#6-搜索SEO" class="headerlink" title="6 搜索SEO"></a>6 搜索SEO</h2><h2 id="6-1-语义化"><a href="#6-1-语义化" class="headerlink" title="6.1 语义化"></a>6.1 语义化</h2><ul>
<li>标签语义化对搜索引擎友好，良好的结构和语义容易被搜索引擎抓取。</li>
<li>善用标题h1，h2，h3，h4，h5，h6，特别是h1和h2；H(x)标签中使用关键字，可提升排名。同时设置 rel=“nofollow”避免权重流失。</li>
<li>使用 HTML5 中的 Microdata 对 Web 页面上已经存在的数据提供附加的语义。Microdata 由名字 / 值（name/value）对组成，每一个词汇表定义一组命名的属性。对 Microdata 的支持可以影响搜索结果的显示，使得显示结果更加丰富，虽然不能影响搜索结果的排名，但是网站的流量可能会有所增加。类似的技术还有资源描述框架RDF、微格式Microformat 。</li>
</ul>
<h2 id="6-2-衡量站点关键词优化"><a href="#6-2-衡量站点关键词优化" class="headerlink" title="6.2 衡量站点关键词优化"></a>6.2 衡量站点关键词优化</h2><ul>
<li>站点内容以及关键词的选择。</li>
<li>描述标签、关键词标签、代替属性。</li>
<li>长尾关键词：非目标关键词但也可以带来搜索流量的关键词；例如，目标关键词是服装，其长尾关键词可以是男士服装、冬装、户外运动装等。长尾关键词基本属性是：可延伸性，针对性强，范围广。</li>
<li>关键词的分布情况。</li>
<li>关键词密度、看重：合理的关键字密度可获得较高的排名位置，密度过大会起到相反的效果。一般说来，在大多数的搜索引擎中，关键词密度在2%~8%是一个较为适当的范围，有利于网站在搜索引擎中排名。</li>
<li>是否存在作弊行为。</li>
</ul>
<h2 id="6-3-链接"><a href="#6-3-链接" class="headerlink" title="6.3 链接"></a>6.3 链接</h2><ul>
<li>优化文件目录结构和URL。URL应该有语义性，简短易懂。</li>
<li>通过推广暴露自己的链接，增加信任度。链接分为外向链接和内向（反向）链接，外向链接就是从本站点到其他站点，内向链接就是从其他站点到我的站点，可以尝试使用<a href="http://www.backlinkpro.net/" target="_blank" rel="external">反向链接生成器</a>。或者通过写软文、发布分类信息、发布博客文章来推广自己的网站。</li>
<li>锚文本 ：把关键词做一个链接，指向别的网页，这种形式的链接就叫作锚文本。搜索引擎可以根据指向某一个网页的链接的锚文本描述来判断该网页的内容属性。</li>
</ul>
<h2 id="6-4-良好的网站导航和sitemap"><a href="#6-4-良好的网站导航和sitemap" class="headerlink" title="6.4 良好的网站导航和sitemap"></a>6.4 良好的网站导航和sitemap</h2><p>网站需要有一个良好的导航，控制根目录和各子目录的关键，通过sitemap可以帮助网站主了解网站结构，也方便搜索引擎收录整个站点。</p>
<h2 id="7-其他优化"><a href="#7-其他优化" class="headerlink" title="7 其他优化"></a>7 其他优化</h2><h3 id="7-1-信息无障碍"><a href="#7-1-信息无障碍" class="headerlink" title="7.1 信息无障碍"></a>7.1 信息无障碍</h3><p>信息无障碍一般可以从以下几点入手：</p>
<ul>
<li>添加landmark角色，在页面主要操作区域（搜索框、登录框、列表内容）添加“role”标签加以说明。landmark值一般有：banner（banner）、complementary（辅助内容区）、contentinfo（网站信息和版权）、form（表单）、main（主内容区）、navigation（导航区）、search（搜索区），如：<br> <img src="//img.aotu.io/wangcainuan/2016-03-16-optimization/role.jpg" alt="img"></li>
<li>提供文字替代方案。比如给图片或其他元素提供适当的alt属性或者title属性的值。</li>
<li>表单使用label标签。</li>
<li>使用heading做信息架构。读屏软件提供了快捷键切换heading，相关用户可通过读屏软件了解我们的网站信息架构。</li>
<li>给页面里重要区块和功能添加accesskey，可以快速定位。</li>
<li>触发界面转换需设置焦点。比如，对于浮层需要注意避免“Tab”焦点中断。</li>
<li>考虑到老年眼睛老花，因此需要保证字体够大，或者网站可缩放。</li>
</ul>
<p>具体可参考<a href="http://www.qq.com/demo/accessibility.htm" target="_blank" rel="external">无障碍阅读</a></p>
<h3 id="7-2-微动画"><a href="#7-2-微动画" class="headerlink" title="7.2 微动画"></a>7.2 微动画</h3><p>通过前端动画技术给页面进行优化，比如：</p>
<ul>
<li>商品图片hover效果</li>
<li>小图标旋转效果</li>
<li>购物车微动画</li>
<li>loading动画，当加载页面需要一定时间，特别是移动端，可以通过有趣的loading动画吸引用户，这里有一些有趣的<a href="http://www.instantshift.com/2016/01/22/free-html5-css3-loaders-preloaders/" target="_blank" rel="external">loading动画</a></li>
</ul>
<h3 id="7-3-requireJs"><a href="#7-3-requireJs" class="headerlink" title="7.3 requireJs"></a>7.3 requireJs</h3><p>requireJs框架特性：</p>
<ul>
<li>前端设计及开发人员统一代码规范。</li>
<li>按需加载。</li>
<li>AMD规范：以简单而优雅的方式统一了JavaScript的模块定义和加载机制，降低了学习和使用各种框架的门槛，能够以一种统一的方式去定义和使用模块，提高开发效率，降低了应用维护成本。</li>
<li>与Grunt结合可实现一站式工作流。</li>
</ul>
<h3 id="7-4-多标签状态同步"><a href="#7-4-多标签状态同步" class="headerlink" title="7.4 多标签状态同步"></a>7.4 多标签状态同步</h3><p>场景如下：<br>页面一：去一个网站买东西，未登录状态下，进入首页；<br>页面二：然后新窗口打开任意页面，登录并成功返回。<br>再次访问页面一，发现页面还是未登录状态，实际上用户已经登录了，这种体验是很差的。我们是不是有什么办法可以实现多标签状态同步呢？有的，利用Page Visibility：</p>
<ul>
<li>页面可见性API就是表示网页可见还是不可见的。页面可见性API有两个属性，一个事件，如下：<ul>
<li>document.hidden: Boolean值，表示当前页面可见还是不可见</li>
<li>document.visibilityState: 返回当前页面的可见状态，状态值有hidden、visible、prerender、preview。</li>
<li>visibilitychange: 当可见状态改变时候触发的事件。</li>
</ul>
</li>
<li>浏览器支持：IE10+、Chrome、FireFox。</li>
<li>多标签状态同步demo: <a href="http://www.zhangxinxu.com/study/201211/page-visibility-api-login-same-step-1.html" target="_blank" rel="external">网页可见性API与登录同步</a></li>
</ul>
<h3 id="7-5-个性化推荐"><a href="#7-5-个性化推荐" class="headerlink" title="7.5 个性化推荐"></a>7.5 个性化推荐</h3><ul>
<li>HTML5 Geolocation API获得用户的地理位置，进行基于地理位置的运营。</li>
</ul>
<h2 id="8-参考"><a href="#8-参考" class="headerlink" title="8 参考"></a>8 参考</h2><p><a href="http://www.jianshu.com/p/9bc4951c9d80" target="_blank" rel="external">能提高前端工作效率的那些事</a><br><a href="http://vdisk.weibo.com/s/cSKQveSBNY4yH" target="_blank" rel="external">基于Gulp的前端自动化</a><br><a href="http://vdisk.weibo.com/s/cSKQveSBEu3e5" target="_blank" rel="external">繁星网的前端性能优化之路</a><br><a href="http://www.cnblogs.com/lei2007/archive/2013/08/16/3262897.html" target="_blank" rel="external">前端性能优化—-yahoo前端性能团队总结的35条黄金定律</a><br><a href="http://vdisk.weibo.com/s/cSKQveSBEudR2" target="_blank" rel="external">前端性能数据之采集和分析</a><br><a href="http://www.infoq.com/cn/news/2015/06/web-performance-api" target="_blank" rel="external">Web性能API——帮你分析Web前端性能</a><br><a href="http://www.zhihu.com/question/20984284" target="_blank" rel="external">前端工程师如何系统地整理和累积兼容性相关的知识？</a><br><a href="https://isux.tencent.com/play-with-html5-optimize.html" target="_blank" rel="external">玩转HTML5移动页面(优化篇)</a><br><a href="https://imququ.com/post/http2-and-wpo-1.html" target="_blank" rel="external">HTTP/2 与 WEB 性能优化（一）</a><br><a href="https://imququ.com/post/http2-and-wpo-2.html" target="_blank" rel="external">HTTP/2 与 WEB 性能优化（二）</a><br><a href="https://imququ.com/post/http2-and-wpo-3.html" target="_blank" rel="external">HTTP/2 与 WEB 性能优化（三）</a><br><a href="https://imququ.com/post/header-compression-in-http2.html" target="_blank" rel="external">HTTP/2 头部压缩技术介绍</a><br><a href="http://www.imweb.io/topic/568958714c44bcc56092e409" target="_blank" rel="external">从零开始学web安全（1）</a><br><a href="https://blog.wilddog.com/?p=290&amp;utm_source=baidu.keywords&amp;utm_medium=cpc&amp;utm_content=blog&amp;utm_campaign=orangemarch#more-290" target="_blank" rel="external">关于Web安全，99%的网站都忽略了这些</a><br><a href="http://www.jb51.net/web/24351.html" target="_blank" rel="external">网页前端常见的攻击方式和预防攻击的方法</a><br><a href="https://segmentfault.com/a/1190000000382944" target="_blank" rel="external">Web客户端安全性最佳实践</a><br><a href="https://segmentfault.com/a/1190000003756563" target="_blank" rel="external">HTML5 安全问题解析</a><br><a href="https://isux.tencent.com/ten-steps-enhance-web-accessibility.html" target="_blank" rel="external">10步大幅提升网站可访问性</a><br><a href="http://www.zhangxinxu.com/wordpress/2012/11/page-visibility-api-introduction-extend/" target="_blank" rel="external">Page Visibility(页面可见性)API介绍、微拓展</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;篇幅可能有点长，我想先聊一聊阅读的方式，我希望你阅读的时候，能够把我当作你的竞争对手，你的梦想是超越我。你想超越我，就得了解我懂什么对吧，好，开始阅读~ ~ 哈哈哈 ~ ~ ~&lt;/p&gt;
&lt;p&gt;历时144000000毫秒出山的前端优化篇，若你问我有什么感悟？&lt;br&gt;那我告诉你，看到毫秒啊，火箭啊，这些与优化相关的词，都有莫名的亲切感。&lt;br&gt;本文主要从&lt;strong&gt;工作效率&lt;/strong&gt;、&lt;strong&gt;速度性能&lt;/strong&gt;、&lt;strong&gt;稳定性&lt;/strong&gt;、&lt;strong&gt;响应式&lt;/strong&gt;、&lt;strong&gt;兼容性&lt;/strong&gt;、&lt;strong&gt;搜索SEO&lt;/strong&gt;、&lt;strong&gt;信息无障碍&lt;/strong&gt;等方面进行讲解。&lt;br&gt;前端优化是一个让人技术提升的point，希望你也能从这里学到一些东西。&lt;br&gt;
    
    </summary>
    
      <category term="资源合集" scheme="https://aotu.io/cates/%E8%B5%84%E6%BA%90%E5%90%88%E9%9B%86/"/>
    
    
      <category term="工作效率" scheme="https://aotu.io/tags/%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/"/>
    
      <category term="速度性能" scheme="https://aotu.io/tags/%E9%80%9F%E5%BA%A6%E6%80%A7%E8%83%BD/"/>
    
      <category term="安全性" scheme="https://aotu.io/tags/%E5%AE%89%E5%85%A8%E6%80%A7/"/>
    
      <category term="响应式" scheme="https://aotu.io/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
      <category term="兼容性" scheme="https://aotu.io/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
      <category term="搜索SEO" scheme="https://aotu.io/tags/%E6%90%9C%E7%B4%A2SEO/"/>
    
      <category term="信息无障碍" scheme="https://aotu.io/tags/%E4%BF%A1%E6%81%AF%E6%97%A0%E9%9A%9C%E7%A2%8D/"/>
    
      <category term="前端优化" scheme="https://aotu.io/tags/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>某超长文档的探索之路</title>
    <link href="https://aotu.io/notes/2016/03/15/jcloud-sum/"/>
    <id>https://aotu.io/notes/2016/03/15/jcloud-sum/</id>
    <published>2016-03-15T08:18:00.000Z</published>
    <updated>2016-10-20T07:06:32.417Z</updated>
    
    <content type="html"><![CDATA[<p>所谓的文档, 大概就是指那种洋洋洒洒写了不下几万字, 最后没有多少人会看完的东西. 对, 比技术不一定, 但比字数谁都赢不了我! </p>
<a id="more"></a>
<p>这次京东云改版的项目, 除了需要搭建一个放置京东云文档的平台, 还包括了文档录入的工作. 之前使用<a href="http://hexo.io" target="_blank" rel="external"><strong>Hexo</strong></a>做过<a href="http://aotu.io/halojs/"><strong>HaloJS</strong></a>的文档平台, 在文档录入的时候并没有碰到太多问题. 本以为搭建文档页面也就仅此而已, 直到碰到了长达104页的doc文档…</p>
<h3 id="搭建框架"><a href="#搭建框架" class="headerlink" title="搭建框架"></a>搭建框架</h3><p>不同于其他零散的页面, 文档页面是一整个系列的, 具有相同的页面结构. 页面头部, 底部, 导航等组件. 如果像平时制作静态页面那样每个页面都从一个空白的模板html文件开始下手, 在开发量达到一定程度的时候, 页面整体的维护就会非常困难. 首先是无法很痛快地进行某些公共模块的修改: 就算只是在底部加多一个链接, 或者在导航中删除一个条目, 我们都需要对每个页面都进行手动修改. 另外, 页面的资源管理会越来越难. 每个页面都需要引用整体页面的样式文件与脚本文件, 还都有页面私有的样式文件, 脚本文件, 还有图片文件等. 如果这些资源共用一个文件夹, 有时候就会面临文件命名的难题. </p>
<p>如上面说, 文档页面可谓是重复工作最严重的一种页面. 好在搭建框架的小伙伴非常给力, 使用了同样很给力的开源的前端工程化开发工具<a href="https://github.com/o2team/athena" target="_blank" rel="external">Athena</a>,自带支持代码热更新的预览服务, 自带压缩代码, 编译sass/less的工具, 自带上传sftp的工具等等. 而对于这个需求来说, 最好用的莫过于ejs模板语法的支持了. 有了模板, 公共的组件在不同页面都可以随意引用, 工作量减少了非常多. </p>
<p>每个页面都由组件组成, 平时写页面的时候只需要点名引用需要的组件. 搭建完成后, 使用Athena工具的build命令, 就可以将页面的静态文件输出. 对于这批文档的页面, 每个页面会被拆分为头部组件, 底部组件, 导航组件. 如果开发过程中某个组件产生变化, 只需要直接修改组件, 再重新运行build命令, 就可以使每个引用了这个组件的页面都一起变过来, 可谓十分方便.</p>
<h3 id="录入文档"><a href="#录入文档" class="headerlink" title="录入文档"></a>录入文档</h3><p>录入文档可能是这一整个需求最痛苦的工作了. 一百多页A4纸大小的DOC文档, 还需要依据设计稿重新设置样式, 是十分机械化的工作. 在这里, 我的小伙伴将文档中的不同样式建立为不同的组件, 比如一级标题组件, 或是二级标题组件等等. 这些组件使用起来就像下面这样:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">widget.load</span>('<span class="attr">doc_mod_list3</span>', &#123;</span></div><div class="line">  <span class="attr">title1:</span> '操作指南',</div><div class="line">  <span class="attr">item1:</span> ['挂载云硬盘','绑定公网<span class="attr">IP</span>','常见问题','主机数量','监控报警','删除云主机','绑定监控报警','重置密码','制作镜像'],</div><div class="line">  <span class="attr">title2:</span> '常见问题',</div><div class="line">  <span class="attr">item2:</span> ['主机数量','监控报警','删除云主机'],</div><div class="line">  <span class="attr">item3show:</span> <span class="attr">false</span></div><div class="line">&#125;) %&gt;</div></pre></td></tr></table></figure>
<p>组件本身是一个ejs模板:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;ul class="doc_mod_list3"&gt;</div><div class="line">  &lt;li class="item1"&gt;</div><div class="line">    &lt;div class="doc_mod_list3_title"&gt;&lt;%= title1 %&gt;&lt;/div&gt;</div><div class="line">    &lt;span class="doc_mod_list3_link"&gt;</div><div class="line">      &lt;% for (var i=0;i&lt;item1.length;i++) &#123; %&gt;</div><div class="line">        &lt;a href=""&gt;&lt;%= item1[i] %&gt;&lt;/a&gt;</div><div class="line">      &lt;% &#125; %&gt;</div><div class="line">      &lt;a href="" class="doc_mod_list3_lmore"&gt;更多&amp;gt;&amp;gt;&lt;/a&gt;</div><div class="line">    &lt;/span&gt;</div><div class="line">  &lt;/li&gt;</div><div class="line">  &lt;li class="item2"&gt;</div><div class="line">    &lt;div class="doc_mod_list3_title"&gt;&lt;%= title2 %&gt;&lt;/div&gt;</div><div class="line">    &lt;span class="doc_mod_list3_link"&gt;</div><div class="line">      &lt;% for (var i=0;i&lt;item2.length;i++) &#123; %&gt;</div><div class="line">        &lt;a href=""&gt;&lt;%= item2[i] %&gt;&lt;/a&gt;</div><div class="line">      &lt;% &#125; %&gt;</div><div class="line">      &lt;a href="" class="doc_mod_list3_lmore"&gt;更多&amp;gt;&amp;gt;&lt;/a&gt;</div><div class="line">    &lt;/span&gt;</div><div class="line">  &lt;/li&gt;</div><div class="line">  &lt;% if(item3show == true) &#123; %&gt;</div><div class="line">    &lt;li class="item3"&gt;</div><div class="line">      &lt;div class="doc_mod_list3_title"&gt;&lt;%= title3 %&gt;&lt;/div&gt;</div><div class="line">      &lt;span class="doc_mod_list3_link"&gt;</div><div class="line">        &lt;% for (var i=0;i&lt;item3.length;i++) &#123; %&gt;</div><div class="line">          &lt;a href=""&gt;&lt;%= item3[i] %&gt;&lt;/a&gt;</div><div class="line">        &lt;% &#125; %&gt;</div><div class="line">        &lt;a href="" class="doc_mod_list3_lmore"&gt;更多&amp;gt;&amp;gt;&lt;/a&gt;</div><div class="line">      &lt;/span&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">  &lt;% &#125; %&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>这样一来, 我们写页面的工作, 变成了写ejs组件, 再用widget.load函数加载自定义的组件, 用getCSS/getJS函数调用对应的css/js文件资源. 把页面中比较通用, 复杂的组件拆分出来, 有利于将页面模块化, 代码复用可以更爽快.</p>
<h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>具体到这个项目, 文档录入是个非常痛苦的活. 按照目前的方案, 文档里面的一级标题, 二级标题, 正文, 图片等, 都是由组件构成, 像<code>&lt;h3 class=“xxxx”&gt;xxxx&lt;/h3&gt;</code>这样的简单代码, 也被做成了组件. 个人认为这样的做法不太科学. 这种太过细小的组件反而使录入文档变成了十分痛苦的事情. 上面所说的情况, 一个标签可以解决的问题, 变成引用组件的工作后, 代码量并没有多少差别:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 声明组件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"doc_mod_title3"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 使用组件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">widget.load</span>('<span class="attr">doc_mod_title3</span>', &#123;</span></div><div class="line">  <span class="attr">title:</span> '京东云入门手册'</div><div class="line">&#125;) %&gt;</div></pre></td></tr></table></figure>
<p>左边是引用组件的写法, 右边是组件内部的代码. 可以看见, <strong>过度模块化导致了细小组件的产生</strong>. 这里应该有更加方便的做法. </p>
<p>Python中有个第三方模块docx2html, 实现了将docx文件转化为html代码的功能, 并且转化完的代码十分纯净, 只有html结构与内容, 不带样式, 很适合在导出后再重置样式. 针对这个项目, 我们可以做个小改造, 每个页面依然由头部, 导航还有底部组成, 而文档内容则可以定义一个css类<code>doc_mod_content</code>, 表示其中是文档的内容, 而文档的各种样式, 则写在这个类的后代选择器上. 如果标签的种类无法满足区分特定节点的需要, 还可以通过编辑器的搜索替换功能去批量添加特定的类. 这样的话, 首先是少去了开发组件的工作, 文档的录入也会轻松很多. 遗憾的是, 由于时间紧迫, 这个需求并没有使用这种方式. 过后有机会可以尝试. 文档录入本来就该是个轻松的活. </p>
<h3 id="导航优化"><a href="#导航优化" class="headerlink" title="导航优化"></a>导航优化</h3><p>对于普通的页面, 侧导航跟页面主体并不需要分开, 直接放置即可, 就像hexo的<a href="https://hexo.io/api/" target="_blank" rel="external">文档页面</a>一样. 但前面说过, 文档页是非常长的. 对于这种超长的页面, 使用上述的实现方式, 有可能会出现滚动到页面内容中间, 看不见导航的窘迫局面. </p>
<p><img src="//img.aotu.io/Littly/2016-03-15/hexo.png" alt="img"></p>
<p>看见这种情况, 产品的小伙伴就该找我们了. 重构哥哥, 我想让导航始终在视野里面. 你能实现不?<br>Of Course! 只需要把导航栏设置为position: fixed就ok了. 不过对于这种页面中同时还存在头部与底部的页面, 会比较麻烦. 跟交互的童鞋商量过后, 我们把方案确定了下来. 具体而言, 侧导航共有三种状态:</p>
<ol>
<li>导航条尚未滚动到页面顶部的状态, <code>position: static</code></li>
<li>导航条滚动到超出页面顶部的位置, <code>position: fixed</code></li>
<li>导航条底部与页面内容的底部对齐, <code>position: absolute; bottom: 0</code>,  或者使用JS控制导航条的底部对齐页面内容底部. </li>
</ol>
<p>再具体一点说, 这三种状态的触发条件分别是:</p>
<ol>
<li>页面滚动距离 &lt; 导航距离顶部的距离</li>
<li>页面滚动距离 &gt; 导航距离顶部的距离 &amp;&amp; 页面滚动距离 &lt; 内容的高度 + 内容距离顶部的距离 - 导航条的高度 + 导航条的滚动距离</li>
<li>剩下的情况. </li>
</ol>
<p>就算如此, 这样的实现还是会有一些问题存在, 比如在跳转到某个页面之后, 导航的高亮条目不一定会在视野中, 这会导致在不同页面间跳转的过程中, 导航条不固定, 找不到高亮条目的尴尬. </p>
<p><img src="//img.aotu.io/Littly/2016-03-15/out_of_view.png" alt="img"></p>
<p>在当前实现方式下, 并没有特别好的办法能解决这种情况. 不同页面的长度不是相同的, 导航的位置跟页面的位置关系处于上面三种状态中的哪一种也是难以预测的, 就更没办法将导航移入视野中了. 说到底, 这种情况都是由于页面和导航太长导致的. <a href="http://www.qcloud.com/product/cvm.html" target="_blank" rel="external">腾讯云</a>的文档页面也是这样处理的. </p>
<h4 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h4><p>那么, 在不缩短页面导航的情况下, 有没有办法做好这样的页面的效果呢? 答案是有的, 并且不止一种. </p>
<p>首先, 有一种比较折中的方案(当然, 要先问问产品的小伙伴同不同意), 把导航中的高亮条目抽出来放到导航的第一位. 参考各种基于JSDoc3的文档页面. 下面是<a href="http://pixijs.github.io/docs/" target="_blank" rel="external">PIXI</a>的文档: </p>
<p><img src="//img.aotu.io/Littly/2016-03-15/pixi.png" alt="img"></p>
<p>放到项目中的话, 这种办法大有曲线救国的味道: 不惜修改几十个页面中的导航顺序来达成高亮条目的固定. 这种机械化的工作, 做起来已经很累人. 如果做完后产品的小伙伴对效果不满意…. 是的, 还得几十个页面一个一个的改回来. 当然, 我们也可以预先把老版本备份一下, 不满意了就直接覆盖文件完事. 这一切做起来是那么的麻烦. 但如果是搭配着<a href="https://github.com/o2team/athena" target="_blank" rel="external">Athena</a>工具使用, 就简单多了. 导航栏组件中用数组menu来储存导航栏条目信息, 只需要用forEach就可以输出所有的菜单项. 如果要将高亮条目与第一项对调, 只需要一句话就完事:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// var menu, curIdx;</span></div><div class="line">menu.unshift(menu.splice(curIdx<span class="comment">/*高亮条目的索引*/</span>, <span class="number">1</span>)[<span class="number">0</span>]);</div><div class="line"><span class="comment">// menu.forEach(function (val, idx) &#123;...&#125;);</span></div></pre></td></tr></table></figure>
<p>是不是有点爽?</p>
<p>上面这种方法, 说实话是有点不完美的. 用户当然不希望侧导航的位置一直不固定. 在这里, 我们可以使用页面局部刷新技术来规避这个问题. 如果能够在跳转到其他文档的时候不刷新页面, 而是在脚本中通过异步请求获取到新的文档的内容. 这个内容可以是json, 也可以是一个html文档, 甚至是一个html片段. 过后我们再将其用合适的姿势展示在右侧内容区. 结果上看, 页面仅仅是刷新了内容区, 导航位置不会改变, 比起之前的版本, 效率还会更高. </p>
<h3 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h3><p>这个项目做下来, 最后还是留下了一些遗憾的地方. 迫于时间, 感觉手头还有很多的技术没用上, 或者还有许多的方案没实现. 要做好一个项目, 还是需要从项目一开始就与产品, 交互, 视觉等业务上游团队保持良好的沟通, 对整个项目拥有相当的了解, 闭门造车不可取, <strong>用户体验</strong>才是王道. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;所谓的文档, 大概就是指那种洋洋洒洒写了不下几万字, 最后没有多少人会看完的东西. 对, 比技术不一定, 但比字数谁都赢不了我! &lt;/p&gt;
    
    </summary>
    
      <category term="项目总结" scheme="https://aotu.io/cates/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="jcloud" scheme="https://aotu.io/tags/jcloud/"/>
    
      <category term="sum" scheme="https://aotu.io/tags/sum/"/>
    
  </entry>
  
  <entry>
    <title>让图片加载这件事儿变得更美好</title>
    <link href="https://aotu.io/notes/2016/03/09/img-loading-optimization-in-mobile/"/>
    <id>https://aotu.io/notes/2016/03/09/img-loading-optimization-in-mobile/</id>
    <published>2016-03-09T09:38:02.000Z</published>
    <updated>2016-10-20T07:06:32.416Z</updated>
    
    <content type="html"><![CDATA[<p>如果你问我构建触屏页面的过程中有什么困难的？<br>我可以拍着胸口跟可以跟你讲，有三大问题！那就是图片、图片、图片。<br>尤其是面对活动运营侧的需求的时候，连妈妈都要问我为什么要跪着做需求。<br>一个萝卜一个坑，总有一个萝卜适合你的坑。今天就来让图片加载这件事儿变得更美好，让用户跪倒你的石榴裙(牛仔裤)下。<br><a id="more"></a></p>
<h2 id="图片优化的一般方法"><a href="#图片优化的一般方法" class="headerlink" title="图片优化的一般方法"></a>图片优化的一般方法</h2><p> 在本文正式开始之前，笔者先提提图片优化的一般方法，了解图片优化的方法有助于理解后面图片加载实现形式的多样化。<br> 一般常见的图片优化方法有：</p>
<ul>
<li>减少文件体积大小</li>
<li>减少图片资源请求数(合并HTTP请求)</li>
</ul>
<h3 id="减少图片文件体积大小"><a href="#减少图片文件体积大小" class="headerlink" title="减少图片文件体积大小"></a>减少图片文件体积大小</h3><p>可以从</p>
<ul>
<li>压缩优化图片大小</li>
<li>采用合适的图片格式</li>
</ul>
<p>两个途径来进行对体积大小的优化。<br>这里推荐阅读<a href="http://cabbit.me/web-image-optimization/" target="_blank" rel="external">《Web性能优化：图片优化》</a>，博主在文中讨论如何更优地选择图片的恰当格式以及推荐了优化图片大小的工具。</p>
<h3 id="减少图片资源请求数-合并HTTP请求"><a href="#减少图片资源请求数-合并HTTP请求" class="headerlink" title="减少图片资源请求数(合并HTTP请求)"></a>减少图片资源请求数(合并HTTP请求)</h3><p>减少图片资源请求数(合并HTTP请求)的途径除了最为普遍的</p>
<ul>
<li>合成雪碧图</li>
</ul>
<p>还有</p>
<ul>
<li>使用DataURL</li>
</ul>
<p>这里特别提下，采用DataURL这种方式将图片被转换成base64编码的字符串形式的，如果单纯地“嵌”入HTML中是不会被缓存的，但是加在CSS或JS文件中，通过缓存CSS或JS则达到了间接缓存以base64编码的图片。<br>这里推荐一个将图片转换成Base64编码的字符串的在线工具： <a href="http://dataurl.net/#dataurlmaker" target="_blank" rel="external">DataURLMaker在线工具</a><br>因为本文的重点不在于讨论图片优化的内容，所以这里就简单总结下对图片进行优化的方法，对于更详细的内容，笔者则按下不表了。<br>对于触屏页面中常见的的图片资源加载方式，笔者归纳为三类：正常加载、预加载、懒加载。</p>
<h2 id="正常加载"><a href="#正常加载" class="headerlink" title="正常加载"></a>正常加载</h2><p>所谓正常加载，则是开发者不采用人为地方式去干扰，按照浏览器正常加载的方式去加载渲染页面。<br>适合采用正常加载的方式的情景是图片数量较少以及图片体积较小，对触屏页面呈现的用户体验不影响或影响较少。<br>但是在现有的大环境中，限制于网络宽带等客观的因素，而且触屏页面的华丽炫目的设计都需要依靠图片，单纯的CSS是无法满足要求的，对图片的应用还是有一定量。<br>所以，能够毫无顾忌地采用正常加载的方式的案例还是比较少的，目前笔者暂时是没有见过。</p>
<h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2><p>在触屏页面处理中最为常见的可以是说预加载，几乎每个触屏页面的案例都使用到了这种方式。<br>为了完整地呈现页面给用户，开发者会通过一定的技术预先加载图片资源（以及页面其它资源），等加载渲染完毕再把页面呈现给用户。<br>而根据这个预加载的过程是否有明显的进度提示，笔者把常见的预加载方式划分为两种形式：</p>
<ul>
<li>显性预加载</li>
<li>隐性预加载</li>
</ul>
<h3 id="显性预加载"><a href="#显性预加载" class="headerlink" title="显性预加载"></a>显性预加载</h3><p>显性预加载指的则是处于预加载过程时页面有明确的加载提示，比如进度条或者是Loading图标。<br>譬如，我厂的触屏页面案例《点燃你心中的野兽》，在预加载过程提示加载的进度，让用户有个心理预期，减少等待的烦躁感。</p>
<blockquote>
<p>以下截图来源自京东的<a href="http://wqs.jd.com/promote/CH77/2015/paper/index.html" target="_blank" rel="external">《点燃你心中的野兽》</a><br><img src="//img.aotu.io/Tingglelaoo/20160302/yeshou.png" alt="img" style="display:inline-block;max-width:200px;max-height:200px;width:100%;"></p>
</blockquote>
<p><img src="//img.aotu.io/Tingglelaoo/20160302/paper.png" alt="img" style="display:block;width:100%;max-width:320px;margin:0 auto;"><br>这个案例下的预加载处理技术是，先把页面DOM结构放入JS模版中，预加载完成后再把页面从JS模版拎出来，页面渲染完后能够完整地呈现页面给用户。<br>其中，图片资源相关预加载处理代码段为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PreLoad.prototype.image = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> b = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</div><div class="line">       b.src = a</div><div class="line">       ...</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>通过创建image元素，设置其src，就简单方便可以预先发起HTTP请求，实现预加载图片。<br>除了对png/jpg等格式图片能够利用以上方法实现预加载，对于DataURL转换图片为base64编码的字符串也能够实现预加载。<br>  在Adidas的《罗斯·决不凋谢》中，利用DataURL协议将图片转换成base64编码的字符串写入JS中，预加载JS文件完成后通过JS来进行内联在DOM元素中。</p>
<blockquote>
<p>以下截图来自案例<a href="http://drose6.adidasevent.com/]" target="_blank" rel="external">《Adidas：罗斯·决不凋谢》</a>![img](//img.aotu.io/Tingglelaoo/20160302/rose.png ‘示例图片’ ‘{“style”:”display:inline-block;max-width:200px;max-height:200px;width:100%;”}’ %}</p>
</blockquote>
<p><img src="//img.aotu.io/Tingglelaoo/20160302/drose6.png" alt="img" style="display:block;width:100%;max-width:320px;margin:0 auto;"></p>
<p>这里贴出该案例中部分预加载处理代码代码，有兴趣的可以详见0.main.js、2.main.js、3.main.js处深入研究。</p>
<blockquote>
<p>以下为Chrome Dev Tool 对案例资源查看的界面截图</p>
</blockquote>
<p><img src="//img.aotu.io/Tingglelaoo/20160302/drose6-code.png" alt="img" style="display:block;width:100%;"></p>
<p>虽然，业界有一种说法是不建议在移动端开发中使用DataURL转换图片为base64编码的做法，因为对大量的base64图片解码比较损耗内存和性能，但是使用base64在一定条件下是有助于页面加载速度提升，具体的原由可以前往<a href="http://aotu.io/notes/2016/03/04/can-we-use-base64-in-h5-webapps/">《图片资源Base64化在H5页面里有用武之地吗？》</a>阅读。</p>
<h3 id="隐性预加载"><a href="#隐性预加载" class="headerlink" title="隐性预加载"></a>隐性预加载</h3><p>除了明确的预加载提示，还有一种是通过推进触屏页面进度的趣味互动的方式，笔者称之此种类似的情况为隐性预加载。</p>
<blockquote>
<p>截图来自案例<a href="http://evt.dianping.com/market/20151207/" target="_blank" rel="external">《大众点评：阿惠故事1 - 吃饭别带姥爷》</a>![img](//img.aotu.io/Tingglelaoo/20160302/ahui.png ‘示例图片’ ‘{“style”:”display:inline-block;max-width:200px;max-height:200px;width:100%;”}’ %}</p>
</blockquote>
<p><img src="//img.aotu.io/Tingglelaoo/20160302/hui-loading.png" alt="示例图片" style="display:block;width:100%;max-width:640px;margin:0 auto;"></p>
<p>在大众点评的《阿惠故事1 - 吃饭别带姥爷》的预加载中，先是显性预加载(钱币小图标Loding)快速地呈现部分画面(截图右部分)给用户，再通过互动(向上滑动数钱)来继续分段加载资源。这样的做法一改用户往日沉闷的等待，能够给予用户更好的体验。</p>
<p>还有一个比较特别的案例是大众点评和欧莱雅合作的《好年从头开始》，笔者也将之归纳为隐性预加载。</p>
<blockquote>
<p>截图来源于案例<a href="http://evt.dianping.com/midas/160108-loreal/index.html" target="_blank" rel="external">《大众点评：好年从头开始》</a><br><img src="//img.aotu.io/Tingglelaoo/20160302/oulaiya.png" alt="示例图片" style="display:inline-block;max-width:200px;max-height:200px;width:100%;"></p>
</blockquote>
<p><img src="//img.aotu.io/Tingglelaoo/20160302/head-loading.png" alt="示例图片" style="display:block;width:100%;max-width:640px;margin:0 auto;"></p>
<p>在这里，开发者先预加载了部分图片以呈现首屏画面给用户，同时图片预加载依然在进行，当用户触发的页面内的图片资源还未加载完时则会显示进度条，加载完毕则可以进入下一个画面。</p>
<p>笔者觉得采用这种方式的原因有二，第一，页面内容需要加载的资源过多，若等待全部加载完毕所需时间耗费过长，容易导致流失用户；第二，页面内容足够吸引，即时在交互过程中插入等待过程，用户也愿意去等待。</p>
<h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>懒加载，又称为延迟加载、按需加载。指的是图片在页面渲染的时候先不加载，页面渲染完成后在指定动作触发后再加载图片。<br>这种方式通常比较合适于篇幅较长的页面，并且图片内容的重要性低于页面信息内容，能够快速地先将重要的页面信息呈现给用户。<br>譬如，这种方式则应用于电商商品信息集合页面，同时也常用于文章阅读的情景下。除了在移动端的应用场景之外，在PC端懒加载也是应用最广泛的一种图片加载优化方式。<br>最为常见的一种懒加载技术是以可见距离作为触发点。当页面滑动到屏幕可见区域时，则进行加载图片。实现的原理是：</p>
<ul>
<li>先将图片的实际src，记录在data-set属性中。</li>
<li>监听屏幕滚动，计算图片的Y坐标，并计算可视区域的高度height，当Y小于等于(height+scrollTop)时，图片的src的值用data-src的来替换，从而来实现图片的懒加载。</li>
</ul>
<p>具体可以前往<a href="http://jdc.jd.com/h5/case/maga.html" target="_blank" rel="external">拇指期刊</a>点击文章阅读体验喔。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>  希望这篇文章能够带给读者一些启发。并不是某一种案例只使用一种加载方式。同时，也不是触屏页面的加载方式仅限于以上方法之一。<br>  这里仅是列举并讨论常见的加载方式，凡事讲究实践出真知，在实践的时候必然会有更加切合具体案例的好方法。<br>  Keep Moving，在触屏页面的开发中，兴许还有更多更优秀的图片资源加载方式等着我们去发掘。</p>
<blockquote>
<p> 文中案例搜集均来源于<a href="http://www.digitaling.com/projects" target="_blank" rel="external">数英网</a>:)</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你问我构建触屏页面的过程中有什么困难的？&lt;br&gt;我可以拍着胸口跟可以跟你讲，有三大问题！那就是图片、图片、图片。&lt;br&gt;尤其是面对活动运营侧的需求的时候，连妈妈都要问我为什么要跪着做需求。&lt;br&gt;一个萝卜一个坑，总有一个萝卜适合你的坑。今天就来让图片加载这件事儿变得更美好，让用户跪倒你的石榴裙(牛仔裤)下。&lt;br&gt;
    
    </summary>
    
      <category term="性能优化" scheme="https://aotu.io/cates/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Images" scheme="https://aotu.io/tags/Images/"/>
    
      <category term="Load" scheme="https://aotu.io/tags/Load/"/>
    
      <category term="optimize" scheme="https://aotu.io/tags/optimize/"/>
    
      <category term="Mobile" scheme="https://aotu.io/tags/Mobile/"/>
    
  </entry>
  
  <entry>
    <title>图片资源Base64化在H5页面里有用武之地吗？</title>
    <link href="https://aotu.io/notes/2016/03/04/can-we-use-base64-in-h5-webapps/"/>
    <id>https://aotu.io/notes/2016/03/04/can-we-use-base64-in-h5-webapps/</id>
    <published>2016-03-04T09:45:03.000Z</published>
    <updated>2016-10-20T07:06:32.416Z</updated>
    
    <content type="html"><![CDATA[<p>将图片资源转至base64格式后可直接放入页面作为首屏直出，也可以放入css文件中，减少请求，以加快首屏的呈现速度。<br>不过图片base64化，将带来一个臃肿的html或css文件，是否会影响页面的渲染性能，浏览器又支持如何呢？</p>
<h3 id="如何统计？"><a href="#如何统计？" class="headerlink" title="如何统计？"></a>如何统计？</h3><blockquote>
<p>通过Navigation Timing记录的关键时间点来统计页面完成所用的时间，并通过Chrome开发工具来跟踪细节</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> timing = <span class="built_in">window</span>.performance.timing</div><div class="line">timing.domLoading  <span class="comment">//浏览器开始解析 HTML 文档第一批收到的字节</span></div><div class="line">timing.domInteractive  <span class="comment">//  浏览器完成解析并且所有 HTML 和 DOM 构建完毕timing.domContentLoadedEventStart //DOM 解析完成后，网页内资源加载开始的时间</span></div><div class="line">timing.domContentLoadedEventEnd <span class="comment">//DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）</span></div><div class="line">timing.domComplete <span class="comment">//网页上所有资源（图片等） 下载完成,且准备就绪的时间</span></div></pre></td></tr></table></figure>
<blockquote>
<p>以上定义来自<a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/measure-crp?hl=zh-cn" target="_blank" rel="external">chrome官方文档</a>，在其它环境下也许会有差异，从测试结果看，下面的build时间在android+微信环境中一直是0，对此可能是因为渲染机制差别，此处不做深入测试。除osx+chrome之外环境的数据仅作参考。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">build = timing.domComplete - timing.domContentLoadedEventStart <span class="comment">//间隔记录网页内资源加载和呈现时间。</span></div><div class="line">complete = timing.domComplete - timing.domLoading <span class="comment">//页面接收到数据开始到呈现完毕的总时间。</span></div></pre></td></tr></table></figure>
<h2 id="场景1，内嵌至css文件中"><a href="#场景1，内嵌至css文件中" class="headerlink" title="场景1，内嵌至css文件中"></a>场景1，内嵌至css文件中</h2><h4 id="1、原生引入图片链接做背景图"><a href="#1、原生引入图片链接做背景图" class="headerlink" title="1、原生引入图片链接做背景图"></a>1、原生引入图片链接做背景图</h4><p>一张大小为<strong>50kb</strong>的<strong>jpg格式</strong>图片，应用到9x15=135个dom做背景图，模拟雪碧图的模式，多个节点引用同一张图片做背景，（示例）如图。<br><img src="//img.aotu.io/Simbachen/base64/1455676041355.png" alt="img"><br><code>测试环境</code>：Mac OS X EI Capitan 10.xx + Chrome 48.xx<br><code>其它辅助测试机器</code>：  iPhone 6 plus iOS 9.xx； 魅族Note Android 4.xx</p>
<blockquote>
<p>实际使用过程中，其它版本和机型的Android手机还有待测试</p>
</blockquote>
<p>关闭缓存状态下，build:150ms | complete: 200ms（总时间受网络状态等因素影响，数据做比较用）<br><img src="//img.aotu.io/Simbachen/base64/1455624301638.png" alt="img"></p>
<p>开启缓存状态下，build: 7ms |  complete: 59ms（包括以下稳定状态下多次测试的平均值，截图为最接近平均值的状态，默认数据来自Mac+Chrome[48.XX版本]）</p>
<p><img src="//img.aotu.io/Simbachen/base64/1455624345624.png" alt="img"></p>
<table>
<thead>
<tr>
<th style="text-align:left">测试环境</th>
<th style="text-align:center">build(单位:ms)</th>
<th style="text-align:center">complete(单位:ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">OS X+Chrome</td>
<td style="text-align:center">7</td>
<td style="text-align:center">59</td>
</tr>
<tr>
<td style="text-align:left">iOS+微信</td>
<td style="text-align:center">45</td>
<td style="text-align:center">90</td>
</tr>
<tr>
<td style="text-align:left">OS X+Safari</td>
<td style="text-align:center">50</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:left">Android+微信</td>
<td style="text-align:center">0</td>
<td style="text-align:center">120</td>
</tr>
</tbody>
</table>
<h4 id="2、引入base64格式图片做背景图"><a href="#2、引入base64格式图片做背景图" class="headerlink" title="2、引入base64格式图片做背景图"></a>2、引入base64格式图片做背景图</h4><p>将上面50kb大小的jpg图片转换为base64格式，加在css文件中。</p>
<p>关闭缓存状态下，build:80ms | complete: 280ms</p>
<p><img src="//img.aotu.io/Simbachen/base64/1455629551042.png" alt="img"><br>开启缓存状态下，build: 160ms |  complete: 210ms</p>
<p><img src="//img.aotu.io/Simbachen/base64/1455629572545.png" alt="img"></p>
<table>
<thead>
<tr>
<th style="text-align:left">测试环境</th>
<th style="text-align:center">build(单位:ms)</th>
<th style="text-align:center">complete(单位:ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">OS X+chrome</td>
<td style="text-align:center">160</td>
<td style="text-align:center">210</td>
</tr>
<tr>
<td style="text-align:left">iOS+微信</td>
<td style="text-align:center">35</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:left">OS X+Safari</td>
<td style="text-align:center">9</td>
<td style="text-align:center">90</td>
</tr>
<tr>
<td style="text-align:left">Android+微信</td>
<td style="text-align:center">12</td>
<td style="text-align:center">150</td>
</tr>
</tbody>
</table>
<h4 id="3、调整图片体积"><a href="#3、调整图片体积" class="headerlink" title="3、调整图片体积"></a>3、调整图片体积</h4><p>调整上面图片的（压缩品质）体积，base64化后，对应的css文件大小也跟着改变</p>
<table>
<thead>
<tr>
<th style="text-align:left">图片大小</th>
<th style="text-align:center">10kb</th>
<th style="text-align:center">20kb</th>
<th style="text-align:center">45kb</th>
<th style="text-align:center">100kb</th>
<th style="text-align:center">180kb</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">对应css文件大小</td>
<td style="text-align:center">27kb</td>
<td style="text-align:center">42kb</td>
<td style="text-align:center">76kb</td>
<td style="text-align:center">150kb</td>
<td style="text-align:center">260kb</td>
</tr>
<tr>
<td style="text-align:left">Rendering时间</td>
<td style="text-align:center">30ms</td>
<td style="text-align:center">46ms</td>
<td style="text-align:center">81ms</td>
<td style="text-align:center">156ms</td>
<td style="text-align:center">258ms</td>
</tr>
</tbody>
</table>
<p><img src="//img.aotu.io/Simbachen/base64/data1.png" alt="img"></p>
<h4 id="4、调整引用次数"><a href="#4、调整引用次数" class="headerlink" title="4、调整引用次数"></a>4、调整引用次数</h4><p>50kb大小的图片，base64化后，调整引用图片做背景图的dom的个数</p>
<table>
<thead>
<tr>
<th style="text-align:left">引用次数</th>
<th style="text-align:center">10</th>
<th style="text-align:center">20</th>
<th style="text-align:center">50</th>
<th style="text-align:center">100</th>
<th style="text-align:center">135</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Rendering时间</td>
<td style="text-align:center">15ms</td>
<td style="text-align:center">19ms</td>
<td style="text-align:center">44ms</td>
<td style="text-align:center">74ms</td>
<td style="text-align:center">83ms</td>
</tr>
</tbody>
</table>
<p><img src="//img.aotu.io/Simbachen/base64/data2.png" alt="img"></p>
<h4 id="分析和小结："><a href="#分析和小结：" class="headerlink" title="分析和小结："></a>分析和小结：</h4><p>在OSX+Chrome环境下，将50kb的图片base64后放入样式中，build过程拉长了约20倍，使用Timeline工具可以看到，计算样式阻塞了整个过程。</p>
<p><img src="//img.aotu.io/Simbachen/base64/1455634381569.png" alt="img"></p>
<ol>
<li>比起直接引入图片地址，css文件中引入base64格式的图片对样式渲染的性能消耗明显，如果大量使用，会带来耗电和发热的问题，需谨慎使用。</li>
<li>Rendering消耗的时间同css文件大小、引用次数几乎成正比（未测试其它极限情况），在网络条件优质的4G环境，50~70ms的RTT(往返时延）情况下，通常移动网络的状况会更差，对于首屏优化，合适的使用还是很值得的。</li>
<li>图片转成base64编码后，文档大小较原文件大了一些，而经过 gzip 后两者几乎没有区别。</li>
</ol>
<h2 id="场景2，内嵌至js文件中"><a href="#场景2，内嵌至js文件中" class="headerlink" title="场景2，内嵌至js文件中"></a>场景2，内嵌至js文件中</h2><h4 id="1、原生方式直接加载多张图片"><a href="#1、原生方式直接加载多张图片" class="headerlink" title="1、原生方式直接加载多张图片"></a>1、原生方式直接加载多张图片</h4><p>大小10~70kb共9张图片。总大小约300kb</p>
<p>关闭缓存：build: 300ms |  complete: 310ms</p>
<p><img src="//img.aotu.io/Simbachen/base64/1455634756427.png" alt="img"><br>开启缓存：build: 110ms |  complete: 120ms</p>
<p><img src="//img.aotu.io/Simbachen/base64/1455634772411.png" alt="img"></p>
<table>
<thead>
<tr>
<th style="text-align:left">测试环境</th>
<th style="text-align:center">build(单位:ms)</th>
<th style="text-align:center">complete(单位:ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">OS X+Chrome</td>
<td style="text-align:center">110</td>
<td style="text-align:center">120</td>
</tr>
<tr>
<td style="text-align:left">iOS+微信</td>
<td style="text-align:center">50</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:left">OS X+Safari</td>
<td style="text-align:center">148</td>
<td style="text-align:center">150</td>
</tr>
<tr>
<td style="text-align:left">Android+微信</td>
<td style="text-align:center">50</td>
<td style="text-align:center">100</td>
</tr>
</tbody>
</table>
<h4 id="2、转换成base64格式，合并请求"><a href="#2、转换成base64格式，合并请求" class="headerlink" title="2、转换成base64格式，合并请求"></a>2、转换成base64格式，合并请求</h4><p>将上面的图片转成base64后，放在js文件中，加载进来。</p>
<p>关闭缓存：build: 0ms |  complete: 400ms</p>
<p><img src="//img.aotu.io/Simbachen/base64/1455634859983.png" alt="img"></p>
<p>开启缓存：build: 0ms |  complete: 80ms</p>
<p><img src="//img.aotu.io/Simbachen/base64/1455634882064.png" alt="img"></p>
<table>
<thead>
<tr>
<th style="text-align:center">测试环境</th>
<th style="text-align:center">build(单位:ms)</th>
<th style="text-align:center">complete(单位:ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">OSX+Chrome</td>
<td style="text-align:center">110</td>
<td style="text-align:center">120</td>
</tr>
<tr>
<td style="text-align:center">iOS+微信</td>
<td style="text-align:center">0</td>
<td style="text-align:center">35</td>
</tr>
<tr>
<td style="text-align:center">OS X+Safari</td>
<td style="text-align:center">7</td>
<td style="text-align:center">70</td>
</tr>
<tr>
<td style="text-align:center">Android+微信</td>
<td style="text-align:center">0</td>
<td style="text-align:center">250</td>
</tr>
</tbody>
</table>
<h4 id="3、比较不同网速下同步请求和合并请求的加载效率"><a href="#3、比较不同网速下同步请求和合并请求的加载效率" class="headerlink" title="3、比较不同网速下同步请求和合并请求的加载效率"></a>3、比较不同网速下同步请求和合并请求的加载效率</h4><p>使用上述1、2的测试demo分别在3G、4G网速条件下测试结果如下：</p>
<ul>
<li>在网络环境差的情况下，合并请求明显缩短了整个加载时间；</li>
<li>在网络环境较好的WIFI和4G下则差别不大。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">测试环境</th>
<th style="text-align:center">图片直接加载 complete(单位:ms)</th>
<th style="text-align:center">base64合并请求 complete(单位:ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3G</td>
<td style="text-align:center">6000</td>
<td style="text-align:center">4500</td>
</tr>
<tr>
<td style="text-align:center">4G</td>
<td style="text-align:center">450</td>
<td style="text-align:center">400</td>
</tr>
<tr>
<td style="text-align:center">WIFI</td>
<td style="text-align:center">320</td>
<td style="text-align:center">340</td>
</tr>
</tbody>
</table>
<p><img src="//img.aotu.io/Simbachen/base64/data3.png" alt="img"></p>
<h4 id="分析和小结：-1"><a href="#分析和小结：-1" class="headerlink" title="分析和小结："></a>分析和小结：</h4><p>base64后的的js资源达381kb，在一个线程里加载，消耗大量时间，从统计结果看，在渲染性能差异上并没有场景1那么明显。<br>但有缓存的情况下，页面渲染完成的速度甚至更快。<br>从Timeline里看到细节，解析这个近400kb的js文件对整个渲染过程造成了一定压力，不过总共40ms的解析时间是完全可以接受的。</p>
<p><img src="//img.aotu.io/Simbachen/base64/1455635010603.png" alt="img"></p>
<ol>
<li>从html里直直接引用图片链接和base64图片对渲染性能的影响几乎没有区别，在网络条件差的情况下，合并请求却能大大提高加载效率；</li>
<li>直接引用至html，无法缓存，将base64后的图片资源放在js文件中管理，方便设置缓存。</li>
<li>有一个缺点就是图片资源base64化需要扩展构建工具来支持。</li>
</ol>
<h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><ol>
<li><p>图片资源的base64编码进css文件会带来一定的性能消耗，需谨慎使用。</p>
</li>
<li><p>将图片资源编码进js文件中，管理和预加载H5应用的图片资源，合理的合并请求可以大大提高页面体验。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将图片资源转至base64格式后可直接放入页面作为首屏直出，也可以放入css文件中，减少请求，以加快首屏的呈现速度。&lt;br&gt;不过图片base64化，将带来一个臃肿的html或css文件，是否会影响页面的渲染性能，浏览器又支持如何呢？&lt;/p&gt;
&lt;h3 id=&quot;如何统计？&quot;&gt;&lt;
    
    </summary>
    
      <category term="性能优化" scheme="https://aotu.io/cates/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="base64" scheme="https://aotu.io/tags/base64/"/>
    
      <category term="h5" scheme="https://aotu.io/tags/h5/"/>
    
  </entry>
  
  <entry>
    <title>createjs开发入门</title>
    <link href="https://aotu.io/notes/2016/03/01/createjs-get-started/"/>
    <id>https://aotu.io/notes/2016/03/01/createjs-get-started/</id>
    <published>2016-03-01T02:10:15.000Z</published>
    <updated>2016-10-20T07:06:32.415Z</updated>
    
    <content type="html"><![CDATA[<p>通过实例简单介绍createjs的使用方法<br><a id="more"></a></p>
<h2 id="PRELOADJS"><a href="#PRELOADJS" class="headerlink" title="PRELOADJS"></a>PRELOADJS</h2><p>PreloadJS是一个用来管理和协调相关资源加载的类库，它可以方便的帮助你预先加载相关资源。</p>
<h3 id="LoadQueue类介绍"><a href="#LoadQueue类介绍" class="headerlink" title="LoadQueue类介绍"></a>LoadQueue类介绍</h3><p>LoadQueue是一个加载管理器，可以预先加载一个文件或者一个文件队列。</p>
<p>LoadQueue包含了几个可以订阅的事件：</p>
<ul>
<li>complete: 当队列完成全部加载后触发</li>
<li>error: 当队列遇到错误时触发</li>
<li>progress: 整个队列变化时展示的进度</li>
<li>fileload: 一个单独文件加载完毕</li>
<li>fileprogress: 一个单独文件变化的进度，请注意只有文件使用XHR加载才会触发，其它只会显示0或者100%</li>
</ul>
<p>LoadQueue支持相关文件类型如下：</p>
<ul>
<li>BINARY:  XHR调用的二进制文件</li>
<li>CSS: CSS文件</li>
<li>IMAGE: 一般图片文件格式</li>
<li>JAVASCRIPT: JavaScript文件</li>
<li>JSON: JSON数据</li>
<li>JSONP: 跨域JSON文件</li>
<li>MANIFEST: JSON格式的文件列表</li>
<li>SOUND: 音频文件</li>
<li>SVG: SVG文件</li>
<li>TEXT: 文本文件 - 仅支持XHR</li>
<li>XML: XML数据</li>
</ul>
<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">manifest = [</div><div class="line">	&#123;<span class="string">src:</span> <span class="string">"art/sky.png"</span>, <span class="string">id:</span> <span class="string">"sky"</span>&#125;,</div><div class="line">	&#123;<span class="string">src:</span> <span class="string">"art/ground.png"</span>, <span class="string">id:</span> <span class="string">"ground"</span>&#125;,</div><div class="line">	&#123;<span class="string">src:</span> <span class="string">"art/hill2.png"</span>, <span class="string">id:</span> <span class="string">"hill2"</span>&#125;,</div><div class="line">	&#123;<span class="string">src:</span> <span class="string">"art/hill1.png"</span>, <span class="string">id:</span> <span class="string">"hill"</span>&#125;,</div><div class="line">	&#123;<span class="string">src:</span> <span class="string">"static/grant.json"</span>, <span class="string">id:</span><span class="string">"grant"</span>, <span class="string">type:</span><span class="string">"spritesheet"</span>&#125;</div><div class="line">];</div><div class="line"></div><div class="line">var loader = <span class="keyword">new</span> createjs.LoadQueue(<span class="literal">true</span>, <span class="string">"../_assets/"</span>);</div><div class="line">loader.on(<span class="string">"fileload"</span>, handleFileLoad);</div><div class="line">loader.on(<span class="string">"complete"</span>, handleComplete);</div><div class="line">loader.loadManifest(manifest);</div></pre></td></tr></table></figure>
<ul>
<li>预加载音频文件</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化插件</span></div><div class="line"><span class="selector-tag">preload</span><span class="selector-class">.installPlugin</span>(createjs.Sound);</div></pre></td></tr></table></figure>
<ul>
<li>设置加载路径</li>
</ul>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">preload</span> = new createjs.LoadQueue(<span class="literal">true</span>, <span class="string">"../_assets/art/"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>获取预加载资源</li>
</ul>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">preload.getResult(‘id’)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>通常进度条可以通过<code>fileload</code>和<code>complete</code>来实现。</p>
<h2 id="SOUNDJS"><a href="#SOUNDJS" class="headerlink" title="SOUNDJS"></a>SOUNDJS</h2><p>一个音频播放引擎，能够根据浏览器性能选择音频播放方式。将音频文件作为模块，可随时加载和卸载。</p>
<h3 id="单个音频基本用法"><a href="#单个音频基本用法" class="headerlink" title="单个音频基本用法"></a>单个音频基本用法</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> assetsPath = <span class="string">"../_assets/audio/"</span>;</div><div class="line">src = assetsPath + <span class="string">"M-GameBG.ogg"</span>;</div><div class="line"></div><div class="line">createjs.Sound.alternateExtensions = [<span class="string">"mp3"</span>];	<span class="comment">// 源格式不支持时，用此格式替换</span></div><div class="line">createjs.Sound.addEventListener(<span class="string">"fileload"</span>, playSound); <span class="comment">// 加载完回调</span></div><div class="line">createjs.Sound.registerSound(src);  <span class="comment">// 注册</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">playSound</span><span class="params">(event)</span> </span>&#123;</div><div class="line">	soundInstance = createjs.Sound.play(event.src);  <span class="comment">// 播放实例</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多个音频用法"><a href="#多个音频用法" class="headerlink" title="多个音频用法"></a>多个音频用法</h3><p><code>registerSounds</code></p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> assetsPath = <span class="string">"../_assets/audio/"</span>;</div><div class="line"><span class="built_in">var</span> sounds = [</div><div class="line">	&#123;<span class="attribute">src</span>: <span class="string">"Game-Break.ogg"</span>, <span class="attribute">id:</span><span class="string"> 1&#125;,</span></div><div class="line">	&#123;src: <span class="string">"Game-Spawn.ogg"</span>, <span class="attribute">id:</span><span class="string"> 2&#125;,</span></div><div class="line">	&#123;src: <span class="string">"Game-Shot.ogg"</span>, <span class="attribute">id:</span><span class="string"> 3&#125;,</span></div><div class="line"></div><div class="line">	&#123;src: <span class="string">"GU-StealDaisy.ogg"</span>, <span class="attribute">id:</span><span class="string"> 4&#125;,</span></div><div class="line">	&#123;src: <span class="string">"Humm.ogg"</span>, <span class="attribute">id:</span><span class="string"> 5&#125;,</span></div><div class="line">	&#123;src: <span class="string">"R-Damage.ogg"</span>, <span class="attribute">id:</span><span class="string"> 6&#125;,</span></div><div class="line"></div><div class="line">	&#123;src: <span class="string">"Thunder1.ogg"</span>, <span class="attribute">id:</span><span class="string"> 7&#125;,</span></div><div class="line">	&#123;src: <span class="string">"S-Damage.ogg"</span>, <span class="attribute">id:</span><span class="string"> 8&#125;,</span></div><div class="line">	&#123;src: <span class="string">"U-CabinBoy3.ogg"</span>, <span class="attribute">id:</span><span class="string"> 9&#125;,</span></div><div class="line"></div><div class="line">	&#123;src: <span class="string">"ToneWobble.ogg"</span>, <span class="attribute">id:</span><span class="string"> 10&#125;,</span></div><div class="line">	&#123;src: <span class="string">"Game-Death.ogg"</span>, <span class="attribute">id:</span><span class="string"> 11&#125;,</span></div><div class="line">	&#123;src: <span class="string">"Game-Break.ogg"</span>, <span class="attribute">id:</span><span class="string"> 12&#125; </span></div><div class="line">];</div><div class="line"></div><div class="line">createjs.Sound.alternateExtensions = [<span class="string">"mp3"</span>];</div><div class="line">createjs.Sound.addEventListener(<span class="string">"fileload"</span>, createjs.proxy(soundLoaded, <span class="keyword">this</span>)); </div><div class="line">createjs.Sound.registerSounds(sounds, assetsPath);</div></pre></td></tr></table></figure>
<h3 id="声音合成"><a href="#声音合成" class="headerlink" title="声音合成"></a>声音合成</h3><ul>
<li>AudioSprite例子</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">createjs.Sound.initializeDefaultPlugins();</div><div class="line">var assetsPath = <span class="string">"./assets/"</span>;</div><div class="line">var sounds = [&#123;</div><div class="line"><span class="symbol">    src:</span><span class="string">"MyAudioSprite.ogg"</span>, <span class="string">data:</span> &#123;</div><div class="line"><span class="symbol">        audioSprite:</span> [</div><div class="line">            &#123;<span class="string">id:</span><span class="string">"sound1"</span>, <span class="string">startTime:</span><span class="number">0</span>, <span class="string">duration:</span><span class="number">500</span>&#125;,</div><div class="line">            &#123;<span class="string">id:</span><span class="string">"sound2"</span>, <span class="string">startTime:</span><span class="number">1000</span>, <span class="string">duration:</span><span class="number">400</span>&#125;,</div><div class="line">            &#123;<span class="string">id:</span><span class="string">"sound3"</span>, <span class="string">startTime:</span><span class="number">1700</span>, <span class="string">duration:</span> <span class="number">1000</span>&#125;</div><div class="line">        ]&#125;</div><div class="line">    &#125;</div><div class="line">];</div><div class="line">createjs.Sound.alternateExtensions = [<span class="string">"mp3"</span>];</div><div class="line">createjs.Sound.on(<span class="string">"fileload"</span>, loadSound);</div><div class="line">createjs.Sound.registerSounds(sounds, assetsPath);</div><div class="line"><span class="comment">// after load is complete</span></div><div class="line">createjs.Sound.play(<span class="string">"sound2"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>AudioSprite安装</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g audiosprite</div></pre></td></tr></table></figure>
<ul>
<li>homebrew安装ffmpeg</li>
</ul>
<p>FFmpeg and the ogg codecs on OSX using brew:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install ffmpeg --<span class="keyword">with</span>-theora --<span class="keyword">with</span>-libogg --<span class="keyword">with</span>-libvorbis</div></pre></td></tr></table></figure>
<ul>
<li>生成音频文件</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">audiosprite</span> --autoplay <span class="keyword">bg_loop </span>--output mygameaudio <span class="keyword">bg_loop.wav </span>*.mp3</div></pre></td></tr></table></figure>
<p>可选参数可以设置是否自动播放等，具体请参考<a href="https://github.com/tonistiigi/audiosprite" target="_blank" rel="external">这里</a></p>
<ul>
<li>在线导出</li>
</ul>
<p>把生成好的json文件，导入到以下链接，才能供soundjs使用</p>
<p><a href="http://jsfiddle.net/bharat_battu/g8fFP/12/" target="_blank" rel="external">http://jsfiddle.net/bharat_battu/g8fFP/12/</a></p>
<h2 id="TWEENJS"><a href="#TWEENJS" class="headerlink" title="TWEENJS"></a>TWEENJS</h2><p>TweenJS类库主要用来调整和动画HTML5和Javascript属性。提供了简单并且强大的tweening接口。支持数字对象属性和CSS样式属性，允许你使用链式语法来生成复杂的过程</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><img src="//img.aotu.io/youing/20160229/tweenjs.gif" alt="img"></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">createjs</span><span class="selector-class">.Tween</span><span class="selector-class">.get</span>(<span class="selector-tag">target</span>)</div><div class="line">    <span class="selector-class">.to</span>(&#123;<span class="attribute">x</span>:<span class="number">300</span>&#125;,400,<span class="selector-tag">createjs</span><span class="selector-class">.Ease</span><span class="selector-class">.bounceInOut</span>)</div><div class="line">    <span class="selector-class">.set</span>(&#123;<span class="attribute">label</span>:<span class="string">"hello!"</span>&#125;)</div><div class="line">    <span class="selector-class">.wait</span>(500)</div><div class="line">    <span class="selector-class">.to</span>(&#123;<span class="attribute">alpha</span>:<span class="number">0</span>,visible:false&#125;,1000)</div><div class="line">    <span class="selector-class">.call</span>(<span class="selector-tag">onComplete</span>);</div></pre></td></tr></table></figure>
<ul>
<li><code>get</code> 获取目标元素</li>
<li><code>to</code> 执行动画</li>
<li><code>set</code> 设置属性</li>
<li><code>wait</code> 队列等待</li>
<li><code>call</code> 执行回调函数</li>
<li><code>createjs.Ease.bounceInOut</code> 缓动效果</li>
</ul>
<h3 id="引导动画"><a href="#引导动画" class="headerlink" title="引导动画"></a>引导动画</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">createjs</span><span class="selector-class">.MotionGuidePlugin</span><span class="selector-class">.install</span>(createjs.Tween);</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">createjs</span><span class="selector-class">.Tween</span><span class="selector-class">.get</span>(target)<span class="selector-class">.to</span>(&#123;<span class="attribute">guide</span>:&#123; <span class="attribute">path</span>:[<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>, <span class="number">200</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>] &#125;&#125;,<span class="number">7000</span>);</div><div class="line"><span class="comment">//path所设置的坐标等同于下面画曲线的坐标</span></div><div class="line"><span class="selector-tag">graphics</span><span class="selector-class">.moveTo</span>(<span class="number">0</span>,<span class="number">0</span>)<span class="selector-class">.curveTo</span>(<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>)<span class="selector-class">.curveTo</span>(<span class="number">200</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<ul>
<li>例子</li>
</ul>
<p><img src="//img.aotu.io/youing/20160229/guidemotion.gif" alt="img"></p>
<h2 id="EASELJS"><a href="#EASELJS" class="headerlink" title="EASELJS"></a>EASELJS</h2><p>EaselJS 是一个用以与 HTML5 canvas 协作的库。它包含一个完整的分层展示列表、一个核心交互模型以及一些辅助类，通过其来使与 Canvas 的协作更简单。</p>
<h3 id="先看例子"><a href="#先看例子" class="headerlink" title="先看例子"></a>先看例子</h3><p><img src="//img.aotu.io/youing/20160229/grantrun.gif" alt="img"></p>
<p>下面介绍这个例子的制作过程</p>
<h3 id="素材准备"><a href="#素材准备" class="headerlink" title="素材准备"></a>素材准备</h3><p><img src="//img.aotu.io/youing/20160229/1.pic.jpg" alt="img"></p>
<p>人物精灵图会用到<strong>flash</strong>+<strong>zoe</strong>来生成</p>
<p>打开flash，新建一个新的as3项目，导入图片，只要文件名是有序的，会自动导入到每一帧，如下图</p>
<p><img src="//img.aotu.io/youing/20160229/2.pic.png" alt="img"></p>
<p><img src="//img.aotu.io/youing/20160229/3.pic.png" alt="img"></p>
<p>导入完之后，新建一个图层，来放动作标签，如上面的<code>run</code>和<code>jump</code></p>
<p>最后再新建一个新的图层用来放动作脚本，这里只需要写<code>stop()</code>就可以了，这样整个动画是处于静止状态。</p>
<p>然后用快捷键<code>Ctrl + enter</code>发布成swf格式，并把它导入到<strong>zoe</strong>工具,效果如下</p>
<p><img src="//img.aotu.io/youing/20160229/4.pic.png" alt="img"></p>
<p>tab选项卡切换到<code>Animations</code> 可以预览和设置刚才在flash设置的动作。</p>
<p>最后导出json代码供后续使用</p>
<h3 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h3><p>createjs中，元素都是放到舞台中</p>
<ol>
<li>舞台创建</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=<span class="string">"testCanvas"</span> width=<span class="string">"960"</span> height=<span class="string">"400"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">var</span> stage = <span class="keyword">new</span> createjs.Stage(<span class="string">"testCanvas"</span>);</div></pre></td></tr></table></figure>
<ol>
<li>天空</li>
</ol>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sky = <span class="function"><span class="keyword">new</span> <span class="title">createjs</span>.<span class="title">Shape</span>();</span></div><div class="line"><span class="title">sky</span>.<span class="title">graphics</span>.<span class="title">beginBitmapFill</span>(loader.getResult("sky")).<span class="title">drawRect</span>(<span class="number">0</span>, <span class="number">0</span>, w, h);</div></pre></td></tr></table></figure>
<p><code>Shape</code>类，通常用于画图，例如画矩形，圆形时会使用到</p>
<ol>
<li>地板</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var groundImg = loader.<span class="built_in">getResult</span>(<span class="string">"ground"</span>);</div><div class="line">ground = <span class="keyword">new</span> createjs.Shape();</div><div class="line">ground.graphics.beginBitmapFill(groundImg).drawRect(<span class="number">0</span>, <span class="number">0</span>, w + groundImg.<span class="built_in">width</span>, groundImg.<span class="built_in">height</span>);</div><div class="line">ground.tileW = groundImg.<span class="built_in">width</span>;</div><div class="line">ground.y = h - groundImg.<span class="built_in">height</span>;</div></pre></td></tr></table></figure>
<ol>
<li>山</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hill = <span class="keyword">new</span> createjs.Bitmap(loader.<span class="built_in">getResult</span>(<span class="string">"hill"</span>));</div><div class="line">hill.setTransform(Math.<span class="built_in">random</span>() * w, h - hill.<span class="built_in">image</span>.<span class="built_in">height</span> * <span class="number">4</span> - groundImg.<span class="built_in">height</span>, <span class="number">4</span>, <span class="number">4</span>);</div><div class="line">hill.alpha = <span class="number">0.5</span>;</div></pre></td></tr></table></figure>
<p><code>Bitmap</code>类，常用于位图处理</p>
<ol>
<li>人物</li>
</ol>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> spriteSheet = <span class="keyword">new</span> createjs.SpriteSheet(</div><div class="line">&#123;</div><div class="line">	framerate: <span class="number">30</span>,</div><div class="line">	<span class="string">"images"</span>: [loader.getResult(<span class="string">"grant"</span>)],</div><div class="line">	<span class="string">"frames"</span>: &#123;<span class="string">"regX"</span>: <span class="number">82</span>, <span class="string">"height"</span>: <span class="number">292</span>, <span class="string">"count"</span>: <span class="number">64</span>, <span class="string">"regY"</span>: <span class="number">0</span>, <span class="string">"width"</span>: <span class="number">165</span>&#125;,</div><div class="line">	<span class="string">"animations"</span>: &#123;</div><div class="line">		<span class="string">"run"</span>: [<span class="number">0</span>, <span class="number">25</span>, <span class="string">"run"</span>, <span class="number">1.5</span>],</div><div class="line">		<span class="string">"jump"</span>: [<span class="number">26</span>, <span class="number">63</span>, <span class="string">"run"</span>]</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> grant = <span class="keyword">new</span> createjs.Sprite(spriteSheet, <span class="string">"run"</span>);</div></pre></td></tr></table></figure>
<p>人物用到<code>Sprite</code>类，精灵图存放在<code>SpriteSheet</code>中，刚才用<strong>flash</strong> + <strong>zoe</strong> 生成的json，可以直接传入到<code>SpriteSheet</code>初始化对象中。</p>
<p>还可以直接使用代码<code>gotoAndPlay(&#39;run&#39;)</code>来进行动作间的切换。</p>
<ol>
<li>元素加入舞台</li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stage.<span class="keyword">addChild(sky, </span>hill, hill2, ground, grant)<span class="comment">;</span></div></pre></td></tr></table></figure>
<ol>
<li>让物体动起来</li>
</ol>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">createjs</span><span class="selector-class">.Ticker</span><span class="selector-class">.setFPS</span>(<span class="number">30</span>);</div><div class="line"></div><div class="line"><span class="selector-tag">createjs</span><span class="selector-class">.Ticker</span><span class="selector-class">.addEventListener</span>(<span class="string">"tick"</span>, handleTick);</div><div class="line"><span class="selector-tag">function</span> <span class="selector-tag">handleTick</span>(event) &#123;</div><div class="line"><span class="comment">//物品移动逻辑</span></div><div class="line">    <span class="selector-tag">stage</span><span class="selector-class">.update</span>();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="开启鼠标检测"><a href="#开启鼠标检测" class="headerlink" title="开启鼠标检测"></a>开启鼠标检测</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stage.enableMouseOver(<span class="number">20</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<h3 id="开启触摸"><a href="#开启触摸" class="headerlink" title="开启触摸"></a>开启触摸</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">createjs</span><span class="selector-class">.Touch</span><span class="selector-class">.enable</span>(<span class="selector-tag">this</span><span class="selector-class">.stage</span>)</div></pre></td></tr></table></figure>
<h3 id="Request-Animation-Frame"><a href="#Request-Animation-Frame" class="headerlink" title="Request Animation Frame"></a>Request Animation Frame</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">createjs.Ticker.timingMode = createjs.Ticker.RAF<span class="comment">;</span></div></pre></td></tr></table></figure>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">shape</span>.cache(x,y,<span class="built_in">width</span>,<span class="built_in">height</span>)</div></pre></td></tr></table></figure>
<h3 id="Mask"><a href="#Mask" class="headerlink" title="Mask"></a>Mask</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bmp.mask </span>= star<span class="comment">;</span></div></pre></td></tr></table></figure>
<h3 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">myShape</span><span class="selector-class">.hitTest</span>(<span class="selector-tag">x</span>,<span class="selector-tag">y</span>)</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://createjs.com/" target="_blank" rel="external">http://createjs.com/</a></li>
<li><a href="https://github.com/CreateJS" target="_blank" rel="external">https://github.com/CreateJS</a></li>
<li><a href="https://github.com/tonistiigi/audiosprite" target="_blank" rel="external">https://github.com/tonistiigi/audiosprite</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过实例简单介绍createjs的使用方法&lt;br&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="createjs" scheme="https://aotu.io/tags/createjs/"/>
    
      <category term="tweenjs" scheme="https://aotu.io/tags/tweenjs/"/>
    
      <category term="zoe" scheme="https://aotu.io/tags/zoe/"/>
    
      <category term="preloadjs" scheme="https://aotu.io/tags/preloadjs/"/>
    
      <category term="soundjs" scheme="https://aotu.io/tags/soundjs/"/>
    
      <category term="easeljs" scheme="https://aotu.io/tags/easeljs/"/>
    
  </entry>
  
  <entry>
    <title>初探Docker</title>
    <link href="https://aotu.io/notes/2016/02/27/docker/"/>
    <id>https://aotu.io/notes/2016/02/27/docker/</id>
    <published>2016-02-27T09:55:35.000Z</published>
    <updated>2016-10-20T07:06:32.415Z</updated>
    
    <content type="html"><![CDATA[<p>本文旨在让大家了解什么是Docker，并带领大家体验Docker使用的整个流程。</p>
<a id="more"></a>
<p>开启Docker学习之旅前，我们简单描述几个场景，应该很多人都有碰到过：</p>
<p>小凹同学开发了一个web应用，服务器环境是: <code>centos 7</code> + <code>nginx</code> + <code>node4.6</code> + <code>mongodb3.2.3</code> 最近要上线了。</p>
<p>【场景1】：刚好公司有一台服务器可以用，但是服务器上有一些其他服务，而且已经装了<code>node3.31</code>和<code>mongodb2.3</code>，小凹蒙了，到底是直接升级环境呢？还是改一个适配低版本的应用呢？</p>
<p>【场景2】：终于花了很久时间部署上了，慢慢的项目需求越来越多，小凹的同事小凸也准备一起迭代这个项目，小凸又要重新配置一遍应用环境到本地做测试，随着越来越多的同事参与进来，每个人都要配置一遍本地测试环境，重复工作，时间又白白浪费掉。</p>
<p>【场景3】：随着项目越做越大，现有服务器配置和带宽已经不能满足了，小凹需要把这个项目迁移出去并做水平扩展，然后又得重复配置环境到多台服务器，而且这些服务器有可能还是会重复前面的场景1。</p>
<p>【场景4】：运维要清理一些服务器，整理出来，把没有完全利用的服务器，分给新的项目用，要罗列出来每台服务器的服务，然后删除掉不需要的，这时候发现完全无从下手。</p>
<p>上面的场景经常发生，也许就发生在你我身边，而且无比头疼，但对Docker来说解决这些问题都易如反掌，下面我们就一步步来了解并使用Docker。</p>
<h2 id="什么是Docker？"><a href="#什么是Docker？" class="headerlink" title="什么是Docker？"></a>什么是Docker？</h2><p><a href="https://www.docker.com/" target="_blank" rel="external">Docker</a>是一个<a href="https://github.com/docker/docker" target="_blank" rel="external">开源</a>的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（<a href="https://zh.wikipedia.org/wiki/%E8%99%9B%E6%93%AC%E6%A9%9F%E5%99%A8" target="_blank" rel="external">虚拟机</a>）、<a href="https://en.wikipedia.org/wiki/BareMetal" target="_blank" rel="external">bare metal</a>、<a href="https://zh.wikipedia.org/wiki/OpenStack" target="_blank" rel="external">OpenStack</a> 集群和其他的基础应用平台。</p>
<p>官方的描述是：Build, Ship, and Run Any App, Anywhere 在任何地方部署，传输，运行任何应用。</p>
<p>其实很像虚拟机，但是跟虚拟机比起来 更灵活,速度更快，CPU/内存消耗更低，关键是更方便管理。</p>
<p><img src="//img.aotu.io/lizhi/docker/docker-filesystems-multilayer3.png" alt="img"></p>
<p>上图就是一张Docker层级图， 最下面是核心系统，文件系统等构成Dokcer底层，上面的是镜像（image），分为基础镜像和普通镜像，所有镜像可以直接启动生成一个实例（container），container我们可以理解为一个可以直接运行的虚拟机了。</p>
<p>其中基础image 启动后生成container，然后添加一些应用如 <code>apache</code>，<code>emacs</code>，可以通过提交操作直接生成普通的image。 我们可以共享这个image到任何地方，并启动它。</p>
<h2 id="使用Docker"><a href="#使用Docker" class="headerlink" title="使用Docker"></a>使用Docker</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>Docker 可以安装在 <code>Linux</code>, <code>Mac OS</code>, <code>Windows</code> 上，详细安装步骤可以参考 <strong><a href="https://docs.docker.com/engine/installation/" target="_blank" rel="external">官方安装文档</a></strong> 。</p>
<p><em>注：本文就不一一举例所有的安装方法，就以操作系统 <strong><a href="https://zh.wikipedia.org/wiki/CentOS" target="_blank" rel="external">centos</a></strong> 为例。</em></p>
<p>由于docker 只支持 <code>centos6</code>以上，<code>64</code>位的版本操作系统，所以安装前可以用以下命令查看服务器系统。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ getconf LONG_BIT           <span class="comment">//查看操作系统是多少位</span></div><div class="line">&gt; <span class="number">64</span></div><div class="line">$ cat /etc/redhat-release    <span class="comment">//查看操作系统版本</span></div><div class="line">&gt; CentOS Linux release <span class="number">7.0</span><span class="number">.1406</span> (Core)</div></pre></td></tr></table></figure></p>
<p>上面是我使用的机器 <code>centos7</code> <code>64</code>位系统，我就以这个为例讲下面的使用步骤。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl -fsSL <span class="keyword">https</span>://<span class="built_in">get</span>.docker.com/ | sh<span class="comment"> //安装</span></div><div class="line">$ docker <span class="built_in">version</span><span class="comment"> // 查看是否安装成功</span></div></pre></td></tr></table></figure></p>
<p>如果 <strong>安装失败</strong> 可以尝试使用阿里云的代理安装。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -sSL http://acs-public-mirror.oss-<span class="keyword">cn</span>-hangzhou.aliyuncs.<span class="keyword">com</span>/docker-engine/internet | <span class="keyword">sh</span> -</div></pre></td></tr></table></figure></p>
<p>其他更详细的阿里云Docker代理加速器文档，可以点击<a href="https://help.aliyun.com/knowledge_detail/5974865.html" target="_blank" rel="external">这里</a></p>
<p>安装成功后启动Docker，并设置开机启动。<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> sudo service docker start  <span class="comment">//开启Docker 服务</span></div><div class="line"><span class="symbol">$</span> sudo chkconfig docker on   <span class="comment">//开机启动</span></div></pre></td></tr></table></figure></p>
<h3 id="获取基础镜像"><a href="#获取基础镜像" class="headerlink" title="获取基础镜像"></a>获取基础镜像</h3><p><em>注：假定我需要部署一个基于<code>centos</code>的应用，当然也可以换成别的，比如：<code>Redis</code> 或者 <code>Ubuntu</code>，可以是任何镜像来当做基础镜像，跟本机原有系统无关，只与所要部署的应用有关。</em></p>
<p>首先搜索需要获取的 <strong><a href="https://hub.docker.com/explore/" target="_blank" rel="external">镜像</a></strong>，这是官方<code>Docker Hub</code>提供的镜像资源。 </p>
<p>比如，我选择获取 <strong><a href="https://hub.docker.com/_/centos/" target="_blank" rel="external">centos最新版本</a></strong> </p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> docker pull centos <span class="comment">//获取centos最近版本的镜像</span></div></pre></td></tr></table></figure>
<p><img src="//img.aotu.io/lizhi/docker/dockerimages.png" alt="img"><br>使用命令 <code>docker images</code> 就能查到刚才获取的 <code>centos</code> 的镜像，如上图。</p>
<h3 id="配置新的镜像"><a href="#配置新的镜像" class="headerlink" title="配置新的镜像"></a>配置新的镜像</h3><p><em>注：为了方便演示，假定我们的服务只需要安装一个<code>zip</code>的<code>centos</code>系统。</em></p>
<p>将上面获取的 <code>centos</code> 镜像，启动生成container，并在container中安装zip。</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@AY130809220512304015Z <span class="built_in">image</span>]<span class="meta"># docker run -t -i centos /bin/bash</span></div></pre></td></tr></table></figure>
<p><code>docker run</code> 启动容器，<code>-t</code>:为容器重新分配一个伪输入终端，通常与 -i 同时使用； <code>-i</code>:以交互模式运行容器，通常与 -t 同时使用；<code>centos</code> 为镜像名， 镜像名通常以 <strong>镜像名:版本</strong> 来使用，因为centos没有版本所以省略, 后面 <code>/bin/bash</code> 是启动container后运行的程序。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@e44ea4258885 /]# <span class="keyword">zip</span>  <span class="comment">//先运行zip，发现是没有安装的</span></div><div class="line">bash: <span class="keyword">zip</span>: command not found</div><div class="line">[root@90934d1f4225 /]# yum install <span class="keyword">zip</span>  <span class="comment">//安装zip</span></div><div class="line">[root@90934d1f4225 /]# <span class="keyword">zip</span> <span class="comment">//查看zip，安装成功</span></div><div class="line"><span class="keyword">Copyright</span> (c) 1990-2008 Info-<span class="keyword">ZIP</span> - <span class="keyword">Type</span> '<span class="keyword">zip</span> <span class="string">"-L"</span>' <span class="keyword">for</span> software license.</div><div class="line"><span class="keyword">Zip</span> 3.0 (July 5th 2008). Usage:</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>使用container命令行安装<code>zip</code>成功。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@90934d1f4225</span> /]<span class="meta"># exit</span></div></pre></td></tr></table></figure></p>
<p>退出容器命令行，因为不是后台运行，所以退出后，container也随即关闭了。<code>-d</code> 可以让container在后台运行，并可以随时通过<code>docker attach</code> 命令进入容器，具体例子可以看<a href="https://docs.docker.com/engine/reference/commandline/attach/" target="_blank" rel="external">这里</a>,因为不是本文重点就不展开说明了。</p>
<p><code>docker ps</code> 命令可以查看当前启动的 container， <code>-a</code> 启动和没启动的都会展示。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@AY130809220512304015Z image]# docker ps -a</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</div><div class="line"><span class="number">8</span>f08b2b67380        centos              <span class="string">"/bin/bash"</span>         <span class="number">21</span> minutes ago      Exited (<span class="number">0</span>) <span class="number">20</span> minutes ago                       lonely_euler</div></pre></td></tr></table></figure>
<p>有一个id为 8f08b2b67380的container，这个就是我们刚才安装了zip，并退出的container。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@AY130809220512304015Z <span class="built_in">image</span>]<span class="meta"># docker commit -m <span class="meta-string">"Added zip install"</span> 8f08b2b67380 test:1</span></div><div class="line">sha256:<span class="number">8</span>f1d192a4ea2a80801e33cd5fadb5f37180bb718f729f77a404a347b977d753c</div></pre></td></tr></table></figure></p>
<p><code>docker commit</code> 将container提交生成image， <code>-m</code>：为描述, 后面紧接着的是container的id， <code>test:1</code> 是提交的镜像名称和版本。</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@AY130809220512304015Z image]# docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</div><div class="line"><span class="keyword">test                 </span>1                   8f1d192a4ea2        About a minute ago   266.7 MB</div><div class="line">centos              latest              0f0be3675ebb        7 days ago           196.6 MB</div></pre></td></tr></table></figure>
<p>再查看的时候已经多了一个image了，这个image就是我们安装了zip的image，到此我们已经生成一个新的image。</p>
<p>我们可以直接通过这个新的镜像启动容器，还是前面介绍过的命令<code>docker run</code> 并测试下zip，如下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@AY130809220512304015Z image]# sudo docker <span class="keyword">run</span> -t -i o2team-<span class="keyword">test</span>:2 /bin/bash</div><div class="line">[root@2f1f28be351c /]# <span class="keyword">zip</span></div><div class="line"><span class="keyword">Copyright</span> (c) 1990-2008 Info-<span class="keyword">ZIP</span> - <span class="keyword">Type</span> '<span class="keyword">zip</span> <span class="string">"-L"</span>' <span class="keyword">for</span> software license.</div><div class="line"><span class="keyword">Zip</span> 3.0 (July 5th 2008). Usage:</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>好了这个镜像已经制作完成，当然实际情况下，安装的肯定不仅仅只有zip这么简单。</p>
<p>但是在一个团队里，仅仅给我们image，我们可能不知道这个镜像到底做了什么，所以还有一种方法使用 配置文件<code>Dockerfile</code>，build出来一个镜像，这样更易于团队协作,下面我将介绍一下这种方式。</p>
<h3 id="通过Dockerfile-配置新的image"><a href="#通过Dockerfile-配置新的image" class="headerlink" title="通过Dockerfile 配置新的image"></a>通过Dockerfile 配置新的image</h3><p>开始之前顺便介绍删除image和container的命令，它们分别是<code>docker rmi</code> 删除image 和 <code>docker rm</code> 删除container，后面都是跟对应的id或者名称，为了后面的操作我们这里通过命令 <code>docker rmi 8f1d192a4ea2</code> 删除掉刚才建的image。</p>
<p><em>注：如果发现删不掉image，可能被某些容器引用了，可以通过上面介绍的<code>docker ps -a</code>查看container，并用 <code>docker rm</code>删除掉这个container</em>。</p>
<p>接着我们创建<code>Dockerfile</code><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>mkdir o2team</div><div class="line"><span class="variable">$ </span>cd o2team</div><div class="line"><span class="variable">$ </span>touch Dockerfile</div></pre></td></tr></table></figure></p>
<p>下面是 <code>Dockerfile</code> 中的内容<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Dockerfile for o2team</span></div><div class="line"><span class="comment"># http://aotu.io/</span></div><div class="line"><span class="keyword">FROM</span> centos</div><div class="line"><span class="keyword">MAINTAINER</span> lizhi &lt;fanlizhi@jd.com&gt;</div><div class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install zip</span></div></pre></td></tr></table></figure></p>
<p><code>#</code>为注释，<code>FROM centos</code> 为基础镜像来源，<code>MAINTAINER</code>为作者信息, <code>RUN</code> 则为 运行某些 命令，编辑完成后保存，然后我们就可以直接构建我们新的image，Dockerfile详细使用文档可以参看<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="external">这里</a>。</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@AY130809220512304015Z</span> o2team-test]<span class="meta"># docker build -t test:1 .</span></div></pre></td></tr></table></figure>
<p><code>docker build</code>就是通过Dockfile来创建一个新的Image，其中 <code>-t</code>:为新image的名字这里命名为test:1， <code>&quot;.&quot;</code> 则会在当前的目录下找 <code>Dockerfile</code> 文件,当然这里也可以指定路径。</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@AY130809220512304015Z o2team-test]# docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line"><span class="keyword">test                </span>1                   8975f3fb142e        8 seconds ago       266.7 MB</div><div class="line">centos              latest              0f0be3675ebb        9 days ago          196.6 MB</div></pre></td></tr></table></figure>
<p>就这样，通过<code>docker images</code>也能生成一个新的镜像了，这种用Dockerfile的方式更加适合团队使用，环境配置更清晰。</p>
<p>到这里，我们只需要管理我们的镜像就好了，比如同步镜像给其他人，或者其他机器。</p>
<p>其实docker就给我们提供了这样一整套的解决方案，我们可以把我们的镜像提交到 <strong><a href="https://hub.docker.com/" target="_blank" rel="external">Docker Hub</a></strong>，类似 <code>github</code>一样的远程仓库，当我们需要的时候只需要 pull下来启动就好了。</p>
<h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>我们就把这个test镜像提交到<code>Docker Hub</code></p>
<p>首先我们得先注册：<a href="https://hub.docker.com/" target="_blank" rel="external">https://hub.docker.com/</a></p>
<p>注册成功后就可以<code>docker login</code>登录了<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@AY130809220512304015Z</span> o2team-test]<span class="meta"># docker login</span></div><div class="line">&gt; Username: a569171010</div><div class="line">&gt; Password: xxx</div><div class="line">&gt; Email: fanlizhi<span class="symbol">@jd</span>.com</div><div class="line">Login Succeeded</div></pre></td></tr></table></figure></p>
<p>填完登录后就可以push了，注意这里push之前得确保名称是 <code>youruser/xxx</code><br>比如我的用户名是 a569171010 所以我需要将刚才的image 重命名成 a569171010/test:1,这里可以用<code>docker tag</code>命令重命名。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@AY130809220512304015Z o2team-<span class="keyword">test</span>]# docker tag <span class="keyword">test</span>:<span class="number">1</span> a569171010/<span class="keyword">test</span>:<span class="number">1</span></div><div class="line">[root@AY130809220512304015Z o2team-<span class="keyword">test</span>]# docker <span class="keyword">push</span> a569171010/<span class="keyword">test</span>:<span class="number">1</span></div></pre></td></tr></table></figure>
<p>然后就发布出去了，在 <strong><a href="https://hub.docker.com/" target="_blank" rel="external">Docker Hub</a></strong> 上就可以看到下面多了这一条记录，当我们要获取的时候就直接 <code>docker pull a569171010/test</code>就可以了，因为是公用库所以任何人都可以获取并使用。<br><img src="//img.aotu.io/lizhi/docker/a569171010-test.png" alt="img"></p>
<p>我们已经基本熟悉，了解了整个Docker使用的流程，回过头来看看开始我们抛出的那几个曾经很棘手的问题，是不是都能迎刃而解呢？因为image的可移植和隔离性，我们不仅可以轻松迁移扩展，还能轻松了解现在机器上各个服务运行情况。</p>
<p>下图为Docker整个使用流程：<br><img src="//img.aotu.io/lizhi/docker/cmmd.png" alt="img"></p>
<h3 id="本文参考资料"><a href="#本文参考资料" class="headerlink" title="本文参考资料"></a>本文参考资料</h3><p><a href="https://www.docker.com/" target="_blank" rel="external">Docker 官方文档</a><br><a href="http://www.widuu.com/docker/index.html" target="_blank" rel="external">Docker 中文指南</a><br><a href="http://dockone.io/article/101" target="_blank" rel="external">dockone.io 国内比较活跃的Docker论坛</a><br><a href="http://tech.meituan.com/docker_introduction.html" target="_blank" rel="external">Docker 入门介绍</a><br><a href="https://github.com/docker/docker-registry" target="_blank" rel="external">Docker github</a><br><a href="https://help.aliyun.com/knowledge_detail/5974865.html" target="_blank" rel="external">阿里镜像使用文档</a><br><a href="https://zh.wikipedia.org/zh/Docker_(%E8%BB%9F%E9%AB%94" target="_blank" rel="external">维基百科</a></p>
<h3 id="还想了解的"><a href="#还想了解的" class="headerlink" title="还想了解的"></a>还想了解的</h3><p>这篇文章只是带领大家了解Docker的整个使用流程和体验，关于其他的一些细节问题比如：后台运行container，各container之间的通讯，端口映射，文件共享等都没有涉及到,最近<code>docker1.1.0</code>发布又有很多新的特性和性能优化，如果有兴趣的同学可以参考这些：</p>
<p><a href="http://tech.uc.cn/?p=2726" target="_blank" rel="external">利用Docker构建开发环境</a><br><a href="https://www.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="external">Docker-从入门到实践</a><br><a href="https://github.com/veggiemonk/awesome-docker" target="_blank" rel="external">Docker-学习资料</a><br><a href="https://blog.docker.com/2016/02/docker-1-10/" target="_blank" rel="external">Docker 1.1.0新特性</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文旨在让大家了解什么是Docker，并带领大家体验Docker使用的整个流程。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="docker" scheme="https://aotu.io/tags/docker/"/>
    
      <category term="环境" scheme="https://aotu.io/tags/%E7%8E%AF%E5%A2%83/"/>
    
      <category term="部署" scheme="https://aotu.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="docker hub" scheme="https://aotu.io/tags/docker-hub/"/>
    
  </entry>
  
  <entry>
    <title>使用npm scripts替代gulp</title>
    <link href="https://aotu.io/notes/2016/02/26/use-npm-script-instead-of-gulp/"/>
    <id>https://aotu.io/notes/2016/02/26/use-npm-script-instead-of-gulp/</id>
    <published>2016-02-26T08:06:24.000Z</published>
    <updated>2016-10-20T07:06:32.415Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="为什么要用npm-scripts替代gulp"><a href="#为什么要用npm-scripts替代gulp" class="headerlink" title="为什么要用npm scripts替代gulp"></a>为什么要用<code>npm scripts</code>替代<code>gulp</code></h2><p>现在<code>前端自动化</code>的配套工具估计都离不开<code>gulp</code>或者是<code>grunt</code>，有一些或许会用上<code>webpack</code>辅助用上最新的<code>ES6</code>语法等；但是不知道大家在使用<code>gulp</code>众多插件的时候有没有碰到过一些问题，比如：有一些插件你仅仅需要用到其中一点点的API、插件更新速度非常慢、有一些插件碰到bug的时候调试起来非常麻烦等。所以总结一下<code>gulp</code>或者<code>grunt</code>其实都会有以下问题：</p>
<ol>
<li>依赖于插件作者</li>
<li>调试很不方便</li>
<li>插件文档说明不连贯</li>
</ol>
<p>而如果直接使用<code>npm scripts</code>完全可以避免这些问题，在我们<code>package.json</code>里面的<code>scripts</code>属性直接定义需要执行的任务，比如<code>npm start</code>和<code>npm test</code>其实就是<code>npm run start</code>和<code>npm run test</code>的缩写，我们可以在<code>scripts</code>里面定义各种需要的任务，举个最简单的例子(清除dist目录)：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 1.用gulp插件来实现</div><div class="line">var gulp = require('gulp');</div><div class="line">var del  = require('del');</div><div class="line">gulp.task('clean', function() &#123;</div><div class="line">    del(['./dist/**/*']).then(paths =&gt; &#123;</div><div class="line">        console.log('Deleted files and folders:\n', paths.join('\n'));</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"># 2.用npm scripts来实现</div><div class="line"># package.json配置</div><div class="line">    ...</div><div class="line">    "scripts": &#123;</div><div class="line">        clean: "rimraf ./dist"</div><div class="line">    &#125;,</div><div class="line">    "devDependencies": &#123;</div><div class="line">        "rimraf": "^2.5.2"</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从上面示例代码可以看出明显直接用<code>npm scripts</code>实现的同一个功能相对<code>gulp</code>要简单得多，当然这个功能比较简单，如果碰到复杂的一些任务肯定就有反对的声音了。那我们将细细将上面三点来阐述。</p>
<h3 id="依赖于插件作者"><a href="#依赖于插件作者" class="headerlink" title="依赖于插件作者"></a>依赖于插件作者</h3><p>当你需要使用到最新的或者不那么流行的技术时，根本就没有插件给你使用；或者一些插件已经过时了。最新<code>Babel 6</code>已经发布，很多API明显修改了，所以很多<code>gulp</code>插件根本不适用于最新版本。</p>
<p>这个时候你就必须等待作者来更新插件，或者你自己去<code>fix</code>这些问题，这会导致你不能及时用上最新版本的工具。相反，当你直接使用<code>npm scripts</code>的时候，你只需要直接找到可以实现的工具即可。这意味着当新版本的<code>Mocha</code>、<code>Babel</code>、<code>Webpack</code>、<code>Browserify</code>发布的时候，你就可以马上用上这些版本。</p>
<p>就目前插件数量来说，没有什么可以打败<code>npm</code>包：</p>
<p><img src="//img.aotu.io/cnt1992/npm-compare-width-gulp.png" alt="img"></p>
<h3 id="调试很不方便"><a href="#调试很不方便" class="headerlink" title="调试很不方便"></a>调试很不方便</h3><p>由于<code>gulp</code>增加了一层抽象，所以会有潜在的<code>bug</code>：</p>
<ol>
<li>是否基础工具崩溃了？</li>
<li>是否<code>Grunt</code>/<code>Gulp</code>插件崩溃了？</li>
<li>是否配置文件出错了？</li>
<li>是否用了不稳定的版本？</li>
</ol>
<p>而直接使用<code>npm scripts</code>直接避免了第2点跟第3点，而由于不使用那么多插件，那么包相对较少，第4点也很少会碰到。</p>
<h3 id="插件文档说明不连贯"><a href="#插件文档说明不连贯" class="headerlink" title="插件文档说明不连贯"></a>插件文档说明不连贯</h3><p>相比有用过很多插件的人都知道，一些核心的工具文档写得总比包装起来的<code>Gulp</code>插件要清晰得多。举个简单的例子来说，如果我需要用到<code>gulp-eslint</code>插件，那么就可能会不断在<code>gulp-eslint</code>的文档跟<code>ESLint</code>网站切换，必须对比看看两者存在些什么区别。</p>
<h2 id="为什么我们总是忽略使用npm-scripts而更青睐于Gulp"><a href="#为什么我们总是忽略使用npm-scripts而更青睐于Gulp" class="headerlink" title="为什么我们总是忽略使用npm scripts而更青睐于Gulp"></a>为什么我们总是忽略使用<code>npm scripts</code>而更青睐于<code>Gulp</code></h2><p><code>Gulp</code>和<code>Grunt</code>之所以这么流行，主要有下面4个点：</p>
<ol>
<li>开发者认为<code>npm scripts</code>需要能写命令行的技能</li>
<li>开发者认为<code>npm scripts</code>能处理的能力不足够</li>
<li>开发者觉得<code>Gulp</code>的流对于快速构建是很有必要的</li>
<li>开发者认为<code>npm scripts</code>不能跨平台运行</li>
</ol>
<h3 id="开发者认为npm-scripts需要能写命令行的技能"><a href="#开发者认为npm-scripts需要能写命令行的技能" class="headerlink" title="开发者认为npm scripts需要能写命令行的技能"></a>开发者认为<code>npm scripts</code>需要能写命令行的技能</h3><p>其实你完全不需要精通于<code>Unix</code>或者<code>Windows</code>的命令行脚本，比如你不知道在<code>Unix</code>下面删除一个目录的命令是：<code>rm -rf</code>，这其实没啥问题，你完全可以使用<a href="https://www.npmjs.com/package/rimraf" target="_blank" rel="external">rimraf</a>，同时它也是跨平台的。在这里推荐一个工具包资源网站：<a href="https://libraries.io/" target="_blank" rel="external">libraries.io</a></p>
<h3 id="开发者认为npm-scripts能处理的能力不足够"><a href="#开发者认为npm-scripts能处理的能力不足够" class="headerlink" title="开发者认为npm scripts能处理的能力不足够"></a>开发者认为<code>npm scripts</code>能处理的能力不足够</h3><p><code>npm scripts</code>其实比你想象中的要强大，主要依赖于<a href="https://docs.npmjs.com/misc/scripts#description" target="_blank" rel="external">预处理和后置处理钩子</a>，比如下面例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"npm-scripts-demo"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"npm scripts demo"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"prebuild"</span>: <span class="string">"echo I run before the build script"</span>,</div><div class="line">    <span class="string">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack"</span>,</div><div class="line">    <span class="string">"postbuild"</span>: <span class="string">"echo I run after the build script"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正如上面例子一样，<code>prebuild</code>定义的脚本会比<code>build</code>任务先执行，而<code>postbuild</code>定义的脚本会比<code>build</code>任务后执行，因为相对于<code>build</code>来说，增加了一个前缀<code>pre</code>和<code>post</code>，所以当我执行<code>npm run build</code>的时候会自动地顺序执行<code>prebuild -&gt; build -&gt; postbuild</code>。</p>
<p>同时你可以将一个大的任务不断拆分成小的任务，比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"npm-scripts-demo"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"npm scripts demo"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"clean"</span>: <span class="string">"rimraf ./dist &amp;&amp; mkdir dist"</span>,</div><div class="line">    <span class="string">"prebuild"</span>: <span class="string">"npm run clean"</span>,</div><div class="line">    <span class="string">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面例子中将<code>clean</code>任务抽离出来了，当你执行<code>npm run build</code>的时候，会先自动执行<code>npm run prebuild</code>任务，那就相当于执行了<code>npm run clean</code>任务了，注意上面的<code>&amp;&amp;</code>表示先后顺序执行，区别于<code>&amp;</code>表示同时执行。</p>
<h2 id="npm-scripts的一些缺点"><a href="#npm-scripts的一些缺点" class="headerlink" title="npm scripts的一些缺点"></a><code>npm scripts</code>的一些缺点</h2><p>不得不承认，用<code>npm scripts</code>来写自动化构建任务还是存在一些不足：不能在JSON文件里面写注释。有一些方法可以弥补这方面的不足：</p>
<ol>
<li>写功能相对小而独立并且命名好的脚本名字</li>
<li>脚本跟文档分离（将文档写进READ.md）</li>
<li>直接分离脚本写进Makefile等独立的文件</li>
</ol>
<p>推荐使用第一种，脚本名字本来就应该能够直接描述功能。</p>
<h2 id="一些参考"><a href="#一些参考" class="headerlink" title="一些参考"></a>一些参考</h2><ul>
<li><a href="http://substack.net/task_automation_with_npm_run" target="_blank" rel="external">Task automation with npm run</a> – James Holliday</li>
<li><a href="https://www.youtube.com/watch?v=0RYETb9YVrk" target="_blank" rel="external">Advanced front-end automation with npm scripts</a> – Kate Hudson</li>
<li><a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/" target="_blank" rel="external">How to use npm as a build tool</a> – Kieth Girkel</li>
<li><a href="http://app.pluralsight.com/courses/npm-build-tool-introduction" target="_blank" rel="external">Introduction to npm as a Build Tool</a> – Marcus Hammarberg</li>
<li><a href="http://gon.to/2015/02/26/gulp-is-awesome-but-do-we-really-need-it/" target="_blank" rel="external">Gulp is awesome, but do we really need it?</a> – Gonto</li>
<li><a href="http://code.tutsplus.com/courses/npm-scripts-for-build-tooling" target="_blank" rel="external">NPM Scripts for Build Tooling</a> – Andrew Burgess</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;为什么要用npm-scripts替代gulp&quot;&gt;&lt;a href=&quot;#为什么要用npm-scripts替代gulp&quot; class=&quot;headerlink&quot; title=&quot;为什么要用npm scripts替代gulp&quot;&gt;&lt;/a&gt;为什
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="npm" scheme="https://aotu.io/tags/npm/"/>
    
      <category term="gulp" scheme="https://aotu.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Node 生产环境调试</title>
    <link href="https://aotu.io/notes/2016/02/24/node-debug-in-production/"/>
    <id>https://aotu.io/notes/2016/02/24/node-debug-in-production/</id>
    <published>2016-02-24T04:25:35.000Z</published>
    <updated>2016-10-20T07:06:32.414Z</updated>
    
    <content type="html"><![CDATA[<p>本文以问答的形式，介绍生产环境中该如何去调试 Node 应用。<br>文章覆盖到了<strong>性能问题</strong>、<strong>崩溃问题</strong>、<strong>内存泄露</strong>的检查和解决手段。</p>
<h2 id="随着用户请求数越来越多，Node-请求越来越慢。怎么处理？"><a href="#随着用户请求数越来越多，Node-请求越来越慢。怎么处理？" class="headerlink" title="随着用户请求数越来越多，Node 请求越来越慢。怎么处理？"></a>随着用户请求数越来越多，Node 请求越来越慢。怎么处理？</h2><p>每个用户的请求，都会经过这几个阶段：</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">网络请求 -&gt; Node 中间层 -&gt; 目标接口 -&gt; 返回</div></pre></td></tr></table></figure>
<p>前三个过程都会消耗一定的时间，因此我们应该分析每个阶段的耗时，进行针对性优化。</p>
<p>假设你是用 Express 作为 API 服务器，你可以利用 Express 官方的 <a href="https://github.com/expressjs/response-time" target="_blank" rel="external">response-time</a> 和 <a href="https://github.com/sivy/node-statsd" target="_blank" rel="external">StatsD</a>，<br>将每个中间层的请求数据都收集并统计起来。</p>
<p>但在 Express 世界之外，还有一个更专注于做 API 服务器的框架，叫 <a href="https://github.com/restify/node-restify" target="_blank" rel="external">restify</a>。<br>restify 是一个纯 Restful 的框架，它可以结合 DTrace 去记录一个用户请求中，每个环节消耗的时间。</p>
<p>图中高亮的部分是 restify 对于请求耗时的记录：</p>
<p><img src="https://cloud.githubusercontent.com/assets/6262943/11868141/c7fce5e2-a4f0-11e5-8299-5f13b06fa60f.png" alt="resify_bunyan"></p>
<p>此外，restify 还有着更多强大功能，包括请求频率控制、内置 Ajax 错误类型、基于 <a href="https://github.com/trentm/node-bunyan" target="_blank" rel="external">bunyan</a> 的日志。</p>
<h2 id="如何知道线上项目哪个函数消耗更多的-CPU-时间？"><a href="#如何知道线上项目哪个函数消耗更多的-CPU-时间？" class="headerlink" title="如何知道线上项目哪个函数消耗更多的 CPU 时间？"></a>如何知道线上项目哪个函数消耗更多的 CPU 时间？</h2><p>参考以下几个步骤，通过可视化的角度，揪出消耗 CPU 的凶手。</p>
<ol>
<li>确保你线上的 Node 版本是 5.0 以上</li>
<li><p>启动 Node 项目时，增加 <code>--perf-basic-prof-only-functions</code> 参数，如：</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node --perf-basic-prof-only-functions app.js &amp;   <span class="comment"># Tips: `&amp;`表示后台运行该代码</span></div></pre></td></tr></table></figure>
</li>
<li><p>用 <a href="https://perf.wiki.kernel.org/index.php/Tutorial" target="_blank" rel="external">perf</a> 生成 Node 进程的栈信息文件(stack trace)</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo yum install perf  <span class="comment"># perf 非系统自带，需另外安装</span></div><div class="line"></div><div class="line"><span class="comment"># 获取 Node 的进程 ID，用 30 秒时间记录栈信息并生成 `perf-xxxxx.map` 文件（被保存在 /tmp/）</span></div><div class="line">sudo perf record -F 99 -p `pgrep -n node` -g -- sleep 30</div><div class="line"></div><div class="line">ls /tmp/*.map                         <span class="comment"># 检查该文件是否存在</span></div><div class="line">sudo chown root /tmp/perf-xxxxx.map   <span class="comment"># 该文件设置权限</span></div><div class="line">sudo perf script &gt; nodestacks         <span class="comment"># 将该文件转换成可解析的 `nodestacks` 文件</span></div></pre></td></tr></table></figure>
</li>
<li><p>下载 FlameGraph 并生成可视化的栈信息火焰图</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> --depth 1 http://github.com/brendangregg/FlameGraph  <span class="comment"># 下载 FlameGraph</span></div><div class="line"></div><div class="line"><span class="comment"># 生成火焰图</span></div><div class="line"><span class="built_in">cd</span> FlameGraph</div><div class="line">./stackcollapse-perf.pl &lt; ../nodestacks | ./flamegraph.pl --colors js &gt; ../node-flamegraph.svg</div></pre></td></tr></table></figure>
</li>
</ol>
<p>最后会生成类似这样的图片：</p>
<p><img src="https://cloud.githubusercontent.com/assets/6262943/11839496/56be9ce4-a429-11e5-85b7-64e1cc730e52.png" alt="image"></p>
<p><strong>解释这种图片的含义：</strong></p>
<ol>
<li>每个方块为被调用的函数</li>
<li>X 轴表示 CPU 的消耗时间</li>
<li>Y 轴表示栈的深度</li>
<li>颜色为随机值</li>
</ol>
<p>如果方块横向越长，说明这个函数消耗的 CPU 时间越多。<br>这样，你就可以定位到这个函数，深入代码去定位问题了。</p>
<h2 id="如何收集线上的崩溃信息？"><a href="#如何收集线上的崩溃信息？" class="headerlink" title="如何收集线上的崩溃信息？"></a>如何收集线上的崩溃信息？</h2><p>可以让 Node 在运行过程中，记录自身的运行状态，并崩溃的时候输出调试信息。<br>而这些调试信息被称为 <a href="https://en.wikipedia.org/wiki/Core_dump" target="_blank" rel="external">Core Dump</a>，会被保存在一个文件中，我们称之为 Core 文件。<br>Core 文件记录了进程运行时的一切状态，包括调用栈、内存变量、被调用的函数源码等。<br>有了这个文件，我们就可以最大化的还原出当时应用运行的过程。</p>
<p>下面我们利用 <a href="https://github.com/joyent/mdb_v8" target="_blank" rel="external">mdb_v8</a> 工具，这个目前最好的 Node 命令行分析工具，结合一个简单案例来演示。</p>
<ol>
<li><p>配置 Solaris 环境</p>
<p> 由于 <a href="https://github.com/joyent/mdb_v8" target="_blank" rel="external">mdb_v8</a> 只能运行在 Solaris 环境，因此你有两种选择：</p>
<ul>
<li>安装基于 Illumos 的系统，如 OmniOS 虚拟机</li>
<li><p>使用 Joyent 公司收费的 Manta 服务，请参阅<a href="https://www.joyent.com/blog/mdb-and-linux" target="_blank" rel="external">这里</a></p>
<p>笔者使用第一种方式，即通过虚拟机运行 mdb_v8，详见 <a href="issues/5">Vagrant 安装 OmniOS 指南</a>。</p>
</li>
</ul>
</li>
<li><p>启动 Node 项目时，增加 <code>--abort-on-uncaught-exception</code> 参数，让应用在崩溃时输出 Core 文件</p>
<p> 本文用以下会崩溃的代码测试，生成 Core 文件。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">myproperty</span>: <span class="string">"Hello World"</span>,</div><div class="line">    <span class="attr">count</span>: <span class="number">0</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    obj.count++;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (obj.count === <span class="number">1000</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"sad trombone"</span>);  <span class="comment">// 该行会让应用崩溃</span></div><div class="line">    </div><div class="line">    setImmediate(increment);</div><div class="line">&#125;</div><div class="line"></div><div class="line">setImmediate(increment);</div></pre></td></tr></table></figure>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 运行上述代码</span></div><div class="line">node --abort-on-uncaught-exception throw.js</div></pre></td></tr></table></figure>
</li>
<li><p>将 Core 文件和 Node 二进制程序打包，传到 Vagrant 虚拟机内</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 打包 Core Dump 和 Node 二进制程序</span></div><div class="line">mkdir debug</div><div class="line">cp core.* debug/</div><div class="line">cp $(<span class="built_in">which</span> node) debug/</div><div class="line">zip -r debug.zip debug </div><div class="line"></div><div class="line"><span class="comment"># 传压缩包到 Vagrant 虚拟机内</span></div><div class="line">mv debug.zip xxxx  <span class="comment"># xxxx 表示 Vagrantfile 所在的目录，即你启动虚拟机的目录</span></div><div class="line"></div><div class="line"><span class="comment"># 在虚拟机里解压缩包</span></div><div class="line">unzip -o /vagrant/debug.zip <span class="_">-d</span> ~</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <a href="https://github.com/joyent/mdb_v8" target="_blank" rel="external">mdb_v8</a> 解析 Core 文件</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载最新的 mdb_v8 模块</span></div><div class="line">wget https://us-east.manta.joyent.com/Joyent_Dev/public/mdb_v8/v1.1.2/mdb_v8_amd64.so</div><div class="line"></div><div class="line"><span class="comment"># 使用 mdb 工具加载 Core Dump，格式为：mdb [Node 二进制程序] [Core 文件]</span></div><div class="line">mdb ./node ./core</div><div class="line"></div><div class="line"><span class="comment"># 进入 REPL 后, 运行以下代码加载 mdb_v8 模块</span></div><div class="line">&gt; ::load ./mdb_v8_amd64.so</div></pre></td></tr></table></figure>
</li>
<li><p>分析崩溃原因</p>
<p> 5.1. 使用 mdb_v8 的 <a href="https://github.com/joyent/mdb_v8/blob/master/docs/usage.md#jsstack" target="_blank" rel="external">jsstack</a> 指令，查看最后的调用栈情况</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&gt; ::jsstack -v</div><div class="line">native: v8::base::OS::Abort+0xd</div><div class="line">native: v8::internal::Isolate::DoThrow+0x381</div><div class="line">native: v8::internal::Isolate::Throw+0x11</div><div class="line">native: v8::internal::Runtime_Throw+0x3d</div><div class="line">        (1 internal frame elided)</div><div class="line">js:     increment</div><div class="line">        file: /<span class="built_in">export</span>/www/node/mongo-express/throw.js</div><div class="line">        posn: line 6</div><div class="line">        this: 2ac5150<span class="built_in">fc</span>3f9 (JSObject: Immediate)</div><div class="line">        (    1 <span class="keyword">function</span> (exports, require, module, __filename, __dirname) &#123; var obj = &#123;</div><div class="line">            2   myproperty: <span class="string">"Hello World"</span>,</div><div class="line">            3   count: 0,</div><div class="line">            4 &#125;;</div><div class="line">            5</div><div class="line">            6 <span class="keyword">function</span> <span class="function"><span class="title">increment</span></span>() &#123;</div><div class="line">            7   obj.count++;</div><div class="line">            8</div><div class="line">            9   <span class="keyword">if</span> (obj.count === 1000)</div><div class="line">            10     throw new Error(<span class="string">"sad trombone"</span>);</div><div class="line">            11</div><div class="line">            12   <span class="built_in">set</span>Immediate(increment);</div><div class="line">            13 &#125;</div><div class="line">            14</div><div class="line">            15 <span class="built_in">set</span>Immediate(increment);</div><div class="line">            16</div><div class="line">            17 &#125;);</div><div class="line"></div><div class="line">js:     processImmediate</div><div class="line">        file: timers.js</div><div class="line">        posn: line 342</div><div class="line">        this: 2d184056ef69 (JSObject: process)</div><div class="line">        ...</div></pre></td></tr></table></figure>
<p> 5.2. 从上面信息得知，最后一个被调用的函数是 <code>increment</code>，因此可以查下该函数的地址</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查询 increment 函数地址值</span></div><div class="line">&gt; ::jsfunctions -n increment</div><div class="line">        FUNC   <span class="comment">#FUNCS NAME         FROM</span></div><div class="line">2ac51509c7a9        1 increment    /<span class="built_in">export</span>/www/node/mongo-express/throw.js line 6</div></pre></td></tr></table></figure>
<p> 5.3. 查到地址值后，就可以查出函数当时的局部变量</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查询 increment 函数当时的局部变量</span></div><div class="line">&gt; 2ac51509c7a9::jsclosure</div><div class="line"><span class="string">"obj"</span>: 2ac51509c941: &#123;</div><div class="line">    <span class="string">"myproperty"</span>: 2ae60c1a3f39: <span class="string">"Hello World"</span>,</div><div class="line">    <span class="string">"count"</span>: 3e800000000: 1000,</div><div class="line">&#125;</div><div class="line"><span class="string">"increment"</span>: 2ac51509c7a9: <span class="keyword">function</span> increment</div></pre></td></tr></table></figure>
<p> 结合代码可知，由于 <code>count</code> 数值已经到达 1000，导致应用崩溃。</p>
<p> 5.4. 当然，通过以下命令，还能查到 <code>count</code> 属性所在对象的起始状态和结束状态</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; ::findjsobjects -p count | ::findjsobjects <span class="_">-l</span> | ::jsprint</div><div class="line">&#123;</div><div class="line">    <span class="string">"myproperty"</span>: <span class="string">"Hello World"</span>,</div><div class="line">    <span class="string">"count"</span>: 0,</div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="string">"myproperty"</span>: <span class="string">"Hello World"</span>,</div><div class="line">    <span class="string">"count"</span>: 1000,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 对于 mdb_v8 更多的 Node 指令，请参阅<a href="https://github.com/joyent/mdb_v8/blob/master/docs/usage.md#node-specific-mdb-command-reference" target="_blank" rel="external">这里</a>。</p>
</li>
</ol>
<h2 id="如何追踪内存泄露问题？"><a href="#如何追踪内存泄露问题？" class="headerlink" title="如何追踪内存泄露问题？"></a>如何追踪内存泄露问题？</h2><p>上个问题中，我们用 Node 的 <code>--abort-on-uncaught-exception</code> 参数，让应用在崩溃后输出 Core 文件。<br>但如果应用一直在运行（即无崩溃），可以用 Linux 自带的 <a href="http://man7.org/linux/man-pages/man1/gcore.1.html" target="_blank" rel="external">gcore</a> 命令，导出 Core 文件并分析内存泄露的原因。</p>
<ol>
<li><p>本文用以下代码测试，该代码会导致内存泄露</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bigData = <span class="literal">null</span>;</div><div class="line"><span class="keyword">var</span> replaceData = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> originalData = bigData</div><div class="line">    bigData = &#123;</div><div class="line">        <span class="attr">longStr</span>: <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>).join(<span class="string">'*'</span>),</div><div class="line">        <span class="attr">closure</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// 这里引用到了 originalData，导致旧的 bigData 没有被释放</span></div><div class="line">            <span class="keyword">if</span> (originalData)</div><div class="line">                <span class="built_in">console</span>.log(originalData.longStr.length)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    bigData.closure()</div><div class="line">&#125;</div><div class="line"></div><div class="line">setInterval(replaceData, <span class="number">1000</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'process id: '</span>, process.pid)</div></pre></td></tr></table></figure>
<p> 用 <code>node xxx.js</code> 命令运行代码即可。 </p>
</li>
<li><p>每隔一段时间，用 <a href="http://man7.org/linux/man-pages/man1/gcore.1.html" target="_blank" rel="external">gcore</a> 对上述代码所在进程进行 Core Dump</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># PID 为进程 ID，上面代码会打印出来</span></div><div class="line"><span class="comment"># 文件会被保存为 leak_1.PID</span></div><div class="line">gcore -o leak_1 PID  </div><div class="line"></div><div class="line"><span class="comment"># 进程运行一段时间后（如15秒），再 Core Dump 一次</span></div><div class="line"><span class="comment"># 文件会被保存为 leak_2.PID</span></div><div class="line">gcore -o leak_2 PID</div></pre></td></tr></table></figure>
</li>
<li><p>利用 mdb_v8 提供的工具 <a href="https://github.com/joyent/mdb_v8/blob/master/tools/dumpjsobjects" target="_blank" rel="external">dumpjsobjects</a>，提取 Core 文件中的 JS 对象，并输出文件</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 每行命令生成两个文件，分别为 obj_id_x / obj_content_x</span></div><div class="line">./dumpjsobjects ./leak_1.PID ./mdb_v8_amd64.so obj_id_1 obj_content_1</div><div class="line">./dumpjsobjects ./leak_2.PID ./mdb_v8_amd64.so obj_id_2 obj_content_2</div></pre></td></tr></table></figure>
</li>
<li><p>利用 mdb_v8 提供的工具 <a href="https://github.com/joyent/mdb_v8/blob/master/tools%2Fmdbv8diff%2Fmdbv8diff" target="_blank" rel="external">mdbv8diff</a>，进行 JS 对象对比</p>
<p> 比较两个时期的 JS 对象的异同，即可获得未被释放的对象地址。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载安装 mdbv8diff</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/joyent/mdb_v8.git</div><div class="line"><span class="built_in">cd</span> mdb_v8/tools/mdbv8diff</div><div class="line">npm install</div><div class="line"></div><div class="line"><span class="comment"># 对比 Core 文件的 JS 对象</span></div><div class="line">./mdbv8diff /path/to/obj_content_1 /path/to/obj_content_2</div></pre></td></tr></table></figure>
<p> 打印出来的结果为：</p>
 <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">135</span><span class="string">f38df83d9:</span> only <span class="keyword">in</span> <span class="regexp">/Users/</span>edc<span class="regexp">/Downloads/</span>omnios/du_3</div></pre></td></tr></table></figure>
</li>
<li><p>用 mdb_v8 打印 <code>135f38df83d9</code> 内存地址对应的对象</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 打印该地址对象的内容</span></div><div class="line">&gt; 135f38df83d9::jsprint</div><div class="line">&#123;</div><div class="line">    <span class="string">"longStr"</span>: <span class="string">"*******...."</span>,</div><div class="line">    <span class="string">"closure"</span>: <span class="keyword">function</span> &lt;anonymous&gt; (as bigData.closure),</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 找出该对象所有的实例</span></div><div class="line">&gt; 135f38df83d9::findjsobjects</div><div class="line">39fac26f83d9</div><div class="line">39ec3a4f83d9</div><div class="line">3720c57f83d9</div><div class="line">...</div></pre></td></tr></table></figure>
<p> 从结果可以发现，该对象的实例一直在内存里未被释放。</p>
</li>
</ol>
<h2 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h2><p>本文参考了 Netflix 工程师 <a href="https://twitter.com/YunongX" target="_blank" rel="external">Yunong Xiao</a> 的<a href="http://techblog.netflix.com/2015/12/debugging-nodejs-in-production.html" target="_blank" rel="external">演讲分享</a>，在此感谢。<br>希望该文章可以给读者更多解决 Node 生产环境调试的思路。但对于生产环境中面临的各种复杂问题，也许需要更多的手段才能解决。 </p>
<hr>
<p>References</p>
<ol>
<li><a href="http://techblog.netflix.com/2015/12/debugging-nodejs-in-production.html" target="_blank" rel="external">http://techblog.netflix.com/2015/12/debugging-nodejs-in-production.html</a></li>
<li><a href="http://yunong.io/2015/11/23/generating-node-js-flame-graphs/" target="_blank" rel="external">http://yunong.io/2015/11/23/generating-node-js-flame-graphs/</a></li>
<li><a href="http://www.slideshare.net/davidapacheco/surge2012" target="_blank" rel="external">http://www.slideshare.net/davidapacheco/surge2012</a></li>
<li><a href="https://www.joyent.com/blog/mdb-and-linux" target="_blank" rel="external">https://www.joyent.com/blog/mdb-and-linux</a></li>
<li><a href="http://info.meteor.com/blog/an-interesting-kind-of-javascript-memory-leak" target="_blank" rel="external">http://info.meteor.com/blog/an-interesting-kind-of-javascript-memory-leak</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文以问答的形式，介绍生产环境中该如何去调试 Node 应用。&lt;br&gt;文章覆盖到了&lt;strong&gt;性能问题&lt;/strong&gt;、&lt;strong&gt;崩溃问题&lt;/strong&gt;、&lt;strong&gt;内存泄露&lt;/strong&gt;的检查和解决手段。&lt;/p&gt;
&lt;h2 id=&quot;随着用户请求数越来
    
    </summary>
    
      <category term="NodeJS" scheme="https://aotu.io/cates/NodeJS/"/>
    
    
      <category term="node" scheme="https://aotu.io/tags/node/"/>
    
      <category term="调试" scheme="https://aotu.io/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你搭建ngrok服务－轻松外网调试本机站点</title>
    <link href="https://aotu.io/notes/2016/02/19/ngrok/"/>
    <id>https://aotu.io/notes/2016/02/19/ngrok/</id>
    <published>2016-02-19T09:55:35.000Z</published>
    <updated>2016-10-20T07:06:32.414Z</updated>
    
    <content type="html"><![CDATA[<p>半年多没用ngrok，然后昨天发现它被墙了，艸～。</p>
<a id="more"></a>
<h2 id="ngrok是什么鬼？"><a href="#ngrok是什么鬼？" class="headerlink" title="ngrok是什么鬼？"></a>ngrok是什么鬼？</h2><p>做前端开发的童鞋或许不会太陌生。<br>如果你完全不知道它是什么东西，可以在它的github项目上了解下：<a href="https://github.com/inconshreveable/ngrok" target="_blank" rel="external">https://github.com/inconshreveable/ngrok</a><br>这里只提下它的核心功能：能够将你本机的HTTP服务（站点）或TCP服务，通过部署有ngrok服务的外网伺服器暴露给外网访问！</p>
<p>如上封面图所示，举一个栗子。</p>
<ol>
<li>橘色屏幕的笔记本是你的工作机器，安装了ngrok客户端</li>
<li>ngrok.com所在的服务器安装了ngrok的服务端（ngrokd）</li>
<li>利用ngrok 8080命令可以将你本机的8080端口暴露给反向代理至ngrok.com的某个二级域名如：xxx.ngrok.com</li>
<li>别人通过xxx.ngrok.com就可以访问你本机8080端口上的站点内容了。</li>
</ol>
<p>由此可见，除了Weinre、browsersync 这些惯用的手段外，借助ngrok，也一样可以解决前端开发过程经常遇到的“本地开发，外网调试”老大难题。</p>
<p>囧的是：ngrok.com被墙了，我们已无法用它官方的服务～<br>国内虽然有一些第三方的ngrok服务，但是也无法保证其稳定性。<br>还好ngrok是开源的，我们可以通过它的源码在自己的外网服务器上搭建自己的ngrok服务。</p>
<p>前提条件是：一台外网可访问的主机，且有域名解析至该主机上。</p>
<h2 id="搭建服务端ngrokd"><a href="#搭建服务端ngrokd" class="headerlink" title="搭建服务端ngrokd"></a>搭建服务端ngrokd</h2><h3 id="1-安装go语言开发环境"><a href="#1-安装go语言开发环境" class="headerlink" title="1.安装go语言开发环境"></a>1.安装go语言开发环境</h3><p>ngrok是利用go语言开发的，所以先要在服务器上安装go语言开发环境。<br>以CentOS的服务器示例，安装Go语言很简单的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install golang</div></pre></td></tr></table></figure>
<p>安装完毕后，利用go version来验证是否安装成功。<br>go安装好后，我们再设置下go的环境变量：</p>
<p>在<code>~/.zshrc</code>或<code>~/.bash_profile</code>文件内，加入以下环境变量配置内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go</div><div class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.local/bin:<span class="variable">$HOME</span>/bin:<span class="variable">$GOPATH</span>/bin</div></pre></td></tr></table></figure>
<p>保存后，重新给shell加载下配置文件：<code>source ~/.zshrc</code></p>
<p>最后可通过go env查看是否配置成功。</p>
<h3 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h3><p>安装过程略。后面我们需要利用git拉取源码。</p>
<h3 id="3-fork并拉取ngrok的源码"><a href="#3-fork并拉取ngrok的源码" class="headerlink" title="3.fork并拉取ngrok的源码"></a>3.fork并拉取ngrok的源码</h3><p>下面编译过程需要改官方的部分源码，所以最好fork一份源码至自己的github账户。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p ~/go/src/github.com/mamboer</div><div class="line">$ <span class="built_in">cd</span> ~/go/src/github.com/mamboer</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/mamboer/ngrok.git</div></pre></td></tr></table></figure>
<p>源码拉取下来后，需要修改一个地方：<br>打开<code>src/ngrok/log/logger.go</code>文件<br>将<code>code.google.com/p/log4go</code> 修改为：<code>github.com/alecthomas/log4go</code></p>
<p>googlecode已经寿终了，我们将依赖的log4go替换成github的版本。</p>
<p>在编译ngrok的源码之前，我们还需要改下官方源码用到的签名证书。</p>
<h3 id="4-生成自签名证书"><a href="#4-生成自签名证书" class="headerlink" title="4.生成自签名证书"></a>4.生成自签名证书</h3><p>使用ngrok.com官方服务时，我们使用的是官方的SSL证书。自建ngrokd服务，如果不想买SSL证书，我们需要生成自己的自签名证书，并编译一个携带该证书的ngrok客户端。</p>
<p>证书生成过程需要一个NGROK_BASE_DOMAIN。 以ngrok官方随机生成的地址693c358d.ngrok.com为例，其NGROK_BASE_DOMAIN就是”ngrok.com”，如果你要 提供服务的地址为”example.ngrok.xxx.com”，那NGROK_BASE_DOMAIN就应该 是”ngrok.xxx.com”。</p>
<p>我们这里以NGROK_BASE_DOMAIN=“ngrok.fex.im”为例，生成证书的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ngrok</div><div class="line">$ openssl genrsa -out rootCA.key 2048</div><div class="line">$ openssl req -x509 -new -nodes -key rootCA.key -subj <span class="string">"/CN=ngrok.fex.im"</span> -days 5000 -out rootCA.pem</div><div class="line">$ openssl genrsa -out device.key 2048</div><div class="line">$ openssl req -new -key device.key -subj <span class="string">"/CN=ngrok.fex.im"</span> -out device.csr</div><div class="line">$ openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</div></pre></td></tr></table></figure>
<p>执行完以上命令，在ngrok目录下就会新生成6个文件：</p>
<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-rw-rw-r--<span class="number"> 1 </span>lv lv <span class="number"> 985 </span>Feb<span class="number"> 17 </span>19:04 device.crt</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>lv lv <span class="number"> 895 </span>Feb<span class="number"> 17 </span>19:04 device.csr</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>lv lv<span class="number"> 1679 </span>Feb<span class="number"> 17 </span>19:03 device.key</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>lv lv<span class="number"> 1675 </span>Feb<span class="number"> 17 </span>19:01 rootCA.key</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>lv lv<span class="number"> 1103 </span>Feb<span class="number"> 17 </span>19:03 rootCA.pem</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>lv lv  <span class="number"> 17 </span>Feb<span class="number"> 17 </span>19:04 rootCA.srl</div></pre></td></tr></table></figure>
<p>ngrok通过bindata将ngrok源码目录下的assets目录（资源文件）打包到可执行文件(ngrokd和ngrok)中 去，assets/client/tls和assets/server/tls下分别存放着用于ngrok和ngrokd的默认证书文件，我们需要将它们替换成我们自己生成的：(因此这一步务必放在编译可执行文件之前)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp rootCA.pem assets/client/tls/ngrokroot.crt</div><div class="line">cp device.crt assets/server/tls/snakeoil.crt</div><div class="line">cp device.key assets/server/tls/snakeoil.key</div></pre></td></tr></table></figure>
<h3 id="5-编译客户端程序ngrok和服务端程序ngrokd"><a href="#5-编译客户端程序ngrok和服务端程序ngrokd" class="headerlink" title="5.编译客户端程序ngrok和服务端程序ngrokd"></a>5.编译客户端程序ngrok和服务端程序ngrokd</h3><p>在ngrok目录下执行如下命令，编译ngrokd：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make release-server</div></pre></td></tr></table></figure>
<p>类似的，利用以下命令编译ngrok:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make release-client</div></pre></td></tr></table></figure>
<p>成功编译后，会在bin目录下找到<code>ngrokd</code>和<code>ngrok</code>这两个文件。</p>
<p>我们将ngrokd文件拷贝至<code>~/go/bin</code>目录下，以方便在其他目录内也可以直接通过ngrokd来访问该执行程序。</p>
<h3 id="6-运行ngrokd服务"><a href="#6-运行ngrokd服务" class="headerlink" title="6.运行ngrokd服务"></a>6.运行ngrokd服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ngrokd -domain=<span class="string">"ngrok.fex.im"</span> -httpAddr=<span class="string">":8088"</span> -httpsAddr=<span class="string">":8089"</span></div><div class="line">[15:08:52 CST 2016/02/18] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [registry] [tun] No affinity cache specified</div><div class="line">[15:08:52 CST 2016/02/18] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [metrics] Reporting every 30 seconds</div><div class="line">[15:08:52 CST 2016/02/18] [INFO] (ngrok/log.Info:112) Listening <span class="keyword">for</span> public http connections on [::]:8088</div><div class="line">[15:08:52 CST 2016/02/18] [INFO] (ngrok/log.Info:112) Listening <span class="keyword">for</span> public https connections on [::]:8089</div><div class="line">[15:08:52 CST 2016/02/18] [INFO] (ngrok/log.Info:112) Listening <span class="keyword">for</span> control and proxy connections on [::]:4443</div></pre></td></tr></table></figure>
<h3 id="7-为ngrok-fex-im添加dns解析"><a href="#7-为ngrok-fex-im添加dns解析" class="headerlink" title="7.为ngrok.fex.im添加dns解析"></a>7.为ngrok.fex.im添加dns解析</h3><p>添加两条A记录：<code>ngrok.fex.im</code>和<code>*.ngrok.fex.im</code>，指向fex.im所在的服务器ip。</p>
<p>至此为止，我们的ngrokd服务端搭建配置完成，同时我们在CentOS系统的服务器上编译了一份客户端的执行程序－一个ngrok文件。<br>如果你的开发机器系统也是CentOS，是可以直接将ngrok这个客户端执行文件拷贝到本地开发机器中来使用的。<br>但如果你的机器是Mac 或者windows，我们还需要在自己的电脑中编译一份相同签名文件的客户端程序！</p>
<p>注意：请记得提交已更改的源码至github，一会还要用到。</p>
<h2 id="在MAC中编译ngrok客户端"><a href="#在MAC中编译ngrok客户端" class="headerlink" title="在MAC中编译ngrok客户端"></a>在MAC中编译ngrok客户端</h2><p>服务器是CentOS，自己的工作电脑是Mac，所以得在自己的电脑中编译一份相同签名文件的客户端程序！</p>
<h3 id="1-安装go"><a href="#1-安装go" class="headerlink" title="1.安装go"></a>1.安装go</h3><p>与服务器的步骤类似，我们首先要安装go语言环境：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew install go</div></pre></td></tr></table></figure>
<h3 id="2-设置go的环境变量（略）"><a href="#2-设置go的环境变量（略）" class="headerlink" title="2.设置go的环境变量（略）"></a>2.设置go的环境变量（略）</h3><h3 id="3-拉取源码并编译客户端（略）"><a href="#3-拉取源码并编译客户端（略）" class="headerlink" title="3.拉取源码并编译客户端（略）"></a>3.拉取源码并编译客户端（略）</h3><p>最后将编译好的ngrok文件，拷贝至$GOPATH/bin目录内，以便在命令行内任意目录内均可以直接通过ngrok运行程序。</p>
<h2 id="最后的验证"><a href="#最后的验证" class="headerlink" title="最后的验证"></a>最后的验证</h2><p>ngrokd服务配置好了，客户端程序也有了，下面测试下ngrok是否能够正常使用。</p>
<ol>
<li><p>创建一个ngrok配置文件：ngrok.cfg</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server_addr: “ngrok.fex.im:4443<span class="string">"</span></div><div class="line">trust_host_root_certs: false</div></pre></td></tr></table></figure>
</li>
<li><p>运行客户端，暴露8080端口的站点</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ngrok -subdomain demo -config=/Users/lv/bin/ngrok.cfg 8080</div></pre></td></tr></table></figure>
</li>
<li><p>在8080端口下建一个测试站点</p>
<p>方便起见，我们拉取git@github.com:o2team/brand.git做测试：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm i -g node-static</div><div class="line">git <span class="built_in">clone</span> git@github.com:o2team/brand.git</div><div class="line"><span class="built_in">cd</span> brand</div><div class="line">static</div></pre></td></tr></table></figure>
</li>
<li><p>在浏览器中输入demo.ngrok.fex.im:8088</p>
<p>bingo!</p>
<p><img src="//img.aotu.io/mamboer/ngrok-demo.jpg" alt="aotu.io"></p>
</li>
<li><p>在浏览器中输入：localhost:4040</p>
<p>可以查看所有的请求情况！<br><img src="//img.aotu.io/mamboer/ngrok-demo1.jpg" alt="aotu.io"></p>
</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>客户端ngrok.cfg中server_addr后的值必须严格与-domain以及证书中的<code>NGROK_BASE_DOMAIN</code>相同，否则Server端就会出现如下错误日志：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[03/13/15 09:55:46]</span> <span class="selector-attr">[INFO]</span> <span class="selector-attr">[tun:15dd7522]</span> <span class="selector-tag">New</span> <span class="selector-tag">connection</span> <span class="selector-tag">from</span> 54<span class="selector-class">.149</span><span class="selector-class">.100</span><span class="selector-class">.42</span><span class="selector-pseudo">:38252</span></div><div class="line"><span class="selector-attr">[03/13/15 09:55:46]</span> <span class="selector-attr">[DEBG]</span> <span class="selector-attr">[tun:15dd7522]</span> <span class="selector-tag">Waiting</span> <span class="selector-tag">to</span> <span class="selector-tag">read</span> <span class="selector-tag">message</span></div><div class="line"><span class="selector-attr">[03/13/15 09:55:46]</span> <span class="selector-attr">[WARN]</span> <span class="selector-attr">[tun:15dd7522]</span> <span class="selector-tag">Failed</span> <span class="selector-tag">to</span> <span class="selector-tag">read</span> <span class="selector-tag">message</span>: <span class="selector-tag">remote</span> <span class="selector-tag">error</span>: <span class="selector-tag">bad</span> <span class="selector-tag">certificate</span></div><div class="line"><span class="selector-attr">[03/13/15 09:55:46]</span> <span class="selector-attr">[DEBG]</span> <span class="selector-attr">[tun:15dd7522]</span> <span class="selector-tag">Closing</span></div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>自建ngrok服务</li>
</ul>
<ol>
<li><a href="http://tonybai.com/2015/03/14/selfhost-ngrok-service/" target="_blank" rel="external">http://tonybai.com/2015/03/14/selfhost-ngrok-service/</a></li>
<li><a href="https://github.com/inconshreveable/ngrok/blob/master/docs/SELFHOSTING.md" target="_blank" rel="external">https://github.com/inconshreveable/ngrok/blob/master/docs/SELFHOSTING.md</a></li>
</ol>
<ul>
<li>go的安装</li>
</ul>
<ol>
<li><a href="https://blog.starkandwayne.com/2014/12/04/how-to-install-go-on-digital-ocean/" target="_blank" rel="external">https://blog.starkandwayne.com/2014/12/04/how-to-install-go-on-digital-ocean/</a></li>
</ol>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文主要介绍了ngrok服务的自行搭建。同时为大家免费提供我搭建好的ngrok服务：ngrok.fex.im。<br>fex.im所在的机器是digitalocean的一个主机，虽然国内速度慢但是还算稳定。</p>
<h2 id="如何使用ngrok-fex-im"><a href="#如何使用ngrok-fex-im" class="headerlink" title="如何使用ngrok.fex.im?"></a>如何使用ngrok.fex.im?</h2><h3 id="安装client"><a href="#安装client" class="headerlink" title="安装client"></a>安装client</h3><p>Linux 下载:<a href="http://fex.im/files/ngrok" target="_blank" rel="external">http://fex.im/files/ngrok</a><br>Mac OSX 下载：<a href="https://github.com/mamboer/ngrok/releases/download/1.7.2/ngrok" target="_blank" rel="external">https://github.com/mamboer/ngrok/releases/download/1.7.2/ngrok</a></p>
<p>放在 <code>/usr/local/bin</code> 目录下</p>
<h3 id="设置所有者"><a href="#设置所有者" class="headerlink" title="设置所有者"></a>设置所有者</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown <span class="variable">$(</span>whoami)<span class="symbol">:staff</span> ngrok</div></pre></td></tr></table></figure>
<h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod <span class="number">777</span> ngrok</div></pre></td></tr></table></figure>
<h3 id="运行客户端"><a href="#运行客户端" class="headerlink" title="运行客户端"></a>运行客户端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ngrok -subdomain demo -config=/Users/lv/bin/ngrok.cfg 8080</div></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server_addr: “ngrok.fex.im:4443<span class="string">"</span></div><div class="line">trust_host_root_certs: false</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;半年多没用ngrok，然后昨天发现它被墙了，艸～。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="调试" scheme="https://aotu.io/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="ngrok" scheme="https://aotu.io/tags/ngrok/"/>
    
      <category term="反向代理" scheme="https://aotu.io/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>你所知道的3xx状态码</title>
    <link href="https://aotu.io/notes/2016/01/28/3xx-of-http-status/"/>
    <id>https://aotu.io/notes/2016/01/28/3xx-of-http-status/</id>
    <published>2016-01-28T12:20:00.000Z</published>
    <updated>2016-10-20T07:06:32.414Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，我们都知道300-399这一系列的状态码代表的是重定向状态码。重定向状态码要么告知客户端使用替代位置来访问她们所感兴趣的资源，要么就提供一个替代的响应而不是资源的内容。如果资源已被移动，可发送一个重定向状态码和一个可选的Location首部来告知客户端已被移走，以及现在可以在哪里找到它。这样子，浏览器就可以在不打扰用户的情况下，透明地转到新的位置。</p>
<p>那么，接下来，我们从状态码出发，梳理一下3xx状态码（300-307），以及缓存一系列相关的东西。（注：HTTP/1.1版本的内容）</p>
<h4 id="300-Multiple-Choices"><a href="#300-Multiple-Choices" class="headerlink" title="300 Multiple Choices"></a>300 Multiple Choices</h4><p>客户端请求一个实际指向多个资源的URL时会返回这个状态码。</p>
<p>比如说，一个站点提供了中文和英文两个版本，理想情况下，服务器应当向中文用户发送中文版，向英文用户发送英文版。HTTP提供了内容协商方法，允许客户端和服务器作这样的决定。内容协商包含客户端驱动的协商、服务器驱动的协商以及透明协商。</p>
<p>客户端驱动由客户端发起请求，服务器发送可选项的列表，客户端进行选择；服务器驱动是由服务器来检查客户端的请求首部集并决定提供提供哪个版本的页面（q值机制，Vary首部）；透明协商是由某个中间设备（通常是缓存代理）代表客户端进行请求协商。</p>
<p>而300 Multiple Choices属于客户端驱动的协商。服务器发送回HTTP/1.1响应时，使用300 Multiple Choices响应代码。客户端浏览器收到这种响应时，可能会弹出对话窗口，让用户选择。</p>
<h4 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h4><p>在请求的URL已被移除时使用。响应的Location首部中应该包含资源现在所处的URL。</p>
<p>301重定向是网页更改网址后对搜索引擎友好的最好方法，只要不是暂时搬移的情况，都建议使用301来做转址。比如说，我们将网页a的地址更改为b，采用301重定向，搜索引擎可以肯定网页a永久性改变网址，搜索引擎就会把网页b当做唯一有效目标，同时，网页a积累的页面权重将被传到网页b。(注：传递权重不同的搜索引擎不一样，Google会传递大部分权重，但不是百分之百权重）</p>
<h4 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a>302 Found</h4><p>与301状态码类似，但是客户端应该使用Location首部给出的URL来临时定位资源，将来的请求仍应使用老的URL。</p>
<p>一般302重定向是在一个网站或网页在短时间内临时移到其它位置的情况下使用，这时候就是做临时性的跳转了。</p>
<p>但是302跟网址“劫持”有着莫大的关系。大部分搜索引擎在大部分情况下，当收到302重定向时，一般只要去抓取目标网址即可。但是有时候搜索引擎（以Google为例）并不能总是抓取目标网址，比如说a网址很短，但是它做了302重定向到b网址，而b网址是一个很长的乱七八糟的URL网址，这时候Google很有可能仍显示网址a，这时候就造成了网址劫持的可能性。如果一个居心叵测的人将一个网址a通过302重定向到你的网址b，而Google搜索结果仍然是A，这种情况就是网址劫持。同时，还容易导致网站被降权，所以尽量不用。</p>
<h4 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h4><p>用来告知客户端应该使用另一个URL来获取资源，新的URL位于响应报文的Location首部。</p>
<p>303主要目的是允许POST请求的响应将客户端定位到某个资源上。比如说，在文件上传完成后让客户端自动重定向到一个上传成功的结果页面。</p>
<h4 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h4><p>如果客户端发送了一个带条件的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器返回304状态码。304响应不包含消息体，因此以消息头后的第一个空行结尾。</p>
<p>在一条HTTP GET请求中，大致是如下的一个过程</p>
<p><img src="//img.aotu.io/wengeek/cache.png" alt="http"></p>
<p>在查看本地副本是否过期时，通过检查Cache-Control或者Expires首部即可获知。HTTP通过Cache-Control首部和Expires首部向每个文档附加了一个“过期日期”，在缓存文档过期之前，缓存可以以任何频率使用这些副本，而无需与服务器联系。</p>
<p>Expires首部是HTTP/1.0定义的字段，指定的是一个绝对的过期日期。而Cache-Control是HTTP/1.1定义的字段，max-age值定义了文档的最大使用值，是相对时间。因为绝对时间需要依赖于计算机时钟的正确设置，容易存在误差。所以，我们更倾向于使用比较新的Cache-Control首部。当同时存在Expires和Cache-Control:max-age字段时，Cache-Control:max-age字段会覆盖Expires字段。同时存在这两个字段还有一个好处，就是可以兼容HTTP/1.0。</p>
<p>本地缓存过期了并不意味着它和原始服务器上目前处于活跃状态的文档有实际的区别，这时候缓存需要询问原始服务器文档是否发生了改变，跟原始服务器做一次 <strong>新鲜度校验</strong>。</p>
<p>HTTP条件方法可以高效地实现再验证。通过If-Modified-Since或者If-None-Match首部来校验。</p>
<p><strong>If-Modified-Since:Date再验证</strong>：If-Modified-Since首部可以和Last-Modified服务器响应首部配合工作。原始服务器会将最后的修改日期附加到所提供的文档上去。</p>
<p><strong>If-None-Match: 实体标签再验证</strong>：有些文档可能被被周期性的重写、有些文档可能被修改了但所做修改不重要等等这类情况下，使用最后修改日期进行再验证是不够的，这时候HTTP允许用户对被称为实体标签ETag的“版本标识符”进行比较。</p>
<p>实体标签和最近修改日期都是缓存验证器，如果服务器回送了一个实体标签，HTTP/1.1客户端就必须使用实体标签验证器。如果只返回了一个Last-Modified值，客户端就可以使用If-Modified-Since验证。如果实体标签和最后修改日期都提供了，客户端就应该使用这两种再验证方案，这样HTTP/1.0和HTTP/1.1缓存就都可以正确响应了。如果HTTP/1.1服务器收到的请求既带有If-Modified-Since，又带有ETag条件首部，那么需要这两个条件都满足时，才能返回304 Not Modified响应。</p>
<h4 id="305-Use-Proxy"><a href="#305-Use-Proxy" class="headerlink" title="305 Use Proxy"></a>305 Use Proxy</h4><p>用来说明必须通过一个代理来访问资源，代理的位置由Location首部给出。</p>
<p>客户端是相对某个特定资源来解析这条响应的，不能假定所有请求，甚至所有对特有所请求资源的服务器的请求都通过这个代理进行。如果客户端错误地让代理介入了某条请求，可能会引发破坏性行为，而且会造成安全漏洞。所以，305这个状态码也较少使用。</p>
<h4 id="306-unused"><a href="#306-unused" class="headerlink" title="306 unused"></a>306 unused</h4><p>在HTTP1.1废弃掉了，不再使用，并且此状态码被保留。在HTTP1.1以前的版本中，306 Switch Proxy用于表示随后的请求应该使用指定的代理。</p>
<h4 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h4><p>请求的资源临时从不同的URI响应请求，客户端应该使用Location首部给出的URL来临时定位资源。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。</p>
<p>除非是一个HEAD请求，否则307响应的实体中应当包含指向新的URL的超链接及简短说明。因为部分浏览器不能识别307响应，添加URL超链接以便不能处理307状态码的用户有能力在新URL中发起重定向请求，也就是说，把重定向的页面展示给用户，让用户去点重定向URL链接。</p>
<p><img src="//img.aotu.io/wengeek/307.png" alt="307"></p>
<p>我们可以看到Chrome对于hsts列表的域名，采用了307进行重定向。</p>
<p>以上内容讲述了301-307的状态码，对于这些状态码以及一些缓存的首部可能还有一些疑惑，以下简单地列出了几点。</p>
<h4 id="1、从上面的状态码中，你可能注意到302、303和307状态码之间存在一些交叉，那么，它们之间存在哪些细微差别？"><a href="#1、从上面的状态码中，你可能注意到302、303和307状态码之间存在一些交叉，那么，它们之间存在哪些细微差别？" class="headerlink" title="1、从上面的状态码中，你可能注意到302、303和307状态码之间存在一些交叉，那么，它们之间存在哪些细微差别？"></a>1、从上面的状态码中，你可能注意到302、303和307状态码之间存在一些交叉，那么，它们之间存在哪些细微差别？</h4><p>303和307是HTTP/1.1新增加的状态码，它们是对HTTP1.0中的302状态码的细化。当HTTP/1.0客户端发起一个POST请求，并在响应中收到302重定向状态码时，它会接受Location首部的重定向URL，并向那个URL发起一个GET请求。透过以上的状态码介绍，我们可以发现HTTP/1.1规范使用303状态码来实现同样的行为。为了避开这个问题，对于HTTP/1.1客户端，用307状态码来代替302状态码进行临时重定向。</p>
<p>在HTTP/1.1中，302理论上是可以被303和307代替掉的，但为了兼容HTTP/1.0，依然还在广泛使用。</p>
<h4 id="2、经常可以看到-Cache-Control-no-cache-这样的首部，那么代表的是不缓存么？"><a href="#2、经常可以看到-Cache-Control-no-cache-这样的首部，那么代表的是不缓存么？" class="headerlink" title="2、经常可以看到 Cache-Control: no-cache 这样的首部，那么代表的是不缓存么？"></a>2、经常可以看到 <strong><em>Cache-Control: no-cache</em></strong> 这样的首部，那么代表的是不缓存么？</h4><p>Cache-Control: no-cache 响应实际上是可以存储到本地缓存区中的，只是在与服务器进行新鲜度再验证之前，缓存不能将其提供给客户端使用。</p>
<p>如果需要本地彻底不缓存，需要使用Cache-Control: no-store，表示缓存应该尽快从存储器中删除文档的所有痕迹。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，我们都知道300-399这一系列的状态码代表的是重定向状态码。重定向状态码要么告知客户端使用替代位置来访问她们所感兴趣的资源，要么就提供一个替代的响应而不是资源的内容。如果资源已被移动，可发送一个重定向状态码和一个可选的Location首部来告知客户端已被移走，以
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="http" scheme="https://aotu.io/tags/http/"/>
    
      <category term="重定向" scheme="https://aotu.io/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
      <category term="缓存" scheme="https://aotu.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>如何制作cocoaPods依赖库</title>
    <link href="https://aotu.io/notes/2016/01/27/how-to-make-cocoapods/"/>
    <id>https://aotu.io/notes/2016/01/27/how-to-make-cocoapods/</id>
    <published>2016-01-27T11:40:49.000Z</published>
    <updated>2016-10-20T07:06:32.413Z</updated>
    
    <content type="html"><![CDATA[<p>学会使用别人的 <strong>Pods</strong> 依赖库以后， 你一定对创建自己的依赖库很有兴趣吧，现在我们就来尝试一下，以一个简单 <strong>O2View</strong> 为例自己创建一个 <strong>Pods</strong> 依赖库，这里我会使用 <strong>Swift 2.0</strong> 来写这个例子。</p>
<a id="more"></a>
<h3 id="1-创建自己的-github-仓库"><a href="#1-创建自己的-github-仓库" class="headerlink" title="1.创建自己的 github 仓库"></a>1.创建自己的 <strong>github</strong> 仓库</h3><p><a href="https://github.com/CocoaPods" target="_blank" rel="external"><strong>CocoaPods</strong></a> 是托管在 <strong>github</strong> 上的，所有的 <strong>Pods</strong> 也都是托管在 <strong>github</strong> 上，因此我们首先需要创建一个属于自己的 github 仓库，如下图所示：</p>
<p><img src="//img.aotu.io/MarkLin/cocoaPods/1-1githubRepo.png" alt="github"></p>
<p>上图中标识出了6处地方</p>
<ol>
<li><strong>Repository name:</strong> 仓库名称，这里写上我们的依赖库名字 <strong>O2View</strong> ，必填。</li>
<li><strong>Description：</strong> 仓库的描述信息，可选。</li>
<li><strong>Public or Private:</strong> 仓库的公开性，开源的话选 <strong>Public</strong> 。 如果是公司内部使用的话这里推荐大家使用私有的仓库,但是 <strong>github</strong> 的私有仓库是要收费的 <strong>$7/month</strong> （壕请无视 - -！）。大部分公司都是有自己的git服务器，不过一般只能在公司内网使用，或者可以选择<a href="https://gitlab.com" target="_blank" rel="external">Gitlab</a>,<a href="https://coding.net" target="_blank" rel="external">Coding</a>, <a href="https://bitbucket.org/" target="_blank" rel="external">Bitbucket</a>任意一种。</li>
<li><strong>Initialize：</strong> 是否默认创建一个 <strong>README</strong> 文档，一个完整的库都会有这个说明文档，这里最好勾选一下。不过如果忘记的话也不要紧，后面手动创建也是可以的。</li>
<li><strong>.gitignore：</strong> 忽略项文件，记录一些想忽略的文件类型，凡是该文件包含的文件类型， git 都不会将其纳入到版本管理中。看需要选择就行。</li>
<li><strong>license：</strong> 正规的仓库都有一个 <strong>license</strong> 文件， <strong>Pods</strong> 依赖库对这个文件要求比较严格，需要有这个文件。这里最好让 <strong>github</strong> 自动创建一个，不过后续手动创建也行。我们这次先使用 <strong>MIT</strong> 类型的 <strong>license</strong>。</li>
</ol>
<p>上面各项根据大家需要填写完毕后，点击 <strong>Create repository</strong> 按钮即可，创建成功后如下所示：</p>
<p><img src="//img.aotu.io/MarkLin/cocoaPods/1-2githubO2View.png" alt="github"></p>
<h3 id="2-clone-仓库到本地"><a href="#2-clone-仓库到本地" class="headerlink" title="2.clone 仓库到本地"></a>2.clone 仓库到本地</h3><p>为了方便向仓库中删减内容，需要将仓库 <strong>clone</strong> 到本地，这里有多种操作方式，可以选择你喜欢的一种，但是为了方便这边选择使用命令行。首先需要切换到你想在本地存储的目录，然后再 <strong>clone</strong> ，假设你放在用户的根目录上：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~</div><div class="line">git <span class="built_in">clone</span> https://github.com/marklin2012/O2View.git</div></pre></td></tr></table></figure>
<p>完成后，我们进入到 <code>~/O2View</code> 目录中应该可以看到目录结构如下:</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">|____LICENSE</span></div><div class="line"><span class="string">|____README.md</span></div></pre></td></tr></table></figure>
<p>其实还有一个隐藏的 <strong>.git</strong> 文件，后续我们的所有文件都在这个目录底下进行。</p>
<h3 id="3-向本地仓库中添加创建-Pods-依赖库所需的文件"><a href="#3-向本地仓库中添加创建-Pods-依赖库所需的文件" class="headerlink" title="3.向本地仓库中添加创建 Pods 依赖库所需的文件"></a>3.向本地仓库中添加创建 Pods 依赖库所需的文件</h3><h4 id="1）主类文件"><a href="#1）主类文件" class="headerlink" title="1）主类文件"></a>1）主类文件</h4><p>创建 <strong>Pods</strong> 依赖库就是为了方便别人使用我们的成果，比如我想共享给大家的O2View类，那这个类自然必不可少，我们把这个类放入一个 <strong>O2View</strong> 的目录中：</p>
<p><img src="//img.aotu.io/MarkLin/cocoaPods/1-3O2ViewClassDoc.jpeg" alt="主类"></p>
<p>顺便看看 <strong>O2View.swift</strong> 主要内容：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">O2View</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</div><div class="line">        backgroundColor = <span class="type">UIColor</span>.redColor()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">required</span> <span class="keyword">public</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2）-podspec-文件"><a href="#2）-podspec-文件" class="headerlink" title="2）.podspec 文件"></a>2）.podspec 文件</h4><p>每个 <strong>Pods</strong> 依赖库必须有且仅有一个名称和依赖库名保持一致，后缀名为 <strong>.podspec</strong> 的描述文件。这里我们依赖库的描述文件名称应该为 <code>O2View.podspec</code>。</p>
<p>创建这个文件有两种途径：</p>
<ol>
<li>复制已有的 <strong>podspec</strong> 文件然后修改对应的参数。</li>
<li>执行命令行创建。</li>
</ol>
<p>我们使用命令行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec create O2View</div></pre></td></tr></table></figure>
<p>创建出 <strong>O2View.podspec</strong> 文件后，我们打开可以发现，该文件是 <strong>ruby</strong> 文件，里面有很多的内容，但是大多数都是我们不需要的，所以我们只需要根据项目的情况保留关键的一些内容就行：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  s.name         = <span class="string">"O2View"</span>				<span class="comment">#名称</span></div><div class="line">  s.version      = <span class="string">"0.0.1"</span>				<span class="comment">#版本号</span></div><div class="line">  s.summary      = <span class="string">"Just testing"</span>		<span class="comment">#简短介绍</span></div><div class="line">  s.description  = <span class="string">&lt;&lt;-DESC</span></div><div class="line">  					私有Pods测试</div><div class="line">  					* Markdown 格式</div><div class="line">                   DESC</div><div class="line"></div><div class="line">  s.homepage     = <span class="string">"http://aoto.io/"</span></div><div class="line">  <span class="comment"># s.screenshots  = "www.example.com/screenshots_1.gif"</span></div><div class="line">  s.license      = <span class="string">"MIT"</span>				<span class="comment">#开源协议</span></div><div class="line">  s.author             = &#123; <span class="string">"linyi31"</span> =&gt; <span class="string">"linyi@jd.com"</span> &#125;</div><div class="line"></div><div class="line">  s.source       = &#123; <span class="symbol">:git</span> =&gt; <span class="string">"https://github.com/marklin2012/O2View.git"</span> &#125;</div><div class="line">  <span class="comment">## 这里不支持ssh的地址，只支持HTTP和HTTPS，最好使用HTTPS</span></div><div class="line">  <span class="comment">## 正常情况下我们会使用稳定的tag版本来访问，如果是在开发测试的时候，不需要发布release版本，直接指向git地址使用</span></div><div class="line">  <span class="comment">## 待测试通过完成后我们再发布指定release版本，使用如下方式</span></div><div class="line">  <span class="comment">#s.source       = &#123; :git =&gt; "http://EXAMPLE/O2View.git", :tag =&gt; version &#125;</span></div><div class="line">  </div><div class="line">  s.platform     = <span class="symbol">:ios</span>, <span class="string">"9.0"</span>			<span class="comment">#支持的平台及版本，这里我们呢用swift，直接上9.0</span></div><div class="line">  s.requires_arc = <span class="literal">true</span>					<span class="comment">#是否使用ARC</span></div><div class="line"></div><div class="line">  s.source_files  = <span class="string">"O2View/*.swift"</span>	<span class="comment">#OC可以使用类似这样"Classes/**/*.&#123;h,m&#125;"</span></div><div class="line"></div><div class="line">  s.frameworks = <span class="string">'UIKit'</span>, <span class="string">'QuartzCore'</span>, <span class="string">'Foundation'</span>	<span class="comment">#所需的framework,多个用逗号隔开</span></div><div class="line">  s.module_name = <span class="string">'O2View'</span>				<span class="comment">#模块名称</span></div><div class="line"></div><div class="line">  <span class="comment"># s.dependency "JSONKit", "~&gt; 1.4"	#依赖关系，该项目所依赖的其他库，如果有多个可以写多个 s.dependency</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h4 id="3）Demo-工程"><a href="#3）Demo-工程" class="headerlink" title="3）Demo 工程"></a>3）Demo 工程</h4><p>为了快速教会别人使用我们的 <strong>Pods</strong> 依赖库，通常需要提供一个 demo 工程。我们创建了一个名为 <strong>O2ViewDemo</strong> 的工程来演示 <strong>O2View</strong> 的使用，如下图所示：</p>
<p><img src="//img.aotu.io/MarkLin/cocoaPods/1-4O2ViewDemo.jpeg" alt="demo"></p>
<h4 id="4）README-md"><a href="#4）README-md" class="headerlink" title="4）README.md"></a>4）README.md</h4><p>使用 <strong>github</strong> 的人应该都熟悉这个文件，它使一个成功的 <strong>github</strong> 仓库必不可少的一部分，使用 <strong>markdown</strong> 对仓库进行详细说明。</p>
<h4 id="5）LICENSE-文件"><a href="#5）LICENSE-文件" class="headerlink" title="5）LICENSE 文件"></a>5）LICENSE 文件</h4><p><strong>CocoaPods</strong> 强制要求所有的 <strong>Pods</strong> 依赖库都必须有 <strong>license</strong> 文件，否则验证不会通过。 <strong>license</strong> 文件有很多中，详情可以参考 <a href="https://tldrlegal.com/" target="_blank" rel="external">tldrlegal</a>。前面我们已经选择创建了一个 <strong>MIT</strong> 类型的 <strong>license</strong>。</p>
<p>以上的5个文件是创建 <strong>Pods</strong> 依赖库所需的基础文件，当然 <strong>Demo</strong> 工程没有添加也没关系。添加完这些内容后，我们本地仓库目录就变成这个样子：</p>
<p><img src="//img.aotu.io/MarkLin/cocoaPods/1-5O2ViewDoc.jpeg" alt="license"></p>
<h3 id="4-提交修改到-github"><a href="#4-提交修改到-github" class="headerlink" title="4.提交修改到 github"></a>4.提交修改到 <strong>github</strong></h3><p>经过前面步骤，我们已将在本地的 <strong>git</strong> 仓库添加了不少文件，现在我们只要将他们提交到 <strong>github</strong> 上就可以。在此之前我们需要对刚才添加的 <strong>pod</strong> 进行一下验证：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="class"><span class="keyword">lib</span> <span class="title">lint</span></span></div></pre></td></tr></table></figure>
<p>运行之后可能会得到下面的警告：</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> -&gt; O2View (<span class="number">0.0</span><span class="number">.1</span>)</div><div class="line">    - WARN  | source: Git sources should specify a tag.</div><div class="line"></div><div class="line">[!] O2View did not pass validation, due <span class="keyword">to</span> <span class="number">1</span> warning (but you can <span class="keyword">use</span> `--allow-warnings` <span class="keyword">to</span> ignore it) <span class="keyword">and</span> All results apply only <span class="keyword">to</span> <span class="keyword">public</span> specs, but you can <span class="keyword">use</span> `--<span class="keyword">private</span>` <span class="keyword">to</span> ignore them <span class="keyword">if</span> linting the specification <span class="keyword">for</span> a <span class="keyword">private</span> pod..</div><div class="line">You can <span class="keyword">use</span> the `--no-clean` option <span class="keyword">to</span> inspect any issue.</div></pre></td></tr></table></figure>
<p>由于我们现在还没有正式生成 <strong>release</strong> 版本， <strong>github</strong> 上并没有任何 <strong>tag</strong>，所以我们刚才填写 <strong>.podspec</strong> 文件填写 <strong>git</strong> 地址的时候没有填写指定 <strong>tag</strong> （上面文件的注释中有提到），解决方法我们可以先执行忽略警告的命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint --allow-warnings</div></pre></td></tr></table></figure>
<p>如果成功会出现如下输出：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> -<span class="ruby">&gt; O2View (<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>)</span></div><div class="line">    -<span class="ruby"> WARN  <span class="params">| source: Git sources should specify a tag.</span></span></div><div class="line"></div><div class="line">O2View passed validation.</div></pre></td></tr></table></figure>
<blockquote>
<p>当调试完成了之后，我们需要在 <strong>github</strong> 上把我们的代码生成相应稳定的 <strong>release</strong> 版本，到时候我们再回来添加指定 <strong>tag</strong> 发布就 Ok 了。</p>
</blockquote>
<p>验证成功之后，我们只要把代码提交到 <strong>github</strong> 仓库，就可以了，参考命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add -A &amp;&amp; git commit -m <span class="string">"add pod files"</span></div><div class="line"></div><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>这里主要是 <strong>git</strong> 的范畴，不做过多叙述。如果前面操作都没有问题的话，<strong>github</strong> 上应该能看到类似如下内容：</p>
<p><img src="//img.aotu.io/MarkLin/cocoaPods/1-6githubO2ViewPush.png" alt="push"></p>
<h3 id="5-接下来做什么？"><a href="#5-接下来做什么？" class="headerlink" title="5.接下来做什么？"></a>5.接下来做什么？</h3><p>经过前面的步骤，我们的 <strong>CocoaPods</strong> 依赖库就已经准备好了，但是现在你还不能在你的工程中使用它。如果你想成为一个真正可用的依赖库，还需要最后一步操作：将刚才生产的 <strong>podspec</strong> 文件提交到 <a href="https://github.com/CocoaPods/Specs" target="_blank" rel="external">官方的 <strong>CocoaPods Specs</strong> </a>中。</p>
<p>没错，我们平时用的能用 <code>pod search</code> 搜到的依赖库都会把它上传到这个仓库中， 也就是说只有将我们的 <strong>podspec</strong> 文件上传到这里，才能成为一个真正的依赖库，别人才能用！</p>
<p>按照 <strong>github</strong> 的规则，要想向别人的库中添加文件，就要先 <strong>fork</strong> 别人的仓库，做相应的修改，再 <strong>pullrequest</strong> 给仓库的原作者，等到作者审核通过，进行 <strong>meger</strong> 之后就可以了！</p>
<p>流程大概就是这个样子，具体可以参考：<a href="https://guides.cocoapods.org/" target="_blank" rel="external">CocoaPods Guides</a>，我们就先不展开详细的叙述了（后面会添加关于这部分的文章）。</p>
<p>除了官方的 <strong>specs</strong> 之外，我们还可以把 <strong>podspec</strong> 文件提交到私有的仓库中，详见我们博客的另一篇文章：<a href="http://www.jianshu.com/p/ddc2490bff9f" target="_blank" rel="external">创建私有的 <strong>CocoaPods repo spec</strong></a> 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学会使用别人的 &lt;strong&gt;Pods&lt;/strong&gt; 依赖库以后， 你一定对创建自己的依赖库很有兴趣吧，现在我们就来尝试一下，以一个简单 &lt;strong&gt;O2View&lt;/strong&gt; 为例自己创建一个 &lt;strong&gt;Pods&lt;/strong&gt; 依赖库，这里我会使用 &lt;strong&gt;Swift 2.0&lt;/strong&gt; 来写这个例子。&lt;/p&gt;
    
    </summary>
    
      <category term="移动开发" scheme="https://aotu.io/cates/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="https://aotu.io/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="https://aotu.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>如何创建私有 CocoaPods 仓库</title>
    <link href="https://aotu.io/notes/2016/01/26/Private-CocoaPods-Specs-Repo/"/>
    <id>https://aotu.io/notes/2016/01/26/Private-CocoaPods-Specs-Repo/</id>
    <published>2016-01-26T03:35:15.000Z</published>
    <updated>2016-10-20T07:06:32.413Z</updated>
    
    <content type="html"><![CDATA[<h3 id="公共-CocoaPods"><a href="#公共-CocoaPods" class="headerlink" title="公共 CocoaPods"></a>公共 CocoaPods</h3><p>打开隐藏目录，可以使用命令: </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//打开隐藏的命令:</span></div><div class="line">defaults write com<span class="selector-class">.apple</span><span class="selector-class">.finder</span> AppleShowAllFiles -bool true</div><div class="line"><span class="comment">//关闭隐藏的命令:</span></div><div class="line">defaults write com<span class="selector-class">.apple</span><span class="selector-class">.finder</span> AppleShowAllFiles -bool false</div></pre></td></tr></table></figure>
<p>接着需要重启一下 <strong>Finder</strong>， 可以按住 <strong>option</strong> + 右键 <strong>Finder</strong> 图标选择重启。然后打开隐藏目录 <strong>.cocoapods</strong> (这个目录在你的个人目录底下, <code>~/.cocoapods</code> 或 <code>/Users/[username]/.cocoapods</code>)</p>
<a id="more"></a>
<p><img src="//img.aotu.io/MarkLin/privateCocoaPods/1-1cocoapodsMasterRepo.png" alt="repo"></p>
<p>可以看到上图， <strong>.cocoapods</strong> 目录下的 <strong>repos</strong> 其实是 <strong>repository</strong> （仓库）的缩写。 <strong>repos</strong> 中存放的时仓库的集合。这里的 <strong>master</strong> 就是 <strong>CocoaPods</strong> 官方建立的仓库，也就是我们所谓的公共库。</p>
<p><strong>specs</strong> 目录下存放的就是所有提交到 <strong>CocoaPods</strong> 的开源库的 <strong>podspec</strong> 文件的集合。<br>其结构如下图所示：</p>
<p><img src="//img.aotu.io/MarkLin/privateCocoaPods/1-2repoSpecs.png" alt="repo"></p>
<p>其组成方式：</p>
<p>specName – version – specName.podspec</p>
<p>( <strong>master</strong> 里现在是 <strong>specName.podspec.json</strong>，这个 <strong>.json</strong> 文件就是 <strong>podspec</strong> 文件加了个后缀。我们可以采用 <code>pod ipc spec</code> 这个命令来将 <strong>spec</strong> 文件转换成 <strong>.json</strong>)</p>
<p>那这个文件夹是如何来得呢？其实，这个文件夹是在你安装了 <strong>CocoaPods</strong> 后，第一次执行 <code>pod install</code> 时， <strong>CocoaPods</strong> 通过命令 <code>pod setup</code> 来建立的（这条命令会自动执行）。</p>
<blockquote>
<p>上述是官方的 <strong>repo</strong> ，私有库的话可以看下我们前面的翻译或者查看<a href="https://guides.cocoapods.org/making/private-cocoapods.html" target="_blank" rel="external">官方文档</a>，但是官方文档有一些过程写的不是特别详细，自己实现的时候遇到了一些坑，特此梳理一下过程，按照官方文档内容实现一个私有的 <strong>spec repo</strong> 。根据官方的原理，我们只需要创建一个和 <strong>master</strong> 相类似结构的目录就可以实现私有的 <strong>spec repo</strong>，当然你可以 <strong>fork</strong> 一个官方的 <strong>repo</strong>，但是它包含了太多没有必要地库在里面，这在编译仓库的时候需要浪费大量的时间，所以我们只要自己重新创建一个就可以了。</p>
</blockquote>
<h3 id="1-创建一个私有的-Spec-Repo"><a href="#1-创建一个私有的-Spec-Repo" class="headerlink" title="1.创建一个私有的 Spec Repo"></a>1.创建一个私有的 <strong>Spec Repo</strong></h3><p>在你的 git 服务器上创建一个 <strong>repo</strong>。这里你可以在 <strong>github</strong> 或者你自己的 git 服务器上实现。公司内部使用的话这里推荐大家使用私有的仓库,但是 <strong>github</strong> 的私有仓库是要收费的 <strong>$7/month</strong> （壕请无视 - -！）。大部分公司都是有自己的git服务器，不过一般只能在公司内网使用，或者可以选择<a href="https://gitlab.com" target="_blank" rel="external">Gitlab</a>,<a href="https://coding.net" target="_blank" rel="external">Coding</a>, <a href="https://bitbucket.org/" target="_blank" rel="external">Bitbucket</a>任意一种。我们以在 <strong>github</strong> 上创建为例：</p>
<p><img src="//img.aotu.io/MarkLin/privateCocoaPods/1-3createGithub.png" alt="repo"></p>
<p>如图所示，我们在 <strong>github</strong> 上创建一个空的仓库，命名为 <strong>O2Specs</strong> ，这个仓库是用来存放我们自己所有的私有库的 <strong>spec</strong> 文件，就如同官方的 <a href="https://github.com/CocoaPods/Specs" target="_blank" rel="external"><strong>https://github.com/CocoaPods/Specs</strong></a> 是用来存放所有官方的 <strong>specs</strong> 文件一样。</p>
<p>然后我们就可以执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo add REPO_NAME SOURCE_URL</div></pre></td></tr></table></figure>
<p>其中的 REPO_NAME 是我们要添加的私有 <strong>repo</strong> 的名称（这里我们待会填的是: <strong>O2Specs</strong>），后面是仓库的 git 地址。这里做的其实是创建的工作，也就是在 <code>~/.cocoapods/repo</code> 目录下添加了一个以你的私有 <strong>repo</strong> 为名的文件夹，但是并没有添加 <strong>spec</strong> 文件。</p>
<p>在终端执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo add O2Specs https://github.com/marklin2012/O2Specs.git</div></pre></td></tr></table></figure></p>
<p> 这里用的是 <strong>https</strong> 地址，当然你也可以用 <strong>git</strong> 地址，不过这样有可能失败。如果失败，很大因素是你 <strong>github</strong> 的 <strong>ssh</strong> 在本地没有配置好，配置方法可以看这里：<a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external"><strong>Generating SSH keys</strong></a>，成功后可以看得到 <strong>.cocoapods</strong> 目录如下图所示：</p>
<p><img src="//img.aotu.io/MarkLin/privateCocoaPods/1-4o2specsRepos.png" alt="repo"></p>
<p>至此，我们已经在本地得到我们自己的私有仓库 <strong>O2Specs</strong> ，这是一个空的仓库。</p>
<h3 id="2-添加私有的-Repo-安装到你的-CocoaPods-中"><a href="#2-添加私有的-Repo-安装到你的-CocoaPods-中" class="headerlink" title="2.添加私有的 Repo 安装到你的 CocoaPods 中"></a>2.添加私有的 <strong>Repo</strong> 安装到你的 <strong>CocoaPods</strong> 中</h3><p>这个步骤需要我们事先完成 <strong>CocoaPods</strong> 依赖库的搭建，具体可以查看我们另外一篇教程：<a href="http://www.jianshu.com/p/7a82e977281c" target="_blank" rel="external">制作 <strong>CocoaPods</strong> 依赖库</a>。如果这里你想先看看效果，也可以直接从 <strong>github</strong> 上 clone <a href="https://github.com/marklin2012/O2View" target="_blank" rel="external">示例工程</a>继续下面的操作。</p>
<p>让我们进入到上面 clone 的示例工程目录中（或者你自己搭建的依赖库目录中）：</p>
<p><img src="//img.aotu.io/MarkLin/privateCocoaPods/1-5O2ViewDoc.jpeg" alt="repo"></p>
<p>打开工程的 <strong>podspec</strong> 文件：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  s.name         = <span class="string">"O2View"</span>				<span class="comment">#名称</span></div><div class="line">  s.version      = <span class="string">"0.0.1"</span>				<span class="comment">#版本号</span></div><div class="line">  s.summary      = <span class="string">"Just testing"</span>		<span class="comment">#简短介绍</span></div><div class="line">  s.description  = <span class="string">&lt;&lt;-DESC</span></div><div class="line">  					私有Pods测试</div><div class="line">  					* Markdown 格式</div><div class="line">                   DESC</div><div class="line"></div><div class="line">  s.homepage     = <span class="string">"http://aotu.io/"</span></div><div class="line">  <span class="comment"># s.screenshots  = "www.example.com/screenshots_1.gif"</span></div><div class="line">  s.license      = <span class="string">"MIT"</span>				<span class="comment">#开源协议</span></div><div class="line">  s.author             = &#123; <span class="string">"linyi31"</span> =&gt; <span class="string">"linyi@jd.com"</span> &#125;</div><div class="line"></div><div class="line">  s.source       = &#123; <span class="symbol">:git</span> =&gt; <span class="string">"https://github.com/marklin2012/O2View.git"</span> &#125;</div><div class="line">  <span class="comment">## 这里不支持ssh的地址，只支持HTTP和HTTPS，最好使用HTTPS</span></div><div class="line">  <span class="comment">## 正常情况下我们会使用稳定的tag版本来访问，如果是在开发测试的时候，不需要发布release版本，直接指向git地址使用</span></div><div class="line">  <span class="comment">## 待测试通过完成后我们再发布指定release版本，使用如下方式</span></div><div class="line">  <span class="comment">#s.source       = &#123; :git =&gt; "http://EXAMPLE/O2View.git", :tag =&gt; s.version &#125;</span></div><div class="line">  </div><div class="line">  s.platform     = <span class="symbol">:ios</span>, <span class="string">"9.0"</span>			<span class="comment">#支持的平台及版本，这里我们呢用swift，直接上9.0</span></div><div class="line">  s.requires_arc = <span class="literal">true</span>					<span class="comment">#是否使用ARC</span></div><div class="line"></div><div class="line">  s.source_files  = <span class="string">"O2View/*.swift"</span>	<span class="comment">#OC可以使用类似这样"Classes/**/*.&#123;h,m&#125;"</span></div><div class="line"></div><div class="line">  s.frameworks = <span class="string">'UIKit'</span>, <span class="string">'QuartzCore'</span>, <span class="string">'Foundation'</span>	<span class="comment">#所需的framework,多个用逗号隔开</span></div><div class="line">  s.module_name = <span class="string">'O2View'</span>				<span class="comment">#模块名称</span></div><div class="line"></div><div class="line">  <span class="comment"># s.dependency "JSONKit", "~&gt; 1.4"	#依赖关系，该项目所依赖的其他库，如果有多个可以写多个 s.dependency</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这个文件本质上是一个 <strong>ruby</strong> 文件，这是我们事先已经实现好的依赖库的 <strong>podspec</strong> 文件，如果前面步骤都正常的话，也就是说我们认为这个 <strong>podspec</strong> 是合法的话，就可以直接将这些内容 <strong>push</strong> 到我们本地的 <strong>repo</strong> 中。为了避免错误，我们可以再验证一下，命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint</div></pre></td></tr></table></figure>
<p>运行之后可能会得到下面的警告：</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> -&gt; O2View (<span class="number">0.0</span><span class="number">.1</span>)</div><div class="line">    - WARN  | source: Git sources should specify a tag.</div><div class="line"></div><div class="line">[!] O2View did not pass validation, due <span class="keyword">to</span> <span class="number">1</span> warning (but you can <span class="keyword">use</span> `--allow-warnings` <span class="keyword">to</span> ignore it) <span class="keyword">and</span> All results apply only <span class="keyword">to</span> <span class="keyword">public</span> specs, but you can <span class="keyword">use</span> `--<span class="keyword">private</span>` <span class="keyword">to</span> ignore them <span class="keyword">if</span> linting the specification <span class="keyword">for</span> a <span class="keyword">private</span> pod..</div><div class="line">You can <span class="keyword">use</span> the `--no-clean` option <span class="keyword">to</span> inspect any issue.</div></pre></td></tr></table></figure>
<p>由于我们的示例工程还没有生成正式的 <strong>release</strong> 版本， <strong>github</strong> 上并没有任何 <strong>tag</strong>，所以我们刚才填写 <strong>.podspec</strong> 文件填写 <strong>git</strong> 地址的时候没有填写指定 <strong>tag</strong> （上面文件的注释中有提到），解决方法我们可以先执行忽略警告的命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint --allow-warnings</div></pre></td></tr></table></figure>
<p>如果成功会出现如下输出：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> -<span class="ruby">&gt; O2View (<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>)</span></div><div class="line">    -<span class="ruby"> WARN  <span class="params">| source: Git sources should specify a tag.</span></span></div><div class="line"></div><div class="line">O2View passed validation.</div></pre></td></tr></table></figure>
<p>到此，我们的 <strong>O2View.podspec</strong> 就符合规范了。</p>
<h3 id="3-添加你的-Podspec-到你的-repo"><a href="#3-添加你的-Podspec-到你的-repo" class="headerlink" title="3.添加你的 Podspec 到你的 repo"></a>3.添加你的 <strong>Podspec</strong> 到你的 <strong>repo</strong></h3><p>在前面验证通过的基础上，我们接着执行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo push O2Specs O2View.podspec</div></pre></td></tr></table></figure>
<p>执行完，如果失败会有相对应的警告和错误提示，只要按照警告和错误的详细信息进行修改和完善即可。成功的情况应该可以在终端看到类似的输出：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Validating <span class="keyword">spec</span></div><div class="line"> -&gt; O2View (<span class="number">0.0</span>.<span class="number">1</span>)</div><div class="line">    - WARN  | source: Git sources should specify a <span class="keyword">tag</span>.</div><div class="line"></div><div class="line">Updating the `O2Specs' repo</div><div class="line"></div><div class="line">Already up-to-<span class="keyword">date</span>.</div><div class="line"></div><div class="line">Adding the <span class="keyword">spec</span> to the `O2Specs' repo</div><div class="line"></div><div class="line"> - [Add] O2View (<span class="number">0.0</span>.<span class="number">1</span>)</div><div class="line"></div><div class="line">Pushing the `O2Specs' repo</div><div class="line"></div><div class="line">To https://github.com/marklin2012/O2Specs.git</div><div class="line">   <span class="number">9</span>f32092..<span class="number">8</span>d0ced5  <span class="keyword">master</span> <span class="title">-&gt; master</span></div></pre></td></tr></table></figure>
<p>再进入到 <strong>.cocoapods</strong> 的目录中，可以看到已经发生了变化：</p>
<p><img src="//img.aotu.io/MarkLin/privateCocoaPods/1-6O2SpecsRepoO2View.png" alt="repo"></p>
<p>同时，我们还发现 <strong>O2Specs</strong> 的 <strong>github</strong> 仓库也已经发生了变化：</p>
<p><img src="//img.aotu.io/MarkLin/privateCocoaPods/1-7O2SpecPushed.png" alt="repo"></p>
<p>按照平时使用 <strong>CocoaPods</strong> 的习惯，我们添加依赖库之前会先搜索一下库，让我们执行一下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search O2View</div></pre></td></tr></table></figure>
<p>哈哈，可以看到已经建立成功了！</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-&gt; O2View (<span class="number">0.0</span><span class="number">.1</span>)</div><div class="line">   Just testing</div><div class="line">   pod <span class="string">'O2View'</span>, <span class="string">'~&gt; 0.0.1'</span></div><div class="line">   - <span class="string">Homepage:</span> <span class="string">http:</span><span class="comment">//aotu.io/</span></div><div class="line">   - <span class="string">Source:</span>   <span class="string">https:</span><span class="comment">//github.com/marklin2012/O2View.git</span></div><div class="line">   - <span class="string">Versions:</span> <span class="number">0.0</span><span class="number">.1</span> [O2Specs repo]</div></pre></td></tr></table></figure>
<h3 id="4-测试私有-pod"><a href="#4-测试私有-pod" class="headerlink" title="4.测试私有 pod"></a>4.测试私有 pod</h3><p>看到前面的搜索结果，小伙伴们是不是开始有点激动了？让我们建立一个普通的工程，命名为 <strong>TestPodDemo</strong>，然后在终端 <strong>cd</strong> 到其目录路径下，添加一个 <strong>Podfile</strong> 文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod init</div></pre></td></tr></table></figure>
<p>建立后修改 <strong>Podfile</strong> 文件内容如下：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">use_frameworks!</div><div class="line"></div><div class="line">target <span class="symbol">'TestPodDemo</span>' <span class="keyword">do</span></div><div class="line"></div><div class="line">pod ‘O2View’</div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p>我们得到如下提示：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Updating local specs repositories</div><div class="line">Analyzing dependencies</div><div class="line">[!] Unable <span class="keyword">to</span> find a specification <span class="keyword">for</span> `O2View`</div><div class="line"></div><div class="line">[!] Your Podfile <span class="keyword">has</span> had smart quotes sanitised. <span class="keyword">To</span> avoid issues <span class="keyword">in</span> the <span class="keyword">future</span>, you should <span class="keyword">not</span> use TextEdit <span class="keyword">for</span> editing it. <span class="keyword">If</span> you are <span class="keyword">not</span> <span class="keyword">using</span> TextEdit, you should turn off smart quotes <span class="keyword">in</span> your editor <span class="keyword">of</span> choice.</div></pre></td></tr></table></figure>
<p>找不到 <strong>O2View</strong> ？ 额- -！。。。刚才 <strong>search</strong> 明明可以找到这个依赖库的，为什么现在找不到了呢？</p>
<p>别着急!其实原因是你在 <strong>Podfile</strong> 中没有指定路径，当你执行 <code>pod install</code> 的时候，<strong>CocoaPods</strong> 默认只会在 <strong>master</strong> 下搜索，而我们的 <strong>spec</strong> 是存在我们私有的 <strong>O2Specs</strong> 目录下的。所以解决方式很简单，就是引入搜索地址即可，在 <strong>Podfile</strong> 的顶部添加如下两行代码：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source <span class="string">'https://github.com/CocoaPods/Specs.git'</span>		<span class="comment">#官方仓库地址</span></div><div class="line">source ‘https:<span class="regexp">//gi</span>thub.com<span class="regexp">/marklin2012/</span>O2Specs.git’		<span class="comment">#私有仓库地址</span></div></pre></td></tr></table></figure>
<p>这里必须添加两个地址，默认情况下，你如果不添加 <strong>source</strong> ，系统会默认使用官方仓库地址，但是当你添加了 <strong>source</strong> 之后，系统就不会自动搜索官方地址，所以这两句都必须添加，否则其他基于官方的依赖库都不能使用了。</p>
<p>再次执行 <code>pod install</code> ，我们就可以看到很顺利的安装成功了：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Updating local specs <span class="keyword">repositories</span></div><div class="line">Analyzing <span class="keyword">dependencies</span></div><div class="line">Downloading <span class="keyword">dependencies</span></div><div class="line">Using O2View (<span class="number">0.0</span>.<span class="number">1</span>)</div><div class="line">Generating Pods <span class="keyword">project</span></div><div class="line">Integrating client <span class="keyword">project</span></div><div class="line">Sending stats</div><div class="line">Pod installation complete! There is <span class="number">1</span> dependency <span class="keyword">from</span> the Podfile and <span class="number">1</span> total pod installed.</div></pre></td></tr></table></figure>
<p>恭喜！这样一来我们就可以使用这个私有库了！ </p>
<h3 id="发布稳定的依赖库版本"><a href="#发布稳定的依赖库版本" class="headerlink" title="发布稳定的依赖库版本"></a>发布稳定的依赖库版本</h3><p>前面我们提到过，我们的这个实例依赖库 <strong>O2View</strong> 没有生成稳定的 <strong>release</strong> 版本。当我们调试完内容之后，一般都是要发布稳定版本的，更新之后再继续发布新版本。我们可以使用命令行或者在 <strong>github</strong> 页面手动生成，这里为了方便我们使用命令行，首先在终端中 <strong>cd</strong> 到之前的依赖库 <strong>O2View</strong> 的目录中，然后输入如下命令：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">tag</span> <span class="title">'0</span>.<span class="number">0.1</span>'</div><div class="line">git push --tags</div><div class="line">git push origin <span class="literal">master</span></div></pre></td></tr></table></figure>
<p>这样我们就得到了一个稳定的 <strong>release</strong> 版本 <strong>0.0.1</strong>：</p>
<p><img src="//img.aotu.io/MarkLin/privateCocoaPods/1-8githubTags.png" alt="repo"></p>
<blockquote>
<p>这里我用的版本号是 <strong>0.0.1</strong> 基于研发版本，关于版本号的一些规范可以参考：<a href="http://semver.org/lang/zh-CN/" target="_blank" rel="external">语义化版本 2.0.0</a></p>
</blockquote>
<p>对于我们的 <strong>podspec</strong> 文件，我们也需要将 <code>s.source</code> 做一下小小的改动:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.source       = &#123; :<span class="function"><span class="params">git</span> =&gt;</span> <span class="string">"https://github.com/marklin2012/O2View.git"</span>, :<span class="function"><span class="params">tag</span> =&gt;</span> version &#125;</div></pre></td></tr></table></figure>
<p>这样我们使用这个依赖库的时候就能对应上版本号，并且知道在 <strong>github</strong> 中使用稳定的 <strong>release</strong> 版本代码。太棒了！</p>
<p>最后只需要再重复 <code>push</code> 一下我们的 <strong>Podfile</strong> 就可以！</p>
<h3 id="接下来做什么？"><a href="#接下来做什么？" class="headerlink" title="接下来做什么？"></a>接下来做什么？</h3><p>好了，到这里我们已经完全掌握如何创建一个本地私有的 <strong>CocoaPods</strong> 了！我们完全可以把我们项目中得代码拆出来封装成一些 <strong>pods</strong>， 好好使用这个黑魔法！</p>
<p>祝大家玩得愉快！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;公共-CocoaPods&quot;&gt;&lt;a href=&quot;#公共-CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;公共 CocoaPods&quot;&gt;&lt;/a&gt;公共 CocoaPods&lt;/h3&gt;&lt;p&gt;打开隐藏目录，可以使用命令: &lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//打开隐藏的命令:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;defaults write com&lt;span class=&quot;selector-class&quot;&gt;.apple&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.finder&lt;/span&gt; AppleShowAllFiles -bool true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//关闭隐藏的命令:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;defaults write com&lt;span class=&quot;selector-class&quot;&gt;.apple&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.finder&lt;/span&gt; AppleShowAllFiles -bool false&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着需要重启一下 &lt;strong&gt;Finder&lt;/strong&gt;， 可以按住 &lt;strong&gt;option&lt;/strong&gt; + 右键 &lt;strong&gt;Finder&lt;/strong&gt; 图标选择重启。然后打开隐藏目录 &lt;strong&gt;.cocoapods&lt;/strong&gt; (这个目录在你的个人目录底下, &lt;code&gt;~/.cocoapods&lt;/code&gt; 或 &lt;code&gt;/Users/[username]/.cocoapods&lt;/code&gt;)&lt;/p&gt;
    
    </summary>
    
      <category term="移动开发" scheme="https://aotu.io/cates/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="https://aotu.io/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="https://aotu.io/tags/CocoaPods/"/>
    
      <category term="Swift" scheme="https://aotu.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>UFT 需求提报平台回顾</title>
    <link href="https://aotu.io/notes/2016/01/16/UFT/"/>
    <id>https://aotu.io/notes/2016/01/16/UFT/</id>
    <published>2016-01-16T08:44:00.000Z</published>
    <updated>2016-10-20T07:06:32.412Z</updated>
    
    <content type="html"><![CDATA[<p>最初它的名字为 BugHound，主要功能是 bug 提交，EC 同学已经造出了它最初的样子，它最初的目标用户是移动用户，能在提 bug 的同时收集设备的相关信息。主要用到的技术点：</p>
<ul>
<li>php</li>
<li>mongodb</li>
</ul>
<p>我开始熟悉原代码并尝试在此基础上进行迭代开发，但是由于功能上有较大的变更，而我没有用过 Mongodb 和 php，这时我更倾向于使用我熟悉的 MySql 和 Nodejs，在得到 EC 同学的允许后，我决定从零开始搭建系统。本文选择其中几点进行阐述。</p>
<h2 id="数据设计"><a href="#数据设计" class="headerlink" title="数据设计"></a>数据设计</h2><p>第一步是建表，下图是最初的表设计，基本上按照原 mongodb 中的数据关系进行定义，设计好数据表，再把它们写进<strong>数据字典</strong>，最后才开始建表。</p>
<p><em>（数据字典对开发和协作的作用非常大，它能让你和别人知道表中有哪些字段，某字段代表什么等信息，在接下来的编码工作中还会经常去查看它。）</em></p>
<p><img src="//img.aotu.io/Manjiz/2016/uft/tabledesign.jpg" alt="数据设计"></p>
<p>随着开发的深入，数据不断拓展，有些字段被淘汰或被拆分到新表，有些字段新加进来，比如代表“文件”的数据，原来以字符串的形式写在 demand 表的 files 字段，作为经常被读写的数据，以字符串的形式保存显然不正确，我们需要把每个文件当作一个数据元，于是把 files 字段拆分成新表 demandfiles，并增加了上传人、上传时间和下载次数这些信息。</p>
<p>为了让数据库设计更加合理，使用了外键约束，确保在删除修改数据的同时能级联删除修改，外键统一命名为 <code>fk_table_field</code> 的形式。修改后的 ER 图如下所示：<br><img src="//img.aotu.io/Manjiz/2016/uft/modeldesign.png" alt="数据库设计"></p>
<h2 id="技术实践"><a href="#技术实践" class="headerlink" title="技术实践"></a>技术实践</h2><ol>
<li><p><strong>第一阶段</strong></p>
<p> 起初，项目后端使用了 <code>ejs</code> 模板引擎，拆分头尾在后端渲染模板后发回给前端，前端用 jQuery 进行逻辑的处理。</p>
</li>
<li><p><strong>第二阶段</strong></p>
<p> 前端开始使用 Angular 替代 jQuery，但是 ejs 跟 Angular 好像有点格格不入，前者意在后端渲染数据，后者通常在前端通过 $http 获取数据来填充，这时的 ejs 的存在主要是为了组装拆分出来的头尾，不好去掉它。但是，接着发现了 <code>ng-include</code>，这让组装头尾的工作交给了前端，从而摒弃掉了 ejs。</p>
</li>
<li><p><strong>第三阶段</strong></p>
<p> 接着，切换页面的时候头部闪烁的问题引起了注意，原来是 Angular 使用方式不对，我的每个页面都是一个单独的 Angular app，每次切换页面时都引入一次头尾导致闪烁，于是引入 ui-router 把系统修改成一个单页面应用，更新 <code>ui-view</code> 即可切换页面。</p>
<p> 这又引出了一个新的问题，所有页面的入口都是 index.html，也就是说不能再简单地在后端通过路由来控制页面的访问权限了，这样另一个概念就登场了——本地身份验证。简单点说，就是在进入应用主入口 index.html 的时候，从服务器请求身份信息，身份信息将保存在 <code>service</code> 中（类似 session storage），然后在状态（页面）切换事件 <code>stateChangeStart</code> 或 <code>stateChangeSuccess</code> 中，对页面请求进行拦截或重定向等操作。</p>
<p> 然而，网络请求都有一定的延迟，在身份信息返回来之前，某些页面的内容不应该被呈现出来，所以要在获取到身份信息后通知到页面，于是就加进了事件广播和接收器 <code>$broadcast</code> 和 <code>$on</code>：获取到身份信息后通过 <code>$broadcast</code> 广播一个事件，在子页面中通过 <code>$on</code> 接收到该事件后执行相关逻辑。</p>
</li>
</ol>
<h2 id="排期表设计"><a href="#排期表设计" class="headerlink" title="排期表设计"></a>排期表设计</h2><ol>
<li><p><strong>v1 版</strong></p>
<p> <strong>背景：</strong>需求排期时间不能冲突，排期由排期起始和结束时间决定。</p>
<p> 从服务器获取的源数据形式如下，已按 startDate 排好序，每个用户数据中包含排期数据（data）：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">	&#123;</div><div class="line">		<span class="attr">erp</span>:xx, </div><div class="line">		<span class="attr">name</span>:xx, </div><div class="line">		... , </div><div class="line">		data[</div><div class="line">			&#123;<span class="attr">demandID</span>:xx, <span class="attr">startDate</span>:xx, <span class="attr">endDate</span>:xx, ...&#125;,</div><div class="line">			&#123;<span class="attr">demandID</span>:xx, <span class="attr">startDate</span>:xx, <span class="attr">endDate</span>:xx, ...&#125;,</div><div class="line">			&#123;<span class="attr">demandID</span>:xx, <span class="attr">startDate</span>:xx, <span class="attr">endDate</span>:xx, ...&#125;,</div><div class="line">			...</div><div class="line">		]</div><div class="line">	&#125;,</div><div class="line">	...</div><div class="line">]</div></pre></td></tr></table></figure>
<p> 在前端计算好周起始时间 <code>ws</code> 和周结束时间 <code>we</code>，对每条排期数据进行判断，如果排期时间跟本周的时间有交集，则计算该排期都出现在了哪几天，比如下图的情形，这里有两个排期：</p>
<p> <img src="//img.aotu.io/Manjiz/2016/uft/schedulev1eq.jpg" alt="周期"></p>
<p> 数据将会按下面的形式（blocks）附加到用户数据中，其中 [0,1,2] 和 [4,5] 的数字就分别表示了两个排期在周排期表中占据的位置。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">	&#123;</div><div class="line">		<span class="attr">erp</span>:xx, </div><div class="line">		<span class="attr">name</span>:xx, </div><div class="line">		... , </div><div class="line">		data[</div><div class="line">			&#123;<span class="attr">demandID</span>:xx, <span class="attr">startDate</span>:xx, <span class="attr">endDate</span>:xx, ...&#125;,</div><div class="line">			&#123;<span class="attr">demandID</span>:xx, <span class="attr">startDate</span>:xx, <span class="attr">endDate</span>:xx, ...&#125;,</div><div class="line">			&#123;<span class="attr">demandID</span>:xx, <span class="attr">startDate</span>:xx, <span class="attr">endDate</span>:xx, ...&#125;,</div><div class="line">			...</div><div class="line">		],</div><div class="line">		<span class="attr">blocks</span>:[</div><div class="line">			&#123;</div><div class="line">				<span class="attr">demandID</span>:xx, </div><div class="line">				<span class="attr">demandName</span>:xx,</div><div class="line">				<span class="attr">dictator</span>:xx,</div><div class="line">				<span class="attr">block</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</div><div class="line">			&#125;,</div><div class="line">			&#123;</div><div class="line">				<span class="attr">demandID</span>:xx, </div><div class="line">				<span class="attr">demandName</span>:xx,</div><div class="line">				<span class="attr">dictator</span>:xx,</div><div class="line">				<span class="attr">block</span>: [<span class="number">4</span>, <span class="number">5</span>]</div><div class="line">			&#125;,</div><div class="line">			...</div><div class="line">		]</div><div class="line">	&#125;,</div><div class="line">	...</div><div class="line">]</div></pre></td></tr></table></figure>
<p> 接着，处理排期表中的空闲的天，给用户数据附加以下数据：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">schedule: [</div><div class="line">	&#123;<span class="attr">demandID</span>:xxx, ...&#125;,	<span class="comment">// blocks[0]</span></div><div class="line">	&#123;<span class="attr">date</span>:xxx&#125;,	<span class="comment">//周三，时间用于点进申请页自动填好时间</span></div><div class="line">	&#123;<span class="attr">demandID</span>:xxx, ...&#125;,	<span class="comment">// blocks[1]</span></div><div class="line">	&#123;<span class="attr">date</span>:xxx&#125;	<span class="comment">//周六，时间用于点进申请页自动填好时间</span></div><div class="line">]</div></pre></td></tr></table></figure>
<p> 然后在页面上由 <code>schedule</code> 循环输出 td，blocks[0] 和 blocks[1] 的长度就是 td 横跨的 td 个数。</p>
</li>
<li><p><strong>v2 版</strong></p>
<p> <strong>背景：</strong>v1 版的排期表设计中，由于排期的最小单位是“天”，而存在数据库中的 startDate 和 endDate 的最小单位却是毫秒，在计算上无疑增加了大量纷繁的计算，受移动组 task 系统的启发，把排期数据改为 startDate 和 days（所需天数），这样可以减少一半的计算，也更好理解。另外较大的改动，排期时间将允许有重叠（即同一天可以排多个需求）。</p>
<p> 从服务器获取的源数据的形式不变，这次我在计算之前把时间都转化成了天（1970-01-01至今的天数）以方便计算，为了解决排期堆叠的问题，添加了两个关键的变量：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> weekpile = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>];	<span class="comment">//记录排期在该天已经堆到第几层了</span></div><div class="line"><span class="keyword">var</span> wee = [[], [], [], [], [], [], []];	<span class="comment">//数组中的每个数组代表星期里的一天，存储由该天开始的需求，下面有详解</span></div></pre></td></tr></table></figure>
<p> weekpile 原理如下图，每个排期排在第几层由它在排期表中的第一天所在层级决定。</p>
<p> <img src="//img.aotu.io/Manjiz/2016/uft/weekpile.gif" alt="weekpile"></p>
<p> 层数记录附加到用户数据中，如下：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">blocks: [</div><div class="line">	&#123;</div><div class="line">		<span class="attr">id</span>:xx, <span class="attr">demandID</span>:xx, <span class="attr">startDate</span>:xx, <span class="attr">days</span>:xx, ... ,</div><div class="line">		<span class="attr">weekdays</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</div><div class="line">		<span class="attr">pilefloor</span>: n	<span class="comment">// 所在层级</span></div><div class="line">	&#125;,</div><div class="line">	...</div><div class="line">]</div></pre></td></tr></table></figure>
<p> 另外，上文提到的 <code>wee</code> 变量存储的是指向 <code>blocks</code> 索引的数字，把它也附加到用户数据中。如图，外层 div 的 <code>margin-top</code> 由 <code>wee</code> 所指向的第一个排期的 <code>pilefloor</code> 决定，比如下图假设这是星期六，那么外层 div 的 <code>margin-top</code> 由 <code>blocks[wee[6][0]].pilefloor</code> 决定。</p>
<p> <img src="//img.aotu.io/Manjiz/2016/uft/wee.png" alt="wee"></p>
<p> 因为已知排期的天数 n，给每个排期的宽度设置相应的 n*100% 即可。</p>
<p> 然后在页面上由 <code>wee</code> 循环输出 td，blocks[n] 中的 weekdays 的 length 决定了排期的长度。</p>
<p> v2 版排期表如图所示：</p>
<p> <img src="//img.aotu.io/Manjiz/2016/uft/schedule.png" alt="排期"></p>
</li>
</ol>
<h2 id="协作"><a href="#协作" class="headerlink" title="协作"></a>协作</h2><p>最初 UFT 主要由我进行开发，后来另一个同事加入开发，变成我负责 UFT 的功能开发，她负责 UFT 的 UI 优化，项目源码放到 <a href="https://github.com/o2team/UFT" target="_blank" rel="external">github</a> 上了，我们要在 github 共同进行开发，我们两人琢磨了好久，面对冲突问题时开始还采取过删除后重新拉取暴力做法，几经尝试，我们最终探索出两种较好的协作方式：</p>
<ol>
<li>我们各自拉取分支修改，push 上去后发起合并请求，我负责合并分支；</li>
<li><p>在本地修改后，先从服务器上拉取更新合并：</p>
<p> <code>git fetch origin master</code></p>
<p> 然后进行合并</p>
<p> <code>git merge FETCH_HEAD</code></p>
<p> 一般情况下，合并会顺利进行，但难免会有冲突，一旦有冲突，就调用 mergetool 进行合并，或者直接在原文件上手动合并。最后，就是正常的提交过程了。</p>
<p> 关于 mergetool，自从同事分享过一次，回去后自己装了 p4merge，配置如下：</p>
 <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[diff]</div><div class="line">	tool = p4merge</div><div class="line">[difftool <span class="string">"p4merge"</span>]</div><div class="line">	<span class="keyword">cmd</span><span class="bash"> = <span class="string">"p4merge <span class="variable">$LOCAL</span> <span class="variable">$REMOTE</span>"</span></span></div><div class="line">[merge]</div><div class="line">	tool = p4merge</div><div class="line">[mergetool <span class="string">"p4merge"</span>]</div><div class="line">	<span class="keyword">cmd</span><span class="bash"> = <span class="string">"p4merge <span class="variable">$BASE</span> <span class="variable">$LOCAL</span> <span class="variable">$REMOTE</span> <span class="variable">$MERGED</span>"</span></span></div><div class="line">	trustExitCode = true</div><div class="line">	keepBackup = false</div></pre></td></tr></table></figure>
<p> 但是，没有冲突是调用不了 mergetool 的。</p>
</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li><p><strong>临时文件的处理</strong></p>
<p> 临时文件指的是异步上传到 temp 文件夹的文件，用户上传文件后如果不打算进一步提交了，这些临时文件就成了“弃儿”，如果不对这些文件进行处理，temp 文件夹会越来越大。于是加进了定期任务，每隔一段时间对临时文件夹中的文件进行清理，为了防止把用户刚上传的文件清理掉了，被清理的文件的最后访问时间要在3天之前。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>UFT 从无到有，很多东西边学边用：第一次尝试用 Express，配设置、配路由等过程遇到不少坑；第一次用 Angular，用得并不规范，多亏涛哥从中相助，解决我不少困惑；Angular 各种各样插件的学习使用过程，就是不断试错，不断筛选满意插件的过程。</p>
<p>除了知识上吸收，最大的收获是意识到项目规划的重要性。开始接手后就马上开始写代码，需要什么功能就写什么，以至于最后需要经常较大地改动代码，比如，列表之前用 Bootstrap-table 写，然后改成 Angular，又比如将页面合并成单页面 Angular 应用时，需要把大量的插件都换成 Angular 插件，还有项目的结构也几经变换。折腾这几番足见项目前期的规划还是非常重要且必要的。</p>
<h2 id="未来规划"><a href="#未来规划" class="headerlink" title="未来规划"></a>未来规划</h2><p>UFT 原来的目标是供部门内部使用，用户访问系统需要先经过内部员工帐号的身份认证过程，然而，随着内部推出了新的需求管理平台并推广到部门，UFT 被闲置，为了让 UFT 重新焕发活力，在接下来，把源码开源，并将把 UFT 改造成通用的需求管理平台。目前平台仍有不少可以优化的地方，例如：</p>
<ul>
<li>MySql 使用上 View 和 Function 会简化很多工作</li>
<li>Models 不是真正的 MVC 中的 M，可以考虑让这部分更远离业务逻辑更接近数据</li>
<li>需求状态的多样化，需求状态变更的系统通知（非邮件）</li>
<li>……</li>
</ul>
<p>源码地址：<a href="https://github.com/o2team/UFT" target="_blank" rel="external">https://github.com/o2team/UFT</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最初它的名字为 BugHound，主要功能是 bug 提交，EC 同学已经造出了它最初的样子，它最初的目标用户是移动用户，能在提 bug 的同时收集设备的相关信息。主要用到的技术点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;php&lt;/li&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;/ul&gt;

    
    </summary>
    
      <category term="项目总结" scheme="https://aotu.io/cates/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="uft" scheme="https://aotu.io/tags/uft/"/>
    
      <category term="angular" scheme="https://aotu.io/tags/angular/"/>
    
      <category term="kendo" scheme="https://aotu.io/tags/kendo/"/>
    
      <category term="node-mysql" scheme="https://aotu.io/tags/node-mysql/"/>
    
      <category term="express" scheme="https://aotu.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>js游戏开发初级入门</title>
    <link href="https://aotu.io/notes/2016/01/14/introduction-to-JS-game-development/"/>
    <id>https://aotu.io/notes/2016/01/14/introduction-to-JS-game-development/</id>
    <published>2016-01-14T01:20:39.000Z</published>
    <updated>2016-10-20T07:06:32.412Z</updated>
    
    <content type="html"><![CDATA[<p>万事开头难，js一直没有进步？跟着这篇文章来编写五子棋游戏吧！<br><a id="more"></a></p>
<h2 id="1-游戏开发方法"><a href="#1-游戏开发方法" class="headerlink" title="1 游戏开发方法"></a>1 游戏开发方法</h2><h3 id="1-1-小规模游戏"><a href="#1-1-小规模游戏" class="headerlink" title="1.1 小规模游戏"></a>1.1 小规模游戏</h3><p>小规模游戏一般由一人或两人完成，不需要详细的产品说明等资料，直接进入代码的编写，然后在浏览器中解释并运行。有时候出现错误，重新编辑再回到浏览器解释运行，就是一个简单的编辑-解释-运行的重复工作模式。</p>
<h3 id="1-2-大规模游戏"><a href="#1-2-大规模游戏" class="headerlink" title="1.2 大规模游戏"></a>1.2 大规模游戏</h3><p>大规模游戏一般由两人以上完成，一共分为三个阶段：设计阶段、说明阶段、实现阶段。首先是设计阶段：设计什么游戏，游戏的主体用户是谁，游戏的目的等。然后是说明阶段：清楚游戏需要的类和类中需要的方法，分别做一个规划，保证编写代码时思路清晰，以及代码的整洁性。最后是实现阶段，其实就是进入编辑-解释-运行的工作模式。也就是说，大规模游戏比小规模游戏多了两大阶段即设计阶段和说明阶段而已。</p>
<h2 id="2-了解游戏规则"><a href="#2-了解游戏规则" class="headerlink" title="2 了解游戏规则"></a>2 了解游戏规则</h2><ul>
<li>对局双方各执一色棋子。</li>
<li>空棋盘开局</li>
<li>黑先、白后，交替下子，每次只能下一子。</li>
<li>棋子下在棋盘的空白点上，棋子下定后，不得向其它点移动，不得从棋盘上拿掉或拿起另落别处。</li>
<li>黑方的第一枚棋子可下在棋盘任意交叉点上。</li>
</ul>
<h2 id="3-五子棋游戏的主要方法"><a href="#3-五子棋游戏的主要方法" class="headerlink" title="3 五子棋游戏的主要方法"></a>3 五子棋游戏的主要方法</h2><h3 id="3-1-画棋盘"><a href="#3-1-画棋盘" class="headerlink" title="3.1 画棋盘"></a>3.1 画棋盘</h3><h4 id="3-1-1-画棋盘思路"><a href="#3-1-1-画棋盘思路" class="headerlink" title="3.1.1 画棋盘思路"></a>3.1.1 画棋盘思路</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 确定棋盘大小 15*15 即n = 15</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawGobang</span>(<span class="params">n</span>) </span>&#123;</div><div class="line"><span class="comment">// 动态生成dom元素</span></div><div class="line"><span class="comment">// 通过添加类控制棋盘样式，尤其注意边缘的棋子的样式控制</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-1-2-画棋盘代码"><a href="#3-1-2-画棋盘代码" class="headerlink" title="3.1.2 画棋盘代码"></a>3.1.2 画棋盘代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 画棋盘格子</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawGobang</span>(<span class="params">n</span>) </span>&#123;   </div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</div><div class="line">		</div><div class="line">			<span class="keyword">var</span> block = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line"></div><div class="line">			block.className = <span class="string">"gobang_block"</span>;</div><div class="line">			<span class="comment">// 赋予每个格子一个id,方便以后识别并下棋，或可添加html5自定义属性data-*</span></div><div class="line">			block.id = <span class="string">"block_"</span>+ i + <span class="string">"_"</span> + j;</div><div class="line">			gobang.appendChild(block);</div><div class="line">		</div><div class="line">			<span class="comment">// 边缘的格子属于特殊情况，需要单独绘制</span></div><div class="line">			<span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</div><div class="line">				block.className += <span class="string">" top"</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(i==n<span class="number">-1</span>)&#123;</div><div class="line">				block.className += <span class="string">" bottom"</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</div><div class="line">					block.className += <span class="string">" left"</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(j==n<span class="number">-1</span>)&#123;</div><div class="line">				block.className += <span class="string">" right"</span>;</div><div class="line">			&#125;	</div><div class="line">		&#125;</div><div class="line">			</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-1-2-画棋盘图示"><a href="#3-1-2-画棋盘图示" class="headerlink" title="3.1.2 画棋盘图示"></a>3.1.2 画棋盘图示</h4><p>注意边缘的棋子的样式控制，另外鼠标经过时添加红色虚线提醒。</p>
<p><img src="//img.aotu.io/wangcainuan/2016-01-14-introduction-to-JS-game-development/board.png" alt="画棋盘"></p>
<h3 id="3-2-画棋子"><a href="#3-2-画棋子" class="headerlink" title="3.2 画棋子"></a>3.2 画棋子</h3><p>处理函数需要什么操作，只是把棋子画到相对应的棋盘即可吗？</p>
<h4 id="3-2-1-事件委托"><a href="#3-2-1-事件委托" class="headerlink" title="3.2.1 事件委托"></a>3.2.1 事件委托</h4><p>画棋子之前需要了解一下事件委托：利用事件冒泡，只制定一个事件处理程序，就可以管理某一类型的所有事件。<br>它的好处在于占用内存少，假设有一个父元素ul，有100个li子元素，如果给100个li子元素都绑定事件，相当耗内存，事件委托的原理就是只需要给父元素绑定事件即可。<br>不过它的使用是有条件的，它要求事件会冒泡，会冒泡的事如click、mousedown、mouseup、keydown、keyup和keypress事件。</p>
<p>冒泡的过程大概如下：div  -&gt; body -&gt; html(ie5.5-跳过） -&gt; document -&gt; window(ie9,fx,chrome,safari)。</p>
<p>因此我不需要给棋盘的每个格子绑定事件，只需要绑定棋盘（格子的父元素）即可。代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gobang = <span class="built_in">document</span>.getElementById(<span class="string">"gobang_main"</span>);  <span class="comment">// 获取棋盘</span></div><div class="line">EventUtil.addHandler(gobang,<span class="string">"click"</span>,drawPiece);  <span class="comment">// 点击棋盘，进行下棋</span></div></pre></td></tr></table></figure></p>
<h4 id="3-2-2-事件委托的问题"><a href="#3-2-2-事件委托的问题" class="headerlink" title="3.2.2 事件委托的问题"></a>3.2.2 事件委托的问题</h4><p>由于在父元素中绑定事件，我们知道，事件目标是被单击的单个五子棋格子。因此，需要检测 id属性或其他属性 来决定采取适当的操作。</p>
<p>如果不检测是否是我们想要的事件目标，可能导致错误。<br>代码如下,如果targetID不是我们的事件目标，可能i,j的数据则不正确，从而导致访问对应的五子棋格子gobangArr[i][j]出错：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 格子的id格式为"block_"+ i + "_" + j;</span></div><div class="line"><span class="comment">// targetId为当前目标的id,前面加运算符+是为了转换类型</span></div><div class="line"><span class="comment">// i和j代表第i行第j列</span></div><div class="line">i = +targetId.split(<span class="string">"_"</span>)[<span class="number">1</span>];</div><div class="line">j = +targetId.split(<span class="string">"_"</span>)[<span class="number">2</span>];</div></pre></td></tr></table></figure></p>
<h4 id="3-2-3-已下过的棋盘位置"><a href="#3-2-3-已下过的棋盘位置" class="headerlink" title="3.2.3 已下过的棋盘位置"></a>3.2.3 已下过的棋盘位置</h4><ul>
<li>画当前棋子，通过添加类 active 和 代表颜色的white或black</li>
<li>target.className.indexOf(“active”)&lt;0，意思是当前位置的类若含有active类，则不执行画棋子。</li>
<li>误区：通过 棋盘数据gobangArr[i][j]是否为空来判断是否下过棋子。不可通过棋盘数据gobangArr[i][j] 是否为空来判断，因为数组可能存在冗余数据。除非初始化时重置了数组为空。</li>
</ul>
<h4 id="3-2-4-其他"><a href="#3-2-4-其他" class="headerlink" title="3.2.4 其他"></a>3.2.4 其他</h4><ul>
<li>一旦下一个棋子就需要判断是否赢了：chessWin(i,j,color);</li>
<li>需要切换棋子颜色：color = color==”black”? “white”:”black”;</li>
<li>其中一方赢了的话，不可再下棋，必须重新来一局，即移除画棋子的方法。</li>
</ul>
<h3 id="3-3-判断输赢"><a href="#3-3-判断输赢" class="headerlink" title="3.3 判断输赢"></a>3.3 判断输赢</h3><h4 id="3-3-1-判断输赢算法"><a href="#3-3-1-判断输赢算法" class="headerlink" title="3.3.1 判断输赢算法"></a>3.3.1 判断输赢算法</h4><p>首先设置count = 1。count的值代表在同一个方向连续在一起的棋子总数，达到5个则该方赢。<br>如水平方向按照如下顺序执行判断，其他方向雷同：</p>
<ol>
<li>按顺序遍历当前位置(i,j)棋子的前四个位置是否含相同颜色的棋子，若相同则count++，同时检测是否count == 5 。</li>
<li>一旦不相同退出循环，</li>
<li>继续按顺序遍历(i,j)棋子的后四个位置是否含相同颜色的棋子，若相同，count++以及检测是否count == 5 。<br>如下图所示，红色虚线为即将要下的棋子，计算count为1，向左判断使得count最后为3，遇到红色交叉的地方没有黑色棋子，则退出循环；从红色虚线的右边继续判断，最后count为5，因此判断黑棋赢：</li>
</ol>
<p><img src="//img.aotu.io/wangcainuan/2016-01-14-introduction-to-JS-game-development/check.jpg" alt="判断输赢算法"></p>
<p>代码如下，一共检测四个方向：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">chessWin</span>(<span class="params">i,j,color</span>) </span>&#123;  </div><div class="line"><span class="comment">// 垂直方向 </span></div><div class="line"><span class="comment">// 重置count = 1</span></div><div class="line"><span class="comment">// 水平方向</span></div><div class="line"><span class="comment">// 重置count = 1</span></div><div class="line"><span class="comment">// 45°方向</span></div><div class="line"><span class="comment">// 重置count = 1</span></div><div class="line"><span class="comment">// 135°方向 </span></div><div class="line"><span class="comment">// 重置count = 1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-4-重置游戏"><a href="#3-4-重置游戏" class="headerlink" title="3.4 重置游戏"></a>3.4 重置游戏</h3><p>主要是清除棋子以及棋子数组，另外设置默认数据：默认黑棋先下，重置提示语，重新给棋盘绑定方法。一方赢了的话，默认移除画棋子方法的，所以需要重新给棋盘绑定方法。如果理解了文章上面讲述的方法的话，重置游戏是比较简单的，因此不再赘述。</p>
<h2 id="4-五子棋测试"><a href="#4-五子棋测试" class="headerlink" title="4 五子棋测试"></a>4 五子棋测试</h2><ul>
<li>检测特殊值。如检测棋盘边缘是否可以正常画棋子。</li>
<li>测试范围。判断五子棋的四个方向即垂直方向、水平方向、45度方向、135度方向，是否可以判断输赢正确。</li>
</ul>
<h2 id="5-JS事件"><a href="#5-JS事件" class="headerlink" title="5 JS事件"></a>5 JS事件</h2><p>最后根据五子棋的主要方法，总结一下js事件。</p>
<h3 id="5-1-事件处理程序：响应某个事件的函数"><a href="#5-1-事件处理程序：响应某个事件的函数" class="headerlink" title="5.1 事件处理程序：响应某个事件的函数"></a>5.1 事件处理程序：响应某个事件的函数</h3><h4 id="5-1-1-html事件处理程序"><a href="#5-1-1-html事件处理程序" class="headerlink" title="5.1.1  html事件处理程序"></a>5.1.1  html事件处理程序</h4><p>即直接在HTML代码中添加事件处理程序。不推荐使用，原因如下：<br>html事件处理程序缺点：时差问题、代码紧密耦合、扩展事件处理程序的作用域链在不同浏览器中导致不同结果。</p>
<h4 id="5-1-2-DOM0级事件处理程序"><a href="#5-1-2-DOM0级事件处理程序" class="headerlink" title="5.1.2  DOM0级事件处理程序"></a>5.1.2  DOM0级事件处理程序</h4><p>类似onclick等事件处理程序属性，通常全部小写。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</div><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; &#125;;    <span class="comment">// 绑定</span></div><div class="line">btn.onclick = <span class="literal">null</span>;  <span class="comment">// 解绑</span></div></pre></td></tr></table></figure></p>
<h4 id="5-1-3-DOM2级事件处理程序"><a href="#5-1-3-DOM2级事件处理程序" class="headerlink" title="5.1.3  DOM2级事件处理程序"></a>5.1.3  DOM2级事件处理程序</h4><p>DOM2：可添加多个事件处理程序，按顺序触发。<br>使用方法：<br> 绑定函数addEventListener() 与 解绑函数removeEventListener()：参数为事件名（如click)、作为事件处理程序的函数、布尔值。布尔值为true时代表捕获，false代表冒泡阶段调用事件处理程序，一般为false。<br> 注意：若第二个参数为匿名函数，即使用removeEventListener()传入相同的匿名函数也无法解绑。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">btn.addEventListener(<span class="string">"click"</span>,myGod,<span class="literal">false</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myGod</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	alert(<span class="string">"oh,my god!"</span>);</div><div class="line">&#125;</div><div class="line">btn.removeEventListener(<span class="string">"click"</span>,myGod,<span class="literal">false</span>);</div></pre></td></tr></table></figure>
<h4 id="5-1-4-IE事件处理程序"><a href="#5-1-4-IE事件处理程序" class="headerlink" title="5.1.4  IE事件处理程序"></a>5.1.4  IE事件处理程序</h4><p>可添加多个事件处理程序，按相反的顺序触发。只有IE和opera支持。<br>在DOM0级中，this为所属元素的作用域内运行；但是在使用attachEvent()方法时，事件处理程序在全局作用域中运行，即this===window！！！<br>使用方法：<br>绑定函数attachEvent()  和 解绑函数detachEvent() : 参数为 事件处理程序名称(如 onclick )与函数。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">btn.attachEvent(<span class="string">"onclick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; );</div></pre></td></tr></table></figure></p>
<h4 id="5-1-5-跨浏览器"><a href="#5-1-5-跨浏览器" class="headerlink" title="5.1.5  跨浏览器"></a>5.1.5  跨浏览器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil = &#123;</div><div class="line">    <span class="attr">addHandler</span>: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (element.addEventListener)&#123;  <span class="comment">// DOM2级</span></div><div class="line">            element.addEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent)&#123;  <span class="comment">// IE</span></div><div class="line">            element.attachEvent(<span class="string">"on"</span> + type, handler);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;   <span class="comment">// DOM0级</span></div><div class="line">            element[<span class="string">"on"</span> + type] = handler;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-2-事件对象event"><a href="#5-2-事件对象event" class="headerlink" title="5.2 事件对象event"></a>5.2 事件对象event</h3><ul>
<li>DOM0级或DOM2级都会传入event对象。</li>
<li>ie访问event有几种方式，取决于指定事件处理程序的方法。<br>   DOM0：window.event<br>   attachEvent()：window.event或event</li>
<li>跨浏览器方案如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil = &#123;</div><div class="line">    <span class="attr">getEvent</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="5-3-事件目标"><a href="#5-3-事件目标" class="headerlink" title="5.3 事件目标"></a>5.3 事件目标</h3><ul>
<li><p>对象this始终等于currentTarget,而target则只包含事件的实际目标。<br>例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    alert(event.currentTarget === <span class="built_in">document</span>.body);   <span class="comment">//true</span></div><div class="line">    alert(<span class="keyword">this</span> === <span class="built_in">document</span>.body);                  <span class="comment">//true</span></div><div class="line">    alert(event.target === <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>)); <span class="comment">//true</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>跨浏览器解决方案如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> EventUtil = &#123;</div><div class="line">    <span class="attr">getTarget</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="6-五子棋源码以及参考"><a href="#6-五子棋源码以及参考" class="headerlink" title="6 五子棋源码以及参考"></a>6 五子棋源码以及参考</h2><p>在线地址： <a href="http://labs.qiang.it/qqpai/test/wcn/gobang/gobang.html" target="_blank" rel="external">http://labs.qiang.it/qqpai/test/wcn/gobang/gobang.html</a><br>github地址：<a href="https://github.com/Newcandy/gobang" target="_blank" rel="external">https://github.com/Newcandy/gobang</a><br>参考书籍：《Javascript高级程序设计》</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;万事开头难，js一直没有进步？跟着这篇文章来编写五子棋游戏吧！&lt;br&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="js" scheme="https://aotu.io/tags/js/"/>
    
      <category term="游戏" scheme="https://aotu.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="五子棋" scheme="https://aotu.io/tags/%E4%BA%94%E5%AD%90%E6%A3%8B/"/>
    
  </entry>
  
  <entry>
    <title>Promise 实战</title>
    <link href="https://aotu.io/notes/2016/01/08/promise/"/>
    <id>https://aotu.io/notes/2016/01/08/promise/</id>
    <published>2016-01-08T09:05:05.000Z</published>
    <updated>2016-10-20T07:06:32.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Promise-是什么"><a href="#Promise-是什么" class="headerlink" title="Promise 是什么"></a>Promise 是什么</h2><p>Promise 是抽象异步处理对象以及对其进行各种操作的组件。 通俗点讲，Promise能解决由于回调嵌套带来的流程控制与可读性问题。<br>promise 已经是成为我们解决回调炼狱的常用方案，而且已经得到官方标准支持，如果你刚刚开始使用Promise，本文将帮助你了解几个常见的Promise的使用场景。</p>
<h2 id="Promise-的历史"><a href="#Promise-的历史" class="headerlink" title="Promise 的历史"></a>Promise 的历史</h2><p><a href="https://en.wikipedia.org/wiki/Futures_and_promises" target="_blank" rel="external">早在1976年就有人提出Promise 的概念</a>。之后的计算机语言发展中，很多语言都提供了与 Promise 相关的特性。而对于Javascript语言来说，最早让大家广泛接触的 Promise 相关的库是由 <code>jQuery.Deferred()</code> 对象实现的。随着 Promise/A+ 标准规定了一系列 API，实现该标准的库如雨后春笋版涌现了出来，在最新的ECMAScript 2015中已经提供了Promise的内置对象，成为了基础库。  </p>
<h2 id="一些Promise的使用场景"><a href="#一些Promise的使用场景" class="headerlink" title="一些Promise的使用场景"></a>一些Promise的使用场景</h2><h3 id="1-原生API函数的Promise化"><a href="#1-原生API函数的Promise化" class="headerlink" title="1.原生API函数的Promise化"></a>1.原生API函数的Promise化</h3><p>大部分原生的API函数并不支持Promise，还是基于回调来使用的，所以需要把一些方法改为返回一个 Promise 对象，这个过程被称为函数的 Promise 化。<br>下面一个例子将对定时器<code>setTimeout</code> Promise 化。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params">fn,time</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                fn();</div><div class="line">                resolve();</div><div class="line">            &#125;,time);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.resolve()</div><div class="line">    .then(</div><div class="line">        timer(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'1'</span>)</div><div class="line">        &#125;, <span class="number">1000</span>)</div><div class="line">    )</div><div class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'2'</span>);</div><div class="line">    &#125;);</div><div class="line"><span class="comment">/* </span></div><div class="line">输出结果</div><div class="line">1</div><div class="line">2</div><div class="line">*/</div></pre></td></tr></table></figure></p>
<p>Promise化本质上都属于一种Curry化。Curry化是指，将需要传递多参数的函数生成一个新的函数，如上代码先通过执行 timer得到一个新的函数，该函数会返回一个Promise，这样就完成了Promise化。将一些基础的函数进行Promise化，可以<br>大大减少不必要的代码。<br>下面的代码，将会体现这种优势:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise_timer = timer(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'1'</span>)</div><div class="line">&#125;, <span class="number">1000</span>) </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">promise_timer2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">          setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">              <span class="built_in">console</span>.log(<span class="string">'1'</span>);</div><div class="line">              resolve();</div><div class="line">          &#125;,<span class="number">1000</span>);</div><div class="line">      &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>变量<code>promise_timer</code>赋予的函数，与函数<code>promise_timer2</code>是等价的。 可以看出 <code>setTimeout</code> Promise 化之后，代码程序可读性更强，代码量也变少了。</p>
<h3 id="2-Promise-all解决并行任务"><a href="#2-Promise-all解决并行任务" class="headerlink" title="2.Promise.all解决并行任务"></a>2.Promise.all解决并行任务</h3><p>当某个函数需要在 N 个回调都完成时才执行，这个时候就可以使用<code>Promise.all</code>来改善你的代码。</p>
<p>以下是一个图片并行加载的例子,当所有图片加载完成后，再将所有图片一起展示。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</div><div class="line">        <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</div><div class="line">        img.src = src;</div><div class="line">        img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">           resolve(img);</div><div class="line">        &#125;</div><div class="line">        img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">           reject(err);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showImgs</span>(<span class="params">imgs</span>)</span>&#123; </div><div class="line">  imgs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</div><div class="line">       <span class="built_in">document</span>.body.appendChild(img);</div><div class="line">   &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.all([</div><div class="line">  loadImg(<span class="string">'1.png'</span>), <span class="comment">//加载图片</span></div><div class="line">  loadImg(<span class="string">'2.png'</span>),</div><div class="line">  loadImg(<span class="string">'3.png'</span>),</div><div class="line">  ...</div><div class="line">]).then(showImgs); <span class="comment">//显示图片</span></div></pre></td></tr></table></figure>
<p><img src="//img.aotu.io/adamchuan/promise-1.svg" alt="promise"></p>
<p>需要注意的是，<code>Promise.all</code>中传入的 Promise 数组，各自 resolve 之后得到的值，将合并成一个数组传入到 then 中的方法，且数组中 resolve 值的顺序，与 Promise 数组的顺序一致。</p>
<h3 id="3-Promise-then-的链式调用"><a href="#3-Promise-then-的链式调用" class="headerlink" title="3.Promise.then 的链式调用"></a>3.Promise.then 的链式调用</h3><p>在许多Promise示例中都可以看到类似如下的链式调用的代码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'getUserInfo start'</span>);</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">       setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">            <span class="keyword">var</span> userInfo = &#123;</div><div class="line">                <span class="attr">name</span> : <span class="string">'adamchuan'</span></div><div class="line">            &#125;;</div><div class="line">            resolve(userinfo);</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'getUserInfo end'</span>);</div><div class="line">       &#125;,<span class="number">1000</span>);</div><div class="line">   &#125;);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGroupInfo</span>(<span class="params">userinfo</span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'getGroupInfo start'</span>);</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">       setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">            <span class="keyword">var</span> groupInfo = &#123;</div><div class="line">                <span class="attr">name</span> : <span class="string">'jdc'</span></div><div class="line">            &#125;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'getGroupInfo end'</span>);</div><div class="line">            resolve(groupInfo,userinfo);</div><div class="line">       &#125;,<span class="number">1000</span>);</div><div class="line">   &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTaskInfo</span>(<span class="params">groupInfo,userinfo</span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'getTaskInfo start'</span>);</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">       setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">        <span class="keyword">var</span> taskInfo = &#123;</div><div class="line">            <span class="attr">name</span> : <span class="string">'rebuild'</span></div><div class="line">        &#125;;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'getTaskInfo end'</span>);</div><div class="line">        resolve();</div><div class="line">       &#125;,<span class="number">1000</span>);</div><div class="line">   &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.resolve();</div><div class="line">      p.then(getUserInfo)</div><div class="line">       .then(getGroupInfo)</div><div class="line">       .then(getTaskInfo);</div><div class="line"></div><div class="line"><span class="comment">/* 输出结果 </span></div><div class="line"> getUserInfo start</div><div class="line"> getUserInfo end</div><div class="line"> getGroupInfo start</div><div class="line"> getGroupInfo end</div><div class="line"> getTaskInfo start</div><div class="line"> getTaskInfo end</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>如上面代码所示，我们可以很清楚的理解到程序执行的顺序是  </p>
<p><img src="//img.aotu.io/adamchuan/promise-2.svg" alt="promise"></p>
<ol>
<li>得到userInfo</li>
<li>得到groupInfo</li>
<li>得到taskInfo</li>
</ol>
<p>但是如果我们对代码进行一点小的改造，将 then 中的方法不再返回 Promise ，那么执行的代码将会变成这样:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.resolve();</div><div class="line">      p.then(getUserInfo)</div><div class="line">       .then(getGroupInfo)</div><div class="line">       .then(getTaskInfo)</div><div class="line">       ...</div><div class="line"></div><div class="line">function getUserInfo()&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'1'</span>);</div><div class="line">   <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">       setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'2'</span>);</div><div class="line">        resolve();</div><div class="line">       &#125;,<span class="number">1000</span>);</div><div class="line">   &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGroupInfo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'3'</span>);</div><div class="line">   <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">       setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'4'</span>);</div><div class="line">        resolve();</div><div class="line">       &#125;,<span class="number">1000</span>);</div><div class="line">   &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTaskInfo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'5'</span>);</div><div class="line">   <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">       setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'6'</span>);</div><div class="line">        resolve();</div><div class="line">       &#125;,<span class="number">1000</span>);</div><div class="line">   &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 输出结果 </span></div><div class="line"> getUserInfo start</div><div class="line"> getGroupInfo start</div><div class="line"> getTaskInfo start</div><div class="line"> getUserInfo end</div><div class="line"> getGroupInfo end</div><div class="line"> getTaskInfo end</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>这是为什么呢？<br>因为每次调用 then 都会返回一个新的 Promise ，如果 then 中的申明的方法没有返回一个 Promise ，那么会默认返回一个新的<br>处于 fulfilled 的 Promise ，之后添加的 then 中的方法都会立即执行,所以执行的顺序就变成这样了：<br><img src="//img.aotu.io/adamchuan/promise-3.png" alt="promise"></p>
<p><em>当要在使用链式 Promise 时，请务必在then传入的方法中返回一个新的 Promise。</em></p>
<p>另外一个需要注意的是，resolve 传递给下个 then 方法的值只能有一个，上面 getTaskInfo 方法中是无法获取到 userInfo 的值，所以如果有多个值需要放在一个数据集合（ Array , Object , Map , Set ）中传入下个方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTaskInfo</span>(<span class="params">groupInfo,userInfo</span>)</span>&#123; <span class="comment">/* userInfo为undefined */</span></div><div class="line">   <span class="built_in">console</span>.log(groupInfo); <span class="comment">// &#123; name : 'jdc'&#125;</span></div><div class="line">   <span class="built_in">console</span>.log(userInfo);  <span class="comment">// undefined</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4-中断或取消-Promise-链"><a href="#4-中断或取消-Promise-链" class="headerlink" title="4.中断或取消 Promise 链"></a>4.中断或取消 Promise 链</h3><p>Promise 标准的API 中并没有提供相应的方法来 中断或者取消 Promise 链的执行，一些库中提供了类似<code>Promise.break</code>或者 <code>Promise.fail</code>的方法来中断或取消 Promise 链。利用<code>Promise.catch</code>的特性来中断 promise链。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 用于中断的信号 */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BreakSignal</span> </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="built_in">Promise</span></div><div class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="comment">// 开始.</span></div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (wantToBreakHere) &#123;</div><div class="line">            <span class="comment">// 抛出中断信号.</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BreakSignal();</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="comment">// 需要跳过的部分.</span></div><div class="line">    &#125;)</div><div class="line">    <span class="comment">// 接住中断信号.</span></div><div class="line">    .catch(BreakSignal, () =&gt; &#123; &#125;);</div></pre></td></tr></table></figure>
<p>只要在 Promise 执行过程中抛出异常，都会直接跳转到 catch 中。但是这样的做法有一个缺点，无法区分程序本身的异常，还是手动抛出的异常。所以需要手动设置一个标识标量，来区分是为了中断执行还是本身的程序异常。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>合理的利用 Promise ,可以让代码脉络更加的清晰易懂，流程控制，异常捕获也更加准确。当然为了使用 Promise 也要编写很多额外代码，<br>想要真正的解决回调问题还得期待ES7的 <code>async</code> <code>await</code> 关键字的到来，不过在此之前，Promise 都将是解决程序流程控制的最优选择之一。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><a href="http://www.zuojj.com/archives/1292.html" target="_blank" rel="external">Promise A+</a></li>
<li><a href="http://liubin.org/promises-book/" target="_blank" rel="external">Promise迷你书</a></li>
<li><a href="http://alinode.aliyun.com/blog/5" target="_blank" rel="external">Promise的前世今生</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html" target="_blank" rel="external">jQuery的deferred对象详解</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Promise-是什么&quot;&gt;&lt;a href=&quot;#Promise-是什么&quot; class=&quot;headerlink&quot; title=&quot;Promise 是什么&quot;&gt;&lt;/a&gt;Promise 是什么&lt;/h2&gt;&lt;p&gt;Promise 是抽象异步处理对象以及对其进行各种操作的组件。 通俗
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ES6" scheme="https://aotu.io/tags/ES6/"/>
    
      <category term="Promise" scheme="https://aotu.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>使用Chrome开发工具优化Web应用</title>
    <link href="https://aotu.io/notes/2016/01/07/debug-webapp-with-chrome-devtools/"/>
    <id>https://aotu.io/notes/2016/01/07/debug-webapp-with-chrome-devtools/</id>
    <published>2016-01-07T09:05:05.000Z</published>
    <updated>2016-10-20T07:06:32.411Z</updated>
    
    <content type="html"><![CDATA[<p>当我们写了一组炫(fu)酷(za)的H5动效后，发现在移动端上会卡顿，该怎么办？<br>目前市场上大多数设备的屏幕刷新频率是60Hz，想要用户滑动页面或者播放动画没有卡顿，浏览器的渲染速率就要和屏幕刷新的频率同步，达到60fps。</p>
<p>Chrome开发工具的Timeline面板监控了web应用运行时所有活动情况，不过它的功能很多，对于英文不好的童鞋，有点无从下手，下面直接上手来使用。</p>
<h2 id="首先，审查一个页面，切换到Timeline面板。"><a href="#首先，审查一个页面，切换到Timeline面板。" class="headerlink" title="首先，审查一个页面，切换到Timeline面板。"></a>首先，审查一个页面，切换到Timeline面板。</h2><p><img src="//img.aotu.io/Simbachen/panel.png" alt="Timeline面板"></p>
<p>图中红框标出的部分是功能栏：从45到47版本，Timeline工具连续都有更新，当前截图的版本号是47.0；</p>
<blockquote>
<ul>
<li>开始/停止记录，打开Timeline面板时刷新页面会自动开始记录</li>
<li>清除已有记录</li>
<li>过滤内容</li>
<li>强制垃圾回收</li>
<li>视图模式，最新版本中点击切换两种视图模式</li>
<li>捕获内容选项，选中最后一项截屏的话会保留每帧的截图，记录数据的buffer空间会和快被占满</li>
</ul>
</blockquote>
<h2 id="接下来记录一段时间线状态。"><a href="#接下来记录一段时间线状态。" class="headerlink" title="接下来记录一段时间线状态。"></a>接下来记录一段时间线状态。</h2><p><img src="//img.aotu.io/Simbachen/frames.png" alt="Timeline面板"><br>图中没被标出的部分是整个监控过程中的数据概览；红框标出的部分有两栏，上面是选中的时间段内每一帧的情况，下面是内存占用的变化。</p>
<p>浏览器渲染的速率达到60帧/秒，那么每一帧只有1000ms / 60 = 16.67ms的时间来响应，其中浏览器在每一帧还要做一些额外的事情，因为我们要保证每一帧的CPU time在12ms左右。</p>
<p>有红色三角形角标标出的表示当前帧消耗过多时间<br><img src="//img.aotu.io/Simbachen/frames01.png" alt="Timeline"></p>
<p>点击选中一帧可以看到当前帧的详细情况，图中显示，当前帧的渲染消耗了30.8ms，可能会造成卡顿。<br>饼图中可能会有五个颜色：</p>
<blockquote>
<ul>
<li>蓝色： 加载</li>
<li>黄色： 脚本执行</li>
<li>紫色： 渲染</li>
<li>绿色： 绘制</li>
<li>灰色： DevTools不感知的活动</li>
</ul>
</blockquote>
<p>图中帧因为没有加载活动，没有蓝色区域。可以看出脚本执行和帧绘制占据了大部分面积，不过问题并不在这里，因为它们总共才花费7.82s。<br>在Chrome的45.0版本中，饼图里还有一种颜色：白色，表示刷新周期里空闲的时间。在这段时间里，一直在等待用户的响应，直到一个交互事件触发了页面视图的变化。最新的更新里在饼图中去掉了白色，区分为CPU time和帧的Duration，更加合理。这里引起视图渲染和绘制可能有：</p>
<ol>
<li>用户的交互行为</li>
<li>定时器触发</li>
</ol>
<p>使用requestAnimationFrame这个函数，将脚本执行和渲染流程联系起来，以避免在某一帧的中间突然执行脚本导致重新渲染和绘制而整个过程不能在16ms内完成。</p>
<h2 id="分析一个问题帧"><a href="#分析一个问题帧" class="headerlink" title="分析一个问题帧"></a>分析一个问题帧</h2><p><img src="//img.aotu.io/Simbachen/frames02.png" alt="Timeline"></p>
<p>这一帧比较极端，从图上看就是紫色部分花费掉了大量时间，我们就可以从这里入手来优化代码，在此之前先得了解一下浏览器绘制帧的整个过程。实际导致绘制帧卡顿可能是其中任何一个环节。</p>
<p><img src="//img.aotu.io/Simbachen/frame-full.jpg" alt="Timeline"></p>
<blockquote>
<ul>
<li>Javascript： 除了使用Javascrit来实现视觉变化，还有CSS Animations、 Transitions。</li>
<li>Style： 根据CSS选择器，对每个DOM元素匹配对应的CSS样式。</li>
<li>Layout: 在上一步确定了每个DOM元素的样式规则后，这一步就是具体计算每个DOM元素最终在屏幕上显示的大小和位置。web页面中元素的布局是相对的，因此一个元素的布局发生变化，会联动地引发其他元素的布局发生变化。例如父元素的宽度变化引发子元素宽度变化，又联动的引发孙子元素的宽度变化。</li>
<li>Painting： 绘制，本质上就是填充像素的过程。包括绘制文字、颜色、图像、边框和阴影等，也就是一个DOM元素所有的可视效果。一般来说，这个绘制过程是在多个层上完成的。</li>
<li>Composite： 上一步的绘制是在多个层上进行的，在这一步，浏览器会将所有层按照合理的顺序合并成一个图层，然后显示在屏幕上。</li>
</ul>
</blockquote>
<p>说明，上述过程的解释总结或直接引用自谷歌开发者文档。</p>
<p>在以上5个过程里：</p>
<ol>
<li>修改DOM元素的“layout”(宽、高、位置)属性，浏览器会检查哪些元素需要重新布局，然后对页面激发一个reflow过程完成重新布局。被reflow的元素，接下来也会激发绘制过程，最后激发渲染层合并过程，生成最后的画面。</li>
<li>DOM元素有一些“paint only”属性，例如背景图片、文字颜色、阴影，这些属性不会影响页面的布局，因此浏览器会在完成样式计算之后，跳过布局过程，只做绘制和渲染层合并过程。</li>
<li>还有一些CSS属性既不需要重新布局也不需要重新绘制，例如，transform、opacity（目前，只有这两个属性），浏览器会在完成样式计算之后，直接做渲染层合并。</li>
<li>用translateZ(0)属性把动画元素提升到单独的渲染层中（我们常说的启用3D加速）。</li>
</ol>
<p>对于滚屏和动画，最理想的就是只使用transform和opacity来实现视觉变化效果，并且遵循第四点。</p>
<h2 id="点击切换视图模式，找到问题所在。"><a href="#点击切换视图模式，找到问题所在。" class="headerlink" title="点击切换视图模式，找到问题所在。"></a>点击切换视图模式，找到问题所在。</h2><p><img src="//img.aotu.io/Simbachen/frames03.png" alt="Timeline"></p>
<p>这是一个知名线上网站的首页，这里发生了滚屏触发加载内容，导致DOM结构变化，引发了大量内容的重绘和渲染，并且页面旧的内容没有回收，节点较多，明显的感觉到滚屏的时候有卡顿感。对于这个应用按照上述的思路来优化，在优化的过程中，我们也许会遇到下面这个问题。</p>
<p><img src="//img.aotu.io/Simbachen/frames04.png" alt="Timeline"></p>
<p>这是另一个demo页面，有数千个节点组成，用以模拟无限懒加载数据的情况，其中只有一个节点上应用了循环的css3动画。其它的都不会改变。为了将有动画的节点独立到一个单独的渲染层中，我对它应用了translateZ(0)。本以为大功告成，结果在滚屏的时候发现非常卡顿。于是就有了上图，平均每帧的渲染都消耗掉了200ms左右，从Timeline监控数据中可以看到，其中Composite Layers这个过程耗费了大量时间。那么直接查看layer状态：</p>
<p><img src="//img.aotu.io/Simbachen/frames05.png" alt="Timeline"></p>
<p>再看官方文档的提示：由于每个渲染层的纹理都需要上传到GPU处理，过多的渲染层来带的开销而对页面渲染性能产生的影响，甚至远远超过了它在性能改善上带来的好处。</p>
<p>实际上页面里并没有主动通过translateZ属性来独立更多的层，我们可以认为这是触发了浏览器的一个“bug”，最新版本的chrome仍然会触发这个问题，不过最新版本的ios里Safari已经不会触发这个问题了。至于什么情况会触发浏览器去创建一个独立层来渲染元素，例如拥有3DCSS属性的元素、使用加速视频解码的元素等，对这个问题这里就不再详述。</p>
<p>如果手动的将大量的层独立出来渲染，导致GPU罢工，或是任由他们导致CPU罢工，都会造成性能问题，不过有了Timeline工具，我们就能找到问题所在，一一去分析解决了。</p>
<h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><p><a href="https://developers.google.com/web/fundamentals/performance" target="_blank" rel="external">https://developers.google.com/web/fundamentals/performance</a><br><a href="https://developer.chrome.com/devtools/docs/timeline" target="_blank" rel="external">https://developer.chrome.com/devtools/docs/timeline</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们写了一组炫(fu)酷(za)的H5动效后，发现在移动端上会卡顿，该怎么办？&lt;br&gt;目前市场上大多数设备的屏幕刷新频率是60Hz，想要用户滑动页面或者播放动画没有卡顿，浏览器的渲染速率就要和屏幕刷新的频率同步，达到60fps。&lt;/p&gt;
&lt;p&gt;Chrome开发工具的Tim
    
    </summary>
    
      <category term="性能优化" scheme="https://aotu.io/cates/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="chrome" scheme="https://aotu.io/tags/chrome/"/>
    
      <category term="DevTool" scheme="https://aotu.io/tags/DevTool/"/>
    
  </entry>
  
  <entry>
    <title>使用Github的webhooks进行网站自动化部署</title>
    <link href="https://aotu.io/notes/2016/01/07/auto-deploy-website-by-webhooks-of-github/"/>
    <id>https://aotu.io/notes/2016/01/07/auto-deploy-website-by-webhooks-of-github/</id>
    <published>2016-01-07T09:05:05.000Z</published>
    <updated>2016-10-20T07:06:32.411Z</updated>
    
    <content type="html"><![CDATA[<p>相信很多码农都玩过了<code>Git</code>，如果对<code>Git</code>只是一知半解，可以移步<code>LV</code>写的 <a href="http://aotu.io/notes/2015/11/17/Git-Commands/">GIT常用操作总结</a>，下面介绍到的一些关于 <code>Git</code> 的概念就不再赘述。</p>
<p>为啥想写这篇文章？主要是因为部门服务器因为安全性原因不允许<code>SCP</code>上传文件进行应用部署，然后有一些应用是放在Github上的，然后部署应用的步骤就变成：</p>
<p>1.git clone github项目 本地目录<br>2.配置一下应用的pm2.json并reload<br>3.Nginx配置一下反向代理并restart</p>
<p>当然如果只是一次性部署上去就不再修改的话并没啥问题，但是要是项目持续性修改迭代的话，就比较麻烦了，我们就在不断的重复着上面的步骤。作为一个码农，怎么允许不断的重复同样的工作，于是<code>Github webhooks</code>闪亮登场。</p>
<a id="more"></a>
<h2 id="关于Github-webhooks"><a href="#关于Github-webhooks" class="headerlink" title="关于Github webhooks"></a>关于Github webhooks</h2><p>让我们看看 <a href="https://developer.github.com/webhooks/" target="_blank" rel="external">官方</a> 关于Github webhooks的解释：</p>
<blockquote>
<p>Webhooks allow you to build or set up integrations which subscribe to certain events on GitHub.com.</p>
</blockquote>
<p>提炼出来几个点：</p>
<ul>
<li>必须是Github上面的项目</li>
<li>订阅了确定的事件（包括push/pull等命令）</li>
<li>自动触发</li>
</ul>
<p>刚好符合了这几个条件，那接下来就看看如何进行<code>网站自动化部署</code>，主要会从下面几点来讲解：</p>
<p>1.自动化<code>shell</code>脚本<br>2.服务端实现<br>3.配置<code>github webhooks</code></p>
<h2 id="自动化脚本"><a href="#自动化脚本" class="headerlink" title="自动化脚本"></a>自动化脚本</h2><p>我之前翻译过一篇文章 <a href="http://aotu.io/notes/2015/12/23/building-command-line-tools-with-node-js/">使用Node.JS创建命令行脚本工具</a>，但是我们现在的自动化脚本直接用 <code>shell</code> 来实现，假设名称为<code>auto_build.sh</code>：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"></div><div class="line">SITE_PATH=<span class="string">'/export/Data/aotu.jd.com/index/cnt1992.github.io'</span></div><div class="line">USER=<span class="string">'admin'</span></div><div class="line">USERGROUP=<span class="string">'admin'</span></div><div class="line"></div><div class="line"><span class="built_in">cd</span> <span class="variable">$SITE_PATH</span></div><div class="line">git reset --hard origin/master</div><div class="line">git clean <span class="_">-f</span></div><div class="line">git pull</div><div class="line">git checkout master</div><div class="line">chown -R <span class="variable">$USER</span>:<span class="variable">$USERGROUP</span> <span class="variable">$SITE_PATH</span></div></pre></td></tr></table></figure>
<p><strong>Note:</strong> 在执行上面<code>shell</code>脚本之前我们必须第一次手动<code>git clone</code>项目进去，例如：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone github远程项目 /export/Data/aotu<span class="selector-class">.jd</span><span class="selector-class">.com</span>/index/cnt1992<span class="selector-class">.github</span><span class="selector-class">.io</span></div></pre></td></tr></table></figure>
<blockquote>
<p>shell脚本其实就跟直接在终端运行命令一样，类似于windows下面的BAT批处理命令，更多详细可以查阅资料。</p>
</blockquote>
<h2 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h2><p><code>Github webhooks</code>需要跟我们的服务器进行通信，确保是可以推送到我们的服务器，所以会发送一个带有<code>X-Hub-Signature</code>的<code>POST</code>请求，为了方便我们直接用第三方的库<a href="https://github.com/rvagg/github-webhook-handler" target="_blank" rel="external">github-webhook-handler</a>来接收参数并且做监听事件的处理等工作。</p>
<p>现在我们可以在<code>shell</code>脚本的同级目录下面执行下面命令初始化一个<code>package.json</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init <span class="_">-f</span></div></pre></td></tr></table></figure>
<p>然后执行下面命令安装上面提到的第三方库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -S github-webhook-handler</div></pre></td></tr></table></figure>
<p>接下来创建我们的服务主入口文件<code>index.js</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch index.js</div></pre></td></tr></table></figure>
<p>紧接着参考<code>github-webhook-handler</code>的<code>demo</code>编辑我们的<code>index.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</div><div class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 下面填写的myscrect跟github webhooks配置一样，下一步会说；path是我们访问的路径</span></div><div class="line"><span class="keyword">var</span> handler = createHandler(&#123; <span class="attr">path</span>: <span class="string">'/auto_build'</span>, <span class="attr">secret</span>: <span class="string">''</span> &#125;);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    res.statusCode = <span class="number">404</span>;</div><div class="line">    res.end(<span class="string">'no such location'</span>);</div><div class="line">  &#125;)</div><div class="line">&#125;).listen(<span class="number">6666</span>);</div><div class="line"></div><div class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 监听到push事件的时候执行我们的自动化脚本</span></div><div class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a push event for %s to %s'</span>,</div><div class="line">    event.payload.repository.name,</div><div class="line">    event.payload.ref);</div><div class="line"></div><div class="line">  runCommand(<span class="string">'sh'</span>, [<span class="string">'./auto_build.sh'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"> txt </span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(txt);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rumCommand</span>(<span class="params"> cmd, args, callback </span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> child = spawn( cmd, args );</div><div class="line">    <span class="keyword">var</span> response = <span class="string">''</span>;</div><div class="line">    child.stdout.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> buffer </span>)</span>&#123; resp += buffer.toString(); &#125;);</div><div class="line">    child.stdout.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; callback( resp ) &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 由于我们不需要监听issues，所以下面代码注释掉</span></div><div class="line"><span class="comment">//  handler.on('issues', function (event) &#123;</span></div><div class="line"><span class="comment">//    console.log('Received an issue event for %s action=%s: #%d %s',</span></div><div class="line"><span class="comment">//      event.payload.repository.name,</span></div><div class="line"><span class="comment">//      event.payload.action,</span></div><div class="line"><span class="comment">//      event.payload.issue.number,</span></div><div class="line"><span class="comment">//      event.payload.issue.title)</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>然后利用node管理工具跑起来服务，这里使用了<code>pm2</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 start index.js</div></pre></td></tr></table></figure>
<p>到这一步服务已经跑起来了，但是对外网并不能直接访问到，所以还需要配置一下<code>Nginx</code>做一下反向代理：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">···</div><div class="line">server &#123;</div><div class="line">    listen <span class="number">80</span>;</div><div class="line">    server_name aotu.jd.com;</div><div class="line"></div><div class="line">    ···</div><div class="line">    location /auto_build &#123;</div><div class="line">        proxy_pass http:<span class="comment">//127.0.0.1:6666;</span></div><div class="line">    &#125;</div><div class="line">    ···</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK，到这里整个服务已经搭建完成，下一步就只需要配置<code>Github webhooks</code>。</p>
<h2 id="配置github-webhooks"><a href="#配置github-webhooks" class="headerlink" title="配置github webhooks"></a>配置<code>github webhooks</code></h2><p>我们可以在我们的<code>Github</code>上面最右边有一个<code>Settings</code>的Tab，找到<code>Webhooks &amp; services</code>，如下图：</p>
<p><img src="//img.aotu.io/cnt1992/webhooks.png" alt="Github Webhooks"></p>
<p>然后点击新建，输入<code>Payload URL</code>跟<code>Secret</code>，确定即可。</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>绑定成功之后，我们可以试试提交一下代码，然后来到<code>Github</code>看看是否自动触发了接口，如下图：</p>
<p><img src="//img.aotu.io/cnt1992/webhooks-show.png" alt="Github Webhooks接口触发"></p>
<p>然后随便选择一个点击一下，可以看到<code>200</code>的响应：</p>
<p><img src="//img.aotu.io/cnt1992/webhook-success.png" alt="Github Webhooks接口触发"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>上面就是利用<code>Github webhooks</code>进行网站自动化部署的全部内容了，不难发现其实这项技术还是有局限性的，那就是依赖于<code>github</code>，一般我们选择的都是免费github账号，所有项目都对外，一些敏感项目是不适合放置上去的。</p>
<p>这个时候就考虑这个组里同事推荐的 <a href="http://backup.github.io/backup/v4/" target="_blank" rel="external">backup</a>，自己还没试用，有兴趣可以了解了解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多码农都玩过了&lt;code&gt;Git&lt;/code&gt;，如果对&lt;code&gt;Git&lt;/code&gt;只是一知半解，可以移步&lt;code&gt;LV&lt;/code&gt;写的 &lt;a href=&quot;http://aotu.io/notes/2015/11/17/Git-Commands/&quot;&gt;GIT常用操作总结&lt;/a&gt;，下面介绍到的一些关于 &lt;code&gt;Git&lt;/code&gt; 的概念就不再赘述。&lt;/p&gt;
&lt;p&gt;为啥想写这篇文章？主要是因为部门服务器因为安全性原因不允许&lt;code&gt;SCP&lt;/code&gt;上传文件进行应用部署，然后有一些应用是放在Github上的，然后部署应用的步骤就变成：&lt;/p&gt;
&lt;p&gt;1.git clone github项目 本地目录&lt;br&gt;2.配置一下应用的pm2.json并reload&lt;br&gt;3.Nginx配置一下反向代理并restart&lt;/p&gt;
&lt;p&gt;当然如果只是一次性部署上去就不再修改的话并没啥问题，但是要是项目持续性修改迭代的话，就比较麻烦了，我们就在不断的重复着上面的步骤。作为一个码农，怎么允许不断的重复同样的工作，于是&lt;code&gt;Github webhooks&lt;/code&gt;闪亮登场。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Github" scheme="https://aotu.io/tags/Github/"/>
    
      <category term="webhooks" scheme="https://aotu.io/tags/webhooks/"/>
    
  </entry>
  
  <entry>
    <title>CSS3动画实践</title>
    <link href="https://aotu.io/notes/2016/01/04/css3-animation/"/>
    <id>https://aotu.io/notes/2016/01/04/css3-animation/</id>
    <published>2016-01-04T07:58:00.000Z</published>
    <updated>2016-10-20T07:06:32.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求中常见的css3动画"><a href="#需求中常见的css3动画" class="headerlink" title="需求中常见的css3动画"></a>需求中常见的css3动画</h2><p>需求中常见的css3动画一般有<strong>补间动画（又叫“关键帧动画”）</strong>和<strong>逐帧动画</strong>两种，下面分别介绍：</p>
<ol>
<li><p>补间动画/关键帧动画：<br> 常用于实现位移、颜色（透明度）、大小、旋转、倾斜等变化。一般有<code>Transitions</code>和<code>Keyframes animation</code>两种方法实现补间动画。<br> <strong>Transitions：</strong>用于实现简单的动画，只有起始两帧过渡。多用于页面的交互操作，使交互效果更生动活泼。</p>
<blockquote>
<p>CSS的<code>transition</code>允许CSS的属性值在一定的时间区间内平滑地过渡。<br>这种效果可以在鼠标单击、获得焦点、被点击或对元素任何改变中触发，并圆滑地以动画效果改变CSS的属性值。</p>
</blockquote>
<p> <strong>Keyframes animation：</strong>用于实现较为复杂的动画，一般关键帧较多。</p>
<blockquote>
<p>设置动画的关键帧规则。<br><code>animation</code>的<code>timing-function</code>设置为<code>ease</code>、<code>linear</code>或<code>cubic-bezier</code>，它会在每个关键帧之间插入补间动画，产生具有连贯性的动画。   </p>
</blockquote>
</li>
<li><p>逐帧动画：</p>
<blockquote>
<p>animation的<code>timing-function</code>默认值为<code>ease</code>，它会在每个关键帧之间插入补间动画，所以动画效果是连贯性的。<br>除了<code>ease</code>、<code>linear</code>、<code>cubic-bezier</code>之类的过渡函数都会为其插入补间。<br>有些效果不需要补间，只需要关键帧之间的跳跃，这时应该使用<code>steps</code>过渡方式。</p>
</blockquote>
<p> 更多详细用法请查看：<a href="http://www.cnblogs.com/aaronjs/p/4642015.html" target="_blank" rel="external">《深入理解CSS3 Animation 帧动画》</a>。<br> 逐帧动画可用于<strong>loading动画</strong>，但更多的用于<strong>Sprite精灵动画（人物运动）</strong>。精灵动画把所有帧都放在一起，通过CSS3的<code>animation</code>控制<code>background-position</code>。</p>
<p> 下面看一个精灵动画的例子：<br> <img src="//img.aotu.io/Yettyzyt/css3-animation/1-1.gif" alt="逐帧动画示例"><br> （案例：拍拍无聊者联盟宣传页）</p>
<p> steps的参数有几个坑，需要特别留意：<br> 第一个参数<code>number</code>为指定的间隔数，指的是把<strong>两个关键帧之间的动画分为n步阶段性展示</strong>，而不是<code>keyframes</code>写的变化次数。<br> 我们将上述案例中hand部分作为例子：由雪碧图可知，手部的摆动一种有两种状态，故<code>keyframes</code>需要写两帧：</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> wave&#123;</div><div class="line">	0%&#123;<span class="attribute">background-position</span>:<span class="number">0</span> <span class="number">0</span>;&#125;</div><div class="line">  	50%&#123;<span class="attribute">background-position</span>:<span class="number">100%</span> <span class="number">0</span>;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 设置不同的number值：</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*将`number`设置为2*/</span></div><div class="line"><span class="selector-class">.active</span><span class="selector-class">.share3</span> <span class="selector-class">.hand</span>&#123;</div><div class="line">	<span class="attribute">-webkit-animation</span>: wave <span class="built_in">steps</span>(2,end) <span class="number">2s</span> forwards infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*将`number`设置为1*/</span></div><div class="line"><span class="selector-class">.active</span><span class="selector-class">.share3</span> <span class="selector-class">.hand</span>&#123;</div><div class="line">	<span class="attribute">-webkit-animation</span>: wave <span class="built_in">steps</span>(1,end) <span class="number">2s</span> forwards infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <img src="//img.aotu.io/Yettyzyt/css3-animation/1-4.gif" alt="steps中的坑"><br> （左图：<code>number</code>为2；右图：<code>number</code>为1）</p>
<p> 第二个参数可选，接受<code>start</code>和<code>end</code>两个值：指定在每个间隔的<strong>起点</strong>或是<strong>终点</strong>发生阶跃变化。通过<a href="http://www.w3.org/" target="_blank" rel="external">W3C</a>中的一张step的工作机制图可以理解：<br> <img src="//img.aotu.io/Yettyzyt/css3-animation/1-2.png" alt="steps中的坑">（图片来源：<a href="http://www.w3.org/TR/css3-transitions/" target="_blank" rel="external">W3C</a>）</p>
<p> TIPS：</p>
<blockquote>
<p><code>step-start</code>等同于<code>steps(1,start)</code>：动画执行时为开始左侧端点的部分为开始；<br><code>step-end</code>等同于<code>steps(1,end)</code>：动画执行时以结尾端点为开始，默认值为end。</p>
</blockquote>
<p> 最后安利一个计算帧数的工具：<a href="http://tid.tenpay.com/labs/css3_keyframes_calculator.html" target="_blank" rel="external">CSS3动画帧数计算器</a></p>
</li>
</ol>
<h2 id="CSS动画的优缺点"><a href="#CSS动画的优缺点" class="headerlink" title="CSS动画的优缺点"></a>CSS动画的优缺点</h2><ol>
<li>优点：<blockquote>
<p>简单、高效<br>声明式的<br>不依赖于主线程，采用硬件加速（GPU）<br>简单的控制keyframe animation播放和暂停</p>
</blockquote>
</li>
<li>缺点：<blockquote>
<p>不能动态修改或定义动画内容<br>不同的动画无法实现同步<br>多个动画彼此无法堆叠</p>
</blockquote>
</li>
</ol>
<h2 id="简单做动画："><a href="#简单做动画：" class="headerlink" title="简单做动画："></a>简单做动画：</h2><p>总结一下在之前做动画需求时的经验，归纳为以下7个步骤。以此需求为例：<br><img src="//img.aotu.io/Yettyzyt/css3-animation/3-1.jpg" alt="简单做动画"> （案例：iphone6s推广游戏）</p>
<ol>
<li><p><strong>观察</strong>——哪些元素可以动？元素可以怎么动？</p>
<p> 根据视觉稿，分析标题、按钮、人物、背景都可以适当加动画元素。</p>
</li>
<li><p><strong>沟通</strong>——了解设计师的想法，并提出自己的想法。</p>
<p> 这是设计师给出的大致动画过程，具体的过渡及动效没有明确给出，因此可以根据自己的想法与设计师进行沟通。<br> <img src="//img.aotu.io/Yettyzyt/css3-animation/3-2.JPG" alt="沟通"></p>
</li>
<li><p><strong>分析</strong>——分析动画元素的层次（出现顺序）；画出动画时间轴；根据时间轴写出CSS动画时间轴。<br> 分析该页面动画的出现可以分为四个层次：<br> <img src="//img.aotu.io/Yettyzyt/css3-animation/3-3.jpg" alt="分析"><br> 根据前面的分析画出动画时间轴：<br> <img src="//img.aotu.io/Yettyzyt/css3-animation/3-4.jpg" alt="分析"><br> 根据时间轴写出CSS动画时间轴：<br> <strong>方法一：</strong>将所有动画元素放在一个时间轴上（适合于元素较少的情况）。</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">a0&#123;-webkit-animation: a0 2s forwards;&#125;</div><div class="line">    @-webkit-keyframes a0&#123;</div><div class="line">            0%&#123;……&#125;</div><div class="line">            30%&#123;……&#125;</div><div class="line">        &#125;</div><div class="line">a1&#123;-webkit-animation: a1 2s forwards;&#125;</div><div class="line">    @-webkit-keyframes a1&#123;</div><div class="line">            0%,30%&#123;……&#125;</div><div class="line">            50%&#123;……&#125;</div><div class="line">        &#125;</div><div class="line">a2&#123;-webkit-animation: a2 2s forwards;&#125;</div><div class="line">    @-webkit-keyframes a2&#123;</div><div class="line">            0%,50%&#123;……&#125;</div><div class="line">            75%&#123;……&#125;</div><div class="line">        &#125;</div><div class="line">a3&#123;-webkit-animation: a3 2s forwards;&#125;</div><div class="line">    @-webkit-keyframes a3&#123;</div><div class="line">            0%,75%&#123;……&#125;</div><div class="line">            100%&#123;……&#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p> <strong>方法二：</strong>同一阶段的动画元素放在一个时间轴上。</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">a0&#123;-webkit-animation: a0 0.6s forwards;&#125;</div><div class="line">    @-webkit-keyframes a0&#123;</div><div class="line">            0%&#123;……&#125;</div><div class="line">            100%&#123;……&#125;</div><div class="line">        &#125;</div><div class="line">a1&#123;-webkit-animation: a1 0.4s 0.6s forwards;&#125;</div><div class="line">    @-webkit-keyframes a1&#123;</div><div class="line">            0%&#123;……&#125;</div><div class="line">            100%&#123;……&#125;</div><div class="line">        &#125;</div><div class="line">a2&#123;-webkit-animation: a2 0.5s 1s forwards;&#125;</div><div class="line">    @-webkit-keyframes a2&#123;</div><div class="line">            0%&#123;……&#125;</div><div class="line">            100%&#123;……&#125;</div><div class="line">        &#125;</div><div class="line">a3&#123;-webkit-animation: a3 0.5s 1.5s forwards;&#125;</div><div class="line">    @-webkit-keyframes a3&#123;</div><div class="line">            0%&#123;……&#125;</div><div class="line">            100%&#123;……&#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>切图</strong>——PS CC 2015修改组/图层名为“<em>*</em>.png”，生成图像资源。<br> 使用PS CSS 2015切图具体步骤如下：<br> <img src="//img.aotu.io/Yettyzyt/css3-animation/3-5.png" alt="切图"></p>
</li>
<li><p><strong>定位</strong>——适当使用绝对定位；适当使用rem。<br> 安利一款sublime插件：<a href="https://github.com/youing/PxRemTranslate" target="_blank" rel="external">PX转REM插件</a>。</p>
</li>
<li><p><strong>实现</strong></p>
<p> 从无到有：</p>
<ul>
<li>透明度—opacity</li>
<li>位移—translate</li>
<li><p>宽度—width（少用）</p>
<p>动起来：</p>
</li>
<li>2/3D转换—transform</li>
<li>其他属性</li>
</ul>
</li>
<li><p><strong> 润色</strong></p>
 <p style="color:#bbb">后文介绍</p>

</li>
</ol>
<p>TIPS：不要在before,after里加动画！</p>
<h2 id="不止于“动”："><a href="#不止于“动”：" class="headerlink" title="不止于“动”："></a>不止于“动”：</h2><ol>
<li><p><strong>惯性</strong></p>
<p> 物体没有停在本应该停止的位置上而是靠惯性<strong>继续摆动一段时间然后反方向摆回来</strong>。<br> 惯性在日常的动画需求中应用相当普遍，元素的高速进入都涉及惯性。</p>
<ul>
<li>示例：标题快速从左侧划入屏幕中，标题本应停在屏幕左右居中位置，由于惯性的作用，标题到达居中位置后又向右滑行一小段，再反方向滑回。<br><img src="//img.aotu.io/Yettyzyt/css3-animation/4-2.gif" alt="惯性"> （案例：618 APP返场页H5）</li>
</ul>
</li>
<li><p><strong>透视</strong></p>
<p> 物体与观察者的距离远近在静态时通过<strong>物体的大小</strong>来体现。<br> 当物体运动时，通过<strong>远近物体不同的运动速度</strong>来体现，从而形成层次感。<strong>近处的物体运动快，远处的物体运动慢</strong>。<br> <img src="//img.aotu.io/Yettyzyt/css3-animation/4-7.jpg" alt="透视"><br> （透视原理图）</p>
<ul>
<li><p>示例：云朵与观察者的距离有远近之分（不可能所有的云都在一个平面上），设置云朵的飘动动画时，可根据云朵的大小（远近）设置不同的运动速度，近处的云朵飘动的速度比远处的快，从而形成透视。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.cover_clouds</span> <span class="selector-class">.c1</span>,</div><div class="line"><span class="selector-class">.cover_clouds</span> <span class="selector-class">.c2</span>,</div><div class="line"><span class="selector-class">.cover_clouds</span> <span class="selector-class">.c4</span>,</div><div class="line"><span class="selector-class">.cover_clouds</span> <span class="selector-class">.c6</span></div><div class="line">&#123;</div><div class="line">    -webkit-<span class="attribute">animation</span>: cloudFloat linear <span class="number">6s</span> infinite;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.cover_clouds</span> <span class="selector-class">.c3</span>,</div><div class="line"><span class="selector-class">.cover_clouds</span> <span class="selector-class">.c5</span>,</div><div class="line"><span class="selector-class">.cover_clouds</span> <span class="selector-class">.c7</span></div><div class="line">&#123;</div><div class="line">    -webkit-<span class="attribute">animation</span>: cloudFloat linear <span class="number">10s</span> infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="//img.aotu.io/Yettyzyt/css3-animation/4-9.gif" alt="透视"> （案例：iphone6s推广游戏）</p>
</li>
</ul>
</li>
<li><p><strong>节奏</strong></p>
<p> 善用<strong>曲线</strong>和<strong>缓动</strong>可使效果更生动。<br> <strong>多个元素保持相同节奏</strong>，保证画面的动画不过分凌乱。</p>
<ul>
<li><p>示例：匀速的呼吸与缓动的呼吸。</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.breath</span>&#123;</div><div class="line">    <span class="attribute">-webkit-animation</span>:</div><div class="line">    breath <span class="number">6s</span> linear infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.breath</span>&#123;</div><div class="line">    <span class="attribute">-webkit-animation</span>:</div><div class="line">    breath <span class="number">6s</span> <span class="built_in">cubic-bezier</span>(.2,.73,.71,.44) infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <img src="//img.aotu.io/Yettyzyt/css3-animation/4-11.gif" alt="节奏"><br>  (左图：匀速呼吸效果图；右图：缓动呼吸效果图)<br>跟随动画进行呼吸，可以明显感觉到缓动的呼吸更贴近我们实际的呼吸情况。呼吸函数如下：<br>  <img src="//img.aotu.io/Yettyzyt/css3-animation/4-12.png" alt="节奏"><br>  （图片来源：<a href="http://isux.tencent.com/animation-factor.html" target="_blank" rel="external">让界面动画更自然——ISUX</a>）</p>
</li>
</ul>
</li>
<li><p><strong>跟随</strong></p>
<p> 跟随动作是将物体的各部位拆解，通常是<strong>没有骨架</strong>的部位较容易产生跟随的动作。例如：一个奔跑的人突然停下，他的衣服头发等可能仍会运动。其中，人是“主体”，衣服头发等是“附属物”。<br> 附属物的动作取决于：<strong>主体的动作</strong>，<strong>附属物本身的重量和质地</strong>，以及<strong>空气的阻力</strong>。<br> <strong>主体与附属物之间动作的重叠和追随</strong>，就是鉴定动作流畅性与自然度好坏的标准。</p>
<ul>
<li>示例：首页主体人物动作触发后，进行小范围的四向运动以模拟人物身体颤动的效果。人物头饰（花及骨头）与运动主体（人）并非一体，属于附属物。附属物的运动受主体的运动影响出现同向、延时的运动。<br><img src="//img.aotu.io/Yettyzyt/css3-animation/4-18.gif" alt="跟随"> （案例：拍拍七夕活动页—七叻个夕）</li>
</ul>
</li>
</ol>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><ol>
<li>不用left/right/width/height/margin-top等</li>
<li>少用color/background等</li>
<li>使用translate/opacity</li>
<li>适当开启GPU加速</li>
<li>适当使用will-change</li>
</ol>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><a href="http://www.itechzero.com/css3-transition-property-transition-effect-explain.html" target="_blank" rel="external">CSS3 transition 属性过渡效果 详解,Techzero ,2014-04-1</a></li>
<li><a href="http://www.cnblogs.com/aaronjs/p/4642015.html" target="_blank" rel="external">深入理解CSS3 Animation 帧动画,Aaron,2015-07-13</a></li>
<li><a href="http://www.tuicool.com/articles/neqMVr" target="_blank" rel="external">CSS3 timing-function: steps() 详解,那个傻瓜瓜,2014-12-30</a></li>
<li><a href="http://www.zuojj.com/archives/1292.html" target="_blank" rel="external">主流动画实现方式总结,Benjamin,2015-01-25</a></li>
<li><a href="https://cssanimation.rocks/principles/" target="_blank" rel="external">Animation Principles for the Web</a></li>
<li><a href="https://en.wikipedia.org/wiki/12_basic_principles_of_animation" target="_blank" rel="external">12 basic principles of animation</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求中常见的css3动画&quot;&gt;&lt;a href=&quot;#需求中常见的css3动画&quot; class=&quot;headerlink&quot; title=&quot;需求中常见的css3动画&quot;&gt;&lt;/a&gt;需求中常见的css3动画&lt;/h2&gt;&lt;p&gt;需求中常见的css3动画一般有&lt;strong&gt;补间动画（又叫
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS3" scheme="https://aotu.io/tags/CSS3/"/>
    
      <category term="animation" scheme="https://aotu.io/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title>使用ThreeJS在浏览器中展示全景图</title>
    <link href="https://aotu.io/notes/2016/01/02/3D-panorama/"/>
    <id>https://aotu.io/notes/2016/01/02/3D-panorama/</id>
    <published>2016-01-02T12:06:45.000Z</published>
    <updated>2016-10-20T07:06:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>在浏览器中实现全景浏览, 听起来是很玄的事情. 但如果你清楚它的原理, 这事就简单多了.<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前的一段时间, 朋友圈中出现了一批使用全景图浏览技术的H5页面. 比如探班吴亦凡系列, 或者是探访京东总部大楼找优惠券页面. 在当时, 这几个页面取得了不错的宣传效果. 那么, 这种新奇的全景效果到底是怎样实现的呢?</p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>现在的智能手机一般都自带全景图拍摄功能. 就算没有, 通过安装一些第三方软件也可以拥有这个功能, 但通过这些软件拍出来的只是一个非常宽的照片, 还无法达到360随意转动观看的效果. 要制作像上面那样的360全景观看页面, 我们需要从最基础的开始. 首先, 什么是全景图?</p>
<blockquote>
<p>360度全景图也称为三维全景图、全景环视图。360度全景技术是一种运用数码相机对现有场景进行多角度环视拍摄之后，再利用计算机进行后期缝合，并加载播放程序来完成的一种三维虚拟展示技术。 – <a href="http://baike.baidu.com/link?url=qsNK14ZSsECIkmQN6asaJDDNmCjS2cYwqldh_I4GRzuqb5CH7lrZ9ic34mQuJE7WtaiWaz7OXxwXQDZQ0kqNHK" target="_blank" rel="external">360度全景图_百度百科</a></p>
</blockquote>
<p>也就是说, 我们可以使用拍到的全景图, <strong>使用计算机进行后期缝合</strong>, 并加载播放程序来完成三维显示. 具体到使用ThreeJS实现全景图这个场景, 我们需要做什么呢?</p>
<p>其实, 粗略一想也可以想到, 如果我们将拍摄到的全景图贴在一个圆柱的侧面上, 我们站在圆柱中心朝四周看的话, 应该就有全景观察的效果. 不过这样做也有坏处, 也就是我们的头顶跟脚底都是无法看到的区域. 我们需要使用其他的方式来实现. 在这之前, 我们需要了解一下ThreeJS中的相机.</p>
<h2 id="ThreeJS世界中的相机"><a href="#ThreeJS世界中的相机" class="headerlink" title="ThreeJS世界中的相机"></a>ThreeJS世界中的相机</h2><p>在ThreeJS中, 相机还分为CubeCamera(立方体相机), PerspectiveCamera(透视相机)以及OrthographicCamera(正交相机). 其中, CubeCamera是创建动态贴图用的, OrthographicCamera创建的照相机不具有透视效果. 在这里, 我们用到的是PerspectiveCamera.</p>
<p>定义一个透视相机只需要一句话:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(</div><div class="line">    fov,</div><div class="line">    aspect,</div><div class="line">    near,</div><div class="line">    far</div><div class="line">);</div></pre></td></tr></table></figure>
<p><img src="//img.aotu.io/Littly/2016-01-01/camera.png" alt="camera示意图"><br>在这一段代码中, fov代表相机的视角, 即视野上平面与下平面的角度, aspect是相机的宽高比, near是视野近平面的距离, far是远平面的距离.<br>然而, 在3D的世界中, 仅凭上面这几个参数, 我们只能确定一个照相机的自身基本属性, 却无法确定这台照相机究竟位于什么位置, 是什么样的角度. ThreeJS中, camera.position属性是一个三维向量, 我们可以用这个属性定义相机相对于原点的位置. camera.lookAt(Vector3)函数可以定义照相机的观察方向, 参数同样是一个三维向量. 对于照相机而言, 还有一个参数显得非常重要, 这就是相机的上方向. 同样的空间位置, 朝向同一个方向, 照相机还可以是横着, 也可以竖着, 最后看到的效果也不会一样. 所以camera还有一个up属性, 定义照相机的上方向. 如上图蓝色空心箭头所示.</p>
<h2 id="动手做全景展示1"><a href="#动手做全景展示1" class="headerlink" title="动手做全景展示1"></a>动手做全景展示1</h2><p>要让人产生全景的视觉效果, 很关键的一点是, 要让人看见他当前姿态所应当看见的景观. 如果将人眼比作一台照相机, 我们很容易想到, 我们如果将全景图贴在一个球形的内表面, 那么人眼这台照相机所看到的景象就是上下左右360无死角的全景.</p>
<p>想想总是美如画的. 我们不妨实践一下. 首先, 去google搜索关键字’全景图 360’, 随意下载一个全景图. 接下来, 我们需要将这个全景图贴到球形的表面. 这一步, 我们再一次用到了Blender.</p>
<p>首先, 新建一个工程, 然后往场景中添加一个经纬球.<br><img src="//img.aotu.io/Littly/2016-01-01/ball.png" alt="经纬球"></p>
<p>我们希望使用之前下载到的全景图作为这个球体的贴图. 所以, 我们需要首先对这个球体做uv展开. 对这个球使用球面投射, 方向选择对齐到物体, 选上缩放至边界框, 接着我们看到UV展开图是这样的:<br><img src="//img.aotu.io/Littly/2016-01-01/uv_1.png" alt="UV展开图"></p>
<p>这个UV展开图非常不规则, 就算有了全景图, 我们也没法往上贴. 这是因为上下两个顶点处汇集了所有的经线, 使得Blender也无法准确得知我们想要怎样的贴图. 这种时候, 我们需要将球体的南北两个极点删除. 这样的话, 球体的上下两个顶点就成为了两个空心的圆圈. 然而, 模型空了两个洞不太好. 接下来, 使用Extude工具推挤出新的纬圈, 酌情缩小一些.<br><img src="//img.aotu.io/Littly/2016-01-01/delete_top.png" alt="删除了极点"></p>
<p>重新进行UV展开, 会看到这次的UV展开非常平整.<br><img src="//img.aotu.io/Littly/2016-01-01/uv_2.png" alt="UV展开图"></p>
<p>将新的纬圈设定scale为0, 再删除重叠的节点, 南北极就可以重新汇聚到一个点了. 接下来我们把全景图贴上, 一个全景球就这样诞生了.<br><img src="//img.aotu.io/Littly/2016-01-01/panoball.png" alt="全景球"></p>
<p>我们将这个全景球通过io_three插件导出为json. 新建一个页面, 引入three.js. 核心代码大概是这样子:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">objloader = <span class="keyword">new</span> THREE.ObjectLoader();</div><div class="line">objloader.load(</div><div class="line">	<span class="string">'js/360.json'</span>,</div><div class="line">	<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">		scene = obj;</div><div class="line">		<span class="comment">//scene.add(new THREE.AmbientLight(0xffffff));</span></div><div class="line">		<span class="comment">//material = scene.children[0].material;</span></div><div class="line">		<span class="comment">//material.side = THREE.BackSide;</span></div><div class="line">		<span class="comment">//material.emissive = 0x000000;</span></div><div class="line">		animate();</div><div class="line">	&#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>这里需要注意, 如果将注释部分的代码删去, 我们将会发现视野中一片黑. 这是因为Blender导出的模型默认使用的是遵守Phong光照模型的材质, 这种材质在没有配置自发光, 又没有外界光照的情况下就是一坨黑色. 所以我们还需要手动配置一下. blender导出的json是scene本身. scene是一个树状的结构, 在它的children属性中有所有的对象信息. 在这里, 我们需要配置一下贴图的方向以及自发光, 接下来就可以看到效果了.<br><img src="//img.aotu.io/Littly/2016-01-01/rendered1.png" alt="效果1"></p>
<h2 id="动手做全景展示2"><a href="#动手做全景展示2" class="headerlink" title="动手做全景展示2"></a>动手做全景展示2</h2><p>上面这样的实现其实也有一个弊端. 球状模型的顶点与面的数量十分逆天. 这些元素的数量越多, 耗费的浏览器资源就会越多. 那么有没有更加节能环保的方法呢?<br><img src="//img.aotu.io/Littly/2016-01-01/problem.png" alt="问题"></p>
<p>答案是肯定的. 既然我们的人眼可以被类比为照相机, 那么如果摆多几台照相机, 将拍到的照片无重叠地拼在一起, 一样可以获得全景视觉.</p>
<p>这里, 我们使用6台90度视角, 纵宽比1的照相机, 从球体中心分别朝向立方体六个面的方向.<br><img src="//img.aotu.io/Littly/2016-01-01/6camera.png" alt="6个相机"></p>
<p>将6个渲染图分别保存下来.<br><img src="//img.aotu.io/Littly/2016-01-01/pictures.png" alt="6个渲染图"></p>
<p>接下来新建页面, 将这六张图片分别贴到立方体的六个面就大功告成了. 核心代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">loader = <span class="keyword">new</span> THREE.TextureLoader();</div><div class="line"><span class="comment">/*</span></div><div class="line">    虽然使用THREE.ImageUtils.loadTexture也没问题</div><div class="line">    不过估计是为了适应Javascript的异步式编程</div><div class="line">    ThreeJS也逐步将一些会阻塞的api转换为异步回调的模式</div><div class="line">    原有的老api会被标记为deprecated</div><div class="line">*/</div><div class="line"></div><div class="line">gardenMaterials = [</div><div class="line">    <span class="string">'garden/px.png'</span>,</div><div class="line">    <span class="string">'garden/nx.png'</span>,</div><div class="line">    <span class="string">'garden/py.png'</span>,</div><div class="line">    <span class="string">'garden/ny.png'</span>,</div><div class="line">    <span class="string">'garden/pz.png'</span>,</div><div class="line">    <span class="string">'garden/nz.png'</span></div><div class="line">];</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.all(gardenMaterials.map(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</div><div class="line">    <span class="comment">//加载图片, 新建材质, 传给下一个步骤.</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        loader.load(val, <span class="function"><span class="keyword">function</span> (<span class="params">texture</span>) </span>&#123;</div><div class="line">            resolve(<span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;</div><div class="line">                <span class="attr">map</span>: texture,</div><div class="line">                <span class="attr">side</span>: THREE.BackSide</div><div class="line">            &#125;));</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;)).then(<span class="function"><span class="keyword">function</span> (<span class="params">materials</span>) </span>&#123;</div><div class="line">    <span class="comment">//将材质贴到正方体的6个面.</span></div><div class="line">    geometry = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>);</div><div class="line">    cube = <span class="keyword">new</span> THREE.Mesh(</div><div class="line">        geometry,</div><div class="line">        <span class="keyword">new</span> THREE.MeshFaceMaterial(materials)</div><div class="line">    );</div><div class="line">    scene.add(cube);</div><div class="line">    animate();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>渲染出来的效果, 其实是完全一样的.<br><img src="//img.aotu.io/Littly/2016-01-01/rendered2.png" alt="效果2"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>使用这两种方法做出来的全景展示其实还会有一些小问题, 比如展示空间的底部与顶部会有聚焦在一点的现象:<br><img src="//img.aotu.io/Littly/2016-01-01/point.png" alt="顶部与底部"><br>这种情况单靠一个全景图是无法解决的, 只能通过对底部与顶部多拍一个照片来补救. 目前, 全景展示的技术已经有许多应用, 比如谷歌地图百度地图的街景展示, 或者是上面提到的几个H5页面中也有用到. 作为一名前端工程师, 懂得其中的原理并付诸实践, 这是非常重要的.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在浏览器中实现全景浏览, 听起来是很玄的事情. 但如果你清楚它的原理, 这事就简单多了.&lt;br&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="three.js" scheme="https://aotu.io/tags/three-js/"/>
    
      <category term="panorama" scheme="https://aotu.io/tags/panorama/"/>
    
  </entry>
  
  <entry>
    <title>初识Adobe After Effects效果制作</title>
    <link href="https://aotu.io/notes/2015/12/29/ae/"/>
    <id>https://aotu.io/notes/2015/12/29/ae/</id>
    <published>2015-12-29T14:05:18.000Z</published>
    <updated>2016-10-20T07:06:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>Adobe After Effects简称“AE”是Adobe公司推出的一款图形视频处理软件，用于高端视频特效系统的专业特效合成。随着h5页面动效的越来越复杂以及h5效果视频化趋势，AE这款软件也渐渐成为了我们制作绚丽动效的必备神器。</p>
<a id="more"></a>
<h3 id="那我们通过尝试制做简单手机天气动效，来了解AE的特效吧"><a href="#那我们通过尝试制做简单手机天气动效，来了解AE的特效吧" class="headerlink" title="那我们通过尝试制做简单手机天气动效，来了解AE的特效吧"></a>那我们通过尝试制做简单手机天气动效，来了解AE的特效吧</h3><p><img src="//img.aotu.io/pfan/ae/weather.gif" alt="天气">    </p>
<h3 id="制作程序流程"><a href="#制作程序流程" class="headerlink" title="制作程序流程"></a>制作程序流程</h3><blockquote>
<p>1.工具：<code>After Effects</code> 、<code>Photoshop</code><br>2.设计流程：<code>After Effects</code> 在一个合成中创建转场效果，另外一个合成中创建展示效果，导出到PS。<br>3.进行帧处理，优化导出<code>GIF</code></p>
</blockquote>
<h3 id="接下来，我们开始一步一步开始吧"><a href="#接下来，我们开始一步一步开始吧" class="headerlink" title="接下来，我们开始一步一步开始吧"></a>接下来，我们开始一步一步开始吧</h3><h3 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h3><h4 id="1-伦敦背景图"><a href="#1-伦敦背景图" class="headerlink" title="1.伦敦背景图"></a>1.伦敦背景图</h4><p><img src="//img.aotu.io/pfan/ae/background.jpg" alt="伦敦背景图"></p>
<h4 id="2-手机透视效果模板"><a href="#2-手机透视效果模板" class="headerlink" title="2.手机透视效果模板"></a>2.手机透视效果模板</h4><p><img src="//img.aotu.io/pfan/ae/iphone.png" alt="手机模板"></p>
<h3 id="基本构建"><a href="#基本构建" class="headerlink" title="基本构建"></a>基本构建</h3><h4 id="创建背景转场效果合成"><a href="#创建背景转场效果合成" class="headerlink" title="创建背景转场效果合成"></a>创建背景转场效果合成</h4><h4 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开AE，合成&gt;新建合成(Cmd+N)，尺寸为<code>518*715</code>，帧数<code>29</code>，持续<code>6s</code><br><img src="//img.aotu.io/pfan/ae/1.jpg" alt="step1"></p>
<h4 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;导入伦敦背景图像，将图像丢入合成1，调整背景图像尺寸，使其适合画布<br><img src="//img.aotu.io/pfan/ae/2.jpg" alt="step2"></p>
<h4 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建3个蓝色框(用形状图层)，这些蓝色框将从屏幕上方下落到屏幕底部，宽度<code>172</code>、<code>174</code>、<code>172px</code>(在AE中，尺寸特别不好确定，我们可以COM+R打开标尺去匹配)，色值<code>#063857</code>、<code>#145071</code>、<code>#416C8D</code>。三个方框上方的方框宽度640px,输入相应文本。<br><img src="//img.aotu.io/pfan/ae/3.jpg" alt="step3"></p>
<h4 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用钢笔勾勒出简单云朵和6片雪花空心圆(或者去找素材,这里的云朵，就是找的png图片)<br><img src="//img.aotu.io/pfan/ae/4.jpg" alt="step4"></p>
<h4 id="创建手机展示效果合成"><a href="#创建手机展示效果合成" class="headerlink" title="创建手机展示效果合成"></a>创建手机展示效果合成</h4><h4 id="步骤1-1"><a href="#步骤1-1" class="headerlink" title="步骤1"></a>步骤1</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建合成2，尺寸<code>1280 x 720</code>帧数<code>29</code>，时间<code>6s</code></p>
<h4 id="步骤2-1"><a href="#步骤2-1" class="headerlink" title="步骤2"></a>步骤2</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;导入iPhone背景,调整尺寸，增加背景层扩展。<br><img src="//img.aotu.io/pfan/ae/5.jpg" alt="step2">    </p>
<h4 id="步骤3-1"><a href="#步骤3-1" class="headerlink" title="步骤3"></a>步骤3</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把合成1拖到合成2里面,选中合成1，在效果面板，选择效果&gt;扭曲&gt;边角定位，让合成1的4个角对上模板中屏幕的4个角，变成如下形式。<br><img src="//img.aotu.io/pfan/ae/6.jpg" alt="step3"></p>
<p>以上基本的合成构建都已经做完了，那接下来，我们开始实现动效</p>
<h3 id="动效制作"><a href="#动效制作" class="headerlink" title="动效制作"></a>动效制作</h3><h4 id="动效制作预想"><a href="#动效制作预想" class="headerlink" title="动效制作预想"></a>动效制作预想</h4><ul>
<li>&nbsp;&nbsp;3个蓝色方框变长，不同时的落下，然后回弹缩小。</li>
<li>&nbsp;&nbsp;透明框从底部往上移动，自始至终宽度不变。</li>
<li>&nbsp;&nbsp;4个框抵达目的地后，文字开始出现，蓝色框文字是比例扩大+从不透明变透明，透明框中得文字是从不透明变透明。</li>
<li>&nbsp;&nbsp;云朵图标，同时伴随雪花。</li>
<li>&nbsp;&nbsp;Snowy文字出现。</li>
</ul>
<h3 id="动效实现"><a href="#动效实现" class="headerlink" title="动效实现"></a>动效实现</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在实现动效之前，我们先说说，AE里面如何实现动效，两种方案，一种是效果菜单下的效果动效，另一种就是AE对图层的变换处理包含：锚点、位置、缩放、旋转、不透明度，通过改变激活这几个按钮，改变图层的参数形成关键帧，从而形成动画。<br><img src="//img.aotu.io/pfan/ae/7.jpg" alt="动效实现">    </p>
<h4 id="三个蓝色框特效"><a href="#三个蓝色框特效" class="headerlink" title="三个蓝色框特效"></a>三个蓝色框特效</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开背景合成，选中三个色块<br><img src="//img.aotu.io/pfan/ae/8.jpg" alt="特效"><br>备注<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.这里应用了位置和缩放，来实现动效。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.位置上，三个蓝色的框，通过缩放<code>scale 0-100%</code>，从上到下，不同延迟。    </p>
<h4 id="透明框"><a href="#透明框" class="headerlink" title="透明框"></a>透明框</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;透明框的运动，从下到上缓慢的位移。</p>
<h4 id="底部文字"><a href="#底部文字" class="headerlink" title="底部文字"></a>底部文字</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.三个蓝色框，当蓝色框触及到底部时，文字快速弹出，不透明度从<code>0</code>-&gt;<code>100%</code>,比例从<code>0</code>-&gt;<code>100%</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.透明框中的文字随透明框一起运动(位置设置可以参考透明框)，但是，左侧的文字先到，右侧的-4度后到，注意时间轴中得设置。</p>
<h4 id="云朵"><a href="#云朵" class="headerlink" title="云朵"></a>云朵</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;透明框的文本开始出现时，云朵出现，先是透明度从0-100%；而比例开始时是60%，当透明度到了<code>100%</code>时，从<code>60%</code>-&gt;<code>100%</code></p>
<h4 id="雪花小圆点"><a href="#雪花小圆点" class="headerlink" title="雪花小圆点"></a>雪花小圆点</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当云朵动效完成后，雪花小圆点开始逐个出现。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.注意小圆点会错落的向右移动，然后弹回，注意运动顺序的调节<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.注意小圆点逐个出现，因此透明度的变化要在时间轴上依次设置。<br><img src="//img.aotu.io/pfan/ae/9.jpg" alt="雪花小圆点">    </p>
<h4 id="Snowy文字效果"><a href="#Snowy文字效果" class="headerlink" title="Snowy文字效果"></a>Snowy文字效果</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里运用了蒙版运动，来打造Snowy文本逐渐出现的效果，注意Snowy不透明度也要变化(蒙版，通过图层点击右键添加蒙层，然后在蒙层中选择alpha蒙层)<br><img src="//img.aotu.io/pfan/ae/10.jpg" alt="文字效果">    </p>
<h4 id="切换到合成手机导出效果"><a href="#切换到合成手机导出效果" class="headerlink" title="切换到合成手机导出效果"></a>切换到合成手机导出效果</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AE文件可以导出多种形式文件，主菜单合成渲染（主要合成导出序列帧相关）和导出菜单（文件－&gt;创建－&gt;创建代理）就可以设置需要的格式，常见的格式有：</p>
<blockquote>
<p>3GP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MP4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MP3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GIF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SWF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PNG序列帧图片</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里呢，我做完动效后，是导出<code>.mov</code>文件，然后把<code>.mov</code>文件导入到<code>ps</code>，<code>COM+OPTION+SHIFT+S</code>导出<code>gif</code>文件，效果如下（记得要选择循环播放额，不然只会播放一次）。<br><img src="//img.aotu.io/pfan/ae/11.jpg" alt="效果">    </p>
<p>到此，这个小例子我们就实现了，效果就是初始的<code>GIF</code>效果图，源文件<code>下载</code> <a href="http://doc.pfan123.com/public/weather.zip" target="_blank" rel="external">weather</a></p>
<p>最后，对比一下H5中<code>AE</code>视频动画、<code>GIF</code>动画、<code>Canvas</code>动画之间的差异</p>
<h2 id="三者对比"><a href="#三者对比" class="headerlink" title="三者对比"></a>三者对比</h2><p>这里将本例，分别用了3种形式做<code>H5</code>动画，<a href="http://jdc.jd.com/fd/promote/201512/ae/video.html" target="_blank" rel="external"><code>AE</code>动画效果</a>（AE效果可能要注意一下，由于没有找到比较好的视频压缩工具，初始动画有点卡，循环播放是很流畅的）、<a href="http://jdc.jd.com/fd/promote/201512/ae/canvas.html" target="_blank" rel="external"><code>Canvas</code>动画效果</a>、<a href="http://jdc.jd.com/fd/promote/201512/ae/index.html" target="_blank" rel="external"><code>GIF</code>动画效果</a>，看看三者之间的差异，二维码如下：<br><img src="//img.aotu.io/pfan/ae/12.jpg" alt="AE"></p>
<h5 id="备注：请在wifi的环境下体验，由于动画帧数比较多173帧，体验可能比较慢，请耐心等待"><a href="#备注：请在wifi的环境下体验，由于动画帧数比较多173帧，体验可能比较慢，请耐心等待" class="headerlink" title="备注：请在wifi的环境下体验，由于动画帧数比较多173帧，体验可能比较慢，请耐心等待"></a>备注：请在wifi的环境下体验，由于动画帧数比较多173帧，体验可能比较慢，请耐心等待</h5><ul>
<li><p><code>AE动画效果</code>，动效整体还原度比较好，支持流媒体加载，但是<code>Android</code>与<code>IOS</code>展现形式不一样；<code>IOS</code>支持格式比<code>Android</code>多，如<code>.mov格式</code>；<code>IOS</code>可以隐藏播放器控制条，<code>Android</code>无法解决；初始效果与文件大小影响比较大。</p>
</li>
<li><p><code>Canvas动画效果</code>，动画还原度无法达到<code>GIF</code>、<code>AE</code>的效果，复合动画帧比较多，图片比较大，对做雪碧图影响较大，做出的动画会出现闪烁低端<code>Android</code>出现明显卡顿。</p>
</li>
<li><p><code>GIF动画效果</code>，帧比较多，在部分低端<code>Android</code>表现卡顿，<code>GIF</code>格式图片，无法很好压缩。</p>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AE制做动画特效的神器，还有很多很多好玩的特效等待我们去学习思考，以及结合到平时的工作中。在移动端h5开发中，经常会遇到比较复杂的交互特效帧比较多，可能很多时候大家会选择<code>GIF</code>，帧动画，<code>Canvas</code>动画来实现效果，可是往往做出来的动画展示效果，无法达到预想的效果，或多或少的导致设备卡顿，加载过慢等现象。在我们了解了这些之后，可以通过<code>AE</code>换一种尝试，做更有趣的动画效果。</p>
<h4 id="学习资料："><a href="#学习资料：" class="headerlink" title="学习资料："></a>学习资料：</h4><p><a href="http://www.videocopilot.net/" target="_blank" rel="external">videocopilot</a><br><a href="http://www.newcger.com/" target="_blank" rel="external">newcger</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Adobe After Effects简称“AE”是Adobe公司推出的一款图形视频处理软件，用于高端视频特效系统的专业特效合成。随着h5页面动效的越来越复杂以及h5效果视频化趋势，AE这款软件也渐渐成为了我们制作绚丽动效的必备神器。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Adobe After Effects" scheme="https://aotu.io/tags/Adobe-After-Effects/"/>
    
      <category term="AE" scheme="https://aotu.io/tags/AE/"/>
    
      <category term="AE movie" scheme="https://aotu.io/tags/AE-movie/"/>
    
  </entry>
  
  <entry>
    <title>Safari 9.0的新特性</title>
    <link href="https://aotu.io/notes/2015/12/23/new-safari-9/"/>
    <id>https://aotu.io/notes/2015/12/23/new-safari-9/</id>
    <published>2015-12-23T13:42:19.000Z</published>
    <updated>2016-10-20T07:06:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>苹果的 OS 在不断发展，Safari 亦越变强大性感，在最新的 9.0 版本当中，Safari 增加了不少新的特性，这里主要介绍一下和 Web 前端密切相关的。</p>
<a id="more"></a>
<h2 id="Viewport-Changes"><a href="#Viewport-Changes" class="headerlink" title="Viewport Changes"></a>Viewport Changes</h2><p>关于新 Safari 对 Viewport 的影响我们先看下面一段引自苹果开发者官方文档的说明：</p>
<blockquote>
<p>Viewport meta tags using “width = content-width” cause the page to scale down to fit content that overflows the viewport bounds. You can override this behavior by adding “shrink-to-fit = no” to your meta tag as shown below. The added value will prevent the page from scaling to fit the viewport.</p>
</blockquote>
<p>可以看到 Safari 将会对有内容溢出 Viewport 区域的页面进行缩放适配，使溢出的内容完整展示而不出现滚动条，而在 Viewport 设置中引入了一个新属性 <code>shrink-to-fit = no</code>，该属性可以禁止这种缩放行为的发生。</p>
<p>下面我们具体看一下该体贴行为对页面的影响。</p>
<p>在 Safari 9.0 之前的版本，当 viewport meta 标签的 content 属性有设置的时候，<strong>如果页面内容溢出 viewport 的定义区域</strong>，那么页面将会出现滚动条，如下面的页面，该页面的 viewport 设置为：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta <span class="attr">name="viewport"</span> <span class="attr">content="width=device-width,</span> <span class="attr">initial-scale=1.0,</span> <span class="attr">maximum-scale=1.0,</span> <span class="attr">user-scalable=no"</span> &gt;</div></pre></td></tr></table></figure>
<p><a href="http://missoy.me/mihan/h5/shop/index_nofit.html" target="_blank" rel="external">NotFixed</a></p>
<p>截图如下：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/fit.jpg" alt="image"></p>
<p>然而在 Safari 9.0 的版本，即使 viewport 设置了 <code>initial-scale=1.0</code> 和 <code>user-scalable=no</code>，Safari 不仅重置了设定好的最小缩放值限制，而且还重新恢复了用户对页面进行缩放的操作权限，<a href="http://missoy.me/mihan/h5/shop/index_nofit.html" target="_blank" rel="external">上述页面</a>在 Safari 9.0 中的截图如下：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/notfit.jpg" alt="image"></p>
<p>从上面的截图可以看到，Safari的缩放行为对页面视觉破坏性还是比较厉害的，如果溢出的内容很多的话，页面就会被缩得更小了。</p>
<p>在 viewport 设置添加 <code>shrink-to-fit = no</code> 这个属性后，设置如下：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta <span class="attr">name="viewport"</span> <span class="attr">content="width=device-width,</span> <span class="attr">initial-scale=1.0,</span> <span class="attr">maximum-scale=1.0,</span> <span class="attr">user-scalable=no,shrink-to-fit</span> = no<span class="string">" &gt;</span></div></pre></td></tr></table></figure>
<p>Safari 就不会再对页面进行缩放处理，恢复之前版本的处理方式，</p>
<p><a href="http://missoy.me/mihan/h5/shop/index_fit.html" target="_blank" rel="external">Fixed</a></p>
<p>截图如下：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/fit.jpg" alt="image"></p>
<p>在日常的需求中，尽管内容溢出页面的情况不会太常见，但为了增强页面的容错能力，保证页面视觉的正常显示，在 viewport 设置中应该加上 <code>shrink-to-fit = no</code> 新属性。</p>
<h2 id="Safari内容拦截扩展"><a href="#Safari内容拦截扩展" class="headerlink" title="Safari内容拦截扩展"></a>Safari内容拦截扩展</h2><p>Safari 9.0 新增了内容拦截扩展，该扩展程序能够便捷高效地拦截 cookies、图片、资源文件、弹窗等内容，不仅可以在 OS X 上使用，在 iOS 上也同样适用。</p>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>内容拦截扩展程序负责提供一个 JSON 文件给 Safari，这个 JSON 文件包含了一个数组，数组里面可以配置相关规则（主要由 triggers 和 actions 组成 ）拦截指定的内容，Safari 会将该 JSON 文件转换成字节代码，转换后的字节代码被应用到所有加载资源，有效地避免了用户浏览器的信息泄露到扩展程序。</p>
<p>内容拦截扩展程序的核心就是通过 JSON 文件的配置和传送，Safari 接收到之后就可以根据 JSON 的配置对相应的加载资源进行适配完成拦截。</p>
<p>Xcode内设有内容拦截应用模版（Content Blocker App Extension template），里面有一个 <code>blockerList.json</code> JSON 文件，默认设置是这样的：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"action"</span>: &#123;</div><div class="line">            <span class="attr">"type"</span>: <span class="string">"block"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"trigger"</span>: &#123;</div><div class="line">            <span class="attr">"url-filter"</span>: <span class="string">"webkit.org/images/icon-gold.png"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>表示对站点 webkit.org 的一张名为 icon-gold.png 的图片进行拦截。</p>
<p>除了可以从加载资源上拦截外，还可以通过 CSS 选择器对元素进行隐藏，如下面的配置会将站点所有 class 名为 “ads” 的 div 进行 <code>display: none !important;</code> 样式处理。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"action"</span>: &#123;</div><div class="line">            <span class="attr">"selector"</span>: <span class="string">"div.ads"</span>,</div><div class="line">            <span class="attr">"type"</span>: <span class="string">"css-display-none"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"trigger"</span>: &#123;</div><div class="line">            <span class="attr">"url-filter"</span>: <span class="string">".*"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p><strong> 注意：由于 32 位架构的设备性能限制，iOS上的内容拦截扩展只适用在 64 位架构的设备上，苹果从 A7 处理器开始采用 64位架构，因此 iPhone 5s + 的机器才可能使用此扩展应用 </strong></p>
<p>关于参数 action 和 trigger 的更多介绍可以参阅：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/blocker_8.jpg" alt="image"> </p>
<p><a href="https://webkit.org/blog/3476/content-blockers-first-look/" target="_blank" rel="external">Introduction to WebKit Content Blockers</a></p>
<p><a href="https://www.hackingwithswift.com/safari-content-blocking-ios9" target="_blank" rel="external">Safari Content Blocking in iOS 9: a tutorial by example</a></p>
<h4 id="一个简单的内容拦截扩展应用"><a href="#一个简单的内容拦截扩展应用" class="headerlink" title="一个简单的内容拦截扩展应用"></a>一个简单的内容拦截扩展应用</h4><p>实现一个拦截扩展应用很简单，现在我们以 <a href="http://missoy.me/mihan/h5/shop/index.html" target="_blank" rel="external">拍拍小店首页</a> 为例，拦截顶部广告区域：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/blocker_1.jpg" alt="image"></p>
<p>Update Xcode 到最新版本，打开 Xcode，新建立一个 iOS Single View Application 项目（blocker-demo），如图所示：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/blocker_2.jpg" alt="image"></p>
<p>然后新建立一个 Target，在 Application Extension 模版中选中 Content Blocker Extension：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/blocker_3.jpg" alt="image"></p>
<p>完成之后，就可以在项目中看到刚才新增的 Target 文件夹（blocker），可以找到一个名为 <code>blockerList.json</code>的 JSON 文件，在里面就可以配置需要拦截内容的规则了，如图所示：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/blocker_4.jpg" alt="image"></p>
<p>（顶部广告区域的 class 名为 <code>mod_ad</code>， 例子中的配置将会将顶部广告区域隐藏。）</p>
<p>然后以整个项目为编译对象，选择需要测试的模块器（这里选择了 iPhone6）运行程序 ，<strong> 切记不要选中 content blocker 的 Target 为编译对象运行，在模拟器上不能生效 </strong>。</p>
<p>运行后我们看到白茫茫的一片，模拟器默认打开了刚才新建立的应用，这时候我们需要回到主界面（command + shift + h）进入系统设置界面， 到 Safari &gt;Content Blockers 里面启动内容拦截扩展，如图所示：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/blocker_5.jpg" alt="image"></p>
<p>启动 Safari，打开<a href="http://missoy.me/mihan/h5/shop/index.html" target="_blank" rel="external">拍拍小店首页</a>，这时候我们可以看到，启动内容拦截扩展之后，顶部的广告区域被隐藏了</p>
<p><img src="//img.aotu.io/mihanX/safari-9/blocker_6.jpg" alt="image"></p>
<p>用 Safari 的 Web 检查器看了一下页面，发现用户样式表里针对顶部广告区域多了一个 <code>display: none !important;</code>样式</p>
<p><img src="//img.aotu.io/mihanX/safari-9/blocker_7.jpg" alt="image"></p>
<p>最后需要将程序打包，才能在真机运行，貌似需要 688RMB 的开发者帐号，土豪们可以尽情试一试。</p>
<h3 id="OS-X"><a href="#OS-X" class="headerlink" title="OS X"></a>OS X</h3><p>在 OS X Safari 的扩展创建器（Extension Builder）加入拦截 JSON 文件（如下图）或者在 Safari 扩展对象中使用新增的 setContentBlocker API 就可以实现内容拦截功能了</p>
<p><img src="https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewInSafari/Art/ExtensionBuilder_AdBlocker_2x.png" alt="image"></p>
<p><strong> 需要注意的是，用于拦截内容的 onbeforeload 事件和 canLoad 信息已被弃用 </strong></p>
<p>更多有关 Safari 内容拦截扩展介绍：</p>
<p><a href="https://www.hackingwithswift.com/safari-content-blocking-ios9" target="_blank" rel="external">Safari Content Blocking in iOS 9: a tutorial by example</a></p>
<p><a href="http://www.cnblogs.com/CocoonJin/p/4701050.html" target="_blank" rel="external">iOS 9之Safari广告拦截器（Content Blocker）</a></p>
<h2 id="System-Font-Support"><a href="#System-Font-Support" class="headerlink" title="System Font Support"></a>System Font Support</h2><h3 id="apple-system"><a href="#apple-system" class="headerlink" title="-apple-system"></a>-apple-system</h3><p>苹果操作系统会从两种不同外观和大小的字体进行自动转换去调节系统新字体 “San Francisco”，可以通过 CSS 规则</p>
<pre><code>font-family: -apple-system, sans-serif;
</code></pre><p>让系统智能选择适配操作系统的字体。</p>
<p>可以看一下下面两张在系统 OS X 10.11.1 下的对比图：</p>
<p>没有添加 <code>-apple-system</code> 属性值：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/sys-font-no.png" alt="image"></p>
<p>添加了 <code>-apple-system</code> 属性值：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/sys-font-yes.png" alt="image"></p>
<p>可以看到添加了 <code>-apple-system</code>，字体变得更圆润锐利</p>
<p><strong>建议：在 <code>font-family</code> 属性加上 <code>-apple-system</code> 属性值。</strong></p>
<p>图片看不出差别的同学请用 OS X Safari 9.0 打开以下链接：</p>
<p><a href="http://missoy.me/mihan/demo/sys-font.html" target="_blank" rel="external">System Font Support</a></p>
<p><img src="//img.aotu.io/mihanX/safari-9/sys-font-qrcode.png" alt="image"></p>
<p>更多关于 System Font Support 介绍 ：<a href="https://webkit.org/blog/3709/using-the-system-font-in-web-content/" target="_blank" rel="external">Using the System Font in Web Content</a></p>
<p>附：<a href="http://www.jiemian.com/article/392197.html" target="_blank" rel="external">《在吐槽iOS 9的新字体之前，你应该了解这些》</a></p>
<h3 id="iOS-text-style-keywords"><a href="#iOS-text-style-keywords" class="headerlink" title="iOS text-style keywords"></a>iOS text-style keywords</h3><p>Safari 9.0除了支持 <code>-apple-system</code> 新字体特性之外，在 iOS 平台提供了更丰富更具活力的文本样式，该文本样式不仅仅是特定的字体，包括所有的 <code>font</code> 样式，如字重和字号，因此只能以 <code>font</code> 来定义：</p>
<ul>
<li>font: -apple-system-body;</li>
<li>font: -apple-system-headline;</li>
<li>font: -apple-system-subheadline;</li>
<li>font: -apple-system-caption1;</li>
<li>font: -apple-system-caption2;</li>
<li>font: -apple-system-footnote;</li>
<li>font: -apple-system-short-body;</li>
<li>font: -apple-system-short-headline;</li>
<li>font: -apple-system-short-subheadline;</li>
<li>font: -apple-system-short-caption1;</li>
<li>font: -apple-system-short-footnote;</li>
<li>font: -apple-system-tall-body;</li>
</ul>
<p>加上这些属性在 iOS 上会有不同的表现：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/sys-font.png" alt="image"></p>
<p>有兴趣的同事去 <a href="http://missoy.me/mihan/demo/sys-font.html" target="_blank" rel="external">Demo</a> 页看一下：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/sys-font-qrcode.png" alt="image"></p>
<h2 id="CSS-Scroll-Snapping"><a href="#CSS-Scroll-Snapping" class="headerlink" title="CSS Scroll Snapping"></a>CSS Scroll Snapping</h2><p>2015年3月26日，W3C的CSS工作组发布了CSS滚动界限点模块（CSS Scroll Snap Points Level 1）的首份工作草案（First Public Working Draft）。在浏览可以连续上下滚动或左右滚动的连续页面或一组图片时，通过触摸屏的触摸滑动或鼠标滚轴的滚动操作可以获得较好用户体验。</p>
<p>Safari 9.0 的新特性支持强大的 CSS Scroll Snap，利用这个特性，我们可以用CSS轻松实现网站常见的轮播图滚动特效</p>
<p>我们先看一下 <a href="http://missoy.me/mihan/demo/scroll-snap.html" target="_blank" rel="external">Demo</a> 感受一下 ，请用 Safari 9.0 打开</p>
<p><img src="//img.aotu.io/mihanX/safari-9/scroll-snap_9.jpg" alt="image"></p>
<p>使用 Scroll Snap 需要的结构包含装载滚动元素的容器和需要滚动的元素：</p>
<pre><code>&lt;div class=&quot;scroll_container&quot;&gt;
    &lt;div class=&quot;scroll_elements&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;scroll_elements&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;scroll_elements&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;scroll_elements&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>Scroll Snap 一共有5个CSS属性可使用，分别是 </p>
<ul>
<li><p>scroll-snap-type：定义滚动界限的类型，有三个属性值可选， <code>none</code> | <code>mandatory</code> | <code>proximity</code>，初始值为 <code>none</code>，<strong>目前 WebKit 只支持 <code>mandatory</code></strong>。</p>
</li>
<li><p>scroll-snap-points-x：定义滚动容器 X 轴方向的 scroll sanp 点，有两个属性值可选，<code>none</code>| <code>repeat(&lt;length&gt;)</code>，初始值为 <code>none</code></p>
</li>
<li><p>scroll-snap-points-y：定义滚动容器 Y 轴方向的 scroll sanp 点，有两个属性值可选，<code>none</code> | <code>repeat(&lt;length&gt;)</code>，初始值为 <code>none</code></p>
</li>
<li><p>scroll-snap-destination：定义滚动元素在滚动容器的对齐坐标点，属性值为 <code>&lt;position&gt;</code>，初始值为：<code>0px 0px</code></p>
</li>
<li><p>scroll-snap-coordinate：定义滚动元素与滚动容器对齐点重合的坐标点，属性值为 <code>none</code> | <code>&lt;position&gt;</code>，初始值为 <code>none</code></p>
</li>
</ul>
<p>属性 <em>scroll-snap-type</em> 、<em>scroll-snap-points-x</em>、<em>scroll-snap-points-y</em> 和 <em>scroll-snap-destination</em> 应用在容器元素</p>
<p>属性 <em>scroll-snap-coordinate</em> 应用在滚动元素</p>
<p>滚动容器 scroll snap 坐标点 和 滚动元素 scroll snap 坐标点分别如下图红色十字和黄色十字所示：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/scroll-snap_10.png" alt="image"></p>
<p>此时的设置是：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.scroll_container</span>&#123;</div><div class="line">	<span class="attribute">-webkit-scroll-snap-type</span>: mandatory;</div><div class="line">	<span class="attribute">-webkit-scroll-snap-destination</span>: <span class="number">50%</span> <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.scroll_elements</span>&#123;</div><div class="line">	<span class="attribute">-webkit-scroll-snap-coordinate</span>: <span class="number">50%</span> <span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>属性详细使用情况请参阅 <a href="http://www.w3.org/TR/css-snappoints-1/" target="_blank" rel="external">CSS Scroll Snap Points Module Level 1</a></p>
<h3 id="需要注意的"><a href="#需要注意的" class="headerlink" title="需要注意的"></a>需要注意的</h3><ul>
<li><p>该草案还在不断修进改进，WebKit 目前只支持带 -webkit- 前辍的写法</p>
</li>
<li><p>要启用 scroll snap 效果，滚动容器必须具有非 <code>none</code> 值的属性 <code>scroll-snap-type</code> </p>
</li>
<li><p>滚动容器 <code>scroll-snap-points-x</code> 和 <code>scroll-snap-points-y</code> 的属性设置会忽略滚动元素 <code>scroll-snap-coordinate</code> 属性设置</p>
</li>
<li><p>滚动容器 <code>scroll-snap-destination</code> 属性与滚动元素 <code>scroll-snap-coordinate</code> 总是成对出现的</p>
</li>
<li><p>滚动内容发生改变（如滚动容器大小、滚动元素大小、节点的改变等）使得滚动元素的 scroll snap 点不在滚动容器的 scroll snap 点的时候，滚动偏移值会发生改变。</p>
</li>
<li><p>不同尺寸的滚动元素混合在一起发生滚动的时候，在 X 或 Y 轴方向上离滚动容器 scroll snap 点最近的滚动元素 scroll snap 点方向轴将会与滚动容器 scroll snap 点的方向轴重合（存在滚动区域的时候）。</p>
</li>
</ul>
<p>更多关于 scroll-snap 属性 Demo 可查看 <a href="https://www.webkit.org/blog/4017/scroll-snapping-with-css-snap-points/" target="_blank" rel="external">Scroll Snapping with CSS Snap Points</a></p>
<h2 id="Initial-Letter-Support"><a href="#Initial-Letter-Support" class="headerlink" title="Initial Letter Support"></a>Initial Letter Support</h2><p>Safari 9.0 支持 CSS <code>initial-letter</code>(要带 -webkit- 前辍) 属性了，以前我们通过伪元素 <code>::first-letter</code>实现首字下沉的效果，但是局限性比较多：</p>
<ul>
<li><p>首字母的高度需要通过调整字号大小实现，比较难精确到需要设置的高度</p>
</li>
<li><p>段落字号改变的时候，首字母字号并不能自适应改变，因此并不能自适应实现对齐</p>
</li>
</ul>
<p><img src="//img.aotu.io/mihanX/safari-9/initial-letter_2.jpg" alt="image"></p>
<p>CSS <code>initial-letter</code> 属性能很好的解决这些问题，我们先看一下它的属性值： </p>
<ul>
<li><p>normal – 初始值</p>
</li>
<li><p>[&lt;number&gt; &lt;integer&gt;] – 定义首字母的大小和下沉位置</p>
<ul>
<li><p>&lt;number&gt; 首字母的大小，大小值为正数值，字高占据的行数为单位，如 “2” 表示首字母高大小占据段落两行</p>
</li>
<li><p>&lt;integer&gt; 首字母下沉的位置，大小值为不为0的整数，若缺省，则以第一个参数 &lt;number&gt;数值为准</p>
</li>
</ul>
</li>
</ul>
<p><code>initial-letter</code>属性应用在伪元素 <code>::first-letter</code> 或容器第一个行内子元素</p>
<p><a href="http://dev.w3.org/csswg/css-inline/#initial-letter-styling" target="_blank" rel="external">w3文档介绍</a>的 EXAMPLE 截图引用如下：</p>
<blockquote>
<p><img src="//img.aotu.io/mihanX/safari-9/initial-letter.jpg" alt="image"></p>
</blockquote>
<p>实验 <a href="http://missoy.me/mihan/demo/initial-letter.html" target="_blank" rel="external">Demo</a> 如下：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/initial-letter_3.png" alt="image"></p>
<h2 id="Backdrop-Filters"><a href="#Backdrop-Filters" class="headerlink" title="Backdrop Filters"></a>Backdrop Filters</h2><p>CSS背景滤镜属性 <code>backdrop-filter</code> 可以让元素的背景或元素层级以下的元素加上滤镜效果，以下的属性值在 Safari 9.0 得到了全面支持： </p>
<ul>
<li><p><code>blur(&lt;length&gt;)</code>：模糊，原始效果值为 <code>0px</code>，不接受负值</p>
</li>
<li><p><code>brightness([ &lt;number&gt; | &lt;percentage&gt; ])</code>：亮度，原始效果值为 <code>1</code> 或 <code>100%</code>，不接受负值</p>
</li>
<li><p><code>contrast([ &lt;number&gt; | &lt;percentage&gt; ])</code>：对比度，原始效果值为 <code>1</code> 或 <code>100%</code>，不接受负值</p>
</li>
<li><p><code>drop-shadow( &lt;length&gt;{2,3} &lt;color&gt;?)</code>：投影，原始效果值为所有长度值为 <code>0</code>，长度值至少2个，最多3个，<strong>注意：不支持投影扩展值和混合投影</strong></p>
</li>
<li><p><code>grayscale([ &lt;number&gt; | &lt;percentage&gt; ] )</code>：灰度，原始效果值为 <code>0</code>，最大值为 <code>1</code> 或 <code>100%</code>，不接受负值</p>
</li>
<li><p><code>hue-rotate( &lt;angle&gt;)</code>：相位，原始效果值为 <code>0deg</code></p>
</li>
<li><p><code>invert( [ &lt;number&gt; | &lt;percentage&gt; ])</code>：反相，原始效果值为 <code>0</code>，最大值为 <code>1</code> 或 <code>100%</code>，不接受负值</p>
</li>
<li><p><code>opacity([ &lt;number&gt; | &lt;percentage&gt; ] )</code>：透明度，原始效果值为 <code>1</code>，最大值为 <code>1</code> 或 <code>100%</code>，不接受负值</p>
</li>
<li><p><code>saturate([ &lt;number&gt; | &lt;percentage&gt; ])</code>：饱和度，原始效果值为 <code>1</code>，不接受负值</p>
</li>
<li><p><code>sepia([ &lt;number&gt; | &lt;percentage&gt; ])</code>：乌贼墨，原始效果值为 <code>0</code>，最大值为 <code>1</code> 或 <code>100%</code>，不接受负值 </p>
</li>
</ul>
<p>滤镜属性 <code>filter</code> 同样具有以上的属性值，与背景滤镜<code>backdrop-filter</code> 不同的是，<code>filter</code> 作用于元素本身（文本、背景等）以其子元素，而 <code>backdrop-filter</code> 只作用于元素本身的背景（文本及其子元素不受影响）以及其层级下面的其它元素，具体的测试参考下面的 <a href="http://missoy.me/mihan/demo/filter.html" target="_blank" rel="external">Demo</a></p>
<p><img src="//img.aotu.io/mihanX/safari-9/filter2.jpg" alt="image"> </p>
<p><img src="//img.aotu.io/mihanX/safari-9/filter.jpg" alt="image"></p>
<p>更多关于 <code>backdrop-filter</code></p>
<p>WebKit.org：<a href="https://webkit.org/blog/3632/introducing-backdrop-filters/" target="_blank" rel="external">Introducing Backdrop Filters</a></p>
<p>w3c文档：<a href="https://drafts.fxtf.org/filters/#typedef-filter-function-list" target="_blank" rel="external">typedef-filter-function-list</a></p>
<h2 id="CSS3-Feature-Queries"><a href="#CSS3-Feature-Queries" class="headerlink" title="CSS3 Feature Queries"></a>CSS3 Feature Queries</h2><p>Safari 9.0 支持了 CSS3 功能查询 <code>@supports</code>，可以对 CSS 属性(包括但不限于带前辍的属性，如 -webkit-,-moz- 等)进行检测</p>
<h3 id="单个条件查询"><a href="#单个条件查询" class="headerlink" title="单个条件查询"></a>单个条件查询</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 检测是否支持 display:flexbox，如果支持侧执行中括号的内容 */</span></div><div class="line"><span class="meta">@supports</span> ( <span class="string">display:</span> flexbox ) &#123;</div><div class="line">  .selector&#123;</div><div class="line">  	...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多个单件查询"><a href="#多个单件查询" class="headerlink" title="多个单件查询"></a>多个单件查询</h3><p>可以使用逻辑关键字 <code>not</code>、<code>and</code>、<code>or</code> 进行多个单件查询</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@supports ( <span class="keyword">box-shadow: </span><span class="number">2</span>px <span class="number">2</span>px <span class="number">2</span>px <span class="keyword">black </span>) <span class="keyword">or</span></div><div class="line">          ( -moz-<span class="keyword">box-shadow: </span><span class="number">2</span>px <span class="number">2</span>px <span class="number">2</span>px <span class="keyword">black </span>) <span class="keyword">or</span></div><div class="line">          ( -webkit-<span class="keyword">box-shadow: </span><span class="number">2</span>px <span class="number">2</span>px <span class="number">2</span>px <span class="keyword">black </span>) <span class="keyword">or</span></div><div class="line">          ( -o-<span class="keyword">box-shadow: </span><span class="number">2</span>px <span class="number">2</span>px <span class="number">2</span>px <span class="keyword">black </span>) &#123;</div><div class="line">  .selector&#123;</div><div class="line">  	...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><ul>
<li><p><code>@supports</code> 后面总是跟着一个空格符和一个括号，<code>逻辑关键字</code>前后总有一个空格符。因此，写查询条件的时候</p>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 错误的写法 */</span></div><div class="line"><span class="meta">@supports</span> <span class="string">display:</span> flexbox &#123;</div><div class="line"> 	<span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@supports</span>(<span class="string">display:</span> flexbox)&#123;</div><div class="line"> 	<span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@supports</span> (<span class="string">display:</span> flexbox)and(-webkit-scroll-snap-<span class="string">type:</span>mandatory) &#123;</div><div class="line"> 	<span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 正确的写法 */</span></div><div class="line"><span class="meta">@supports</span> (<span class="string">display:</span> flexbox) &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"><span class="meta">@supports</span> (<span class="string">display:</span> flexbox) and (-webkit-scroll-snap-<span class="string">type:</span>mandatory) &#123;</div><div class="line"> 	<span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>多个单件查询，当有多个逻辑关键字混合使用的时候，查询语句最外层最多只有一个逻辑关键字：</p>
  <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 错误的写法 */</span></div><div class="line">@supports (A) <span class="keyword">or</span> (B) <span class="keyword">and</span> (C) &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 正确的写法 */</span></div><div class="line">@supports (A) <span class="keyword">or</span> ((B) <span class="keyword">and</span> (C)) &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">&#125;</div><div class="line">@supports ((A) <span class="keyword">or</span> (B)) <span class="keyword">and</span> (C) &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>@supports</code> 更详细说明可参考：<a href="http://www.w3.org/TR/css3-conditional/#at-supports" target="_blank" rel="external">at-supports</a>。</p>
<p><a href="http://missoy.me/mihan/demo/@supports.html" target="_blank" rel="external">Demo测试</a></p>
<h2 id="CSS4-Selectors"><a href="#CSS4-Selectors" class="headerlink" title="CSS4 Selectors"></a>CSS4 Selectors</h2><p>以下 CSS4 选择器在 Safari 9.0 完全支持了：</p>
<ul>
<li>属性选择器忽略大小写标识（Case-insensitive attribute selectors）</li>
<li><code>:any-link</code></li>
<li><code>:lang</code></li>
<li><code>:matches</code></li>
<li><code>:not</code></li>
<li><code>:nth-child</code></li>
<li><code>:placeholder-shown</code></li>
</ul>
<h3 id="Case-insensitive"><a href="#Case-insensitive" class="headerlink" title="Case-insensitive"></a>Case-insensitive</h3><p>一般情况下，选择符中属性名和值的大小写敏感性取决于文档语言的敏感性，为了使其匹配忽略大小写敏感性以及其文档语言的敏感性，可以在属性选择器的关闭符<code>]</code>前加上标识符 <code>i</code>，这样不管在什么文档，都能忽略大小写敏感性，如以下例子：</p>
<p>结构：</p>
<pre><code>&lt;div class=&quot;box&quot; title=&quot;BOX&quot;&gt;Box&lt;/div&gt;
</code></pre><p>样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* .box初始背景色为白色 */</span></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">10px</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">word-break</span>: break-all;</div><div class="line">	<span class="attribute">word-wrap</span>: break-word;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 属性值大小写敏感，完全匹配，.box背景变黑色 */</span></div><div class="line"><span class="selector-class">.box</span><span class="selector-attr">[title="BOX"]</span>&#123;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 用了 CSS4 的 Case-insensitive 属性选择器，若浏览器支持，大小写不再敏感，能完成匹配，.box背景生效变为灰色 */</span></div><div class="line"><span class="selector-class">.box</span><span class="selector-attr">[title="box" i]</span>&#123;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于 Case-insensitive 更详细介绍：<a href="http://www.w3.org/TR/selectors4/#attribute-case" target="_blank" rel="external">w3介绍文档 - Case-insensitive</a> </p>
<p>测试 <a href="http://missoy.me/mihan/demo/css4_selector.html" target="_blank" rel="external">Demo</a></p>
<p><img src="//img.aotu.io/mihanX/safari-9/css4_selector.jpg" alt="image"></p>
<h3 id="伪类-any-link"><a href="#伪类-any-link" class="headerlink" title="伪类 :any-link"></a>伪类 :any-link</h3><p>w3文档介绍大概的描述是这样的：</p>
<blockquote>
<p>如果元素有定义伪类 <code>:link</code>或 <code>:visited</code> ，<code>:any-link</code>将会对其进行匹配。</p>
</blockquote>
<p>于是写了 Demo 验证了一下</p>
<p>HTML:</p>
<pre><code>&lt;a href=&quot;http://aotu.io/&quot; title=&quot;&quot; class=&quot;lk&quot;&gt;凹凸Team链接&lt;/a&gt;
</code></pre><p>CSS:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.lk</span>&#123;</div><div class="line">	<span class="attribute">display</span>: block;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">30px</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 黑色背景 */</span></div><div class="line"><span class="selector-class">.lk</span><span class="selector-pseudo">:link</span>&#123;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 黄色背景 */</span></div><div class="line"><span class="selector-class">.lk</span><span class="selector-pseudo">:visited</span>&#123;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ff0</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 红色背景 */</span></div><div class="line"><span class="selector-class">.lk</span><span class="selector-pseudo">:any-link</span>&#123;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ff3737</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 白色背景 */</span></div><div class="line"><span class="selector-class">.lk</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 灰色背景 */</span></div><div class="line"><span class="selector-class">.lk</span><span class="selector-pseudo">:active</span>&#123;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果发现：</p>
<ul>
<li><p><code>:any-link</code> Safari 9.0 生效了，Chrome、Firefox 并没有生效。</p>
</li>
<li><p>伪类 <code>:any-link</code> 的确会对已定义有的伪类<code>:link</code> 和 <code>:visited</code>匹配，并重新覆盖元素相同的CSS属性， 而 <code>:hover</code> 和 <code>:active</code> 并没有匹配成功，<code>:hover</code> 和 <code>:active</code> 依然生效</p>
</li>
<li><p>CSS代码解析的时候渲染 <code>:any-link</code> 前就渲染了 <code>:link</code> 和 <code>:visited</code>，因此匹配成功了，而 <code>:hover</code> 和 <code>:active</code> 出现在 <code>:any-link</code> 后面，并不能匹配成功</p>
</li>
</ul>
<p>若加上 <code>-webkit-</code> 前辍，Chrome 亦能生效。</p>
<p>如果将 <code>:any-link</code> 出现位置改变，<code>:any-link</code> 始终匹配出现在他之前的 Link 相关伪类，有兴趣的同学可以试一下。</p>
<p>小小总结了一下：</p>
<ul>
<li><p><code>:any-link</code> Safari 9.0 不需要加前辍，Chrome、Firefox 浏览器需要加 <code>-webkit-</code>、<code>-moz-</code> 前辍。</p>
</li>
<li><p><code>:any-link</code> 匹配有效性和书写顺序有关，<code>:any-link</code> 只对出现在其之前的 Link 伪类匹配生效。</p>
</li>
</ul>
<h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><p><strong>写 a 标签样式的时候，在 <code>:hover</code> 和 <code>:active</code> 前应该加上 <code>:any-link</code> 伪类样式，覆盖系统默认的 <code>:link</code> 和 <code>:visited</code>伪类样式。如下所示：</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">a&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span>:-webkit-any-link&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span>:-moz-any-link&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span>:any-link&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span>:hover&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span>:active&#123;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于 <code>:any-link</code> 更详细介绍： <a href="http://www.w3.org/TR/selectors4/#the-any-link-pseudo" target="_blank" rel="external">w3介绍文档 - :any-link</a> </p>
<p>实验 <a href="http://missoy.me/mihan/demo/css4_selector.html" target="_blank" rel="external">Demo</a></p>
<p><img src="//img.aotu.io/mihanX/safari-9/css4_selector.jpg" alt="image"></p>
<h3 id="伪类-matches"><a href="#伪类-matches" class="headerlink" title="伪类 :matches()"></a>伪类 :matches()</h3><p><code>:matches()</code> 是一种类似函数的伪类，可以将不同的选择器以数组形式混合形成一个选择器组，我们可以将之看作是CSS的一种语法糖，请看下面的例子：</p>
<pre><code>:matches(section, article, aside, nav) h1 {
  color: #BADA55;
}

/* 相当于下面的代码 */
section h1,
article h1, 
aside h1,
nav h1 {
  color: #BADA55;
}
</code></pre><p>更方便书写一些复杂的选择器，如：</p>
<pre><code>:matches(section, article, aside, nav) :matches(h1, h2, h3, h4, h5, h6) {
    color: #BADA55;
}

/* 相当于下面的代码 */
section h1, section h2, section h3, section h4, section h5, section h6, 
article h1, article h2, article h3, article h4, article h5, article h6, 
aside h1, aside h2, aside h3, aside h4, aside h5, aside h6, 
nav h1, nav h2, nav h3, nav h4, nav h5, nav h6 {
    color: #BADA55;
}
</code></pre><p>减少重复的书写：</p>
<pre><code>.links:matches(:hover, :focus, :active) {
    color: #BADA55;
}

/* 相当于下面的代码 */
.links:hover, .links:focus, .links:active {
    color: #BADA55;
}    
</code></pre><p><strong>注意：<code>:matches()</code>不能嵌套而且不能与 <code>:not()</code> 一起使用</strong>，以下的写法都是不允许的：</p>
<pre><code>/* Doesn&apos;t work */
:matches(:not(...))

/* Doesn&apos;t work */
:not(:matches(...))

/* Doesn&apos;t work */
:matches(:matches(...))
</code></pre><p>更多关于 <code>:matches()</code> 可参考 </p>
<p>CSS-tricks ：<a href="https://css-tricks.com/almanac/selectors/m/matches/" target="_blank" rel="external">:matches()</a></p>
<p>W3文档：<a href="http://www.w3.org/TR/selectors4/#matches" target="_blank" rel="external">matches</a></p>
<h3 id="伪类-placeholder-shown"><a href="#伪类-placeholder-shown" class="headerlink" title="伪类 :placeholder-shown"></a>伪类 :placeholder-shown</h3><p>如果元素 E 设置了属性 <code>placeholder</code>，属性值不为空并出现在页面的时候，那么<code>E:placeholder-shown</code> 就能匹配到该元素，当 <code>placeholder</code> 文本在页面消失的时候，匹配到的相应样式也会消失，如以下 <a href="http://missoy.me/mihan/demo/css4_selector.html" target="_blank" rel="external">Demo</a> 所示:</p>
<p><img src="//img.aotu.io/mihanX/safari-9/css4_selector.jpg" alt="image"></p>
<h3 id="伪类-nth-child，-not，-lang"><a href="#伪类-nth-child，-not，-lang" class="headerlink" title="伪类 :nth-child，:not，:lang"></a>伪类 :nth-child，:not，:lang</h3><p>详细用法有兴趣的同学可以到 w3文档 查阅：</p>
<p><a href="http://www.w3.org/TR/selectors4/#the-lang-pseudo" target="_blank" rel="external">:lang - #the-lang-pseudo</a></p>
<p><a href="http://www.w3.org/TR/selectors4/#negation" target="_blank" rel="external">:not - #negation</a> </p>
<p><a href="http://www.w3.org/TR/selectors4/#the-nth-child-pseudo" target="_blank" rel="external">:nth-child - #the-nth-child-pseudo</a></p>
<h2 id="Unprefixed-CSS-Properties"><a href="#Unprefixed-CSS-Properties" class="headerlink" title="Unprefixed CSS Properties"></a>Unprefixed CSS Properties</h2><p>以下CSS属性在 Safari 9.0 已完全支持，不用再带 <code>-webkit-</code> 前辍：</p>
<ul>
<li>transition</li>
<li>transition-delay</li>
<li>transition-duration</li>
<li>transition-property</li>
<li>transition-timing-function</li>
<li>animation</li>
<li>cursor: zoom-in</li>
<li>cursor: zoom-out</li>
<li>perspective</li>
<li>perspective-origin</li>
<li>transform</li>
<li>transform-origin</li>
<li>transform-style</li>
<li>@keyframes</li>
<li>animation-name</li>
<li>animation-duration</li>
<li>animation-timing-function</li>
<li>animation-iteration-count</li>
<li>animation-direction</li>
<li>animation-play-state</li>
<li>animation-delay</li>
<li>animation-fill-mode</li>
<li>order</li>
<li>align-content</li>
<li>align-items</li>
<li>align-self</li>
<li>justify-content</li>
<li>flex</li>
<li>flex-basis</li>
<li>flex-direction</li>
<li>flex-flow</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-wrap</li>
<li>break-after</li>
<li>break-before</li>
<li>break-inside</li>
<li>columns</li>
<li>column-count</li>
<li>column-fill</li>
<li>column-gap</li>
<li>column-rule</li>
<li>column-rule-color</li>
<li>column-rule-style</li>
<li>column-rule-width</li>
<li>column-span</li>
<li>column-width</li>
<li>alt</li>
</ul>
<h2 id="Responsive-Design-Mode"><a href="#Responsive-Design-Mode" class="headerlink" title="Responsive Design Mode"></a>Responsive Design Mode</h2><p>Safari 9.0 推出了响应式设计模式，command + option + R 或在“开发 – 进入响应式设计模式”可以进入，界面如下图：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/rdm.png" alt="image"></p>
<p>这里有：</p>
<ul>
<li>现主流 iPhone/iPad 机型尺寸</li>
<li>iOS8.1系统模拟（iphone、ipad、ipod touch）</li>
<li>苹果系主流分辨率</li>
<li>Safari 9.0.1 Mac</li>
<li>Chrome – Mac/Windows</li>
<li>FireFox – Mac/Windows</li>
<li>IE7 - IE10 –Windows（ 好样的！）</li>
<li>页面精度</li>
</ul>
<p>点击选中的机型图标还可以以不同的方式展示，如 iPhone 的横屏，iPad 的分屏等</p>
<p>响应式设计模式 Chrome 浏览器早早就有，但单从苹果产品的调试去看，个人更喜欢 Safari 的响应式设计模式，无论从外观、体验以及专注度，都要优于 Chrome，Safari一直在进步，从不怀疑 Apple Developer 的级数。</p>
<p><img src="//img.aotu.io/mihanX/safari-9/chrome.png" alt="image"></p>
<h2 id="Web-Inspector-Redesign"><a href="#Web-Inspector-Redesign" class="headerlink" title="Web Inspector Redesign"></a>Web Inspector Redesign</h2><p>之前所了解到的 Web Inspector 版本：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/web_inspector_1.png" alt="image"></p>
<p>（从苹果开发者文档介绍了解到的，没使用过，目测是 Safari 4.0 or 之前的）</p>
<p><img src="//img.aotu.io/mihanX/safari-9/web_inspector_2.png" alt="image"></p>
<p>（直接 google 图片了解到的，没使用过，目测是 Safari 6.0 重新设计那款）</p>
<p>Safari 9.0 的 Web 检查器经过了重新设计，更直观易用，用户体验更棒。</p>
<p>开发任务 Tab 切换更简易快捷，新的渲染时间线框架更容易更细致检测到页面渲染的情况</p>
<p><img src="//img.aotu.io/mihanX/safari-9/web_inspector_3.png" alt="image"></p>
<p>元素查看，样式修改调试方便，直接点光标直接处于编辑状态了，不明白 Chrome 的为什么点了默认全选，编辑态还有一个输入框的形态，Apple 的极简设计理念无处不在，处处体现着苹果 Design 的基因</p>
<p><img src="//img.aotu.io/mihanX/safari-9/web_inspector_4.png" alt="image"></p>
<p>断点调试器也哗啦啦地好看易用：</p>
<p><img src="//img.aotu.io/mihanX/safari-9/web_inspector_5.png" alt="image"></p>
<p>更多的内容有兴趣的同学去体验一下吧，这里就不一一烧图了。</p>
<div style="color:#fff;">如果说 Chrome Web Inspector 是一名角斗士，那么 Safari Web Inspector 就是一名会写诗的角斗士</div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;苹果的 OS 在不断发展，Safari 亦越变强大性感，在最新的 9.0 版本当中，Safari 增加了不少新的特性，这里主要介绍一下和 Web 前端密切相关的。&lt;/p&gt;
    
    </summary>
    
      <category term="体验报告" scheme="https://aotu.io/cates/%E4%BD%93%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="Safari 9.0" scheme="https://aotu.io/tags/Safari-9-0/"/>
    
      <category term="iOS" scheme="https://aotu.io/tags/iOS/"/>
    
      <category term="OS X" scheme="https://aotu.io/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>【译】使用Node.js创建命令行脚本工具</title>
    <link href="https://aotu.io/notes/2015/12/23/building-command-line-tools-with-node-js/"/>
    <id>https://aotu.io/notes/2015/12/23/building-command-line-tools-with-node-js/</id>
    <published>2015-12-23T05:19:07.000Z</published>
    <updated>2016-10-20T07:06:32.408Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文译自 <a href="https://developer.atlassian.com/blog/2015/11/scripting-with-node/" target="_blank" rel="external">Building command line tools with Node.js</a>，介绍了如何通过Node.js来创建命令行脚本工具，介绍了很多实用的<code>npm</code>包等。翻译水平有限，敬请指正~</p>
</blockquote>
<a id="more"></a>
<p>在我的职业生涯中已经写过了上百个 <code>Bash</code> 脚本，但我的 <code>Bash</code> 依然写得很糟糕，每一次我都不得不去查一些简单逻辑结构的语法。如果我想通过 <code>curl</code> 或者 <code>sed</code> 来做一些事情，我也必须去查找 <code>man</code> 文档。</p>
<p>然后，有一天，我看到六个字母的语言[译者注：这里指NodeJS] — 一门在过去十年里我几乎 <em>每一天</em> 都在使用的语言，这才让我幡然醒悟。结果是你可以使用 <code>JavaScript</code> 来写脚本！</p>
<p>在这篇教程中，我将会在使用 <code>Node.js</code> 和 <code>npm</code> 创建一个脚本或者命令行工具方面给你一些我的想法。特别地我们将会包括以下内容：</p>
<ul>
<li>使用 <code>npm</code> 封装一个新的 <code>shell</code> 命令</li>
<li>解析命令行参数</li>
<li>从输入流中读取文本和密码</li>
<li>发送 snippet</li>
<li>输出错误与代码</li>
<li>终端输出彩色化</li>
<li>渲染 <code>ACSII</code> 进度条</li>
</ul>
<p>我热衷于已经可以工作的例子，所以为了解释这些概念我们将会创建一个新的 <code>shell</code> 命令，它的名字为 <code>snippet</code> ，可以在我们本地磁盘的文件创建一个 <a href="https://confluence.atlassian.com/bitbucket/snippets-719095082.html" target="_blank" rel="external">Bitbucket Snippet</a>。</p>
<p>这是我们的最终目标成果：</p>
<p><img src="//img.aotu.io/cnt1992/snippet-usage.gif" alt="snippet用法"></p>
<h2 id="封装-shell-命令"><a href="#封装-shell-命令" class="headerlink" title="封装 shell 命令"></a>封装 shell 命令</h2><p><code>npm</code> 不单单用来管理你的应用和网页的依赖，你还能用它来封装和分发新的 <code>shell</code> 命令。</p>
<p>第一步就是通过 <code>npm init</code> [译者注：可以通过 <code>npm init -f</code>直接快速生成一个<code>package.json</code>]来创建一个新的 <code>npm</code> 项目：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ npm init</div><div class="line">name: bitbucket-snippet</div><div class="line">version: 0.0.1</div><div class="line">description: A <span class="built_in">command</span>-line tool <span class="keyword">for</span> creating Bitbucket snippets.</div><div class="line">entry point: index.js</div><div class="line">license: Apache-2.0</div></pre></td></tr></table></figure>
<p>这会在我们的项目中创建一个新的 <code>package.json</code> 文件，那时我们将需要创建一个 <code>JS</code> 文件包含我们的脚本。让我们根据Node.js的传统命名为 <code>index.js</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello, world!'</span>);</div></pre></td></tr></table></figure>
<p>注意我们必须加一些 <code>东西</code> 来告诉我们的 <code>shell</code> 如何处理我们的脚本。</p>
<p>接下来我们需要在我们 <code>package.json</code> 里面的最顶级增加 <code>bin</code> 部分。设置的属性（在我们的例子中是 <code>snippet</code>）将会变成用户在他们的终端处理脚本使用的命令，属性值就是相对于 <code>package.json</code> 的脚本位置。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">  "author": "Tim Pettersen",</div><div class="line">  "license": "Apache-2.0",</div><div class="line">  "bin": &#123;</div><div class="line">    "snippet": "./index.js"</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>现在我们已经有一个可以工作的 <code>shell</code> 命令了！让我们安装它并且测试结果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install -g</div><div class="line">$ snippet</div><div class="line">Hello, world!</div></pre></td></tr></table></figure>
<p>真整洁！ <code>npm install -g</code> 实际上是将我们脚本链接到 <code>path</code> 变量的位置，所以我们能够在任何地方使用它。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">which</span> snippet</div><div class="line">/usr/<span class="built_in">local</span>/bin/snippet</div><div class="line">$ readlink /usr/<span class="built_in">local</span>/bin/snippet</div><div class="line">../lib/node_modules/bitbucket-snippet/index.js</div></pre></td></tr></table></figure>
<p>在开发环境中我们实际上使用 <code>npm link</code> 便利地将我们的 <code>index.js</code> 软链接到 <code>path</code> 变量的位置。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm link</div><div class="line">/usr/<span class="built_in">local</span>/bin/snippet -&gt; /usr/<span class="built_in">local</span>/lib/node_modules/bitbucket-snippet/index.js</div><div class="line">/usr/<span class="built_in">local</span>/lib/node_modules/bitbucket-snippet -&gt; /Users/kannonboy/src/bitbucket-snippet</div></pre></td></tr></table></figure>
<p>当我们开发完成的时候，我们可以通过 <code>npm publish</code> 将我们的脚本发布到公共 <code>npm</code> 仓库，然后任何人都可以下载安装到他们的机器上：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g bitbucket-snippet</div></pre></td></tr></table></figure>
<p>但是让我们先让我们的脚本能够工作先！</p>
<h2 id="解析命令行参数"><a href="#解析命令行参数" class="headerlink" title="解析命令行参数"></a>解析命令行参数</h2><p>我们的脚本现在需要一些用户的输入：他们的Bitbucket名字，他们的密码，还有作为 <code>snippet</code>上传的文件位置。典型的方法就是通过命令的参数传输这些值。</p>
<p>你可以通过 <code>process.argv</code> 拿到序列化的参数，但有很多 <code>npm</code> 包在解析参数还有选项方面提供了很好的抽象给你。我最喜欢的就是 <a href="https://www.npmjs.com/package/commander" target="_blank" rel="external">commander</a>，来自 <code>Ruby gem</code>同一个名字的灵感。</p>
<p>一个简单的命令安装它：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save commander</div></pre></td></tr></table></figure>
<p>上面命令将会把最新版的 <code>commander</code> 加入 <code>package.json</code>。我们这时可以通过简单声明式的方式定义我们的选项：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node</span></div><div class="line">- <span class="built_in">console</span>.log(<span class="string">'Hello, world!'</span>);</div><div class="line">+ <span class="keyword">var</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</div><div class="line">+</div><div class="line">+ program</div><div class="line">+  .arguments(<span class="string">'&lt;file&gt;'</span>)</div><div class="line">+  .option(<span class="string">'-u, --username &lt;username&gt;'</span>, <span class="string">'The user to authenticate as'</span>)</div><div class="line">+  .option(<span class="string">'-p, --password &lt;password&gt;'</span>, <span class="string">'The user\'s password'</span>)</div><div class="line">+  .action(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</div><div class="line">+    <span class="built_in">console</span>.log(<span class="string">'user: %s pass: %s file: %s'</span>,</div><div class="line">+        program.username, program.password, file);</div><div class="line">+  &#125;)</div><div class="line">+  .parse(process.argv);</div></pre></td></tr></table></figure>
<p>上面代码可读性很强。事实上，这是一个保守的说法。相对于那些我们需要通过 <code>switch</code> 来控制的像 <code>Bash</code>，这是一个艺术品。至少，我写的 <code>Bash</code> 是这样子的。</p>
<p>让我们快速测试：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ snippet -u kannonboy -p correcthorsebatterystaple file</div><div class="line">user: kannonboy pass: correcthorsebatterystaple file: file</div></pre></td></tr></table></figure>
<p>很棒！<code>commander</code> 还提供一些简单的帮助输出给我们，基于我们上面提供的配置。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ snippet --help</div><div class="line"></div><div class="line">  Usage: snippet [options] &lt;file&gt;</div><div class="line"></div><div class="line">  Options:</div><div class="line"></div><div class="line">    -h, --help                 output usage information</div><div class="line">    -u, --username &lt;username&gt;  The user to authenticate as</div><div class="line">    -p, --password &lt;password&gt;  The user<span class="string">'s password</span></div></pre></td></tr></table></figure>
<p>所以我们已经拿到了参数了。但是，让用户在空白的地方输入他们的密码作为选项有一点难用。让我们解决它。</p>
<h2 id="从输入流中读取文本和密码"><a href="#从输入流中读取文本和密码" class="headerlink" title="从输入流中读取文本和密码"></a>从输入流中读取文本和密码</h2><p>另一种通用的取回用户的内容的脚本方式是从标准输入流中读。这可以通过 <code>process.stdin</code> 实现，但是再说一次，已经有很多 <code>npm</code> 包提供了非常好的 API 给我们使用。很多都是基于 <code>callback</code> 或者 <code>promises</code>，但是我们将使用 <a href="https://www.npmjs.com/package/co-prompt" target="_blank" rel="external">co-prompt</a> （基于 <a href="https://www.npmjs.com/package/co" target="_blank" rel="external">co</a>），因此我们可以利用 ES6 的 <code>yield</code> 关键词。这让我们写异步的代码而不需要 <code>callbacks</code> ，看起来更加脚本化。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save co co-prompt</div></pre></td></tr></table></figure>
<p>为了组合使用 <code>yield</code> 和 <code>co-prompt</code> ，我们需要通过一些 <code>co</code> 的魔法来包裹我们的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">+ <span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</div><div class="line">+ <span class="keyword">var</span> prompt = <span class="built_in">require</span>(<span class="string">'co-prompt'</span>);</div><div class="line">  <span class="keyword">var</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</div><div class="line">...</div><div class="line">  .option(<span class="string">'-u, --username &lt;username&gt;'</span>, <span class="string">'The user to authenticate as'</span>)</div><div class="line">  .option(<span class="string">'-p, --password &lt;password&gt;'</span>, <span class="string">'The user\'s password'</span>)</div><div class="line">  .action(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</div><div class="line">+    co(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</div><div class="line">+      <span class="keyword">var</span> username = <span class="keyword">yield</span> prompt(<span class="string">'username: '</span>);</div><div class="line">+      <span class="keyword">var</span> password = <span class="keyword">yield</span> prompt.password(<span class="string">'password: '</span>);</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'user: %s pass: %s file: %s'</span>,</div><div class="line">-          program.username, program.password, file);</div><div class="line">+          username, password, file);</div><div class="line">+    &#125;);</div><div class="line">  &#125;)</div><div class="line">...</div></pre></td></tr></table></figure>
<p>现在快速测试一下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ snippet my_awesome_file</div><div class="line">username: kannonboy</div><div class="line">password: *************************</div><div class="line">user: kannonboy pass: correcthorsebatterystaple file: my_awesome_file</div></pre></td></tr></table></figure>
<p>很棒！唯一的窍门就是ES6的 <code>yield</code>，所以这只能在用户运行在 node 4.0.0+上面。但是我们可以通过加入 <code>--harmony</code> 标志让 0.11.2 版本的也可以正常使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- #!<span class="regexp">/usr/</span>bin/env node</div><div class="line">+ #!<span class="regexp">/usr/</span>bin/env node --harmony</div><div class="line">  <span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</div><div class="line">  <span class="keyword">var</span> prompt = <span class="built_in">require</span>(<span class="string">'co-prompt'</span>);</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="发送-snippet"><a href="#发送-snippet" class="headerlink" title="发送 snippet"></a>发送 snippet</h2><p>Bitbucket拥有一套非常漂亮的 <a href="https://confluence.atlassian.com/display/BITBUCKET/Snippets+endpoint" target="_blank" rel="external">API</a>。在这个例子中我将关注传输单一的文件，但我们可以发送整个目录，改变我们的入口配置，加一些代码等，如果我们需要的话。我最喜欢的node HTTP 客户端是 <a href="https://www.npmjs.com/package/superagent" target="_blank" rel="external">superagent</a> ，所以让我们把它加入项目中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save superagent</div></pre></td></tr></table></figure>
<p>现在就让我们将从用户收集到的数据发送给服务器。 <code>superagent</code> 其中一个优点就是在它在处理文件上拥有非常好的API。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">+ <span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'superagent'</span>);</div><div class="line">  <span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</div><div class="line">  <span class="keyword">var</span> prompt = <span class="built_in">require</span>(<span class="string">'co-prompt'</span>);</div><div class="line">...</div><div class="line">  .action(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</div><div class="line">    co(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> username = <span class="keyword">yield</span> prompt(<span class="string">'username: '</span>);</div><div class="line">      <span class="keyword">var</span> password = <span class="keyword">yield</span> prompt.password(<span class="string">'password: '</span>);</div><div class="line">-     <span class="built_in">console</span>.log(<span class="string">'user: %s pass: %s file: %s'</span>,</div><div class="line">-         file, username, password);</div><div class="line">+     request</div><div class="line">+       .post(<span class="string">'https://api.bitbucket.org/2.0/snippets/'</span>)</div><div class="line">+       .auth(username, password)</div><div class="line">+       .attach(<span class="string">'file'</span>, file)</div><div class="line">+       .set(<span class="string">'Accept'</span>, <span class="string">'application/json'</span>)</div><div class="line">+       .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</div><div class="line">+         <span class="keyword">var</span> link = res.body.links.html.href;</div><div class="line">+         <span class="built_in">console</span>.log(<span class="string">'Snippet created: %s'</span>, link);</div><div class="line">+       &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">...</div></pre></td></tr></table></figure>
<p>现在让我们测试一下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ snippet my_awesome_file</div><div class="line">username: kannonboy</div><div class="line">password: *************************</div><div class="line">Snippet created: https://bitbucket.org/snippets/kannonboy/yq7r8</div></pre></td></tr></table></figure>
<p>我们的 snippet 已经发送了！\o/</p>
<h2 id="输出错误与代码"><a href="#输出错误与代码" class="headerlink" title="输出错误与代码"></a>输出错误与代码</h2><p>到现在为止我们已经处理了一切正确的情况，但是如果我们上传失败或者用户输入错误的信息呢？<code>UNIX-y</code>的方法来处理错误就是将标准的错误信息输出并且以非0的状态码结束程序，所以我们也这样子做。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">  request</div><div class="line">    .post(<span class="string">'https://api.bitbucket.org/2.0/snippets/'</span>)</div><div class="line">    .auth(username, password)</div><div class="line">    .attach(<span class="string">'file'</span>, filename, file)</div><div class="line">    .set(<span class="string">'Accept'</span>, <span class="string">'application/json'</span>)</div><div class="line">    .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</div><div class="line">+     <span class="keyword">if</span> (!err &amp;&amp; res.ok) &#123;</div><div class="line">        <span class="keyword">var</span> link = res.body.links.html.href;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Snippet created: %s'</span>, link);</div><div class="line">+       process.exit(<span class="number">0</span>);</div><div class="line">+     &#125;</div><div class="line">+</div><div class="line">+     <span class="keyword">var</span> errorMessage;</div><div class="line">+     <span class="keyword">if</span> (res &amp;&amp; res.status === <span class="number">401</span>) &#123;</div><div class="line">+       errorMessage = <span class="string">"Authentication failed! Bad username/password?"</span>;</div><div class="line">+     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err) &#123;</div><div class="line">+       errorMessage = err;</div><div class="line">+     &#125; <span class="keyword">else</span> &#123;</div><div class="line">+       errorMessage = res.text;</div><div class="line">+     &#125;</div><div class="line">+     <span class="built_in">console</span>.error(errorMessage);</div><div class="line">+     process.exit(<span class="number">1</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>这样子就可以处理错误了。</p>
<h2 id="终端输出彩色化"><a href="#终端输出彩色化" class="headerlink" title="终端输出彩色化"></a>终端输出彩色化</h2><p>如果你的用户是在使用体面的 <code>shell</code> ，这里也有一些包提供给你使用让你方便彩色化的输出。我喜欢 <a href="https://www.npmjs.com/package/chalk" target="_blank" rel="external">chalk</a> ，因为它拥有干净可链式的API以及自动检测用户的 <code>shell</code> 支持的颜色。这是有益的提示如果你想将你的脚本分享给 windows 用户的话。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save chalk</div></pre></td></tr></table></figure>
<p><code>chalk</code> 的命令能够彩色输出同时还能方便跟常规字符串串联起来。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">+ <span class="keyword">var</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</div><div class="line">  <span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'superagent'</span>);</div><div class="line">  <span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</div><div class="line">...</div><div class="line">   .set(<span class="string">'Accept'</span>, <span class="string">'application/json'</span>)</div><div class="line">   .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</div><div class="line">     <span class="keyword">if</span> (!err &amp;&amp; res.ok) &#123;</div><div class="line">       <span class="keyword">var</span> link = res.body.links.html.href;</div><div class="line">-      <span class="built_in">console</span>.log(<span class="string">'Snippet created: %s'</span>, link);</div><div class="line">+      <span class="built_in">console</span>.log(chalk.bold.cyan(<span class="string">'Snippet created: '</span>) + link);</div><div class="line">       process.exit(<span class="number">0</span>);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">var</span> errorMessage;</div><div class="line">     <span class="keyword">if</span> (res &amp;&amp; res.status === <span class="number">401</span>) &#123;</div><div class="line">       errorMessage = <span class="string">"Authentication failed! Bad username/password?"</span>;</div><div class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err) &#123;</div><div class="line">       errorMessage = err;</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">       errorMessage = res.text;</div><div class="line">     &#125;</div><div class="line">-    <span class="built_in">console</span>.error(errorMessage);</div><div class="line">+    <span class="built_in">console</span>.error(chalk.red(errorMessage));</div><div class="line">     process.exit(<span class="number">1</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>让我们旋转一下（这里我使用了截图，以便你能看到极好的颜色）。</p>
<p><img src="//img.aotu.io/cnt1992/terminal-colors.png" alt="彩色化输出"></p>
<h2 id="渲染-ACSII-进度条"><a href="#渲染-ACSII-进度条" class="headerlink" title="渲染 ACSII 进度条"></a>渲染 <code>ACSII</code> 进度条</h2><p><code>snippets</code>的API实际上支持任何类型的文件（最多10MB），但是当文件比较大或者网速特别慢的时候就需要在命令行界面显示上传文件进度了。命令行解决方案就是优雅的 <code>ASCII</code> 进度条。</p>
<p><a href="https://www.npmjs.com/package/progress" target="_blank" rel="external">progress</a> 是现在最常用的 <code>npm</code> 包用来渲染进度条。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save progress</div></pre></td></tr></table></figure>
<p><code>progress</code>的API非常简单而且可扩展，唯一的问题就是 <code>superagent</code> 当前node版本没有事件能够订阅我们上传的进度。</p>
<p>我们可以通过创建一个 <a href="https://nodejs.org/api/stream.html#stream_class_stream_readable" target="_blank" rel="external">可读的流</a> 并且增加一个事件来触发请求。然后我们初始化进度条为0，当事件触发的时候不断增加。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">+ <span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">+ <span class="keyword">var</span> ProgressBar = <span class="built_in">require</span>(<span class="string">'progress'</span>);</div><div class="line">  <span class="keyword">var</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</div><div class="line">  <span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'superagent'</span>);</div><div class="line">...</div><div class="line">  var username = <span class="keyword">yield</span> prompt(<span class="string">'username: '</span>);</div><div class="line">  <span class="keyword">var</span> password = <span class="keyword">yield</span> prompt.password(<span class="string">'password: '</span>);</div><div class="line"></div><div class="line">+ <span class="keyword">var</span> fileSize = fs.statSync(file).size;</div><div class="line">+ <span class="keyword">var</span> fileStream = fs.createReadStream(file);</div><div class="line">+ <span class="keyword">var</span> barOpts = &#123;</div><div class="line">+   width: <span class="number">20</span>,</div><div class="line">+   total: fileSize,</div><div class="line">+   clear: <span class="literal">true</span></div><div class="line">+ &#125;;</div><div class="line">+ <span class="keyword">var</span> bar = <span class="keyword">new</span> ProgressBar(<span class="string">' uploading [:bar] :percent :etas'</span>, barOpts);</div><div class="line">+</div><div class="line">+ fileStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">+   bar.tick(chunk.length);</div><div class="line">+ &#125;);</div><div class="line"></div><div class="line">  request</div><div class="line">    .post(<span class="string">'https://api.bitbucket.org/2.0/snippets/'</span>)</div><div class="line">    .auth(username, password)</div><div class="line">-   .attach(<span class="string">'file'</span>, file)</div><div class="line">+   .attach(<span class="string">'file'</span>, fileStream)</div><div class="line">    .set(<span class="string">'Accept'</span>, <span class="string">'application/json'</span>)</div><div class="line">...</div></pre></td></tr></table></figure>
<p>下面是一个比较快的网速下上传大约6MB的文件的截图：</p>
<p><img src="//img.aotu.io/cnt1992/progress-bar.gif" alt="进度条"></p>
<p>很棒！用户现在就能够看到他们上传的进度并且知道什么时候上传完成。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们只不过接触了用Node开发命令行脚本的冰山一角。在每一期的 <a href="http://blog.codinghorror.com/the-principle-of-least-power/" target="_blank" rel="external">Atwood’s Law</a> 都有很多 <code>npm</code> 包优雅地处理标准输入、管理并行任务、监听文件、管道流、压缩、ssh、git、还有任何你能用 <code>Bash</code> 做到的。更多地，还有非常好的API来处理子进程如果你需要其他shell脚本处理（当JavaScript处理不了的时候）。</p>
<p>我们上面例子的源码是在 <a href="https://bitbucket.org/tpettersen/bitbucket-snippet" target="_blank" rel="external">available on Bitbucket</a> 的license下，并且已经发布到 <a href="https://npmjs.org/package/bitbucket-snippet" target="_blank" rel="external">npm仓库</a>。我这里也提一些上面没有讲到的概念，比如 <code>OAuth</code> ，这样子你就不需要每次都输入用户名跟密码。如果你想自己简单体验一下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install -g bitbucket-snippet</div><div class="line">$ snippet --help</div></pre></td></tr></table></figure>
<p>如果你觉得本教程有帮助，发现了bug或者有其他更酷的Node.js脚本建议，可以在Twiiter私信我。（我是 <a href="https://twitter.com/kannonboy" target="_blank" rel="external">@kannonboy</a>）</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文译自 &lt;a href=&quot;https://developer.atlassian.com/blog/2015/11/scripting-with-node/&quot;&gt;Building command line tools with Node.js&lt;/a&gt;，介绍了如何通过Node.js来创建命令行脚本工具，介绍了很多实用的&lt;code&gt;npm&lt;/code&gt;包等。翻译水平有限，敬请指正~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NodeJS" scheme="https://aotu.io/cates/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="https://aotu.io/tags/NodeJS/"/>
    
      <category term="CMD" scheme="https://aotu.io/tags/CMD/"/>
    
  </entry>
  
  <entry>
    <title>What Does the Foo Mean</title>
    <link href="https://aotu.io/notes/2015/12/18/etymology-of-foobar/"/>
    <id>https://aotu.io/notes/2015/12/18/etymology-of-foobar/</id>
    <published>2015-12-18T13:22:23.000Z</published>
    <updated>2016-10-20T07:06:32.407Z</updated>
    
    <content type="html"><![CDATA[<p>今天在 WebKit 看了 CSS 伪类的文章，其中对 <code>:matches()</code> 的介绍出现了 <code>foo</code> 和 <code>bar</code>：</p>
<pre><code>:matches(.foo, .bar) {
    background-color: green;
}
</code></pre><p>随即想起，以前在不少编程书里经常看到 <code>foo</code>、<code>bar</code> 这对 couple，一直不知道他们的具体含义，于是默默去 google 搜了一下，发现结果都几有意思。</p>
<p>首先在 <em>Quora</em> 里发现一位名为 <em>Thom Parkin</em> 的网友回答：</p>
<blockquote>
<p>“foo” has been (until very recently) always used as part of a pair (with “bar”) when representing arbitrary names in computer science.  This is primarily in the instance of examples.</p>
<p>Much like the “Hello World” is a standard for examples in computer programming the use of “foo” and “bar” had grown in popularity.</p>
<p>The origin comes from a common phrase much older than computers and computer programming.</p>
<p>The choice of “foo” coupled with “bar” is derived from the coloquial acronym FUBAR (pronounced FOO-bar).</p>
<p>Legendarily from the military world, it represents the phrase:<br>“Fucked Up Beyond All Recognition” (in ‘mixed company’ the first word could be “Fouled”).</p>
</blockquote>
<p>大概的意思是说：</p>
<p>在计算计领域里，“foo” 和 “bar” 通常会成对出现，在举例的时候用作没有明确意义的命名，就好像 “Hellow World” 例子在计算机编程里面作为标准的例子一样，“foo” 和 “bar” 的使用已经变得很流行。</p>
<p>而该词在常用的习语里面出现的时间远比在计算机或计算机编程里面出现的早，“foo” 和 “bar” 成对出现则起源于口语 “FUBAR” 一词（发音和 Foo-bar 一样）。</p>
<p>来自军事世界的传说中，“FooBar” 的含义则是 “Fucked Up Beyond All Recognition，全句意思是 “糟糕糟到面目全非/真是混乱不堪” ？</p>
<p>看完 <em>Thom Parkin</em> 的解释，隐隐约约觉得此词来头不小，但是啊 <em>Thom</em> 的介绍又不够详细，然后继续 search 一下，发现万能 Wiki Sir 对此有更详细的描述。</p>
<p>Wiki Sir 直接就来一句 “Not to be confused with FUBAR”，心里只想说：666666</p>
<p>Wiki 对 “Foobar” 一词的定义是这样的：</p>
<blockquote>
<p>The terms foobar (/ˈfuːbɑr/), fubar, or foo, bar, baz and qux (alternatively, quux) and sometimes norf[1][2][3][4] and many others[5][6] are sometimes used as placeholder names (also referred to as metasyntactic variables) in computer programming or computer-related documentation.[7] They have been used to name entities such as variables, functions, and commands whose exact identity is unimportant and serve only to demonstrate a concept. The words themselves have no meaning in this usage. Foobar is sometimes used alone; foo, bar, and baz are sometimes used, when multiple entities are needed.</p>
</blockquote>
<p>大概意思是：</p>
<ul>
<li><p>Foobar 还有一群兄弟姐妹，例如 “fubar” 、“baz”、“qux”、“quux”、“norf”，他们很多时候都会作为占位名（或者作为伪变量）被应用在计算机编程或与计算机相关的文档中。</p>
</li>
<li><p>他们被用作变量命名、函数命名、和命令命名，这些命名基本都是不重要的，仅仅作为某个概念阐述的示例，他们本身并没有什么具体含义</p>
</li>
<li><p>Foobar有时候单独使用，而当多个这种用法出现的时候， “foo”，“bar”，“baz” 会组合使用。</p>
</li>
</ul>
<p>嗯~~ 原来是这样~~</p>
<p>那么出处呢？Wiki Sir 介绍得比较详细，有兴趣的同学自己 <a href="https://en.wikipedia.org/wiki/Foobar#History_and_etymology" target="_blank" rel="external">Click Here</a> 去看看原文，在下也试下意译到本文</p>
<p><em>Foo</em> 一词起源于 20 世纪 30 年代的一个并没有任何意义的词（nonsense word）和 20 世界 40 年代军事术语里面的 “FUBAR” 以及大约在 20 世纪 60 年代麻省理工学院铁路模型技术俱乐部（TMRC）在一个程序上下文用到的词汇。然而，这些词汇之间明确的联系仍然不清晰，从而使得一些有趣的理论学说进一步去定义他们。</p>
<p><em>Foo</em> 在文献 《Internet Engineering Task Force (IETF) <a href="https://tools.ietf.org/html/rfc3092" target="_blank" rel="external">RFC 3092</a>》里有定义（文献标题为 Etymology of “Foo”），文献给出了 <em>foo</em> 最早的使用记录，就是出现在 20 世纪 30 年代由美国 <em>Bill Holman</em> 创作的连载漫画 <em>Smokey Stover</em>，<em>foo</em> 被用作没有具体含义的词，如下图的 “foomobile”：</p>
<p><img src="//img.aotu.io/mihanX/foo-img-1.jpg" alt="image"></p>
<p><em>(Smokey Stover driving a “foomobile”)</em></p>
<p>作者 <em>Holman</em> 说使用这个词是因为他在旧金山唐人街看到一尊中国玉雕像底部的“福”字，<em>foo</em> 大概是 <em>福（fu）</em> 的音译。而当时像 “福祿壽”、“福满处”等象征上帝的虚构形象在中国非常流行。</p>
<p><em>Smokey Stover</em> 从 1935 连载到 1973，期间一直重点保留着 “foo” 的特征，就好像上面 “foomobile” 的插图。这个词在 20 世纪 30 年代非常流行，除了在 <em>Smokey Stover</em> 出现，还在其它卡通和连载漫画里出现，如由 <em>Bob Clampett</em> 创办的 <em>Looney Tunes（兔巴哥）</em>卡通系列里的 <em>The Daffy Doc</em> 和 <em>Porky in Wackyland</em> 以及漫画 <em>Pogo</em></p>
<p>接着，<em>Foo</em> 走进了军事俚语 “FUBAR”（Fucked Up Beyond All Recognition）一词中，合并到词里的 “FU”。在第二次世界大战里盟军飞行员用词汇 “foo fighter” 描述各种各样的 UFO 或者一些神秘的空中现象</p>
<p><em>Foo</em> 第一次在正式的程序类印刷品作为较为人知的词汇出现于 1965 年 TMRC 的一版印刷品，关于紧急开关（scram switches）方面的内容：</p>
<p>在复杂的模型系统中，一些紧急开关被安装在许多场所附近可以利用的空间里，这些场所有可能会发生突发的不幸事故，如全速前进的火车遇到障碍物。这种模型系统的另一个特性就是调试模拟盘上的数码时钟。当有人按下紧急开关，数码时钟就停止工作，显示屏上亦随之换成 “FOO” 这个词。在 TMRC 里面，紧急开关也因此称作 “Foo开关”（Foo switches）。正因为这样，“foo” 一词录入了 TMRC 语言字典。</p>
<p>有一本书描述了 MIT（麻省理工学院） 列车室靠门侧的两个分别标上 “foo” 和 “bar” 标签的按钮。在那时期，这两个词通常应用到各种按钮上；当 MIT 的黑客们有新奇想法的时候也会反复使用他们。因此，<em>foo</em> 和 <em>bar</em> 被广泛用作变化不定的命名。在 TMRC 语言字典精简版中有这样的描述：</p>
<blockquote>
<p>Multiflush: stop-all-trains-button. Next best thing to the red door button. Also called FOO. Displays “FOO” on the clock when used.</p>
</blockquote>
<p>Multiflush（不知道叫啥）：停下所有列车按钮，门边的红色按钮，也叫做 “FOO”，当使用后，时钟上会显示 “FOO”。</p>
<p>好了，现在终于知道 <em>foo</em>、<em>bar</em> 是什么了，简单总结下就是：</p>
<ol>
<li><p>20 世纪 30 年代，一位美国漫画达人在一尊中国玉雕像上看到一个中国字 – “福” ，然后就将其音译成 “foo”，并应用到他自己的漫画上</p>
</li>
<li><p>漫画大叔将 “foo” 发扬光大不久，唯恐不乱的军事世界将 “foo” 放到了俚语 “FUBAR” 里面，演变成了 “Foobar”</p>
</li>
<li><p>之后 MIT 人才在介绍一项 “complex model system” 的紧急开关中引入了 “foo” 一词，并发表出去，于是乎 MIT 的黑客们一有新奇想法就用 “foo” 一词，并用上了瘾，久而久之大家就对 “foo” 和 “bar” 认识达成了共识</p>
</li>
</ol>
<p>一句话概括就是：<em>Foo</em>、<em>Bar</em> 什么鬼都不是却能代表一切，FUBAR!</p>
<p>The End</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在 WebKit 看了 CSS 伪类的文章，其中对 &lt;code&gt;:matches()&lt;/code&gt; 的介绍出现了 &lt;code&gt;foo&lt;/code&gt; 和 &lt;code&gt;bar&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:matches(.foo, .bar) {
   
    
    </summary>
    
      <category term="生活玩乐" scheme="https://aotu.io/cates/%E7%94%9F%E6%B4%BB%E7%8E%A9%E4%B9%90/"/>
    
    
      <category term="Foo" scheme="https://aotu.io/tags/Foo/"/>
    
  </entry>
  
  <entry>
    <title>【译】介绍Sass Maps：用法跟例子</title>
    <link href="https://aotu.io/notes/2015/12/09/an-introduction-to-sass-maps/"/>
    <id>https://aotu.io/notes/2015/12/09/an-introduction-to-sass-maps/</id>
    <published>2015-12-09T01:54:16.000Z</published>
    <updated>2016-10-20T07:06:32.407Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文翻译自<a href="http://webdesign.tutsplus.com/tutorials/an-introduction-to-sass-maps-usage-and-examples--cms-22184" target="_blank" rel="external">An Introduction to Sass Maps:Usage and Examples</a></p>
</blockquote>
<a id="more"></a>
<p>对于前端可伸缩页面的编写来说Sass Maps可以说是一个福音，从逻辑模块中抽取出配置是一种非常好的方法。现在就让我跟你解释为什么我认为在Sass 3.3中Sass Maps是最好的特性。</p>
<h2 id="Sass-3-3"><a href="#Sass-3-3" class="headerlink" title="Sass 3.3"></a>Sass 3.3</h2><p>Sass 3.3[<em>注1</em>]即将更新给所有人使用，但是对于很多开发者来说还有很多实用性的特性他们依然不熟悉。新版本的Sass 3.3带给我们新的数据类型称为<code>map</code>。<code>Maps</code>是<code>key/value</code>键值对的集合，能够帮助我们通过简单的代码创建一块配置区域。</p>
<h2 id="如何使用-Sass-Maps"><a href="#如何使用-Sass-Maps" class="headerlink" title="如何使用 Sass Maps"></a>如何使用 Sass Maps</h2><p>首先我们会覆盖Sass Maps的基本用法，后面会看几个实例。</p>
<h3 id="创建一个Map"><a href="#创建一个Map" class="headerlink" title="创建一个Map"></a>创建一个Map</h3><p>下面是一个快速创建Sass Maps的语句，创建一个变量（这里用了<code>$map</code>）然后输入一些<code>keys</code>跟<code>values</code>，通过<code>,</code>来分割，这些键值对通过括号包围起来：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$map: (</div><div class="line">  key: value,</div><div class="line">  nextkey: nextvalue</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="如何获取Map的值"><a href="#如何获取Map的值" class="headerlink" title="如何获取Map的值"></a>如何获取Map的值</h3><p>当你定义了很多对<code>key/value</code>键值对之后，有时候你需要取出一些值。你可以通过<code>map-get()</code>方法来找出某个<code>key</code>的<code>value</code>。该方法需要传入两个参数：<code>map</code>的名称还有<code>key</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element:before &#123;</div><div class="line">  <span class="attr">content</span>: map-get($map, key);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面编译输出后的结果如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.element</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: value</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如何检查某一个key是否存在"><a href="#如何检查某一个key是否存在" class="headerlink" title="如何检查某一个key是否存在"></a>如何检查某一个key是否存在</h3><p>在用<code>Sass</code>进行编码的时候强烈建议使用<a href="https://webdesign.tutsplus.com/tutorials/an-introduction-to-error-handling-in-sass--cms-19996" target="_blank" rel="external">可靠的错误处理</a>。在这里<code>Sass</code>给了我们一个方法<code>map-has-key()</code>。这个方法能够检测出某个<code>key</code>是否存在，如果不存在能够输出其他信息给开发者。</p>
<p>可以移步 <code>Hugo Giraudel</code> 写的这篇如何处理错误的文章 <a href="http://webdesign.tutsplus.com/tutorials/an-introduction-to-error-handling-in-sass--cms-19996" target="_blank" rel="external">An Introduction to Error Handing in Sass</a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$map: (</div><div class="line">  key: value,</div><div class="line">  <span class="attr">nextkey</span>: nextvalue</div><div class="line">);</div><div class="line"></div><div class="line">.element &#123;</div><div class="line">  @<span class="keyword">if</span> map-has-key($map, key)&#123;</div><div class="line">    <span class="attr">content</span>: <span class="string">'Map has this key.'</span>;</div><div class="line">  &#125; @<span class="keyword">else</span> &#123;</div><div class="line">    <span class="attr">content</span>: <span class="string">'Map has not this key.'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译之后结果如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.element</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">'Map has this key.'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如何合并Maps"><a href="#如何合并Maps" class="headerlink" title="如何合并Maps"></a>如何合并Maps</h3><p>这个一个福利：<code>Sass</code>允许我们合并两个甚至更多个<code>maps</code>成一个，这是一个非常实用的功能，通过下面这个例子我们将知道如何使用<code>map-merge()</code>方法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$colors: (</div><div class="line">  light: #ccc,</div><div class="line">  dark: #000</div><div class="line">);</div><div class="line"></div><div class="line">$brand-colors: (</div><div class="line">  main: red,</div><div class="line">  alternative: blue</div><div class="line">);</div><div class="line"></div><div class="line">// 合并maps</div><div class="line">$merged: map-merge($colors, $brand-colors);</div><div class="line"></div><div class="line">.element &#123;</div><div class="line">  content: map-get($merged, alternative);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译之后结果如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.element</span> &#123;</div><div class="line">  <span class="attribute">content</span>: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="利用Sass-Maps进行实战"><a href="#利用Sass-Maps进行实战" class="headerlink" title="利用Sass Maps进行实战"></a>利用Sass Maps进行实战</h2><p>上面我们介绍了如何实用<code>Sass Maps</code>，现在我们将通过一些实战训练看看在哪些地方适合使用该特性。</p>
<p>1.如何循环Map生成类</p>
<p>你可以遍历<code>map</code>通过里面的<code>values</code>去定义你需要的变量然后加到<code>map</code>里面的<code>name</code>去，这样子你可以创建出很多种<code>values</code>。</p>
<p>在下面的例子中我将输出<code>classes</code>来展示<code>icons</code>。我将<code>icon</code>的<code>name</code>作为<code>key</code>，让<code>value</code>去替代实际的<code>content</code>(通过伪元素加进去)。</p>
<blockquote>
<p>注意：在项目实战中我们通过会先声明一些基础的样式，这不在本教程的范围内。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/* 定义一个sass map名称为$icons */</div><div class="line">$icons: (</div><div class="line">  checkmark: a,</div><div class="line">  plus: b,</div><div class="line">  minus: c</div><div class="line">);</div><div class="line"></div><div class="line">/* 遍历map的所有key，创建各自的类 */</div><div class="line">@each $name, $value in $icons &#123;</div><div class="line">  .icon--#&#123;$name&#125; &#123;</div><div class="line">    content: $value;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译之后结果如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 遍历map的所有key，创建各自的类 */</span></div><div class="line"><span class="selector-class">.icon--checkmark</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"a"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.icon--plus</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"b"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.icon--minus</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"c"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一种非常高效的方法来输出icons的所有类，还有大量情况也会使用这种方法。</p>
<p>2.如何拿出Maps的多个值</p>
<p>让我们继续，给一个<code>key</code>赋予多个<code>value</code>也是可以的。多个<code>value</code>之间通过<code>,</code>来分割。下面的例子能够非常好的输出不同模块的样式。</p>
<p>这里我将定义一系列<code>buttons</code>，每一个<code>key</code>的第一个<code>value</code>是<code>background-color</code>，第二个<code>value</code>是<code>font-color</code>。</p>
<p>然后我将通遍历<code>keys</code>赋值给<code>$colors</code>对象。通过<code>nth($colors,1)</code>（第一个参数是对象的名称，第二个参数是值得位置）拿到第一个<code>key</code>。如果你需要拿第二个<code>value</code>，那将第二个参数改为<code>2</code>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// _m-buttons.scss</div><div class="line">$buttons: (</div><div class="line">  error: (#d82d2d, #666),</div><div class="line">  success: (#52bf4a, #fff),</div><div class="line">  warning: (#c23435, #fff)</div><div class="line">);</div><div class="line"></div><div class="line">.m-button &#123;</div><div class="line">  display: inling-block;</div><div class="line">  padding: .5em;</div><div class="line">  background: #ccc;</div><div class="line">  color: #666;</div><div class="line"></div><div class="line">  @each $name, $colors in $buttons &#123;</div><div class="line">    $bgcolor: nth($colors, 1);</div><div class="line">    $fontcolor: nth($colors, 2);</div><div class="line"></div><div class="line">    &amp;--#&#123;$name&#125; &#123;</div><div class="line">      background-color: $bgcolor;</div><div class="line">      color: $fontcolor;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译之后结果如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.m-button</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">padding</span>: .<span class="number">5em</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.m-button--error</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#d82d2d</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.m-button--success</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#52bf4a</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.m-button--warning</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#c23435</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.处理层(z-index)</p>
<p>在某种程度上来说，我还没有见过不跟<a href="https://webdesign.tutsplus.com/articles/what-you-may-not-know-about-the-z-index-property--webdesign-16892" target="_blank" rel="external">z-index</a>打交道的前端开发。当你在项目中多个地方需要使用到<code>z-index</code>的时候问题通常随之而来，<code>Sass maps</code>能够帮我们解决这些问题。</p>
<p>首先我们定义了一个map名称为<code>$layer</code>，所有的<code>key</code>都应该合理命名以便我们能够知道哪个value是对应哪个element的-比如：<code>offcanvas</code>,<code>lightbox</code>,<code>dropdown</code>等。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// _config.scss</span></div><div class="line">$layer: (</div><div class="line">  offcanvas: <span class="number">1</span>,</div><div class="line">  <span class="attr">lightbox</span>: <span class="number">500</span>,</div><div class="line">  <span class="attr">dropdown</span>: <span class="number">10</span>,</div><div class="line">  <span class="attr">tooltip</span>: <span class="number">15</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// _m-lightboxes.scss</span></div><div class="line">@<span class="function"><span class="keyword">function</span> <span class="title">layer</span>(<span class="params">$name</span>) </span>&#123;</div><div class="line">  @<span class="keyword">if</span> map-has-key($layer, $name) &#123;</div><div class="line">    @<span class="keyword">return</span> map-get($layer, $name);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @warn <span class="string">"The key #&#123;$name&#125; is not in the map '$layer'"</span>;</div><div class="line">  @<span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">.m-lightbox &#123;</div><div class="line">  z-index: layer(lightbox);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面我定义了一个方法用来获取特定<code>key</code>的<code>value</code>，但为什么我要这样做？理由很简单：这样子比每次都写<code>map-get()</code>方法要方便快捷。另外一个方面就是你可以创建<code>错误处理</code>给开发者一些错误信息当没有输出期望的信息的时候。</p>
<p>编译结果如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.m-lightbox</span> &#123;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">500</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4.在项目中为字体创建基本样式</p>
<p>每一个项目都拥有自己的配置文件，用来给全局使用。例如在我的项目中我会定义一些字体属性：字体颜色，可选的字体颜色，字体集或者字体大小。我通常都会为每个属性创建一个变量，但是<code>map</code>能够做得更好。</p>
<p>下面是一个简单的例子，先从<em>旧</em>的解决方法开始：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$base-font-color: #666;</div><div class="line">$base-font-family: Arial, Heletica, Sans-Serif;</div><div class="line">$base-font-size: 16px;</div><div class="line">$base-line-height: 1.4;</div></pre></td></tr></table></figure>
<p>接下来看通过<code>Sass Map</code>写的<code>新</code>的解决方法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// _config.scss</div><div class="line">$font: (</div><div class="line">  color: #666;</div><div class="line">  family: (Arial, Helvetica),</div><div class="line">  size: 16px,</div><div class="line">  line-height: 1.4</div><div class="line">);</div><div class="line"></div><div class="line">// _presets.scss</div><div class="line">body &#123;</div><div class="line">  color: map-get($font, color);</div><div class="line">  font-family: map-get($font, family);</div><div class="line">  font-size: map-get($font, size);</div><div class="line">  line-height: map-get($font, line-height);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5.Breakpoints &lt; 3</p>
<p>我很喜欢这个使用案例。在你的整个项目中拥有一块专门用来处理断点是非常好的。所以，像这一节中关于处理<code>z-index</code>，你就已经用到了断点。当你改变值得时候，整个项目的行为也随之改变，这多么令人惊讶。</p>
<p>那就先让我们通过一个<code>map</code>名称为<code>$breakpoints</code>开始吧。</p>
<p>我们的目标就是在一个元素中使用断点通过易懂的名字替代那些<code>pixel</code>值，所以需要一个<code>mixin</code>方法来实现占位<code>name</code>，我把mixin命名为<code>respond-to</code>以及传入<code>$brakpoint</code>参数。通过<code>$value</code>我就能得到期望的断点然后后面在<code>媒体查询</code>中使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Map with much breakpoints</span></div><div class="line">$breakpoints: (</div><div class="line">  small: <span class="number">320</span>px,</div><div class="line">  <span class="attr">medium</span>: <span class="number">600</span>px,</div><div class="line">  <span class="attr">large</span>: <span class="number">768</span>px</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// Respond-To Mixin</span></div><div class="line">@mixin respond-to($breakpoint) &#123;</div><div class="line">  @<span class="keyword">if</span> map-has-key($breakpoints, $breakpoint) &#123;</div><div class="line">    <span class="attr">$value</span>: map-get($breakpoints, $breakpoint);</div><div class="line"></div><div class="line">    @media screen and (min-width: $value) &#123;</div><div class="line">      @content;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @warning <span class="string">"Unknown `#&#123;$breakpoint&#125;` in $breakpoints"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// Sass</div><div class="line">.m-tabs &#123;</div><div class="line">  background-color: #f2f2f2;</div><div class="line"></div><div class="line">  @include reponse-to(medium) &#123;</div><div class="line">    background-color: #666;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Output</div><div class="line">.m-tabs &#123;</div><div class="line">  background-color: #f2f2f2;</div><div class="line">&#125;</div><div class="line">@media screen and (min-width: 600px) &#123;</div><div class="line">  background-color: #666;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种使用案例是我最喜欢之一！</p>
<p>6.颜色的高级使用</p>
<p>现在事情变得有一点点困难了，让我们看看通过不同色调定义的颜色计划。</p>
<p>我们的<code>Sass map</code>在这个例子中定义了一个<code>$colorscheme</code>同时里面定义了很多对象拥有<code>keys</code>跟<code>values</code>。项目中拥有不同的灰色调，但我们不想为每一个都声明一个变量。所以我们增加了一个对象<code>gray</code>，然后通过键值对分割。</p>
<p>下面开始这个Map:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// Scheme of colors</div><div class="line">$colorscheme: (</div><div class="line">  gray: (</div><div class="line">    base: #ccc,</div><div class="line">    light: #f2f2f2,</div><div class="line">    dark: #666</div><div class="line">  ),</div><div class="line">  brown: (</div><div class="line">    base: #ab906b,</div><div class="line">    light: #ecdac3,</div><div class="line">    dark: #5e421c</div><div class="line">  )</div><div class="line">);</div></pre></td></tr></table></figure>
<p>现在让我们加入<code>setcolor</code>方法来获取颜色的不同选择。第一个参数是Sass map的对象(<code>$scheme</code>)-在这个例子中可能是<code>gray</code>或者<code>brown</code>，第二个参数就是你想要的颜色(<code>$tone</code>)，默认值是<code>base</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="function"><span class="keyword">function</span> <span class="title">setcolor</span>(<span class="params">$scheme, $tone: base</span>) </span>&#123;</div><div class="line">  @<span class="keyword">return</span> map-get(map-get($colorscheme, $scheme), $tone);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，这里给出了一个例子能够让你从这个map中获取不同颜色，比你想象中的还要简单（也许）！</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// Sass</div><div class="line">.element &#123;</div><div class="line">  color: setcolor(brown);</div><div class="line">&#125;</div><div class="line">.element--light &#123;</div><div class="line">  color: setcolor(brown, light);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Output</div><div class="line">.element &#123;</div><div class="line">  color: #ab906b;</div><div class="line">&#125;</div><div class="line">.element--light &#123;</div><div class="line">  color: #ecdac3;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你会完成上面的挑战的，现在你能够创建一组色调而不需要通过为每一种颜色创建一个变量。</p>
<p>这个方法我是受到了<a href="http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/" target="_blank" rel="external">Tom Davies</a>的启发，同时我也建议你看看他这篇文章。</p>
<h2 id="通过Classes定制主题"><a href="#通过Classes定制主题" class="headerlink" title="通过Classes定制主题"></a>通过Classes定制主题</h2><p>这是为高级Sass用户准备的。在项目中会经常需要通过一些基础代码创建多套主题，所以这里给出一个建议：在文档的最开始就定义一个 <em>主题类</em> 来满足特定的工作。我们需要一个对象以便能够处理不同名字的主题，同时给出不同的样式模块。</p>
<h3 id="定义themes"><a href="#定义themes" class="headerlink" title="定义themes"></a>定义themes</h3><p>最开始，在你的项目中通过Sass map全局定义themes，<code>value</code>就是主题名字，同时这个类必须附在<code>body</code>元素。在这个例子中我创建了一个map<code>$themes</code>，里面有两个主题：<code>theme-light</code>和<code>theme-dark</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// _config.scss</span></div><div class="line">$themes: (</div><div class="line">  theme1: theme-light;</div><div class="line">  theme2: theme-dark;</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="获取值（捷径）"><a href="#获取值（捷径）" class="headerlink" title="获取值（捷径）"></a>获取值（捷径）</h3><p>现在我们需要一个方法来快速获取模块的值，这是一个简单的方法包括三个变量如下：</p>
<ul>
<li><code>$map</code>: 定义map的名字确定values是从哪里来的</li>
<li><code>$object</code>: 在这里例子中就是theme的key</li>
<li><code>$style</code>: 需要的样式属性值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// _functions.scss</span></div><div class="line">@<span class="function"><span class="keyword">function</span> <span class="title">setStyle</span>(<span class="params">$map, $object, $style</span>) </span>&#123;</div><div class="line">  @<span class="keyword">if</span> map-has-key($map, $object) &#123;</div><div class="line">    @<span class="keyword">return</span> map-get(map-get($map, $object), $style);</div><div class="line">  &#125;</div><div class="line">  @warn <span class="string">"The key `#&#123;$object&#125;` is not available in the map."</span>;</div><div class="line">  @<span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生成模块"><a href="#生成模块" class="headerlink" title="生成模块"></a>生成模块</h3><p>现在我们创建新的<code>Sass Map</code>名称为<code>$config</code>，每一个主题都是一个对象同时名字必须是<code>$themes</code>中的<code>key</code>：不然将会报错。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// _m-buttons.scss</div><div class="line">// 1.Config</div><div class="line">$config: (</div><div class="line">  theme1: (</div><div class="line">    background: #f2f2f2,</div><div class="line">    color: #000</div><div class="line">  ),</div><div class="line">  theme2: (</div><div class="line">    background: #666,</div><div class="line">    color: #fff</div><div class="line">  )</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="遍历主题"><a href="#遍历主题" class="headerlink" title="遍历主题"></a>遍历主题</h3><p>最后一部分会使用一点点技巧。开始的地方我们定义了一个模块<code>.m-button</code>然后我们期望在每个主题下面外观是不一样的。所以我们使用<code>@each</code>方法遍历Map<code>$themes</code>拿到<code>$key</code>跟<code>$value</code>。遍历之后就能够为不同主题创建map。</p>
<p>在这一节的开始我提到了<code>keys</code>在每个map里面必须是一样的(<code>$themes</code>跟<code>$config</code>)。因此我们必须检查map<code>$config</code>的key是否都来自map<code>$themes</code>，这里使用到了<code>map-has-key()</code>方法。如果包含了key那就继续往下执行，否则抛出错误给开发者。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// _m-buttons.scss</div><div class="line">// 2.Base</div><div class="line">.m-button &#123;</div><div class="line">  @each $key, $value in $themes &#123;</div><div class="line">    @if map-has-key($config, $key) &#123;</div><div class="line">      .#&#123;$value&#125; &amp; &#123;</div><div class="line">        background: setStyle($config, $key, background);</div><div class="line">        color: setStyle($config, $key, color);</div><div class="line">      &#125;</div><div class="line">    &#125; @else &#123;</div><div class="line">      @warn "The key `#&#123;$key&#125; isn't defined in the map $config`"</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面的代码，让我们看看输出的结果。这是非常好的，保证了配置区域跟模块解耦。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.theme-light</span> <span class="selector-class">.m-button</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#f2f2f2</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.theme-dark</span> <span class="selector-class">.m-button</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#666</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后你可以自己试试上面的代码看能不能运行出结果。也许对于你来说这个方案并不是最好的，你会寻求另外的方案，但是我依然希望这能够帮助你维持代码。</p>
<h2 id="最后思考"><a href="#最后思考" class="headerlink" title="最后思考"></a>最后思考</h2><p>在我看来 <code>Sass Maps</code>是Sass 3.3最值得介绍的特性。理由是我认为它给出了非常好的方式来创建健壮的结构，这只需要少量的配置。Sass maps使得我们可以在不影响整个项目的基础逻辑代码基础上改变值。开始使用它吧，你的伙伴将会感激你！</p>
<p>如果你已经开始使用<code>Sass maps</code>了，让我知道你如何在你的项目中使用它！</p>
<ul>
<li>注1: 截至译文的Sass最新版本是3.4.19</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自&lt;a href=&quot;http://webdesign.tutsplus.com/tutorials/an-introduction-to-sass-maps-usage-and-examples--cms-22184&quot;&gt;An Introduction to Sass Maps:Usage and Examples&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="sass" scheme="https://aotu.io/tags/sass/"/>
    
      <category term="sass maps" scheme="https://aotu.io/tags/sass-maps/"/>
    
  </entry>
  
  <entry>
    <title>Adobe edge animate制作HTML5动画</title>
    <link href="https://aotu.io/notes/2015/12/04/edgeAnimate/"/>
    <id>https://aotu.io/notes/2015/12/04/edgeAnimate/</id>
    <published>2015-12-04T14:05:18.000Z</published>
    <updated>2016-10-20T07:06:32.407Z</updated>
    
    <content type="html"><![CDATA[<p>Edge Animate是Adobe出品的制作HTML5动画的可视化工具，简单的可以理解为HTML5版本的Flash Pro。Adobe Edge Animate的目的是帮助专业设计师制作网页动画乃至简单游戏。目前该工具的重点放在动画引擎上，将增加更多HTML5功能，比如Canvas、HTML5音频/视频标签等。支持Android、iOS、webOS、黑莓PlayBook、Firefox、Chrome、Safari和IE9等各个平台。</p>
<p>Edge Animate主要使用HTML5,CSS3和JavaScript。HTML5是其用于创建的doctype，2D的transform，translate，rotate，scale，skew等特效都是渲染为CSS3，如果是最新版本的浏览器，可以操作纯粹的CSS3，如果是主流大众浏览器，Edge Animate则会通过JavaScript库的配合来保证HTML和CSS的显示兼容性。<br><a id="more"></a></p>
<h2 id="Adobe-edge-animate-CC功能"><a href="#Adobe-edge-animate-CC功能" class="headerlink" title="Adobe edge animate CC功能"></a>Adobe edge animate CC功能</h2><p>1.精确的动画。<br>2.直觉化的使用者界面。<br>3.绘图和文字工具。<br>4.移动路径。<br>5.可重复使用的符号。<br>6.兼容性比较不错，android机也表现良好。<br>单一使用做html5 css3动画，带来了巨大的福音。</p>
<h2 id="Adobe-edge-animate-CC缺点"><a href="#Adobe-edge-animate-CC缺点" class="headerlink" title="Adobe edge animate CC缺点"></a>Adobe edge animate CC缺点</h2><p>1.不太适合，做复杂的动画与游戏，适用场景狭窄。<br>2.操作比较适合设计师，不适合程序员，操作效率不高，调节不是特别可控。<br>3.采用html5 css3相关的动画，频繁产生重排导致效率低下。<br>4.动画元素层级绝对定位，后期维护增加元素，层级覆盖影响较大。<br>5.比较适合pc端动画制作，移动端需要进行二次转换，scale进行缩放已达到多屏适配的问题。</p>
<h2 id="Adobe-edge-animate下载地址"><a href="#Adobe-edge-animate下载地址" class="headerlink" title="Adobe edge animate下载地址"></a>Adobe edge animate下载地址</h2><p><a href="http://example.net/" target="_blank" rel="external">mac 环境下下载</a>  &nbsp;&nbsp;   <a href="http://example.net/" target="_blank" rel="external">window 环境下下载</a> </p>
<p>在开始玩Edge Animate前，你可能有个顾虑，就是Edge Animate如果要做交互动画，生成的内容是否会打破已有的HTML文件代码结构？答案是不会。通过Edge Animate生成的HTML代码少之又少，几乎都可以用下面的代码表达方式来概述：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=”Stage” <span class="built_in">class</span>=”EDGE-xxxxxxxxxx”&gt;&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<p>Edge Animate使用JSON来存储元素的定义和属性。相关的动画内容则会全部以代码块的形式嵌入上面的div中，修改和删除都不会影响原有的HTML项目代码，对HTML中元素的操作都通过JSON对象和引入的JavaScript来完成。但是有一点，edge动画对html元素的动画操作，会导致浏览器频繁重排，降低效率。</p>
<p>创建edge animation 工程<br>启动Edge Animate，创建一个新项目ctrl＋N/command+N。<br><img src="//img.aotu.io/pfan/edge/1.jpg" alt="edge"><br>设定Stage（舞台）宽度为640px, 高度为1136px。Ctrl+S保存为demo.html。打开我们保存的项目目录，一个标准的Edge Animate项目是由一系列html,css,js和相关资源文件组成的。如下图所示：<br><img src="//img.aotu.io/pfan/edge/2.jpg" alt="edge"><br>1)Edge Animate的工程文件: .an 格式文件更像一个空壳文件或者索引文件，标明了项目的必要信息。你可以使用记事本打开.an文件了解其中具体内容。<br>2)edge_includes目录：该目录下是Edge制作的html5所依赖的JS类库：edge.6.0.0.min.js 115kb,还是蛮大的。(之前的版本有依赖jquery，再5.0之后就去掉了，产生了自有库，写法参展jquery)。<br>3)其他.js文件：诸如demo1_edgeActions.js，demo1_edge.js等js文件是专门针对当前动画所生成js文件。<br>4).html文件：主html文件。</p>
<p>Edge Animate的工具界面默认情况下包含了7个Window面板，均可以通过菜单的Window选项开启和关闭，分别是Tools工具，Properties属性，Stage场景，Elements元素，Library库，Timeline时间轴，代码管理和lessons课程。接下来，简单的让大家了解一下，edge animation的属性面包，元素面板，时间轴runtime，代码管理器，这些是我们经常会用到的。</p>
<p>edge animation 属性面板<br>Adobe Edge Animate的强大之处在于它能获得舞台中元素的标签（即ID）和这个元素样式属性（CSS）的变化，并将这些变化在时间线上以关键帧的形式“标记”。这样必然导致关键帧之间属性值的变化，这个中间阶段会被转化为一个过渡阶段，或者说一段动画（如图片透明度Opacity的变化，淡入淡出、一个元件的移动Location和缩放Scale等等）。<br><img src="//img.aotu.io/pfan/edge/3.jpg" alt="edge"></p>
<p>edge animation 元素面板<br>Adobe Edge Animate元素面板显示的是节点式的树形结构，表示元素与父元件Stage的联系。这点与ps，flash都比较类似。<br>放置（或堆叠）在上方的元素具有更高的Z-index值，会显示在其他元素（堆叠在下方的元素）上方。<br><img src="//img.aotu.io/pfan/edge/4.jpg" alt="edge"></p>
<p>edge animation 时间轴runtime<br>Adobe Edge Animate的时间线融合了元素的节点式树状结构和与元素属性关联的关键帧，这些信息显示在时间线左侧，而右侧则显示时间信息表。元素属性值（关键帧）被标记在时间线确切的时间点，当属性值发生改变时，过渡阶段会产生动画。<br>1.动画标签（Label）和触发器（Trigger）：自定义的时间线动画标签和触发器也可以控制舞台中元素动画的状态和处理方法；使用Ctrl/Command + L可以在播放头所在时间点生成一个动画标签，使用Ctrl/Command + T可以在播放头所在时间点放置一个触发器。<br>2.仅显示具有动画的元素（Filter Animated Elements）<br>3.启用时间线吸附功能（Enable Timeline Snapping）：拖动播放头，播放头将会自动吸附到时间点、动画或关键帧等<br>4.启用时间线网格（Enable Timeline Grid）：时间信息表上将会显示时间网格，方便设计者在确切时间点设定关键帧等，网格的大小可用户自定义。<br>5.自动记录关键帧模式（Auto Keyframe Mode（K））：开启模式下，设计者对元素所做的属性值修改都会以关键帧的形式记录在时间线上。<br>6.自动生成动画模式（Auto Transition Mode（X））：开启模式下，在两个关键帧之间会自动生成动画，默认开启。<br>7.播放标记（Toggle Pin（P））：可以设置播放的起始和终止位置。<br><img src="//img.aotu.io/pfan/edge/5.jpg" alt="edge"></p>
<p>edge animation 代码管理<br>代码管理器使用一个单独完整的窗口界面来展示所有事件控制代码和时间线触发器。（快捷键Ctrl/Command + E或者通过菜单Window-Code打开）所被编辑的控制代码或触发器会被高亮显示。<br>1.点击“+”图标添加全局、局部、时间线控制代码或者触发器；<br>2.点击“Full Code”按钮可以显示并编辑单个文件的全部代码，而不仅仅是单个功能函数内部代码；<br>3.可以通过下方的代码错误提示窗进行错误快速排除检测。<br><img src="//img.aotu.io/pfan/edge/6.jpg" alt="edge"></p>
<h2 id="实例操作"><a href="#实例操作" class="headerlink" title="实例操作"></a>实例操作</h2><p>当我们了解以上这些知识点，之后，我们来做一下简单的实例，实现顶部图片我们所看到的界面，人物跑动，背景向前移动。<br><img src="//img.aotu.io/pfan/edge/7.jpg" alt="edge"></p>
<h2 id="第一部分-使用SpriteSheet在Edge-Animate中制作人物跑动的动画"><a href="#第一部分-使用SpriteSheet在Edge-Animate中制作人物跑动的动画" class="headerlink" title="第一部分 使用SpriteSheet在Edge Animate中制作人物跑动的动画"></a>第一部分 使用SpriteSheet在Edge Animate中制作人物跑动的动画</h2><p>1.启动Edge Animate，创建一个新项目blackfriday，设置stage大小为640*1136；</p>
<p>2.导入blackfriday SpriteSheet　<br>点击菜单“File-&gt;Import”,或者快捷键Ctrl+I / Command+I，来导入blackfriday_sprite.png到舞台。在舞台上选中导入的图片，在左边栏Position and Size栏目下，设定其X坐标值=160px,y坐标值为330px，保证第一个smurf的位置在舞台最左侧并垂直居中。</p>
<p>3.使用Clip切割Spritesheet，显示单一Sprite元素<br>我们导入的蓝精灵Spritesheet是320*480大小的透明背景png图片，一共描绘了32个蓝精灵行走的姿态。通过序列播放这32个行走姿态，就可以制作一个完整蓝精灵行走动画。<br>首先，要在舞台上只显示一个Sprite元素，比如最左上角的第一个蓝精灵。在Edge Animate左侧属性面板中，倒数第二个栏目是clip子面板。顾名思义，clip功能区可以帮助我们“切割”舞台上的元素，比如图片。该功能区实际上利用了CSS的clip属性。<br>点击clip子面板的开关按钮，可以激活clip功能。使用鼠标，可以在clip属性设定面板上的上、下、左、右属性值上滑动，你可以在舞台上实时看到“切割”的图片情况。如下图。 在本例中，请设定clip的top，right，bottom，left属性值分别为0, 320,480,0。<br><img src="//img.aotu.io/pfan/edge/8.jpg" alt="edge"></p>
<ol>
<li>创建32个Keyframe，实现行走动作<br>接下来，我们创建32个帧来完成蓝精灵行走的动作。<br>1) 调整帧间隔<br>在舞台下方的时间轴上，Edge Animate用竖线网格标记了每帧间距。在Smurf行走动画中，我们希望在1毫秒的时间左右完成一个行走动作，即32帧。因此，我们需要通过时间轴下方的Gird Size图标调整时间轴为30帧/秒。如下图：<br><img src="//img.aotu.io/pfan/edge/9.png" alt="edge"><br>2) 激活“Auto-Keyframe Mode (自动创建帧)”<br>Edge Animate有三个非常重要的按钮分别开启Auto-Keyframe Mode（自动创建关键帧）、Auto-Transition Mode和Toggle Pin（大头针）。图标如下图：<br><img src="//img.aotu.io/pfan/edge/10.png" alt="edge"><br>Edge Animate Buttons<br>本例中，我们将启用Auto-Keyframe Mode，而关闭Auto-Transition Mode和Pin。在启用Auto-Keyframe Mode的情况下，每当我们在新的一帧修改舞台中元素的属性，Edge Animate会自动在此创建关键帧。由于我们关闭了Auto-Transition Mode，因此Edge Animate将不会自动在关键帧之间创建过渡效果。<br>3) 创建第一个关键帧<br>在时间轴上，把播放头移到0:00秒位置，选中舞台中的蓝精灵，在左边属性面板中的Image子面板下，确认Background Image的x和y属性值为0，然后点击x和y属性边上的小菱形符号（当鼠标移到该菱形符号时，其变为黄色，并显示tips：“Add Keyframe for Background Position”），此时Edge Animate将在时间轴的0:00秒出创建第一个关键帧。如下图<br><img src="//img.aotu.io/pfan/edge/11.jpg" alt="edge"><br>依此方法，在gard线上接着做31个帧。</li>
</ol>
<p>5。创建完成后，预览：<br>使用快捷键Ctrl+Enter/Command+Enter，可以启动默认浏览器看起运行的效果.<br>现在，人物已经实现了行走动作，但是还没有完成行进，还不循环播放，运行完32个帧就停止了。</p>
<p>6.转换为元件在最后一帧，设置trigger触发器，达到帧循环动画<br>在舞台上选中该图片后，快捷键Cmd+Y/Ctrl+Y将其转换成一个元件(Symbol)，叫us，然后删除stage舞台上面的元素，从library面板里面拖动stage舞台上面 。双击元件，进入元件舞台区域，如图，insert trigger：<br><img src="//img.aotu.io/pfan/edge/12.jpg" alt="edge"><br><img src="//img.aotu.io/pfan/edge/13.png" alt="edge"></p>
<h2 id="第二部分-实现背景的滚动"><a href="#第二部分-实现背景的滚动" class="headerlink" title="第二部分 实现背景的滚动"></a>第二部分 实现背景的滚动</h2><p>1.倒入背景图片，生成元件<br>快捷键Cmd+I/Ctrl+I导入背景图片american.png，在舞台上选中该图片后，快捷键Cmd+Y/Ctrl+Y将其转换成一个元件(Symbol)，命名为americanbg2。<br>2.激活Auto-Keyframe Mode，Auto-transition Mode，平移背景图片形成单循环的过渡动画。<br>但是当背景向左移出舞台的时候，会看到舞台空出了部分<br>3.实现背景图循环滚动的效果<br>再次向舞台导入元件，命名为americanbg4.拷贝americanbg2的运动动画，到americanbg2左移舞台出现空白的临界点帧时间，给americanbg4粘贴动画效果。因为我们不需要americanbg4整体效果，所以需要删除americanbg4运动帧超出americanbg2运动帧的结束点。<br><img src="//img.aotu.io/pfan/edge/14.jpg" alt="edge"><br>4.最后一帧，设置trigger触发器，形成循环动效</p>
<h2 id="第三部分-增加音乐，闪烁星空"><a href="#第三部分-增加音乐，闪烁星空" class="headerlink" title="第三部分 增加音乐，闪烁星空"></a>第三部分 增加音乐，闪烁星空</h2><p>这一部分，基本参照第一二部分的我们就可以完成整个动画，有一点需要注意设置playback，做初始延迟。</p>
<h2 id="第四部分-处理移动端的适配，增加loading"><a href="#第四部分-处理移动端的适配，增加loading" class="headerlink" title="第四部分 处理移动端的适配，增加loading"></a>第四部分 处理移动端的适配，增加loading</h2><p>由于这里出来的动画是640x1136px出来的效果，实现多终端预览时，需要做适配处理，这里我是采用scale进行缩放，已到达统一的效果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> c=<span class="built_in">document</span>.documentElement,d=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> b=c.getBoundingClientRect().width;s=(<span class="number">640</span>&lt;=b?<span class="number">640</span>:b)/<span class="number">640</span>,<span class="built_in">document</span>.write(<span class="string">'&lt;style id="scaleCon"&gt;.o2-scale&#123;-webkit-transform: scale('</span>+s+<span class="string">"); transform: scale("</span>+s+<span class="string">");-webkit-transform-origin:0% 0%;transform-origin:0% 0%;&#125;&lt;/style&gt;"</span>);<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> e=c.getBoundingClientRect().width;s=(<span class="number">640</span>&lt;=e?<span class="number">640</span>:e)/<span class="number">640</span>;<span class="built_in">document</span>.getElementById(<span class="string">"scaleCon"</span>).innerHTML=<span class="string">".o2-scale&#123;-webkit-transform: scale("</span>+s+<span class="string">"); transform: scale("</span>+s+<span class="string">");-webkit-transform-origin:0% 0%;transform-origin:0% 0%;&#125;"</span>&#125;)&#125;;d()&#125;)();</div></pre></td></tr></table></figure></p>
<p>我们只需要把class类o2-scale，添加给舞台就可以，完成适配。</p>
<p><a href="http://pingfan1990.sinaapp.com/jdcase/blackfriday/" target="_blank" rel="external">demo演示效果</a><br>手机扫描：<br><img src="//img.aotu.io/pfan/edge/15.jpg" alt="edge"><br>ios，android亲测，效果还是比较流畅的。</p>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://www.adobe.com/devnet-docs/edgeanimate/api/current/index.html#audio" target="_blank" rel="external">Adobe Edge Animate CC 2014 JavaScript API 5.0</a><br><a href="https://helpx.adobe.com/edge-animate/how-to/edge-animate-symbols.html" target="_blank" rel="external">Adobe Edge Animate 视频教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Edge Animate是Adobe出品的制作HTML5动画的可视化工具，简单的可以理解为HTML5版本的Flash Pro。Adobe Edge Animate的目的是帮助专业设计师制作网页动画乃至简单游戏。目前该工具的重点放在动画引擎上，将增加更多HTML5功能，比如Canvas、HTML5音频/视频标签等。支持Android、iOS、webOS、黑莓PlayBook、Firefox、Chrome、Safari和IE9等各个平台。&lt;/p&gt;
&lt;p&gt;Edge Animate主要使用HTML5,CSS3和JavaScript。HTML5是其用于创建的doctype，2D的transform，translate，rotate，scale，skew等特效都是渲染为CSS3，如果是最新版本的浏览器，可以操作纯粹的CSS3，如果是主流大众浏览器，Edge Animate则会通过JavaScript库的配合来保证HTML和CSS的显示兼容性。&lt;br&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="edge animate" scheme="https://aotu.io/tags/edge-animate/"/>
    
      <category term="html5" scheme="https://aotu.io/tags/html5/"/>
    
      <category term="animate" scheme="https://aotu.io/tags/animate/"/>
    
  </entry>
  
  <entry>
    <title>精致化页面重构</title>
    <link href="https://aotu.io/notes/2015/11/24/project-summary/"/>
    <id>https://aotu.io/notes/2015/11/24/project-summary/</id>
    <published>2015-11-24T12:23:44.000Z</published>
    <updated>2016-10-20T07:06:32.406Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="一-布局方式"><a href="#一-布局方式" class="headerlink" title="一 布局方式"></a>一 布局方式</h2><p>作为一个注重用户体验的 H5 页面，合适的页面布局方式很重要。<br>移动端页面常规布局基本分两种：</p>
<h3 id="1-流式布局（响应式宽度自适应布局）"><a href="#1-流式布局（响应式宽度自适应布局）" class="headerlink" title="1. 流式布局（响应式宽度自适应布局）"></a>1. 流式布局（响应式宽度自适应布局）</h3><p>这是普遍使用的方法，流式布局使用这个标签即可自适应所有尺寸的屏幕。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>优点：响应式、简单、兼容好。<br>缺点：非设计稿尺寸屏幕展现效果可能不是很理想。</p>
<h3 id="2-版式布局（页面等比缩放布局）"><a href="#2-版式布局（页面等比缩放布局）" class="headerlink" title="2. 版式布局（页面等比缩放布局）"></a>2. 版式布局（页面等比缩放布局）</h3><p><strong>可行方案：</strong></p>
<ol>
<li>页面使用 REM 作为页面数值单位运算。</li>
<li>通过 zoom/scale 整体缩放页面。</li>
</ol>
<p>优点：页面等比缩放，比例与设计稿一致。<br>缺点：大屏手机等比放大后的体验可能不佳。</p>
<h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><p>两种布局方式各有优劣，项目最终选用流式布局，原因：</p>
<ol>
<li>部分页面还是与现有项目模块共用，版式布局改动成本偏高，不好维护。</li>
<li>考虑到页面在大屏手机等比放大后的体验可能不佳。</li>
<li>流式布局可以针对大屏手机做一些更灵活的排版（配合媒体查询），达到更好的用户体验。</li>
</ol>
<h2 id="二-设计规范"><a href="#二-设计规范" class="headerlink" title="二 设计规范"></a>二 设计规范</h2><p>设计规范也是重要元素之一，条件允许情况下，从开发前期就需要跟设计师达成共识制定了一套设计规范。</p>
<p><strong>设计规范需要包括：</strong><br>页面背景色、文字颜色、边框颜色、各种按钮样式、图标等等全局通用样式。</p>
<p><img src="//img.aotu.io/liqinuo/1.png" alt="设计规范"></p>
<p>当然除了前期到设计规范，开发过程中这边也需要分离出一些可复用的组件、公共样式，包括：<br>公共底部、商品组模块、轮播组件等等。</p>
<h2 id="三-技巧"><a href="#三-技巧" class="headerlink" title="三 技巧"></a>三 技巧</h2><h3 id="1-还原设计稿的-0-5px"><a href="#1-还原设计稿的-0-5px" class="headerlink" title="1. 还原设计稿的 0.5px"></a>1. 还原设计稿的 0.5px</h3><blockquote>
<p>在 2014 年的 WWDC，“设计响应的 Web 体验” 一讲中，Ted O’Connor 讲到关于“retina hairlines”（retina 极细的线）：在 retina 屏上仅仅显示 1 物理像素的边框。</p>
</blockquote>
<p>简单点说就是：在 Retina 屏的设备上，1px 其实相当于  2 个物理像素，所以 1 个物理像素 = 0.5px。</p>
<p><img src="//img.aotu.io/liqinuo/2.png" alt="精致化重构"></p>
<p>实现 0.5px 有很多种方法，这里比较一下各种处理的优缺点：</p>
<h4 id="1-iOS8-以上支持-0-5px"><a href="#1-iOS8-以上支持-0-5px" class="headerlink" title="1. iOS8 以上支持 0.5px"></a>1. iOS8 以上支持 0.5px</h4><p>实现原理：常规属性。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.border</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">0.5px</span> solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点：原生、简单、常规写法。<br>缺点：目前只有 iOS8 以上系统才能支持，iOS7及以下、安卓系统都显示为 0px，可以通过脚本判断系统然后区分处理。</p>
<h4 id="2-CSS-渐变模拟"><a href="#2-CSS-渐变模拟" class="headerlink" title="2. CSS 渐变模拟"></a>2. CSS 渐变模拟</h4><p>实现原理：设置 1px 通过 css 实现的背景图片，50%有颜色，50%透明。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.border</span> &#123;</div><div class="line">    <span class="attribute">background-image</span>:<span class="built_in">linear-gradient</span>(180deg, red, red 50%, transparent 50%), <span class="built_in">linear-gradient</span>(270deg, red, red 50%, transparent 50%), <span class="built_in">linear-gradient</span>(0deg, red, red 50%, transparent 50%), <span class="built_in">linear-gradient</span>(90deg, red, red 50%, transparent 50%);</div><div class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">1px</span>, <span class="number">1px</span> <span class="number">100%</span>, <span class="number">100%</span> <span class="number">1px</span>, <span class="number">1px</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">    <span class="attribute">background-position</span>: top, right top, bottom, left top;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>优点：兼容性较好，单边框、多边框可实现，大小、颜色可配置。<br>缺点：代码量多、无法实现圆角、同时占用了背景样式</p>
<h4 id="3-阴影"><a href="#3-阴影" class="headerlink" title="3. 阴影"></a>3. 阴影</h4><p>实现原理：利用 css 对阴影处理的方式模拟。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.border</span> &#123;</div><div class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> -<span class="number">1px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.5);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>优点：兼容性较好，单边框、多边框、圆角可实现，大小、颜色、可配置。<br>缺点：模拟效果强差人意，颜色不好配置。</p>
<h4 id="4-viewport-rem"><a href="#4-viewport-rem" class="headerlink" title="4. viewport + rem"></a>4. viewport + rem</h4><p>实现原理：通过设置页面 viewport 与对应 rem 基准值。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- devicePixelRatio = 2：--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- devicePixelRatio = 3：--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>优点：兼容比较好，写法跟常规写法无异。<br>缺点：老项目改用 rem 单位成本较高。</p>
<h4 id="5-border-image"><a href="#5-border-image" class="headerlink" title="5. border-image"></a>5. border-image</h4><p>实现原理：通过图片配合边框背景模拟。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.border-image</span>&#123;</div><div class="line">    <span class="attribute">border-image</span>: <span class="built_in">url</span>() <span class="number">2</span> <span class="number">0</span> stretch;</div><div class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>优点：无。<br>缺点：图片边缘模糊，大小、颜色更改不灵活。</p>
<h4 id="6-CSS3-缩放"><a href="#6-CSS3-缩放" class="headerlink" title="6. CSS3 缩放"></a>6. CSS3 缩放</h4><p>实现原理：利用 :before/:after 重做 border，配合 scale 使得伪元素缩小一半<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$bor_style</span> : <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">%<span class="attribute">border-top</span>-1pt &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="variable">$bor_style</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio:<span class="number">2</span>) &#123;</div><div class="line">    %<span class="attribute">border-top</span>-1pt &#123;</div><div class="line">        -webkit-<span class="attribute">transform</span>: scaleY(<span class="number">0.5</span>);</div><div class="line">        -webkit-<span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0%</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>优点：实现简单、单边框、多边框、圆角可实现，大小、颜色可配置。<br>缺点：代码量多，可通过 sass 预处理器处理。</p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>经过比较与实操测试，最好的处理方式是 CSS3 缩放，目前项目已经在广泛使用。</p>
<h3 id="2-Flexbox-布局"><a href="#2-Flexbox-布局" class="headerlink" title="2. Flexbox 布局"></a>2. Flexbox 布局</h3><blockquote>
<p>Flexbox Layout（弹性盒模型）模块（目前W3C工作草案正在最后通过）的目的是为了提供一种更有效的方式来布局，使各模块即使大小是未知或者动态的也可以在项目空间中合理分配位置（就像“弹性”这个词一样）。</p>
</blockquote>
<p>项目哪些地方可以使用 flexbox？比如这些</p>
<p><img src="//img.aotu.io/liqinuo/3.png" alt="精致化重构"></p>
<h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span> &#123;</div><div class="line">    <span class="attribute">display</span>: box;</div><div class="line">    <span class="attribute">display</span>: -webkit-box;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">display</span>: -webkit-flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">-webkit-flex</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">box-flex</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-元素水平垂直居中"><a href="#3-元素水平垂直居中" class="headerlink" title="3. 元素水平垂直居中"></a>3. 元素水平垂直居中</h3><p>实现的方法有很多种，下面几种比较常用：</p>
<h4 id="1-表格方法："><a href="#1-表格方法：" class="headerlink" title="1. 表格方法："></a>1. 表格方法：</h4><p>实现方法：表格内容本来就是垂直居中的，可以通过模拟表格处理。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_center"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box_center</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box_center</span> <span class="selector-class">.inner</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-vertical-align-middle"><a href="#2-vertical-align-middle" class="headerlink" title="2. vertical-align: middle"></a>2. vertical-align: middle</h4><p>实现方法：利用空元素占位实现<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_center"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"placeholder"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box_center</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box_center</span> <span class="selector-class">.inner</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box_center</span> <span class="selector-class">.placeholder</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-绝对定位"><a href="#3-绝对定位" class="headerlink" title="3. 绝对定位"></a>3. 绝对定位</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">%<span class="selector-tag">box_center</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">margin</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-使用-transform-实现"><a href="#4-使用-transform-实现" class="headerlink" title="4. 使用 transform 实现"></a>4. 使用 transform 实现</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">%<span class="selector-tag">box_center</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>兼容性：Android2.3 系统浏览器不支持容器直接使用 fixed 进行定位，外加 fixed 容器可解决。</p>
<h4 id="结论：-1"><a href="#结论：-1" class="headerlink" title="结论："></a>结论：</h4><p>经过各种场景的适用型比较，项目使用  transform 实现，兼容性好且使用方便。</p>
<h3 id="4-图片占位"><a href="#4-图片占位" class="headerlink" title="4. 图片占位"></a>4. 图片占位</h3><p>图片未加载出来之前浏览器是无法计算出图片实际尺寸的，所以会出现一个问题，页面刚打开各种元素会因为图片未完全加载而跳动/错位。</p>
<p>这里推荐一种兼容性很好做法简单的方法：</p>
<p><strong>实现原理：</strong><br>通过图片宽高比例计算出图片所需占位空间，赋值于外容器，图片再绝对定位在等比缩放的容器当中。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.placeholder</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>:</div><div class="line">    height: <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding-top</span>: <span class="number">100%</span>:</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.placeholder</span> <span class="selector-tag">img</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: auto;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>计算公式：</strong><br>padding-top = 图片高度(px)/图片宽度(px) * 100%</p>
<p><strong>比如：</strong><br>1:1 比例的图片 padding-top: 100%;<br>2:1 比例的图片 padding-top: 50%;</p>
<h2 id="四-尽可能减少样式图片"><a href="#四-尽可能减少样式图片" class="headerlink" title="四 尽可能减少样式图片"></a>四 尽可能减少样式图片</h2><p>大多图标元素都可以使用 CSS 样式绘制，可以大大减少样式图资源请求还有增强图标可维护性。<br>比如：链接箭头、圆点、优惠券点点、选择框、checkbox等等。</p>
<p><img src="//img.aotu.io/liqinuo/4.png" alt="精致化重构"></p>
<h2 id="五-使用-WebP-格式图片"><a href="#五-使用-WebP-格式图片" class="headerlink" title="五 使用 WebP 格式图片"></a>五 使用 WebP 格式图片</h2><blockquote>
<p>WebP 格式，由 google 于 2010 年推出的新一代图片格式，在压缩方面比 JPEG 格式更优越，并能节省大量的服务器带宽资源和数据空间。与 JPEG 相同，WebP 也是一种有损压缩，主要优势在于高效率。在质量相同的情况下，WebP 格式图像的体积要比 JPEG 格式图像小 40%。</p>
</blockquote>
<p>项目中大部分页面素材图都使用了 WebP 格式，兼容方案：</p>
<ol>
<li><p><strong>打开场景是浏览器：</strong>通过 javascript 检测，对支持 WebP 的用户输出 WebP 格式图片。<br>WebP 支持 插件：<a href="http://webpjs.appspot.com/" target="_blank" rel="external">http://webpjs.appspot.com/</a></p>
</li>
<li><p><strong>打开场景是APP：</strong>根据不同系统使用 Android WebP 解析库或iOS WebP 解析库做兼容解析。<br>Android4.0 以下解析库：<a href="https://github.com/alexey-pelykh/webp-android-backport" target="_blank" rel="external">https://github.com/alexey-pelykh/webp-android-backport</a><br>iOS 解析库：<a href="https://github.com/carsonmcdonald/WebP-iOS-example" target="_blank" rel="external">https://github.com/carsonmcdonald/WebP-iOS-example</a></p>
</li>
</ol>
<p>PS：除了 Android4.0 以上提供原生支持</p>
<p>资料参考：<a href="http://isux.tencent.com/introduction-of-webp.html" target="_blank" rel="external">http://isux.tencent.com/introduction-of-webp.html</a></p>
<p><strong>结论：</strong><br>保证图片高清质量的同时，大大压缩了图片大小，节省了服务器带宽资源和数据空间。</p>
<h2 id="六-APP缓存策略"><a href="#六-APP缓存策略" class="headerlink" title="六 APP缓存策略"></a>六 APP缓存策略</h2><p>注： APP缓存策略由开发同学提供</p>
<h3 id="1-缓存方式"><a href="#1-缓存方式" class="headerlink" title="1. 缓存方式"></a>1. 缓存方式</h3><ul>
<li><p>模块化的使用 APP 缓存，写入磁盘，包括 HTML、JS、CSS。</p>
</li>
<li><p>图片使用浏览器缓存，稳定后的背景图以及常用图片也使用 APP 缓存。</p>
</li>
</ul>
<h3 id="2-缓存更新"><a href="#2-缓存更新" class="headerlink" title="2. 缓存更新"></a>2. 缓存更新</h3><ul>
<li><p><strong>主模块更新：</strong>APP 打开就发送主模块版本号到服务端，返回有更新的模块内容以及版本号，并且返回所有模块版本索引。</p>
</li>
<li><p><strong>子模块更新：</strong>进去一个主模块，在加载完成后，会检查所有子模块版本索引，并获取需要更新的模块内容。</p>
</li>
<li><p><strong>当前模块更新：</strong>在直接打开模块时（非首页进入），会去 check/更新一下当前版本，然后在加载。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;一-布局方式&quot;&gt;&lt;a href=&quot;#一-布局方式&quot; class=&quot;headerlink&quot; title=&quot;一 布局方式&quot;&gt;&lt;/a&gt;一 布局方式&lt;/h2&gt;&lt;p&gt;作为一个注重用户体验的 H5 页面，合适的页面布局方式很重要。&lt;br&gt;移
    
    </summary>
    
      <category term="项目总结" scheme="https://aotu.io/cates/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="summary" scheme="https://aotu.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>使用ThreeJS在浏览器中展示3D物件</title>
    <link href="https://aotu.io/notes/2015/11/24/3D-CleaningCream/"/>
    <id>https://aotu.io/notes/2015/11/24/3D-CleaningCream/</id>
    <published>2015-11-24T05:00:35.000Z</published>
    <updated>2016-10-20T07:06:32.406Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇介绍如何在浏览器中展示<del style="background-color: #333!important;color: #333 !important;">洗面奶</del>3D物件的文章。<br><a id="more"></a> </p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇文章仅仅是向你介绍应对下面这种的场景的方法：如果有人突然跟你说，你的皮肤挺不错的耶，你用的什么洗面奶，我也想买一个，你会怎么回答呢？手头又没法拿出你的洗面奶给他看，光凭言语无法准确地形容出你的洗面奶到底长什么样。作为前端的程序猿，我会想，这种时候如果可以有一个链接让对方自己去看一下把玩一下，对方势必会对你的洗面奶<del style="background-color: #333!important;color: #333 !important;">高Bigger</del>有更深刻的认识。本文的目的，就是向屏幕对面的程序猿介绍这种高效<del style="background-color: #333!important;color: #333 !important;">搞笑</del>的方式。</p>
<h3 id="走进3D的世界"><a href="#走进3D的世界" class="headerlink" title="走进3D的世界"></a>走进3D的世界</h3><p>在页面里面放几个图片是完全无法满足让观看者自己看自己把玩的要求的。所以这里我们将会使用3D的形式来展现我们的洗面奶。老话说得好，同样是山，却有横看成岭侧成峰的不同。比起2D渲染，3D渲染多了一个维度，由于透视效果，物体遮挡、光照角度、光的反射折射等的存在，观看者在不同的角度观看会得到不同的结果。</p>
<p>在浏览器里面，CSS3提供了3D变换的相关属性，但对于光照相关的需求却是无能为力。而使用Canvas进行绘制的话，如果不依赖封装好的图形库，进行图形变换又是相当麻烦的事情。就算是在CSS中一个简单的2D旋转或者是放大，在Canvas的像素操作中，我们还需要通过矩阵计算才能知道变换后每个像素的位置。正因如此，图形库出现了。</p>
<p>说到图形库，我们不得不提到<a href="http://www.opengl.org" target="_blank" rel="external">OpenGL</a>。OpenGL是一个跨平台的图形编程规范，定义了2D与3D绘制中所需要各种接口，进行图形绘制中所需要的变换，纹理映射，光照等。OpenGL定义的接口很多是为硬件加速设计的。有了各大硬件厂商的支持，OpenGL的渲染效率比起软件渲染高了不止一点点。同时，OpenGL不局限于某平台或者是语言，它只是一个关于图形渲染的规范，对外提供关于图形渲染的各种接口，所以有许多的语言绑定，而在浏览器中用到的是Javascript的绑定WebGL。</p>
<h3 id="ThreeJS"><a href="#ThreeJS" class="headerlink" title="ThreeJS"></a>ThreeJS</h3><p><a href="http://threejs.org/" target="_blank" rel="external">ThreeJS</a>是一款在浏览器中进行3D绘制的Javascript库，为使用canvas绘制，WebGL渲染等图形操作提供了简便的API。到底有多简便？在<a href="http://www.pixijs.com" target="_blank" rel="external">PixiJS</a>等2D绘制库中，我们需要场景+物件+贴图来搞定一张图，而在ThreeJS中我们只需要在这基础上额外添加适当光照与一台照相机而已，下面是一个最简单的Demo，绘制了一个旋转的绿色立方体。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</div><div class="line"><span class="comment">/*创建场景*/</span></div><div class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera( <span class="number">75</span>, <span class="built_in">window</span>.innerWidth/<span class="built_in">window</span>.innerHeight, <span class="number">0.1</span>, <span class="number">1000</span> );</div><div class="line"><span class="comment">/*创建照相机*/</span></div><div class="line"><span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</div><div class="line"><span class="comment">/*创建渲染器*/</span></div><div class="line">renderer.setSize( <span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight );</div><div class="line"><span class="built_in">document</span>.body.appendChild( renderer.domElement );</div><div class="line"></div><div class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.BoxGeometry( <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> );</div><div class="line"><span class="comment">/*创建几何模型*/</span></div><div class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial( &#123; <span class="attr">color</span>: <span class="number">0x00ff00</span> &#125; );</div><div class="line"><span class="comment">/*创建材质*/</span></div><div class="line"><span class="keyword">var</span> cube = <span class="keyword">new</span> THREE.Mesh( geometry, material );</div><div class="line"><span class="comment">/*几何模型与材质合成为物件*/</span></div><div class="line">scene.add( cube );</div><div class="line"><span class="comment">/*将物件添加入场景*/</span></div><div class="line"></div><div class="line">camera.position.z = <span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	requestAnimationFrame( render );</div><div class="line">	cube.rotation.x += <span class="number">0.1</span>;</div><div class="line">	cube.rotation.y += <span class="number">0.1</span>;</div><div class="line">	renderer.render(scene, camera);</div><div class="line">	<span class="comment">/*渲染出在相机camera中看到的scene场景*/</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">render();</div></pre></td></tr></table></figure>
<p>画出来就像这样子：<br><img src="//img.aotu.io/Littly/rollingCube.png" alt="旋转立方体"></p>
<p>ThreeJS中提供了少量基础的几何模型，如长方体(Box3)，球体(Sphere)等，但面对我们要实现的洗面奶还是太小儿科了。这是不是说明我们的洗面奶没办法做了？文章都写到这里了，办法肯定是有的。ThreeJS提供了加载外部模型的模块(Loader)，可以加载外部的Obj，json等格式的模型。另外，ThreeJS的<a href="https://github.com/mrdoob/three.js/tree/master/utils/exporters" target="_blank" rel="external">Github仓库</a>中还提供了在3ds Max、Blender等3D绘制软件中导出模型的工具。是的，我们就可以用别的3D建模软件建模再导出成ThreeJS所需要的格式了。</p>
<h3 id="动手"><a href="#动手" class="headerlink" title="动手"></a>动手</h3><p>我们这里使用的是建模工具是Blender。我们需要先拍下物体的三视图作为建模的参考。导入Blender后，依据三视图，我们很快就可以建出洗面奶的模型。</p>
<p>模型的样子<br><img src="//img.aotu.io/Littly/modeling.png" alt="建模"></p>
<p>在Blender中加上ThreeJS的插件之后，我们可以在Blender的文件菜单中见到Export/Three.js(.json)选项。点击之后，选择导出的目录，然后记得在左下角勾上我们要导出的元素。在这个例子中，我们需要导出的是Scene，也就是场景本身。<br><img src="//img.aotu.io/Littly/exporting.jpg" alt="导出菜单"></p>
<p>在ThreeJS中进行导入的操作也十分简单。ThreeJS中提供了许多种类的Loader，分别针对不同的使用需求。比如，JSONLoader针对的是.json格式的模型，OBJLoader针对的是.obj格式的模型等等。翻阅网上资料的时候还可以看到SceneLoader的踪影，这就是用来加载整个场景的.json格式文件的。可是在ThreeJS的新版本中，SceneLoader已经被废弃，取而代之的是更为牛叉更为智能的ObjectLoader。ObjectLoader可以判断导出的模型到底是什么种类，从而将它们转化为ThreeJS中的对应对象便于开发者使用。</p>
<p>在这个例子中，我们导出的.json文件中包含的是场景本身。所以，除了需要添加部分ObjectLoader的代码，其余部分的代码甚至比上面那个例子还要简单：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scene,</div><div class="line">	camera,</div><div class="line">	renderer,</div><div class="line">	loader,</div><div class="line">	wid,</div><div class="line">	hei,</div><div class="line">	animate;</div><div class="line">	</div><div class="line">animate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	renderer.render(scene, camera);</div><div class="line">	requestAnimationFrame(animate);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">wid = <span class="built_in">window</span>.innerWidth;</div><div class="line">hei = <span class="built_in">window</span>.innerHeight;</div><div class="line">camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">45</span>, wid / hei, <span class="number">1</span>, <span class="number">1000</span>);</div><div class="line"><span class="comment">/*创建照相机*/</span></div><div class="line"></div><div class="line">camera.position.set(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">camera.lookAt(<span class="keyword">new</span> THREE.Vector3(<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>));</div><div class="line"></div><div class="line">renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</div><div class="line">renderer.setSize(wid, hei);</div><div class="line"></div><div class="line">loader = <span class="keyword">new</span> THREE.ObjectLoader();</div><div class="line"><span class="comment">/*创建ObjectLoader*/</span></div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.appendChild(renderer.domElement);</div><div class="line"></div><div class="line">loader.load(<span class="string">'objs/object.json'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">_sce</span>) </span>&#123;</div><div class="line">	scene = _sce;</div><div class="line">	scene.add(camera);</div><div class="line">	animate();</div><div class="line">&#125;);</div><div class="line"><span class="comment">/*加载Scene，成功后执行回调开始动画*/</span></div></pre></td></tr></table></figure>
<p>浏览器中一看，却不太对劲。形状对了，可是颜色呢？高端黑的洗面奶怎么就变成这么山寨的颜色了，而且每次刷新都变颜色。活了二十几年，小便表示还真没见到过这样的洗面奶。</p>
<p><img src="//img.aotu.io/Littly/neverseen.png" alt="跑马灯"></p>
<p>出现这种情况，毫无疑问是材质的问题。原来我们在建模软件中还没给洗面奶加过材质，所以ThreeJS加载完我们的.json文件后，发现只有模型却没有材质，就给模型加上了一个随机颜色的材质。解决办法也很简单，在ThreeJS中手动贴上贴图就好了。而更简单且有效的办法是，在建模软件中上好贴图再一起导出。</p>
<p>回到Blender中，将洗面奶的表面进行UV展开后导出展开图后，我们新建一张图片，将我们要贴的图放到展开图上的相应位置，再回到Blender中将这张新的图片设为瓶身的材质。渲染一下，检查到效果无误后，将模型导出。这次要记得将左下角的Materials勾上，另外还需要勾上texture的复选框。</p>
<p>将这次导出的模型放到先前的目录下，我们会发现，浏览器中并没有出现想象中的场景。在控制台中可以看到，由于我们没有将贴图一起放到一个目录下，贴图加载失败了。按照要求放好后，我们会更惊奇地发现，浏览器中除了一片黑，什么都没有。这是为什么呢？<br><img src="//img.aotu.io/Littly/dark.png" alt="一片黑"></p>
<blockquote>
<p>神说要有光，所以就有了光。</p>
</blockquote>
<p>在3D的世界中，光是非常重要的存在。我们之所以能看见物体，都是因为有光进入了我们的眼球。除去本身会发光的物体，我们能看见的其他的物体，都是因为这些物体将外界的光反射后进入我们眼球了。换句话说，没有光的话我们就什么都看不到。</p>
<p>在ThreeJS中也是如此。如果没有光，我们就看不到自发光以外的材质，视野中将是一片黑。在ThreeJS中，光照也有很多种：全局光照(AmbientLight),有向光(DirectionalLight)，点光源(PointLight)等。在这个例子中，为了360观看整个物体，我们添加一个全局光照。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> light = <span class="keyword">new</span> THREE.AmbientLight( <span class="number">0xffffff</span> );</div><div class="line">scene.add( light );</div></pre></td></tr></table></figure>
<p>再刷新一下，就可以看见我们的洗面奶了。大功告成!<br><img src="//img.aotu.io/Littly/completed.png" alt="成功"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>进行3D建模，将物体在浏览器中展示，目前已经有了不少的应用，有的公司在宣传新产品的时候会使用上这样的技术，让消费者可以在浏览器中亲自把玩产品，观察产品的每个小角落，起到了不错的效果。同样的技术并不只是在展示商品的时候能用上。将适当的全景图贴在立方体的内表面，用户视角置于立方体中心点的话，还可以让用户有置身其境的感觉，可以上下左右转动视角观察一个地点周围的景象，做出街景的效果。可以说，浏览器中的3D技术将会有越来越多的用武之地。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇介绍如何在浏览器中展示&lt;del style=&quot;background-color: #333!important;color: #333 !important;&quot;&gt;洗面奶&lt;/del&gt;3D物件的文章。&lt;br&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="three.js" scheme="https://aotu.io/tags/three-js/"/>
    
  </entry>
  
  <entry>
    <title>以电影之眼看CSS3动画（一）</title>
    <link href="https://aotu.io/notes/2015/11/23/css3-animation-to-movie-part_1/"/>
    <id>https://aotu.io/notes/2015/11/23/css3-animation-to-movie-part_1/</id>
    <published>2015-11-23T09:27:00.000Z</published>
    <updated>2016-10-20T07:06:32.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="以电影之眼看CSS3动画（一）"><a href="#以电影之眼看CSS3动画（一）" class="headerlink" title="以电影之眼看CSS3动画（一）"></a>以电影之眼看CSS3动画（一）</h1><hr>
<pre><code>注：此文非干货聚集地，来找干货的对不住了。    
注注：又多又大的图预警！！！
</code></pre><p><a href="http://isux.tencent.com/css3/index.html" target="_blank" rel="external">CSS3动画</a>的变形基础（transform）包含4种变形方式（translate、rotate、scale、skew），同时还可设置2D、3D、变形原点（transform-origin）、透视（perspective）、透视原点（perspective-origin）等等特性；动画时间频率包含9种基本模式（ease、linear、ease-in、ease-out、ease-in-out、step-start、step-end、steps），甚至还可以使用cubic-bezier写出任何你想要的模式；再加上动画持续时间（animation-duration）等设定，各种排列组合，CSS3动画简直拥有了整个世界！</p>
<p><img src="//img.aotu.io/lyxuncle/1-1_trandition_animation.png" alt="trandition_animation"></p>
<ul>
<li>图片来源《动画的时间掌握》</li>
</ul>
<p>根据<a href="http://zh.wikipedia.org/wiki/%E5%8A%A8%E7%94%BB" target="_blank" rel="external">维基</a>的释义，动画是指由许多帧静止的画面，以一定的速度（如每秒16张）连续播放时，肉眼因视觉残象产生错觉，而误以为画面活动的作品（gif图片正是运用这种原理）。因此最初的动画是通过几张快速翻动的连续画面制作而成，而后经历了电影摄影技术的出现、电脑科技的进步，逐渐转向数字化。</p>
<p><img src="//img.aotu.io/lyxuncle/1-2_bouncing_ball.gif" alt="bouncing_ball"><br><img src="//img.aotu.io/lyxuncle/1-3_boucing_ball_frames.png" alt="boucing_ball_frames"></p>
<ul>
<li>将gif拖入PS之后打开时间轴窗口即可看到每一帧的画面</li>
</ul>
<p>无论是2D还是3D动画，关键帧，正如其名，是动画制作中最关键的部分，同时也是最难把握的部分。曾经有位设计师告诉我，在大学的第一节flash课的课后作业，老师要求大家上交一份小球动画，包含气球、石头球与皮球，并告诉大家，以相同的外观表现出不同的质感是在考验你对关键帧的悟性，而这一个作业就能体现你是否适合学习动画。</p>
<p><img src="/img/post/lyxuncle/1-4_quality_of_ball.png" alt="quality_of_ball"></p>
<blockquote>
<p>A 需要很大的力才能使一个炮弹移动。一旦它移动了，同样需要很大的力才能阻挡它前进。B 一只汽球只需要很小的力去移动它，但空气阻力使它很快停止动作。这两个例子都画了动作分格线，可以看出在银幕上表现物体的轻重，取决于对它们动作的时间掌握。（图片来源：《动画的时间掌握》）</p>
</blockquote>
<p>在<a href="http://cghappening.blogspot.com/2011/02/blog-post_23.html" target="_blank" rel="external">《動畫製作流程介紹》</a>提供的视频中可以看到关键帧在动画制作中所起的地基般的作用。</p>
<p><img src="//img.aotu.io/lyxuncle/1-5_story_board_of_Monster_Inc.gif" alt="story_board_of_Monster_Inc"></p>
<ul>
<li>画面上方的手绘图即为[怪物公司]的关键帧</li>
</ul>
<p>与关键帧紧密关联的即为时间轴（或摄制表），时间轴是补齐中间帧不可或缺的一项，在传统动画制作中，导演就是通过制定时间轴来掌控整部动画的节奏。</p>
<p><img src="//img.aotu.io/lyxuncle/1-6_continuity.jpg" alt="continuity"></p>
<ul>
<li>摄制表（图片来源：《动画的时间掌握》）</li>
</ul>
<p>在CSS3中，@keyframes正是动画的关键帧容器。@keyframes中包含的包括transform在内的元素形态设定构成了关键帧的画面。@keyframes中的百分比即为时间轴的体现。中间帧则由浏览器自动完成（就像flash中的补全动画）。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.people</span>&#123;<span class="attribute">animation</span>:people linear <span class="number">1.5s</span>;&#125;</div><div class="line">@<span class="keyword">keyframes</span> people&#123;</div><div class="line">	0%, 95%&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;&#125;</div><div class="line">	100%&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="//img.aotu.io/lyxuncle/1-7_css3_animation_2.png" alt="css3_animation"></p>
<ul>
<li>一个简单的动画关键帧示例</li>
</ul>
<p>现在我们知道了CSS3动画的结构与传统动画之间的关系，重点来了， CSS3动画可以做出一部动画电影吗？欲知详情，且听下回分解。</p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul>
<li><a href="http://www.amazon.cn/%E5%8A%A8%E7%94%BB%E7%9A%84%E6%97%B6%E9%97%B4%E6%8E%8C%E6%8F%A1-%E5%93%88%E7%BD%97%E5%BE%B7%E2%80%A2%E5%A8%81%E7%89%B9%E5%85%8B/dp/B0094N5III/ref=sr_1_1?ie=UTF8&amp;qid=1420369719&amp;sr=8-1&amp;keywords=%E5%8A%A8%E7%94%BB%E7%9A%84%E6%97%B6%E9%97%B4%E6%8E%8C%E6%8F%A1" target="_blank" rel="external">《动画的时间掌握（修订版）》</a>[英]哈罗德•威特克；[英]约翰•哈拉斯；[美]汤姆•赛图</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;以电影之眼看CSS3动画（一）&quot;&gt;&lt;a href=&quot;#以电影之眼看CSS3动画（一）&quot; class=&quot;headerlink&quot; title=&quot;以电影之眼看CSS3动画（一）&quot;&gt;&lt;/a&gt;以电影之眼看CSS3动画（一）&lt;/h1&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;注：此文非
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS3" scheme="https://aotu.io/tags/CSS3/"/>
    
      <category term="Animation" scheme="https://aotu.io/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>以电影之眼看CSS3动画（二）</title>
    <link href="https://aotu.io/notes/2015/11/23/css3-animation-to-movie-part_2/"/>
    <id>https://aotu.io/notes/2015/11/23/css3-animation-to-movie-part_2/</id>
    <published>2015-11-23T09:27:00.000Z</published>
    <updated>2016-10-20T07:06:32.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="以电影之眼看CSS3动画（二）"><a href="#以电影之眼看CSS3动画（二）" class="headerlink" title="以电影之眼看CSS3动画（二）"></a>以电影之眼看CSS3动画（二）</h1><hr>
<pre><code>注：此文非干货聚集地，来找干货的对不住了。
注注：又多又大的图预警！！！
</code></pre><p>上回说到CSS3动画与传统动画之间千丝万缕的联系，现在就让我们来探讨一下用CSS3动画做一部动画电影都需要些什么。</p>
<p>一、</p>
<p><strong>首先你需要一个故事。</strong></p>
<p>即使只是一堆雪花往下掉，也是包含故事的——为什么下雪？是冬天来了？那是冬天的第一场雪吗？第一场雪有什么特点呢？好吧作为一个从没见过雪的南方人我承认我给自己挖了个坑，不过就是类似这种思路，让我们拥有了一个故事，所以，即使只有一秒钟的动画也是有故事的。Use your imagination.</p>
<p>小tip：在做影视题材的专题页时，我会首先根据相关影视的预告片确定入场动画的风格与基调，观看预告片不仅能够了解影片的风格，同时还能学习其字幕出现、消失以及转场的方式，获得一种节奏感，也就是上面所说的时间掌控。在看电影正片时也可留意影片开头与结尾字幕出现的形式，尤其是科幻片，电影字幕的设计与电影风格相辅相成，常常能让你脑洞大开——原来还能这么玩。</p>
<p><img src="//img.aotu.io/lyxuncle/2-1_preview_of_overheard_3.gif" alt="preview_of_overheard_3"></p>
<ul>
<li><a href="http://movie.douban.com/trailer/156598/#content" target="_blank" rel="external">[窃听风云3]预告片</a>中字幕出现的方式表现出信号干扰的效果，由此可以将影片相关专题作出这样的开场动画——</li>
</ul>
<p><img src="//img.aotu.io/lyxuncle/2-2_animation_design_of_overheard_3_broadcast.gif" alt="animation_design_of_overheard_3_broadcast"></p>
<ul>
<li>视觉设计：吴丹枫</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> peoInner&#123;</div><div class="line">	0%, 12<span class="selector-class">.5</span>%, 16<span class="selector-class">.5</span>%, 20<span class="selector-class">.5</span>%&#123;<span class="attribute">background</span>:none;&#125;</div><div class="line">	10%, 12%&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(../img_bg/casts_adv_green_red.jpg) no-repeat <span class="number">0</span> <span class="number">0</span>;&#125;</div><div class="line">	14%, 16%&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(../img_bg/casts_adv_green_red.jpg) no-repeat <span class="number">0</span> -<span class="number">725px</span>;&#125;</div><div class="line">	18%, 20%&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(../img_bg/casts_adv_green_red.jpg) no-repeat <span class="number">0</span> -<span class="number">725px</span>;&#125;</div><div class="line">	13%, 17%, 21%, 100%&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(../img_bg/cast_adv_01.jpg) no-repeat top center;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>简单的几个不同色调的图片进行替换就能做出类似效果。（<a href="http://labs.qiang.it/labs/EC_demo/Doing_Movie_by_CSS3.html" target="_blank" rel="external">demo地址</a>）</li>
</ul>
<p>二、</p>
<p>当我们在脑内小剧场构思好动画小故事之后（当然，你也可以将它写下来），我们就可以进行<strong>关键帧与时间轴的设计</strong>了。</p>
<blockquote>
<p>任何人都可以用电脑动画软件将一个物体移动。但是如何赋予物体重量、大小、规模、移动和幽默感，这些都与你如何移动物体相关。电脑不能为动画师创造动画，动画师仍然需要了解时间掌握的原则知识以赋予电脑动画生命力。（《动画的时间掌握》）</p>
</blockquote>
<p>这时需要注意的是因果关系对动画的影响，“一个动画师必须懂得自然界物体运动的力学知识”，这样“才能创造情绪和表达正确的感觉。”我们来看看为了使动画更加流畅真实，迪士尼爷爷想出了什么办法。［白雪公主与七个小矮人］作为80、90后动画电影启蒙，使用了一项革新动画制作的技术——<a href="http://zh.wikipedia.org/wiki/%E8%BD%AC%E6%8F%8F%E6%9C%BA%E6%8A%80%E6%9C%AF" target="_blank" rel="external">转描机</a>。</p>
<ul>
<li>（视频 <a href="http://player.ku6.com/refer/TH-adgFO0MjSKh3i/v.swf" target="_blank" rel="external">http://player.ku6.com/refer/TH-adgFO0MjSKh3i/v.swf</a> ）</li>
</ul>
<p><img src="//img.aotu.io/lyxuncle/2-4_sidelights_of_snow_white.gif" alt="sidelights_of_snow_white"></p>
<ul>
<li>视频：[白雪公主与七个小矮人]（1974）幕后花絮</li>
</ul>
<p>视频中有一个细节，迪士尼爷爷让动画师注意那位大叔在跳踢踏舞时重力对裤腿的作用（19分15秒）。是的，迪士尼爷爷强调的就是动画与物理学的关系。其实即使是网页中的动画也能用到牛顿运动定律，将网页元素看作一个有重量、有结构、有柔韧性的物体进行动画设计，会得到意想不到的效果。事实上已经有人这么做了——</p>
<p><img src="//img.aotu.io/lyxuncle/2-5_dribbble_form_animation.gif" alt="dribbble_form_animation"></p>
<ul>
<li>dribbble’s stripe checkout（图片来源：<a href="http://markgeyer.com/pres/the-art-of-ui-animations/#/2/9" target="_blank" rel="external">The Art of Animation</a>）</li>
</ul>
<p>Adds a bit of realism to an otherwise static interface. ——<a href="http://markgeyer.com/pres/the-art-of-ui-animations/#/2/5" target="_blank" rel="external">The 12 basic principles of animation - The Art of Animation</a></p>
<p><img src="//img.aotu.io/lyxuncle/2-6_bouncejs_example.gif" alt="bouncejs_example"></p>
<ul>
<li>图片来源：<a href="https://medium.com/tictail-makers/giving-animations-life-8b20165224c5" target="_blank" rel="external">Giving Animations Life</a></li>
</ul>
<p>Using Bounce.js and classical animation concepts to bring life to user interfaces. ——<a href="https://medium.com/tictail-makers/giving-animations-life-8b20165224c5" target="_blank" rel="external">Giving Animations Life</a></p>
<p>三、</p>
<p><strong>不断的修改与调整。</strong></p>
<p>这是一个需要细致与耐心的过程，你得在不断的调整中保持大局观，避免陷入细节的纠结，同时又需要有能够将别扭的细节调整好的灵感。说白了就是同时拥有汉子的粗犷与妹子的细腻。节奏是一个很重要的要素，与银幕上的动画类似，CSS3动画创作者的意念必须即时并完全交给观众。</p>
<blockquote>
<p>意念清晰易懂靠两个因素：1、好的表现手法和设计，要使每个主要动作能以最清楚和最有效的方式呈现在银幕上。2、好的时间掌握，要有足够的时间先使用户预感到将有什么事情发生，然后用于表现动作本身，最后要有好的收尾。这三者中，任何一项所占时间太多，便会感觉节奏太慢，用户会感到不耐烦，动画的出现便如同鸡肋。反之，如果时间太短，那么用户在注意到它之前，动作已经结束，创作者的意念未能充分表达，就浪费掉了。——《动画的时间掌握》</p>
</blockquote>
<p>四、</p>
<p>别忘了进行<strong>性能测试</strong>。</p>
<p>这是一步有可能推翻前面两步甚至三步的一个步骤。但是即便发生了这样的事，也不要气馁，这并不意味着之前做的前功尽弃，反而是个宝贵的财富——对于性能的感受又多了一次体验，而其中的一些动画心得或许下次也能用上。</p>
<p>说了这么多，一切都显得辣么抽象，下面就上栗子。</p>
<p><img src="//img.aotu.io/lyxuncle/2-7_animation_of_an_eye.gif" alt="animation_of_an_eye"></p>
<ul>
<li>动画来源：<a href="http://tympanus.net/Development/PseudoElementsAnimationsTransitions/index4.html" target="_blank" rel="external">Pseudo-Elements Animations and Transitions</a></li>
</ul>
<p>这是个使用了最简单的css属性——padding、line-height、box-shadow——实现了令人吃了一斤效果的栗子，就像一道脑筋急转弯一样让大家对CSS3的动画的理解不止于CSS3的新属性，我们曾经用烂的CSS2.0属性同样也能开出花儿。</p>
<p>我们看到，CSS3动画并不只是由transform、opacity等等简单组成，它还可以包含许许多多的设计、想法、甚至感情。台上一分钟，台下十年功在动画上也适用，或许在所有事物上都适用。</p>
<p>目前为止用CSS3动画拍电影只是个概念，但想象一下你是这部电影的导演，所有元素都是可调度的场景与角色，用CSS3动画拍电影是不是也没有那么遥远了？</p>
<p>最后，我想将我一直以来没能找到合适实现方法的动画效果放上来，希望能够抛砖引玉、集思广益：</p>
<p><img src="//img.aotu.io/lyxuncle/2-8_frames_of_flame_1.jpg" alt="frames_of_flame_1"></p>
<p><img src="/img/post/lyxuncle/2-9_frames_of_flame_2.jpg" alt="frames_of_flame_2"></p>
<ul>
<li>A 冷空气从火的底部冲入，受热后上升。 B 一套火的循环①-⑧，标以×的漩涡一个接一个地向上升起。升得越高，速度越慢。</li>
</ul>
<blockquote>
<p>火焰的动作受火的上部流动着的空气的控制。最热的部分在火的中央，在这之上热空气上升，当热空气上升时，旁边的冷空气冲入取代热空气的位置。这部分冷空气变热后又上升，这个过程重复不已。空气的流通常常使火焰成为粗略的圆锥形，由冷空气的漩涡形成一连串锯齿状火焰，从火的底部向里和向上移动。（《动画的时间掌握》）</p>
</blockquote>
<p>除了空气与火焰的关系外，火焰的运动由于随机性很大，循环动画需要写得看不出动作在循环也是难点之一。如何才能在保证结构、性能的同时做出最佳的火焰效果？</p>
<p>最最后，放上迪士尼爷爷的一段话，在我做动画甚至做任何事时它将不断地在脑海中回响：</p>
<p>曾经有人问迪士尼，[白雪公主]大受欢迎的秘密是什么？他回答说：</p>
<p>“我们只能确定一件事，每一个人都有童年，每次拍一部新片，我们不是为大人而拍，也不只是为小孩子拍，我们是为了唤醒每个人内心深处那种早就被遗忘的纯真世界。”</p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul>
<li><p><a href="http://www.amazon.cn/%E5%8A%A8%E7%94%BB%E7%9A%84%E6%97%B6%E9%97%B4%E6%8E%8C%E6%8F%A1-%E5%93%88%E7%BD%97%E5%BE%B7%E2%80%A2%E5%A8%81%E7%89%B9%E5%85%8B/dp/B0094N5III/ref=sr_1_1?ie=UTF8&amp;qid=1420369719&amp;sr=8-1&amp;keywords=%E5%8A%A8%E7%94%BB%E7%9A%84%E6%97%B6%E9%97%B4%E6%8E%8C%E6%8F%A1" target="_blank" rel="external">《动画的时间掌握（修订版）》</a>[英]哈罗德•威特克；[英]约翰•哈拉斯；[美]汤姆•赛图</p>
</li>
<li><p><a href="http://markgeyer.com/pres/the-art-of-ui-animations/#/" target="_blank" rel="external">The Art of UI Animations</a> </p>
</li>
</ul>
<h2 id="推荐："><a href="#推荐：" class="headerlink" title="推荐："></a>推荐：</h2><ul>
<li><p><a href="ttp://isux.tencent.com/css3/tools.html" target="_blank" rel="external">ISUX动画工具、动画手册</a></p>
<blockquote>
<p>了解所有与CSS3动画相关的属性，使用动画工具更直观地调整变形。</p>
</blockquote>
</li>
<li><p><a href="http://minyos.its.rmit.edu.au/aim/a_notes/anim_principles.html" target="_blank" rel="external">12 Principles of Animation</a></p>
<blockquote>
<p>最近存在感极强的动画12原则，如果想要做出自然流畅的CSS3动画，这个由迪士尼动画巨头所总结出的经典原则绝对是必读之物。这里附上视频版：<a href="http://vimeo.com/93206523" target="_blank" rel="external">http://vimeo.com/93206523</a></p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;以电影之眼看CSS3动画（二）&quot;&gt;&lt;a href=&quot;#以电影之眼看CSS3动画（二）&quot; class=&quot;headerlink&quot; title=&quot;以电影之眼看CSS3动画（二）&quot;&gt;&lt;/a&gt;以电影之眼看CSS3动画（二）&lt;/h1&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;注：此文非
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS3" scheme="https://aotu.io/tags/CSS3/"/>
    
      <category term="Animation" scheme="https://aotu.io/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>SVG I Know</title>
    <link href="https://aotu.io/notes/2015/11/20/svg-I-know/"/>
    <id>https://aotu.io/notes/2015/11/20/svg-I-know/</id>
    <published>2015-11-20T03:30:45.000Z</published>
    <updated>2016-10-20T07:06:32.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章：SVG入门篇"><a href="#第一章：SVG入门篇" class="headerlink" title="第一章：SVG入门篇"></a>第一章：SVG入门篇</h2><h3 id="SVG简介"><a href="#SVG简介" class="headerlink" title="SVG简介"></a>SVG简介</h3><p>SVG即Scalable Vector Graphics可缩放矢量图形，使用XML格式定义图形。<br>优点：</p>
<ul>
<li>SVG与其他图片格式相比：主要优势在于可缩放的同时不会影响图片的质量。</li>
<li>与flash相比 ：SVG 最大的优势是与其他标准（比如 XSL 和 DOM）相兼容。而 Flash 则是未开源的私有技术。</li>
</ul>
<h3 id="SVG-in-HTML常用方法"><a href="#SVG-in-HTML常用方法" class="headerlink" title="SVG in HTML常用方法"></a>SVG in HTML常用方法</h3><h4 id="使用-lt-img-gt-元素来嵌入SVG图像"><a href="#使用-lt-img-gt-元素来嵌入SVG图像" class="headerlink" title="使用&lt;img&gt;元素来嵌入SVG图像"></a>使用&lt;img&gt;元素来嵌入SVG图像</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.w3school.com.cn/svg/rect1.svg"</span>  <span class="attr">width</span>=<span class="string">"300"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h4 id="将SVG图像作为背景图像嵌入"><a href="#将SVG图像作为背景图像嵌入" class="headerlink" title="将SVG图像作为背景图像嵌入"></a>将SVG图像作为背景图像嵌入</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background: url('http://www.w3school.com.cn/svg/rect1.svg') no-repeat;</div></pre></td></tr></table></figure>
<h4 id="使用svg元素，通过代码将SVG图像嵌入到HTML代码中"><a href="#使用svg元素，通过代码将SVG图像嵌入到HTML代码中" class="headerlink" title="使用svg元素，通过代码将SVG图像嵌入到HTML代码中"></a>使用svg元素，通过代码将SVG图像嵌入到HTML代码中</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"20"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"250"</span></span></div><div class="line"><span class="attr">style</span>=<span class="string">"fill:#fecdddd;"</span>/&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="svg-sprites"><a href="#svg-sprites" class="headerlink" title="svg sprites"></a>svg sprites</h3><p>svg sprites类似于css sprites，将各个svg合并在一起。<br>最主要的优点就是能减少页面的加载时间，优化开发流程，以及保持页面中图片元素的一致性。<br>实践中我们可以把整块的svg放在head头部， 因此可以在一处地方更新svg即可，而不是让svg的代码块散落在文档的各个地方。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>svg<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">width</span>=<span class="string">"32"</span> <span class="attr">height</span>=<span class="string">"158"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 32 158"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- SVG等省略  --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在这里<a href="https://icomoon.io/app/#/select" target="_blank" rel="external">https://icomoon.io/app/#/select</a>可以设置sprites，可以自己导入svg。</p>
<p><img src="//img.aotu.io/Newcandy/svgSprite.jpg" alt="svg sprite"></p>
<h3 id="symbol-use"><a href="#symbol-use" class="headerlink" title="symbol+use"></a>symbol+use</h3><p>在head头部的svg中使用symbol元素，并使用id属性。其中symbol类似flash中的元件，可多次使用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">id</span>=<span class="string">"icon-truck"</span> <span class="attr">width</span>=<span class="string">"32"</span> <span class="attr">height</span>=<span class="string">"32"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 32 32"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"126"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">"truck"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">path</span> <span class="attr">fill</span>=<span class="string">"#fff"</span> <span class="attr">d</span>=<span class="string">"M24.832 11.445c-0.186-0.278-0.498-0.445-0.832-0.445h-1c-0.553 0-1 0.447-1 1v6c0 0.553 0.447 1 1 1h4c0.553 0 1-0.447 1-1v-1.5c0-0.197-0.059-0.391-0.168-0.555l-3-4.5zM27 18h-4v-6h1l3 4.5v1.5zM31.496 15.336l-4-6c-0.558-0.837-1.492-1.336-2.496-1.336h-4v-2c0-1.654-1.346-3-3-3h-15c-1.654 0-3 1.346-3 3v11c0 1.654 1.346 3 3 3v0 3c0 1.654 1.346 3 3 3h1.142c0.447 1.721 2 3 3.859 3 1.857 0 3.41-1.279 3.857-3h5.282c0.447 1.721 2 3 3.859 3 1.857 0 3.41-1.279 3.857-3h1.144c1.654 0 3-1.346 3-3v-6c0-0.594-0.174-1.17-0.504-1.664zM3 18c-0.552 0-1-0.447-1-1v-11c0-0.553 0.448-1 1-1h15c0.553 0 1 0.447 1 1v11c0 0.553-0.447 1-1 1h-15zM11.001 27c-1.105 0-2-0.896-2-2s0.895-2 2-2c1.104 0 2 0.896 2 2s-0.897 2-2 2zM24 27c-1.105 0-2-0.896-2-2s0.895-2 2-2c1.104 0 2 0.896 2 2s-0.896 2-2 2zM30 23c0 0.553-0.447 1-1 1h-1.143c-0.447-1.721-2-3-3.857-3-1.859 0-3.412 1.279-3.859 3h-5.282c-0.447-1.721-2-3-3.857-3-1.859 0-3.412 1.279-3.859 3h-1.143c-0.552 0-1-0.447-1-1v-3h13c1.654 0 3-1.346 3-3v-7h4c0.334 0 0.646 0.167 0.832 0.445l4 6c0.109 0.164 0.168 0.358 0.168 0.555v6z"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后在需要用到这个元件的地方使用use元素引用元件。其中xlink:href=”#truck”相当于元件的链接，通过引用元件的id来实现。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#truck"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p><img src="//img.aotu.io/Newcandy/svgImage1.png" alt="svg兼容性"></p>
<p>兼容性详细情况请点击 <a href="http://caniuse.com/#search=svg" target="_blank" rel="external">此处</a></p>
<h3 id="总结思考"><a href="#总结思考" class="headerlink" title="总结思考"></a>总结思考</h3><p>一般在html中使用SVG有三种方法：使用&lt;img&gt;元素来嵌入SVG图像；将SVG图像作为背景图像嵌入；使用&lt;svg&gt;元素，通过代码将SVG图像嵌入到HTML代码中。<br>使用过程中，可通过svg sprites提高性能，通过symbol以及use元素提高文档的可维护性等。</p>
<h2 id="第二章：SVG形状"><a href="#第二章：SVG形状" class="headerlink" title="第二章：SVG形状"></a>第二章：SVG形状</h2><h3 id="矩形-lt-rect-gt"><a href="#矩形-lt-rect-gt" class="headerlink" title="矩形 &lt;rect&gt;"></a>矩形 &lt;rect&gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"20"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">rx</span>=<span class="string">"20"</span> <span class="attr">ry</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">style</span>=<span class="string">"fill:red;stroke:black; stroke-width:5;opacity:0.5"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>解释：x为x坐标，y为y坐标；width 和 height 分别为形状的高度和宽度；rx 和 ry 属性可使矩形产生圆角。<br>另外，下面三个属性是文章后面会用到的，之后不会过多讲述：</p>
<ul>
<li>fill 属性定义形状的填充颜色</li>
<li>stroke 属性定义图形边框的颜色</li>
<li>stroke-width 属性定义形状边框的宽度</li>
</ul>
<h3 id="圆形-lt-circle-gt"><a href="#圆形-lt-circle-gt" class="headerlink" title="圆形 &lt;circle&gt;"></a>圆形 &lt;circle&gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"100"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"40"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">fill</span>=<span class="string">"red"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p> 解释：cx 和 cy分别为圆点的 x 和 y 坐标；r为半径。</p>
<h3 id="椭圆-lt-ellipse-gt"><a href="#椭圆-lt-ellipse-gt" class="headerlink" title="椭圆&lt;ellipse&gt;"></a>椭圆&lt;ellipse&gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">"300"</span> <span class="attr">cy</span>=<span class="string">"150"</span> <span class="attr">rx</span>=<span class="string">"200"</span> <span class="attr">ry</span>=<span class="string">"80"</span> <span class="attr">style</span>=<span class="string">"fill:rgb(200,100,50); stroke:rgb(0,0,100);stroke-width:2"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>解释：cx 圆点的 x 坐标，cy 圆点的 y 坐标；rx 水平半径，ry 垂直半径。</p>
<h3 id="线-lt-line-gt"><a href="#线-lt-line-gt" class="headerlink" title="线&lt;line&gt;"></a>线&lt;line&gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"0"</span> <span class="attr">x2</span>=<span class="string">"300"</span> <span class="attr">y2</span>=<span class="string">"300"</span> <span class="attr">style</span>=<span class="string">"stroke:rgb(99,99,99);stroke-width:2"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p> 解释：(x1,y1)为线条的开始坐标；(x2,y2)为线条的结束坐标。</p>
<h3 id="折线-lt-polyline-gt"><a href="#折线-lt-polyline-gt" class="headerlink" title="折线&lt;polyline&gt;"></a>折线&lt;polyline&gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"0,0 0,20 20,20 20,40 40,40 40,60"</span> <span class="attr">style</span>=<span class="string">"fill:white;stroke:red;stroke-width:2"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p> 解释：points 属性定义多边形每个角的 x 和 y 坐标。为了可读性，建议x与y坐标用逗号分开，每个角之间的坐标用空格分开。</p>
<h3 id="多边形-lt-polygon-gt"><a href="#多边形-lt-polygon-gt" class="headerlink" title="多边形&lt;polygon&gt;"></a>多边形&lt;polygon&gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">"220,100 300,210 170,250"</span> <span class="attr">style</span>=<span class="string">"fill:#cccccc; stroke:#000000;stroke-width:1"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p> 解释：points 属性定义多边形每个角的 x 和 y 坐标。</p>
<h3 id="路径-lt-path-gt"><a href="#路径-lt-path-gt" class="headerlink" title="路径&lt;path&gt;"></a>路径&lt;path&gt;</h3><p>直线指令：<br>M = moveto<br>L = lineto<br>H = horizontal lineto<br>V = vertical lineto<br>Z = closepath<br>注释：以上所有命令均允许小写字母。大写表示绝对定位，小写表示相对定位。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M250 150 L150 350 L350 350 Z"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>解释：该路径开始于位置 250 150，到达位置 150 350，然后从那里开始到 350 350，最后在 250 150 关闭路径。<br>由于绘制路径的复杂性，建议使用 SVG 编辑器来创建复杂的图形。</p>
<h4 id="svg的贝塞尔曲线"><a href="#svg的贝塞尔曲线" class="headerlink" title="svg的贝塞尔曲线"></a>svg的贝塞尔曲线</h4><p>贝塞尔曲线指令：<br>C = curveto<br>S = smooth curveto<br>Q = quadratic Belzier curve<br>T = smooth quadratic Belzier curveto<br>贝塞尔曲线控制小工具<a href="http://dayu.pw/svgcontrol/" target="_blank" rel="external">http://dayu.pw/svgcontrol/</a>，操控多次可加深对贝塞尔曲线的理解。</p>
<p><img src="//img.aotu.io/Newcandy/svgImage2.png" alt="三次贝塞尔曲线控制"></p>
<p><img src="//img.aotu.io/Newcandy/svgImage3.png" alt="三次贝塞尔曲线控制"></p>
<p>CSQT比较难记，联想记忆法“厕所切图(CSQT)”就比较容易记住了。<br>厕所是3D空间，所以CS是三次曲线噢，切图是平面图，所以是二次曲线，很好记。</p>
<h5 id="C三次贝塞尔曲线"><a href="#C三次贝塞尔曲线" class="headerlink" title="C三次贝塞尔曲线"></a>C三次贝塞尔曲线</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C x1 y1, x2 y2, x y (or c dx1 dy1, dx2 dy2, dx dy)</div></pre></td></tr></table></figure>
<p>最后一个坐标(x,y)表示的是曲线的终点，另外两个坐标是控制点，(x1,y1)是起点的控制点，(x2,y2)是终点的控制点。小写指令c表示相对坐标。</p>
<h5 id="S光滑三次贝塞尔曲线"><a href="#S光滑三次贝塞尔曲线" class="headerlink" title="S光滑三次贝塞尔曲线"></a>S光滑三次贝塞尔曲线</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">S x2 y2, x y (or s dx2 dy2, dx dy)</div></pre></td></tr></table></figure>
<p>之所以S命令没有x1 y1，是因为S命令跟在C命令后，x1 y1默认是C命令的第二个控制点的对称点，如下图蓝色线条所示。<br><img src="//img.aotu.io/Newcandy/svgImage4.png" alt="光滑三次贝塞尔曲线控制"></p>
<p>如果前面没有C命令，即S命令单独使用时，S命令画出来的是二次贝塞尔曲线，因为x1 y1和x2 y2默认是同一个控制点了。</p>
<h5 id="Q二次贝塞尔曲线"><a href="#Q二次贝塞尔曲线" class="headerlink" title="Q二次贝塞尔曲线"></a>Q二次贝塞尔曲线</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Q x1 y1, x y (or q dx1 dy1, dx dy)</div></pre></td></tr></table></figure>
<h5 id="T光滑二次贝塞尔曲线"><a href="#T光滑二次贝塞尔曲线" class="headerlink" title="T光滑二次贝塞尔曲线"></a>T光滑二次贝塞尔曲线</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">T x y (or t dx dy)</div></pre></td></tr></table></figure>
<p>T命令的控制点默认是前面C命令的控制点的对称点。<br><img src="//img.aotu.io/Newcandy/svgImage5.png" alt="光滑二次贝塞尔曲线控制"></p>
<p>如果T命令前面没有C命令，即T命令单独使用时，T命令画出来的是直线。</p>
<h3 id="总结思考-1"><a href="#总结思考-1" class="headerlink" title="总结思考"></a>总结思考</h3><p>路径比基本形状更强大、更灵活。使用路径绘制复杂图形比较麻烦，但是使用它们来绘制图形的效果大多数时候很赞，一般其他基本图形是做不来的。</p>
<h2 id="第三章：SVG动画"><a href="#第三章：SVG动画" class="headerlink" title="第三章：SVG动画"></a>第三章：SVG动画</h2><hr>
<h3 id="svg路径动画"><a href="#svg路径动画" class="headerlink" title="svg路径动画"></a>svg路径动画</h3><p>DEMO:<br><img src="//img.aotu.io/Newcandy/svgTruck.gif" alt="路径动画"></p>
<p>g元素是用于把相关元素进行组合的容器元素。animateMotion使元素沿着动作路径移动，且该路径不可见，path定义的是可见的路径。rotate=”auto”使元素移动得更加自然，会随着路径旋转一定的角度。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"1500"</span> <span class="attr">height</span>=<span class="string">"150"</span> <span class="attr">class</span>=<span class="string">"truck"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">g</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">use</span> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">xlink:href</span>=<span class="string">"#truck"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">animateMotion</span> <span class="attr">path</span>=<span class="string">"M0 0 C135.5 68 463.5 -8 700 29 S1000 -20 1940,70"</span> <span class="attr">begin</span>=<span class="string">"-3s"</span> <span class="attr">dur</span>=<span class="string">"10s"</span> <span class="attr">rotate</span>=<span class="string">"auto"</span> <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span>&gt;</span><span class="tag">&lt;/<span class="name">animateMotion</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">g</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">g</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">use</span> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">xlink:href</span>=<span class="string">"#truck"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">animateMotion</span> <span class="attr">path</span>=<span class="string">"M0 0 C135.5 68 463.5 -8 700 29 S1000 -20 1940,70"</span> <span class="attr">begin</span>=<span class="string">"0s"</span> <span class="attr">dur</span>=<span class="string">"10s"</span> <span class="attr">rotate</span>=<span class="string">"auto"</span> <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span>&gt;</span><span class="tag">&lt;/<span class="name">animateMotion</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">g</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M0 30 C135.5 98 463.5 22 700 59 S1000 10 1940,100"</span> <span class="attr">stroke</span>=<span class="string">"#000"</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">x</span>=<span class="string">"-1000"</span> <span class="attr">y</span>=<span class="string">"-1000"</span> <span class="attr">class</span>=<span class="string">"truck_path"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/Newcandy/svg/blob/master/path.html" target="_blank" rel="external">点击查看全部代码</a></p>
<h3 id="svg路径描边动画"><a href="#svg路径描边动画" class="headerlink" title="svg路径描边动画"></a>svg路径描边动画</h3><p>DEMO:<br><img src="//img.aotu.io/Newcandy/svgPhone.gif" alt="路径动画"></p>
<p>在path等元素上必须使用stoke属性，否则动画不执行。stroke 表示描边颜色；stroke-width 表示描边的粗细；<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">"phone"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 1024 1024"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">path</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke</span>=<span class="string">"#000"</span> <span class="attr">stroke-width</span>=<span class="string">"3"</span> <span class="attr">d</span>=<span class="string">"M768 0h-512c-53.056 0-96 42.976-96 96v832c0 53.056 42.976 96 96 96h512c52.992 0 96-43.008 96-96v-832c0-53.056-43.008-96-96-96zM800 928c0 17.632-14.368 32-32 32h-512c-17.664 0-32-14.304-32-32v-64.128h576v64.128zM800 831.872h-576v-639.872h576v639.872zM800 160h-576v-64c0-17.664 14.336-32 32-32h512c17.632 0 32 14.336 32 32v64zM576 112c0 8.832-7.2 16-16 16h-96c-8.864 0-16-7.168-16-16v0c0-8.864 7.136-16 16-16h96c8.8 0 16 7.136 16 16v0zM544 911.872c0 8.8-7.2 16-16 16h-32c-8.832 0-16-7.2-16-16v0c0-8.864 7.168-16 16-16h32c8.8 0 16 7.136 16 16v0z"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使用CSS3 animation实现，因为内联的svg本身就是Html元素，可以通过CSS3来控制颜色等属性。<br>stroke-dasharray 表示虚线描边；stroke-dashoffset 表示虚线的起始偏移。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.device</span> &#123; <span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">43%</span>;<span class="attribute">left</span>: <span class="number">50%</span>;<span class="attribute">margin</span>: -<span class="number">200px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">200px</span>;<span class="attribute">stroke-dasharray</span>: <span class="number">4000</span>;<span class="attribute">stroke-dashoffset</span>: <span class="number">4000</span>;<span class="attribute">-webkit-animation</span>: dash <span class="number">2s</span> infinite;<span class="attribute">animation</span>: dash <span class="number">2s</span> infinite; &#125;</div><div class="line">    @-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> dash &#123;</div><div class="line">      100% &#123; <span class="attribute">stroke-dashoffset</span>: <span class="number">0</span>; &#125;</div><div class="line">    &#125;</div><div class="line">    @<span class="keyword">keyframes</span> dash &#123;</div><div class="line">      100% &#123; <span class="attribute">stroke-dashoffset</span>: <span class="number">0</span>; &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p> <a href="https://github.com/Newcandy/svg/blob/master/stroke.html" target="_blank" rel="external">点击查看全部代码</a></p>
<h3 id="css中的clip-path"><a href="#css中的clip-path" class="headerlink" title="css中的clip-path"></a>css中的clip-path</h3><p> clip-path按照路径内部的尺寸进行裁剪。只有路径内的内容可见。使用方法如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.element</span> &#123;</div><div class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(...); <span class="comment">/* 或者其他的图形函数 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 其他图形函数语法 --&gt;</span></div><div class="line">circle: circle(radius at x-axis y-axis)</div><div class="line">ellipse: ellipse(x-rad y-rad at x-axis y-axis)</div><div class="line">polygon: polygon(x-axis y-axis, x-axis y-axis, … )</div><div class="line">inset: inset(top right bottom left round top-radius right-radius bottom-radius left-radius)</div></pre></td></tr></table></figure>
<p>DEMO1:<br><img src="//img.aotu.io/Newcandy/svgBreakup.gif" alt="clippath"></p>
<p>利用伪元素:before和:after实现相同大小相同位置的文字，使用clip-path分别裁剪文字：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.txt</span> &#123; <span class="attribute">display</span>: inline-block;<span class="attribute">position</span>: relative;<span class="attribute">font-size</span>: <span class="number">70px</span>;<span class="attribute">text-transform</span>: uppercase;<span class="attribute">color</span>: transparent; &#125;</div><div class="line"><span class="comment">/* 此处省略代码 */</span>	</div><div class="line"><span class="selector-class">.txt</span><span class="selector-pseudo">:before</span> &#123; <span class="attribute">-webkit-clip-path</span>: <span class="built_in">polygon</span>(0 0,100% 0,100% 100%);<span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(0 0,100% 0,100% 100%); &#125;</div><div class="line"><span class="selector-class">.txt</span><span class="selector-pseudo">:after</span> &#123; <span class="attribute">-webkit-clip-path</span>: <span class="built_in">polygon</span>(0 0,0 100%,100% 100%);<span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(0 0,0 100%,100% 100%); &#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/Newcandy/svg/blob/master/clip-path/text.html" target="_blank" rel="external">点击查看全部代码</a></p>
<p>DEMO2：<br><img src="//img.aotu.io/Newcandy/svgLine.gif" alt="clippath"></p>
<p>如果结合clip-path和keyframes动画，可实现相关元素按照我们的路径逐步出现的效果。clip-path可通过此工具<a href="http://www.bennettfeely.com/clippy/实现复杂的路径。" target="_blank" rel="external">http://www.bennettfeely.com/clippy/实现复杂的路径。</a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> <span class="selector-class">.line</span> &#123; <span class="attribute">position</span>: absolute;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">width</span>: <span class="number">28px</span>;<span class="attribute">height</span>: <span class="number">34px</span>;<span class="attribute">background</span>: <span class="built_in">url</span>(line.png) <span class="number">0</span> <span class="number">0</span> no-repeat;<span class="attribute">-webkit-animation</span>: moveLine .<span class="number">8s</span> ease infinite;<span class="attribute">animation</span>: moveLine .<span class="number">8s</span> ease infinite; &#125;</div><div class="line"></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> moveLine &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">-webkit-clip-path</span>: <span class="built_in">polygon</span>(0 100%, 0 100%, 0 100%);</div><div class="line">  &#125;</div><div class="line">  25% &#123;</div><div class="line">    <span class="attribute">-webkit-clip-path</span>: <span class="built_in">polygon</span>(0 82%, 100% 81%, 100% 100%, 0 100%);</div><div class="line">  &#125;</div><div class="line">  50% &#123;</div><div class="line">    <span class="attribute">-webkit-clip-path</span>: <span class="built_in">polygon</span>(20% 0%, 80% 0%, 73% 47%, 74% 64%, 99% 100%, 0 100%, 56% 77%, 64% 58%);</div><div class="line">  &#125;</div><div class="line">  60% &#123;</div><div class="line">    <span class="attribute">-webkit-clip-path</span>: <span class="built_in">polygon</span>(50% 0%, 72% 48%, 75% 70%, 100% 100%, 0 100%, 55% 78%, 5% 68%);</div><div class="line">  &#125;</div><div class="line">  75% &#123;</div><div class="line">    <span class="attribute">-webkit-clip-path</span>: <span class="built_in">polygon</span>(28% 0, 100% 34%, 79% 100%, 0 100%, 0 0);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">-webkit-clip-path</span>: <span class="built_in">polygon</span>(100% 0, 100% 100%, 0 100%, 0 0);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/Newcandy/svg/blob/master/clip-path/line.html" target="_blank" rel="external">点击查看全部代码</a></p>
<h3 id="总结思考-2"><a href="#总结思考-2" class="headerlink" title="总结思考"></a>总结思考</h3><p>本章主要介绍svg路径动画，svg路径描边动画以及css中的clip-path，从中我们也发现了路径的强大之处，如若能在项目中灵活使用，无非给动画添加更生动的效果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章：SVG入门篇&quot;&gt;&lt;a href=&quot;#第一章：SVG入门篇&quot; class=&quot;headerlink&quot; title=&quot;第一章：SVG入门篇&quot;&gt;&lt;/a&gt;第一章：SVG入门篇&lt;/h2&gt;&lt;h3 id=&quot;SVG简介&quot;&gt;&lt;a href=&quot;#SVG简介&quot; class=&quot;he
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="svg" scheme="https://aotu.io/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>Git常用操作总结</title>
    <link href="https://aotu.io/notes/2015/11/17/Git-Commands/"/>
    <id>https://aotu.io/notes/2015/11/17/Git-Commands/</id>
    <published>2015-11-17T04:44:25.000Z</published>
    <updated>2016-10-20T07:06:32.404Z</updated>
    
    <content type="html"><![CDATA[<p>用Git比较久了，之前一直在Win用的TortoiseGit，现在命令行用的比较多，所以把一些指令总结一下，以便回顾和查询。<br>理解这些指令，觉得最重要的是理解Git的内部原理，比如Git的分布式版本控制，分清楚工作区、暂存区、版本库，还有就是理解Git跟踪并管理的是修改，而非文件。</p>
<a id="more"></a>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><pre><code>$ git config --global user.name &quot;Your Name&quot;
$ git config --global user.email &quot;email@example.com&quot;
</code></pre><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>git tracked的是修改，而不是文件</p>
<p><img src="//img.aotu.io/mamboer/git-trees.jpg" alt="git-track"></p>
<pre><code>#将“当前修改”移动到暂存区(stage)
$ git add somfile.txt
#将暂存区修改提交
$ git commit -m &quot;Add somfile.txt.&quot;
</code></pre><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><pre><code>$ git status
$ git diff
</code></pre><h3 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h3><pre><code># 放弃工作区修改
$ git checkout -- file.name
$ git checkout -- .

# 取消commit(比如需要重写commit信息)
$ git reset --soft HEAD

# 取消commit、add(重新提交代码和commit)
$ git reset HEAD
$ git reset --mixed HEAD

# 取消commit、add、工作区修改(需要完全重置)
$ git reset --hard HEAD
</code></pre><h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><pre><code>$ git reflog
$ git log
</code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre><code>$ rm file.name
$ git rm file.name
$ git commit -m &quot;Del&quot;
</code></pre><h3 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h3><pre><code>$ git remote add origin git@github.com:michaelliao/learngit.git
# 第一次推送，-u(--set-upstream)指定默认上游
$ git push -u origin master
$ git push origin master
</code></pre><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><pre><code>$ git clone https://github.com/Yikun/yikun.github.com.git path
$ git clone git@github.com:Yikun/yikun.github.com.git path
</code></pre><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><p><img src="//img.aotu.io/mamboer/git-merge.png" alt="about-merge"></p>
<pre><code># 查看当前分支
$ git branch

# 创建分支
$ git branch dev
# 切换分支
$ git checkout dev

# 创建并checkout分支
$ git checkout -b dev

# 合并分支
$ git merge dev

# 删除分支
$ git branch -d dev
</code></pre><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><pre><code>$ git tag 0.1.1
$ git push origin --tags
</code></pre><p>注意：本文Fork自 <a href="http://yikun.github.io/" target="_blank" rel="external">yikun.github.io</a>，<a href="http://aotu.io">凹凸实验室</a>作进一步完善。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Git比较久了，之前一直在Win用的TortoiseGit，现在命令行用的比较多，所以把一些指令总结一下，以便回顾和查询。&lt;br&gt;理解这些指令，觉得最重要的是理解Git的内部原理，比如Git的分布式版本控制，分清楚工作区、暂存区、版本库，还有就是理解Git跟踪并管理的是修改，而非文件。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Git" scheme="https://aotu.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>101%还原</title>
    <link href="https://aotu.io/notes/2015/11/16/101-percent/"/>
    <id>https://aotu.io/notes/2015/11/16/101-percent/</id>
    <published>2015-11-16T13:39:14.000Z</published>
    <updated>2016-10-20T07:06:32.404Z</updated>
    
    <content type="html"><![CDATA[<p><em>100%还原设计稿，还原误差不超1像素</em> 是重构工程师入行的最基本要求，而在实际工作中，这100%是远远不够的。</p>
<p> 记得曾经带我的师傅说过一句话：</p>
<blockquote>
<p>重构工程师不应该满足100%还原设计稿，更应该去追求101%还原度。</p>
</blockquote>
<p>101%还原是重构工程师在还原设计稿的过程中，发挥自身的主观能动性，对设计稿进行修正或向产品、视觉、交互提出合理的建议，让最终还原出来的视觉设计稿更接近设计本意。</p>
<p>101%的还原可以归为两类，一类是<strong>对视觉稿的主动修正</strong>，不包括具有信息传达的内容；另一类是<strong>对视觉稿深入思考并提出合理建议</strong>，包括但不限于具有信息传达的内容。</p>
<h2 id="对视觉稿的主动修正"><a href="#对视觉稿的主动修正" class="headerlink" title="对视觉稿的主动修正"></a>对视觉稿的主动修正</h2><p>视觉设计师有时候会比较忙，设计稿中可能会出现像素之间的误差而造成不对齐的情况，如下面的设计稿：</p>
<p><img src="//img.aotu.io/FmcA0J8Dx8dn6xe9xCxoFy8e5kBh" alt="image"></p>
<p><em>（Retina 2X图）</em></p>
<p>很明显，视觉设计师原意是想让右则的按钮垂直居中对齐的，我们在还原的时候可以去微调边距让之对齐，得到下面的重构稿：</p>
<p><img src="//img.aotu.io/Fox3Ng6hyVh1goheF1dtVvgSRLOY" alt="image"></p>
<p><em>（重构稿1X图）</em></p>
<p>可以看到，还原出来的设计稿虽然和原设计稿并没有100%吻合，但是出来的效果确实更符合垂直居中对齐的准则，更接近设计的本意，而且节省了沟通的成本。</p>
<p>有些同学许会问，在没有周知视觉设计师的情况下私下改动设计稿貌似有点不太尊重视觉设计师的工作吧?</p>
<p><strong>对视觉稿的主动修正有一个很重要的原则，就是在没有信发生息传达的情况下修正，所作的修正不能违背设计本意。</strong>拿刚才的例子来说，如果我个人不喜欢按钮的边角是方角的，就私下把方角还原成圆角，如下图：</p>
<p><img src="//img.aotu.io/Fv9F9h1E549tv4MyBQylbga_MRes" alt="image"></p>
<p>那就产生了还原稿与设计原稿之间的信息传达内容了，因为方角和圆角是两个不一样的设计风格，圆角按钮明显不是视觉设计师的设计本意，如果圆角按钮在视觉设计师完全不知情的情况下上了线，那就是真正的不尊重视觉设计师的工作了。</p>
<p>当然视觉设计师都希望自己输出的设计稿完美无缺，但一些客观因素（交接模块）或主观上的操作（工作太忙，拖动元素排版的时候手抖）难免会让设计稿存在一些像素级的误差，对视觉稿的主动修正，是和视觉设计师协作的一种默契，如果每一项这样的修正都要让视觉设计师重新去调整再生成新的PSD文件的话，沟通成本未免过高</p>
<h2 id="对视觉稿深入思考并提出合理建议"><a href="#对视觉稿深入思考并提出合理建议" class="headerlink" title="对视觉稿深入思考并提出合理建议"></a>对视觉稿深入思考并提出合理建议</h2><p>我们先看一下下面的设计稿：</p>
<p><img src="//img.aotu.io/Fi_7Vs_dNNOtLFNVTMv4gTWoJdTh" alt="image"></p>
<p>从视觉稿来看，视觉设计师把“关注本店”、“关注公众号”和“联系卖家”这三项的按钮所占的区域作了等分处理，按钮里面的文案和icon水平居中</p>
<p>等分的排版，虽然个体之间的内容不一样会出现内容与分隔线边距不相等的情况，但是在按钮所占展示区域比例相等的情况下，三个按钮整体看上去是非常整齐的，排版逻辑很清晰：</p>
<p><img src="//img.aotu.io/Fs6aDX-Z9HjaJmUikJ6vrtp2bRzv" alt="image"></p>
<p>可以看出，让三个按钮在页面上的排版整体看起来是整齐的是设计师的设计本意，那么问题来了：</p>
<p>在还原设计稿中，我们通常会考虑到布局的扩展性，会考虑到不足三个按钮或者多于三个按钮的排版情况，如果按照等分的排版型去还原，按钮出现增减的话，就会出现下面的情况：</p>
<p><img src="//img.aotu.io/Fm96HxYwoybjV0q5lPTRV1cUBBs5" alt="image"></p>
<p><em>（等分四个按钮）</em></p>
<p><img src="//img.aotu.io/Fl_ia80MoNI-jCnrau95FaL9a7Rx" alt="image"></p>
<p><em>（等分：三个按钮）</em></p>
<p><img src="//img.aotu.io/FkO4U37QzH-T5D16G2ftwUBlgplx" alt="image"></p>
<p><em>（等分：两个按钮）</em></p>
<p><img src="//img.aotu.io/Fr0GR0q_7u0tO0wicwgtN1fH-7nL" alt="image"></p>
<p><em>（等分：一个按钮）</em></p>
<p>可以看到，大于3个按钮的时候，文案的展示出现了问题，小于3个按钮的时候按钮的大小和文案与分隔线的间距就略显夸张了，特别是只有一个按钮的情况，几种情况的排版在视觉上变化都很大，而且视觉稿里是没有相应的展示的，那么这里面包含了排版之间的信息传达。</p>
<p><strong>在还原过程中，当发生信息传达的时候，任何疑问和建议都应该周知相关的负责人，这是101%还原中的基本原则</strong></p>
<p>把刚才上面的几种情况，写好demo向产品和视觉设计师展示，反馈并确认两个问题：</p>
<ul>
<li><p>按钮在不同的场景中最多展示的个数和最少展示的个数</p>
</li>
<li><p>如果按钮展示个数有变，用等分自适应排版的话，以上情况的排版方式能否接受</p>
</li>
</ul>
<p>然后得到的答复是：</p>
<p><em>产品：最多展示3个，最少展示1个，排版看还有没有更好的</em></p>
<p><em>视觉：按钮不用等分自适应，用定宽展示的</em></p>
<p>可以get到信息：</p>
<p>等分自适应的排版在这里不适用：<em>对视觉设计稿排版信息的理解与视觉设计师的原意有出入</em></p>
<p>与产品和视觉设计师对相应的信息进行确认后，于是给到了定宽的效果：</p>
<p><img src="//img.aotu.io/Fl_ia80MoNI-jCnrau95FaL9a7Rx" alt="image"></p>
<p><em>（定宽：三个按钮）</em></p>
<p><img src="//img.aotu.io/FtA07SuVhOsGCibzgRxELOfmtA8q" alt="image"></p>
<p><em>（定宽：两个按钮）</em></p>
<p><img src="//img.aotu.io/FrN9VyDx2S1ON9q0hSEZBv6KplBa" alt="image"></p>
<p><em>（定宽：一个按钮）</em></p>
<p>定宽排版与等分排版两个方式对比来看：</p>
<ul>
<li><p>定宽排版的3个按钮与等分排版的效果一样</p>
</li>
<li><p>定宽排版的2个按钮比等分排版的效果差。</p>
</li>
<li><p>定宽排版的时候，按钮所占空间并没有等分展示区域，而文案离分隔线的间距又不相等，排版逻辑不清晰，显得很不整齐</p>
</li>
<li><p>定宽排版的1个按钮比等分排版的效果好。</p>
</li>
</ul>
<p>等分排版的时候，虽然按钮在展示区域中是居中对齐了，但是考虑到上下文的对齐，按钮并没有和星星的对齐，相反，等宽排版的文案更接近与星星的左对齐，虽然并没有绝对对齐，只是展现出来的排版效果、与上下文的排版逻辑显得更严谨。</p>
<p>其实两种排版的文案都没有办法100%保证与星星左对齐的，因为文案长度不一样，居中的位置就不一样：</p>
<p><img src="//img.aotu.io/FsyT7RZVBU8_-nnRZQoJuVW-zMEV" alt="image"></p>
<p><em>（定宽、等分的居中文案）</em></p>
<p>综合以上，向产品和视觉设计师提出建议：按钮的文案与分隔线间距相等，并且第一个按钮的文案与星星左对齐。于是得到了最终的效果：</p>
<p><img src="//img.aotu.io/FlHkLxnqo4_IOYuV4hK-I2UUTrGz" alt="image"></p>
<p><em>（优化后的）</em></p>
<p><img src="//img.aotu.io/Fkk3b0EBcmlLgf5JOKTeXlVW6pQM" alt="image"></p>
<p><em>（优化后的）</em></p>
<p><img src="//img.aotu.io/FnOjxa7OW08bLDhRTusJ3vH8QD4B" alt="image"></p>
<p><em>（优化后的）</em></p>
<p>这与原有的设计稿相比，扩展性更强，排版逻辑更严谨性、更趋向设计本意，建议是合理的。</p>
<p>优化的地方虽然不大，但我们需要对设计稿进行认真深入的分析，从产品层面、视觉层面、开发层面甚至交互层面去尽可能地解读设计稿，深入思考才能发现问题，提出合理的建议，101% 中的 1% 威力就会慢慢的程现出来。</p>
<h3 id="一个特殊的例子"><a href="#一个特殊的例子" class="headerlink" title="一个特殊的例子"></a>一个特殊的例子</h3><p><img src="//img.aotu.io/FqiqU8YWOmhZnNacboRyVQgSzssY" alt="image"></p>
<p>由于项目快速迭代，视觉设计资源紧缺的原因，于是有了这张没有经过视觉流程的设计稿，是一位产品GG给到的，如果我们拿到设计稿，不加以思考的话，100%还原出来，那么</p>
<p>得到了第一稿：</p>
<p><img src="//img.aotu.io/FgUQXhyUGDNT3wxVcII4mqqyP8SC" alt="image"></p>
<p>其实认真思考一下，可优化的地方还是有的：</p>
<p><strong>交互上</strong></p>
<ul>
<li><img src="//img.aotu.io/Fr_B9WGV3jrijHMLCXMyE8n05A8N" alt="image"> 和 <img src="//img.aotu.io/FtPzNmUWfQYK3TTNGeZq8yJHt1VK" alt="image"> 这两个其实只是文案中的一部分，并没有任何交互，设计稿上却做成了和文本形成强烈对比的看上去可点击的按钮，容易误导用户去点</li>
</ul>
<p><strong>视觉上</strong></p>
<ul>
<li><p>复制按钮的配色欠恰当，复制的操作并不会引起用户警告或错误的提示，而红色恰好有让人警惕的意味</p>
</li>
<li><p>输入框和复制按钮的高度不一样，显得不够整齐美观</p>
</li>
<li><p>内容和顶部的间距太小，内容视觉焦点欠佳</p>
</li>
</ul>
<p>交互和视觉上都涉及到不同的信息传达，因此不能用对视觉稿进行主动修正，将以上信息和产品反馈</p>
<p>最终建议：</p>
<ul>
<li><p>“添加朋友” 和 “关注” 采用文本加色强调形式表现</p>
</li>
<li><p>复制按钮的颜色采取常用的给人友好感觉的绿色</p>
</li>
<li><p>调整复制按钮的调试使之与输入框的调试一样</p>
</li>
<li><p>调整内容与顶部的间距大小</p>
</li>
</ul>
<p>得到了第二稿：</p>
<p><img src="//img.aotu.io/FoPU-jpW_FfA4_YK3M8jonZ_Toq0" alt="image"></p>
<p><em>（第二稿）</em></p>
<p>第二稿中“您已收藏店铺，可在个人中心查看”的收藏反馈提示是产品新增的内容，一开始要求放在上图的位置，虽然第二稿在交互和视觉上得到了一定的优化，但还有优化的空间，特别是</p>
<p><strong>产品上</strong></p>
<ul>
<li>文字左对齐可显页面排版整齐，但从内容的亲密性上看，最底部的已收藏文字反馈提示并不属于引导操作的内容</li>
</ul>
<p>最终建议：</p>
<ul>
<li><p>让反馈内容居中对齐</p>
</li>
<li><p>增加与操作内容的边距，让用户可以一目了然看到反馈内容的归属</p>
</li>
<li><p>调整文案强调色的色系，让其不至于过重而显得太突眼。</p>
</li>
</ul>
<p>最终得到101%的还原效果：</p>
<p><img src="//img.aotu.io/FklHx4pXnfveGyB2Fy09rx_AFOHr" alt="image"></p>
<p>这个例子中，最终还原出来的效果也许没有视觉设计师那么专业，但至少还原稿上多了一份思考，多了一份心思，在这过程中也能让大家去探讨一些非自己职位上的知识，互相学习，互相提高。</p>
<p>从100%到101%的过程，其实就是一个主动思考，积极执行的过程，是一个追求极致的过程，是一个把事做好的过程。在还原设计稿的过程中，1%在100%中占的比例不多，但是如果能把这1%处理得好，还原出来的设计稿会更具级数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;100%还原设计稿，还原误差不超1像素&lt;/em&gt; 是重构工程师入行的最基本要求，而在实际工作中，这100%是远远不够的。&lt;/p&gt;
&lt;p&gt; 记得曾经带我的师傅说过一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;重构工程师不应该满足100%还原设计稿，更应该去追求10
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="设计理念还原" scheme="https://aotu.io/tags/%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E8%BF%98%E5%8E%9F/"/>
    
  </entry>
  
  <entry>
    <title>基于phantomJs的网络爬虫</title>
    <link href="https://aotu.io/notes/2015/11/11/phantomJs-crawler/"/>
    <id>https://aotu.io/notes/2015/11/11/phantomJs-crawler/</id>
    <published>2015-11-11T01:59:33.000Z</published>
    <updated>2016-10-20T07:06:32.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于phantomJs2-0的网络爬虫"><a href="#基于phantomJs2-0的网络爬虫" class="headerlink" title="基于phantomJs2.0的网络爬虫"></a>基于phantomJs2.0的网络爬虫</h1><p><strong>phantomJs</strong>是一个基于WebKit的服务器端JavaScript API。它全面支持web而不需浏览器支持，其快速，原生支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG。PhantomJS可以用于页面自动化，网络监测，网页截屏，以及无界面测试等。</p>
<h3 id="用途概述："><a href="#用途概述：" class="headerlink" title="用途概述："></a>用途概述：</h3><ul>
<li><strong>屏幕快照</strong> ：官方提供的API中<a href="http://phantomjs.org/api/webpage/method/render.html" target="_blank" rel="external">page.render</a> 提供了强大的屏幕快照功能；</li>
<li><strong>网络爬虫</strong> ：<a href="http://phantomjs.org/api/webpage/method/evaluate.html" target="_blank" rel="external">page.evaluate</a> 方法提供了一个沙箱来帮助你像用js操作dom一样简单的获取你想要的内容，避免了使用复杂的正则匹配内容；</li>
<li><strong>网络情况监控</strong> ：定期对网站进行pageSpeed检查、可用于打开速度缓慢短信报警等服务(本文暂不做深入介绍)。</li>
<li><strong>页面自动化操作</strong> ：phantomJs2.0 提供了丰富的API用于页面自动化操作</li>
</ul>
<hr>
<h2 id="关于安装"><a href="#关于安装" class="headerlink" title="关于安装"></a>关于安装</h2><blockquote>
<p>网络上有大量的安装教程，如果你用的osx，建议直接<code>brew update &amp;&amp; brew install phantomjs</code>。此处只叙述下在安装过程中遇到的一个坑。</p>
</blockquote>
<p>在Mac OS Yosemite  版本可能都会遇到这样一个问题：<br>运行 <code>phantomjs hello.js</code> 后得到了报错信息：<code>Killed: 9</code><br>这个问题的原始链接在这里<a href="https://github.com/ariya/phantomjs/issues/12928" target="_blank" rel="external">github:issue/12928</a> 解决方案如下：<a href="http://stackoverflow.com/questions/28267809/phantomjs-getting-killed-9-for-anything-im-trying" target="_blank" rel="external">stackoverflow</a></p>
<ol>
<li>Install UPX. UPX is an executable packer and unpacker<br> <code>$ brew install upx</code></li>
<li>Unpack the phantomjs executable<br> <code>$ upx -d phantomjs-2.0.0-macosx/bin/phantomjs</code></li>
<li>Run the phantomjs executable<br> <code>$ ./phantomjs-2.0.0-macosx/bin/phantomjs</code></li>
</ol>
<h2 id="先感受下phantomJs的强大"><a href="#先感受下phantomJs的强大" class="headerlink" title="先感受下phantomJs的强大"></a>先感受下phantomJs的强大</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var page = require(<span class="string">'webpage'</span>).create();</div><div class="line">page.open(<span class="string">'http://jd.com'</span>, <span class="keyword">function</span>() &#123;</div><div class="line">page.render(<span class="string">'jd.png'</span>);</div><div class="line">phantom.<span class="keyword">exit</span>();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>把以上代码保存到screen.js，切到terminal：<br><code>$ phantomejs screen.js</code></p>
<p><strong>可以得到如下的网站截图：</strong><br><img src="http://ww1.sinaimg.cn/large/80c4aaf9gw1ey49t6wl41j20rb0d1jxj.jpg" alt="Alt text"></p>
<blockquote>
<p>当然还可以继续<a href="http://phantomjs.org/api/webpage/property/scroll-position.html" target="_blank" rel="external">page.scrollPosition</a>以及Js脚本做延时截图，来避免截图中出现图片未加载完全等问题。</p>
</blockquote>
<h2 id="页面自动化操作"><a href="#页面自动化操作" class="headerlink" title="页面自动化操作"></a>页面自动化操作</h2><h3 id="自动登录京东"><a href="#自动登录京东" class="headerlink" title="自动登录京东"></a>自动登录京东</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</div><div class="line"></div><div class="line">page.onLoadStarted =<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    loadInProgress =<span class="literal">true</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"load started"</span>);</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">page.onLoadFinished = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    loadInProgress = <span class="literal">false</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"load finished"</span>);</div><div class="line">&#125;;</div><div class="line">page.onUrlChanged = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"onUrlChanged"</span>);</div><div class="line">&#125;;</div><div class="line"> page.open(<span class="string">'https://passport.jd.com/new/login.aspx'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    page.includeJs(<span class="string">"http://apps.bdimg.com/libs/jquery/1.6.4/jquery.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">var</span> <span class="built_in">rect</span> = page.evaluate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            $(<span class="string">'#loginname'</span>).val(<span class="string">'username'</span>);</div><div class="line">            $(<span class="string">'#nloginpwd'</span>).val(<span class="string">'passwd'</span>);</div><div class="line">            $(<span class="string">'#loginsubmit'</span>)[<span class="number">0</span>].click();</div><div class="line">            <span class="keyword">return</span> <span class="built_in">document</span>.title;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//若引入jQuery 则用这种方法来实现click</span></div><div class="line">        page.sendEvent(<span class="string">'click'</span>, <span class="built_in">rect</span>.left + <span class="built_in">rect</span>.width / <span class="number">2</span>, <span class="built_in">rect</span>.top + <span class="built_in">rect</span>.height / <span class="number">2</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">rect</span>);</div><div class="line">        <span class="built_in">var</span> clock =setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            page.render(<span class="string">'jdlogin.png'</span>);</div><div class="line">            phantom.exit();</div><div class="line">        &#125;,<span class="number">2000</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>phantomJs2.0中click事件不是标准事件<br> 若 <code>page.evaluate</code>中操作dom时并未引入jQuery，则应自己实现一个click事件如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ev = <span class="built_in">document</span>.createEvent(<span class="string">"MouseEvent"</span>);</div><div class="line">    ev.initMouseEvent(</div><div class="line">        <span class="string">"click"</span>,</div><div class="line">        <span class="literal">true</span> <span class="comment">/* bubble */</span>, <span class="literal">true</span> <span class="comment">/* cancelable */</span>,</div><div class="line">        <span class="built_in">window</span>, <span class="literal">null</span>,</div><div class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="comment">/* coordinates */</span></div><div class="line">        <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="comment">/* modifier keys */</span></div><div class="line">        <span class="number">0</span> <span class="comment">/*left*/</span>, <span class="literal">null</span></div><div class="line">    );</div><div class="line">    el.dispatchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解决方案来自<a href="http://stackoverflow.com/questions/15739263/phantomjs-click-an-element" target="_blank" rel="external">stackoverflow:questions/15739263</a></p>
<p><strong>登录后截屏</strong><br><img src="http://ww3.sinaimg.cn/large/80c4aaf9gw1ey49s5j9pjj20rd0hiaic.jpg" alt="Alt text"></p>
<blockquote>
<p>可以看到此登录并未触发验证，若用别的网站被脱库的账号密码来批量查询的话，有很大概率撞库。</p>
</blockquote>
<h2 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h2><h3 id="数据抓取的快感"><a href="#数据抓取的快感" class="headerlink" title="数据抓取的快感"></a>数据抓取的快感</h3><blockquote>
<p>众所周知知乎的搜索如此之烂，刚看过的问题，再搜就搜不到了，那把知乎上你想要的分类的问题抓取下来，自己搜索咯。（当然想这么一个烂理由来抓人家的数据也是醉人）。随便抓人家的数据不好，此处只做技术分享，切勿用于商业用途。</p>
</blockquote>
<h5 id="批量抓取知乎某个分类下的所有问题"><a href="#批量抓取知乎某个分类下的所有问题" class="headerlink" title="批量抓取知乎某个分类下的所有问题"></a>批量抓取知乎某个分类下的所有问题</h5><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create(),</div><div class="line">    testindex = <span class="number">0</span>,</div><div class="line">    finalAns = [],</div><div class="line">    fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line">page.onLoadStarted =<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    loadInProgress =<span class="literal">true</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"load started"</span>);</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">page.onLoadFinished = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    loadInProgress = <span class="literal">false</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"load finished"</span>);</div><div class="line">&#125;;</div><div class="line">page.onUrlChanged = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"onUrlChanged"</span>);</div><div class="line">&#125;;</div><div class="line"><span class="built_in">var</span> circle = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    testindex++;</div><div class="line">    <span class="keyword">if</span>(testindex === <span class="number">51</span>)&#123;</div><div class="line">        clearInterval(circle);</div><div class="line">        phantom.exit();</div><div class="line">    &#125;</div><div class="line">    page.open(<span class="string">'http://www.zhihu.com/topic/19559937?page='</span>+testindex, <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(status == <span class="string">'fail'</span>)&#123;</div><div class="line">            testindex--;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">var</span> <span class="built_in">rect</span> = page.evaluate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">var</span> titleArr = [];</div><div class="line">            <span class="built_in">window</span>.scrollTo(<span class="number">0</span>,<span class="built_in">document</span>.body.scrollHeight);</div><div class="line">                <span class="built_in">var</span> title = $(<span class="string">'.feed-item .question_link'</span>);</div><div class="line">                <span class="keyword">for</span>(<span class="built_in">var</span> j = <span class="number">0</span>; j &lt; title.length; j++)&#123;</div><div class="line">                    titleArr[j] = title[j].text;</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">return</span> titleArr;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">rect</span> == <span class="literal">null</span>)&#123;</div><div class="line">            testindex--;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        file = fs.open(<span class="string">"liuxue.txt"</span>, <span class="string">'a'</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">var</span> h = <span class="number">0</span>; h &lt; <span class="built_in">rect</span>.length; h++)&#123;</div><div class="line">            file.write(<span class="built_in">rect</span>[h]+<span class="string">'\n'</span>);</div><div class="line">        &#125;</div><div class="line">        file.close();</div><div class="line">    &#125;);</div><div class="line">&#125;,<span class="number">2000</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>其中用到了批量page.open 页面来控制翻页到所有的问题，然后将查询到的数据写入文件中，用到了File System API.</p>
</blockquote>
<h3 id="运用场景畅想"><a href="#运用场景畅想" class="headerlink" title="运用场景畅想"></a>运用场景畅想</h3><ol>
<li>网络性能测试可用于批量、定期对竞品网站做查询，进行竞品分析如打开速度、改版频率等等。</li>
<li>网络爬虫可批量获取数据进行竞品分析、行业报告等。</li>
<li>页面自动化操作可用于网站自动化测试等。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基于phantomJs2-0的网络爬虫&quot;&gt;&lt;a href=&quot;#基于phantomJs2-0的网络爬虫&quot; class=&quot;headerlink&quot; title=&quot;基于phantomJs2.0的网络爬虫&quot;&gt;&lt;/a&gt;基于phantomJs2.0的网络爬虫&lt;/h1&gt;&lt;p&gt;&lt;s
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PhantomJS" scheme="https://aotu.io/tags/PhantomJS/"/>
    
      <category term="Crawler" scheme="https://aotu.io/tags/Crawler/"/>
    
  </entry>
  
  <entry>
    <title>css层叠顺序探究</title>
    <link href="https://aotu.io/notes/2015/11/08/css-stack-order/"/>
    <id>https://aotu.io/notes/2015/11/08/css-stack-order/</id>
    <published>2015-11-08T03:44:25.000Z</published>
    <updated>2016-10-20T07:06:32.403Z</updated>
    
    <content type="html"><![CDATA[<p>嗯~一个比较基础但容易混乱的知识点~<br>首先上一大段文绉绉的w3c规范以表明这是一篇严肃的学术文章（觉得太长可先跳过~）：</p>
<blockquote>
<p>In CSS 2.1, each box has a position in three dimensions. In addition to their horizontal and vertical positions, boxes lie along a “z-axis” and are formatted one on top of the other. Z-axis positions are particularly relevant when boxes overlap visually.<br>The order in which the rendering tree is painted onto the canvas is described in terms of stacking contexts. Stacking contexts can contain further stacking contexts. A stacking context is atomic from the point of view of its parent stacking context; boxes in other stacking contexts may not come between any of its boxes.<br>Each box belongs to one stacking context. Each positioned box in a given stacking context has an integer stack level, which is its position on the z-axis relative other stack levels within the same stacking context. Boxes with greater stack levels are always formatted in front of boxes with lower stack levels. Boxes may have negative stack levels. Boxes with the same stack level in a stacking context are stacked back-to-front according to document tree order.<br>——<a href="http://www.w3.org/TR/CSS2/visuren.html#propdef-z-index" target="_blank" rel="external">W3C</a></p>
</blockquote>
<p>其实说人话，大致意思就是：<br><strong>每个盒模型的位置是三维的，除了x轴和y轴，还有一个表示层叠的z轴；<br>z轴上的位置决定了我们看到的盒模型之间的层叠效果（谁盖住谁）。</strong></p>
<p>上述规范还解释了层叠上下文的特点以及盒模型的层叠级别，下面我们通过栗子慢慢探究。</p>
<h2 id="1-浮动与行内"><a href="#1-浮动与行内" class="headerlink" title="1. 浮动与行内"></a>1. 浮动与行内</h2><p><em>eg.1-1/eg.1-2共同结构与样式：</em><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> dashed;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">width</span>:<span class="number">300px</span>;<span class="attribute">text-align</span>: center;&#125;</div><div class="line"><span class="selector-class">.div1</span>&#123;<span class="attribute">background-color</span>: <span class="number">#FF4363</span>;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span>;&#125;</div><div class="line"><span class="selector-class">.div2</span>&#123;<span class="attribute">background-color</span>: <span class="number">#FC9D99</span>;<span class="attribute">margin</span>:-<span class="number">170px</span> <span class="number">20px</span>;&#125;</div><div class="line"><span class="selector-class">.div3</span>&#123;<span class="attribute">background-color</span>: <span class="number">#F9CCAD</span>;<span class="attribute">margin</span>:-<span class="number">160px</span> <span class="number">40px</span>;&#125;</div><div class="line"><span class="selector-class">.div4</span>&#123;<span class="attribute">background-color</span>: <span class="number">#C7C7A8</span>;<span class="attribute">margin</span>:-<span class="number">150px</span> <span class="number">60px</span>;&#125;</div><div class="line"><span class="selector-class">.div5</span>&#123;<span class="attribute">background-color</span>: <span class="number">#84AF9B</span>;<span class="attribute">margin</span>:-<span class="number">140px</span> -<span class="number">10px</span>;&#125;</div></pre></td></tr></table></figure>
<hr>
<p><em>eg.1-1：常规流中非定位非行内元素的层叠情况</em><br><img src="//img.aotu.io/Yettyzyt/1-1-normal-order.png" alt="层叠情况"></p>
<p><strong>结论： 常规流中非定位非行内的元素根据html顺序，按照“后来居上”的规则层叠。</strong></p>
<hr>
<p><em>eg.1-2：定位元素／行内元素／浮动元素之间的层叠关系</em><br><img src="//img.aotu.io/Yettyzyt/1-2-change-order.png" alt="zindex"></p>
<p><strong>结论： 层叠顺序如下（高➡低）：<br>z-index为auto的定位元素；<br>常规流内行内非定位元素；<br>非定位的浮动元素；<br>常规流内非行内非定位元素；<br>z-index为负的定位元素。</strong></p>
<h2 id="2-为定位元素设置z-index"><a href="#2-为定位元素设置z-index" class="headerlink" title="2. 为定位元素设置z-index"></a>2. 为定位元素设置z-index</h2><p>首先，你必须了解以下两点：</p>
<ul>
<li>每个定位元素都有一个整型的层叠级别（stack level）；</li>
<li>z-index属性只对定位元素有效。</li>
</ul>
<hr>
<p><em>eg.2-1/eg.2-2共同结构与样式：</em><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span> <span class="attr">style</span>=<span class="string">"position:relative"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span> <span class="attr">style</span>=<span class="string">"position:relative"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span> <span class="attr">style</span>=<span class="string">"position:relative"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div4"</span> <span class="attr">style</span>=<span class="string">"position:relative"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div5"</span> <span class="attr">style</span>=<span class="string">"position:relative"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> dashed;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">width</span>:<span class="number">300px</span>;<span class="attribute">text-align</span>: center;&#125;</div><div class="line"><span class="selector-class">.div1</span>&#123;<span class="attribute">background-color</span>: <span class="number">#FF4363</span>;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span>;&#125;</div><div class="line"><span class="selector-class">.div2</span>&#123;<span class="attribute">background-color</span>: <span class="number">#FC9D99</span>;<span class="attribute">margin</span>:-<span class="number">170px</span> <span class="number">20px</span>;&#125;</div><div class="line"><span class="selector-class">.div3</span>&#123;<span class="attribute">background-color</span>: <span class="number">#F9CCAD</span>;<span class="attribute">margin</span>:-<span class="number">160px</span> <span class="number">40px</span>;&#125;</div><div class="line"><span class="selector-class">.div4</span>&#123;<span class="attribute">background-color</span>: <span class="number">#C7C7A8</span>;<span class="attribute">margin</span>:-<span class="number">150px</span> <span class="number">60px</span>;&#125;</div><div class="line"><span class="selector-class">.div5</span>&#123;<span class="attribute">background-color</span>: <span class="number">#84AF9B</span>;<span class="attribute">margin</span>:-<span class="number">140px</span> -<span class="number">10px</span>;&#125;</div></pre></td></tr></table></figure>
<hr>
<p><em>eg.2-1: 5个定位元素在未设置z-index时的层叠情况</em><br><img src="//img.aotu.io/Yettyzyt/2-1-normal-order.png" alt="z-index"></p>
<p><strong>结论： z-index为auto的定位元素根据html顺序，按照“后来居上”的规则层叠。</strong></p>
<hr>
<p><em>eg.2-2: 5个定位元素设置不同z-index时的层叠情况</em><br><img src="//img.aotu.io/Yettyzyt/2-2-change-order.png" alt="z-index"></p>
<p><strong>结论：<br>定位元素的层叠级别由z-index的值决定，z-index为auto则其层叠级别为0（注意：只是层级为0，其z-index值仍为auto）；<br>同一层叠上下文中，层叠级别大的元素位于层叠级别小的元素之上；<br>同一层叠上下文中，层叠级别相同的元素根据html顺序决定元素的层叠关系，遵循“后来居上”原则。</strong></p>
<h2 id="3-层叠顺序（stack-order）"><a href="#3-层叠顺序（stack-order）" class="headerlink" title="3. 层叠顺序（stack order）"></a>3. 层叠顺序（stack order）</h2><p>结合上面的例子进行总结，可得每一个层叠上下文内的层叠顺序：</p>
<blockquote>
<p>Within each stacking context, the following layers are painted in back-to-front order:</p>
<ol>
<li>the background and borders of the element forming the stacking context.</li>
<li>the child stacking contexts with negative stack levels (most negative first).</li>
<li>the in-flow, non-inline-level, non-positioned descendants.</li>
<li>the non-positioned floats.</li>
<li>the in-flow, inline-level, non-positioned descendants, including inline tables and inline blocks.</li>
<li>the child stacking contexts with stack level 0 and the positioned descendants with stack level 0.</li>
<li>the child stacking contexts with positive stack levels (least positive first).<br>—<a href="http://www.w3.org/TR/CSS2/visuren.html#propdef-z-index" target="_blank" rel="external">W3C</a></li>
</ol>
</blockquote>
<p>规范中的描述比较乏味，可结合<a href="http://www.w3help.org/zh-cn/kb/013" target="_blank" rel="external">w3help</a>中的一张图片进行理解：</p>
<blockquote>
<p><img src="//img.aotu.io/Yettyzyt/3-1-summay-order.png" alt="z-index"></p>
</blockquote>
<h2 id="4-层叠上下文（stacking-context）"><a href="#4-层叠上下文（stacking-context）" class="headerlink" title="4. 层叠上下文（stacking context）"></a>4. 层叠上下文（stacking context）</h2><p>看完上述的例子，对于层叠顺序应该大致了解了。但突然冒出一个“层叠上下文”，这又是个什么鬼？</p>
<h3 id="4-1-层叠上下文的特点"><a href="#4-1-层叠上下文的特点" class="headerlink" title="4.1 层叠上下文的特点"></a>4.1 层叠上下文的特点</h3><blockquote>
<ol>
<li>stacking context可以嵌套</li>
<li>每个stacking context相对于兄弟元素是完全独立的，其内部规则不会影响到外部</li>
<li>每个stacking context元素都会被父stacking context当做一个元素施加stacking规则<br>——<a href="http://blog.angular.in/css-stacking-contextli-na-xie-xian-wei-ren-zhi-de-keng/" target="_blank" rel="external">Abruzzi</a></li>
</ol>
</blockquote>
<h3 id="4-2-层叠上下文的创建"><a href="#4-2-层叠上下文的创建" class="headerlink" title="4.2 层叠上下文的创建"></a>4.2 层叠上下文的创建</h3><h4 id="4-2-1-css2"><a href="#4-2-1-css2" class="headerlink" title="4.2.1 css2"></a>4.2.1 css2</h4><blockquote>
<p>The root element forms the root stacking context. Other stacking contexts are generated by any positioned element (including relatively positioned elements) having a computed value of ‘z-index’ other than ‘auto’. Stacking contexts are not necessarily related to containing blocks.<br>——<a href="http://www.w3.org/TR/CSS2/visuren.html#propdef-z-index" target="_blank" rel="external">W3C</a></p>
</blockquote>
<p><strong>CSS2中规定创建层叠上下文的两种情况：<br>根元素（html）；<br>定位元素（absolute/relative）且z-index的值不为auto。</strong></p>
<p>注：在同一层叠上下文中，父元素、子元素与自身都被当作是并级关系进行层叠级别的比较。他们之间可能互相层叠。</p>
<hr>
<p><em>eg.4-1：z-index为auto的定位元素没有创建层叠上下文</em><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span> <span class="attr">style</span>=<span class="string">"position:relative"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1_1"</span> <span class="attr">style</span>=<span class="string">"position:relative;z-index:9"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span> <span class="attr">style</span>=<span class="string">"position:relative"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> dashed;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">width</span>:<span class="number">400px</span>;<span class="attribute">text-align</span>: center;&#125;</div><div class="line"><span class="selector-class">.div1</span>&#123;<span class="attribute">background-color</span>: <span class="number">#FF4363</span>;&#125;</div><div class="line"><span class="selector-class">.div1_1</span>&#123;<span class="attribute">background-color</span>: <span class="number">#FC9D99</span>;<span class="attribute">margin</span>:<span class="number">100px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span>;<span class="attribute">width</span>: <span class="number">300px</span>;&#125;</div><div class="line"><span class="selector-class">.div2</span>&#123;<span class="attribute">background-color</span>: <span class="number">#F9CCAD</span>;<span class="attribute">line-height</span>: <span class="number">300px</span>;&#125;</div></pre></td></tr></table></figure>
<p><img src="//img.aotu.io/Yettyzyt/4-1-normal-order.png" alt="z-index"><br>分析上述例子：</p>
<ul>
<li><strong>前提：</strong>div1、div1_1、div2都是定位元素；div1、div2都没有设置z-index值。</li>
<li><strong>假设：</strong>div1与div2创建了层叠上下文。不同层叠上下文之间是相对独立的，div1_1属于div1所创建的层叠上下文，与div2所创建的层叠上下文无关；根据“后来居上”原则，则div2应该在div1及其子元素div1_1之上。</li>
<li><strong>由上述例子可得：</strong>div1的子元素div1_1在div2之上。</li>
<li><strong>因此：</strong>div1、div2没有创建层叠上下文。</li>
</ul>
<p><strong>结论： z-index为auto的定位元素不会创建新的层叠上下文。</strong></p>
<hr>
<p><strong>IE中的BUG：</strong><br><em>在IE6-7浏览器中测试eg.4-1：</em><br><img src="//img.aotu.io/Yettyzyt/4-2-ie-bug.png" alt="zindex"></p>
<p><strong>结论： ie6-7中，z-index为auto的定位元素也会创建新的层叠上下文。</strong></p>
<h4 id="4-2-2-css3"><a href="#4-2-2-css3" class="headerlink" title="4.2.2 css3"></a>4.2.2 css3</h4><blockquote>
<p>A stacking context is formed, anywhere in the document, by any element which is either</p>
<ul>
<li>the root element (HTML),</li>
<li>positioned (absolutely or relatively) with a z-index value other than “auto”,</li>
<li>a flex item with a z-index value other than “auto”,that is the parent element display: flex|inline-flex,</li>
<li>elements with an opacity value less than 1. (See the specification for opacity),</li>
<li>elements with a transform value other than “none”,</li>
<li>elements with a mix-blend-mode value other than “normal”,</li>
<li>elements with a filter value other than “none”,</li>
<li>elements with isolation set to “isolate”,</li>
<li>position: fixed</li>
<li>specifying any attribute above in will-change even if you don’t specify values for these attributes directly (See this post)</li>
<li>elements with -webkit-overflow-scrolling set to “touch”<br>——<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context" target="_blank" rel="external">MDN</a></li>
</ul>
</blockquote>
<p><strong>CSS3中规定创建层叠上下文的十种情况：</strong></p>
<ul>
<li><strong>根元素 (HTML)</strong></li>
<li><strong>绝对（absolute）定位或相对（relative）定位且 z-index 值不为”auto”</strong></li>
<li><strong>一个 flex 项目(flex item)，且 z-index 值不为 “auto”，也就是父元素 display: flex|inline-flex</strong></li>
<li><strong>元素的 opacity 属性值小于 1（参考 the specification for opacity）</strong></li>
<li><strong>元素的 transform 属性值不为 “none”</strong></li>
<li><strong>元素的 mix-blend-mode 属性值不为 “normal”</strong></li>
<li><strong>元素的 isolation 属性被设置为 “isolate”</strong></li>
<li><strong>在 mobile WebKit 和 Chrome 22+ 内核的浏览器中，position: fixed 总是创建一个新的层叠上下文, 即使 z-index 的值是 “auto”</strong></li>
<li><strong>在 will-change 中指定了任意 CSS 属性，即便你没有定义该元素的这些属性</strong></li>
<li><strong>元素的 -webkit-overflow-scrolling 属性被设置 “touch”</strong></li>
</ul>
<hr>
<p><em>eg.4-2：opacity创建新的层叠上下文</em><br><img src="//img.aotu.io/Yettyzyt/4-3-opacity-order.png" alt="z-index"><br>分析：</p>
<blockquote>
<p>If an element with opacity less than 1 is not positioned, implementations must paint the layer it creates, within its parent stacking context, at the same stacking order that would be used if it were a positioned element with ‘z-index: 0’ and ‘opacity: 1’.<br>If an element with opacity less than 1 is positioned, the ‘z-index’ property applies as described in [CSS21], except that ‘auto’ is treated as ‘0’ since a new stacking context is always created.<br>——<a href="http://www.w3.org/TR/css3-color/#transparency" target="_blank" rel="external">W3C</a></p>
</blockquote>
<p><strong>结论：<br>如果元素设置opacity小于1但未定位，视为css2中元素定位／z-index:0且opacity:1的情况；<br>如果元素设置opacity小于1且定位，z-index为auto，视为css2中元素定位且z-index:0的情况；<br>如果元素设置opacity小于1且定位，z-index不为auto，则根据css2的描述层叠。</strong><br>（其他CSS3创建层叠上下文的元素情况与opacity相同，故不赘述。）</p>
<hr>
<p>至此，应该能够明白：</p>
<ul>
<li>根元素（html）会创建一个新的层叠上下文；</li>
<li>上述CSS2／CSS3中的元素会创建新的层叠上下文；</li>
<li>在每一个层叠上下文中都遵循上文中提到的层叠顺序；</li>
<li>每一个层叠上下文（除根元素）在它的父层叠上下文中都以一个普通元素来对待，其内部的层叠规则不影响其本身在父层叠上下文（即其所属层叠上下文）中的层叠顺序。</li>
</ul>
<h3 id="4-3-层叠上下文的层级"><a href="#4-3-层叠上下文的层级" class="headerlink" title="4.3 层叠上下文的层级"></a>4.3 层叠上下文的层级</h3><ul>
<li>z-index值为auto的层叠上下文（z-index未设置的定位元素）层级为0；</li>
<li>z-index值为0（根元素／z-index为0的定位元素／css3中提到的除根元素与定位元素之外的其他会创建层叠上下文的未定位或已定位无设置z-index的元素）的层叠上下文层级为0；</li>
<li>z-index值已设置且不为0的层叠上下文层级（z-index已设置且不为0的定位元素）与z-index的值相等；</li>
<li>相同层级的层叠上下文遵循“后来居上”的规则层叠。</li>
</ul>
<h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><ul>
<li><strong>属于同一层叠上下文的元素（无论它们在结构上是兄弟或父子，甚至是祖孙），都遵循上文所述的层叠顺序；</strong></li>
<li><strong>不同的层叠上下文之间，层级较大的层叠上下文元素及其内部元素位于层级小的层叠上下文元素及其内部元素之上；</strong></li>
<li><strong>不同的层叠上下文之间互相独立；</strong></li>
<li><strong>层叠上下文可嵌套，内部规则不影响外部。</strong></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嗯~一个比较基础但容易混乱的知识点~&lt;br&gt;首先上一大段文绉绉的w3c规范以表明这是一篇严肃的学术文章（觉得太长可先跳过~）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In CSS 2.1, each box has a position in three dimensio
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="https://aotu.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Service Workers：采用WebP动态响应图片</title>
    <link href="https://aotu.io/notes/2015/11/06/webp-responsive-image/"/>
    <id>https://aotu.io/notes/2015/11/06/webp-responsive-image/</id>
    <published>2015-11-06T10:44:25.000Z</published>
    <updated>2016-10-20T07:06:32.402Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>译文地址：<a href="http://deanhume.com/Home/BlogPost/service-workers--dynamic-responsive-images-using-webp-images/10132/" target="_blank" rel="external">http://deanhume.com/Home/BlogPost/service-workers--dynamic-responsive-images-using-webp-images/10132/</a></p>
</blockquote>
<p>图片在如今的站点上不可或缺。试想一下，在我们网页上没有图片会怎样？高质量的图片能够使你的站点更加出色，但同时伴随着一定的性能损耗。由于图片文件较大，下载时间相对较长并且会减缓页面的加载。如果是一个带宽较低的用户，用户体验将会特别差。</p>
<p>在移动设备上面，这种现象会更加明显。在移动设备上加载大型图片消耗时间取决你的网络以及连接速度。如果你是一个不耐心的用户，你将会变得沮丧。幸运的是，我们有能力处理 <a href="https://responsiveimages.org/" target="_blank" rel="external">响应式图片</a> 。通过使用 <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#the-picture-element" target="_blank" rel="external">picture</a> 标签，我们可以根据用户的设备为用户提供不同大小、设备像素比（DPR）以及格式的图片。例如，下面的代码就可以做到这一点。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span></span></div><div class="line">        <span class="attr">media</span>=<span class="string">"(min-width: 1024px)"</span></div><div class="line">        <span class="attr">srcset</span>=<span class="string">"./images/brooklyn.jpg, ./images/brooklyn-2x.jpg 2x, ./images/brooklyn-3x.jpg 3x"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"image/jpeg"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">source</span></span></div><div class="line">        <span class="attr">media</span>=<span class="string">"(min-width: 320px)"</span></div><div class="line">        <span class="attr">srcset</span>=<span class="string">"./images/brooklyn-small.jpg, ./images/brooklyn-small-2x.jpg 2x, ./images/brooklyn-small-3x.jpg 3x"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"image/jpeg"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在上面的代码中，我们指定不同的图像大小及其相应的设备像素比给给定的屏幕宽度。使用 <strong>picture</strong> 标签，浏览器可以基于设备决定最佳的内容。以上的代码可以完美运行，我们可以进一步扩展，以适应更多的场景。</p>
<p>你可能听过<strong>WebP</strong>图片格式。相比于PNG图片，其文件大小能够节省26％；相比于JPEG图片，能够节省大约25％-34%。目前，Chrome、Opera以及Android能够支持WebP格式，但Safari和IE尚未支持。既然我们能够用picture标签来处理响应式图片，我们也能够使用WebP格式的图片并且允许浏览器在不支持WebP时进行回退。</p>
<p><img src="http://a43d55f6a02c4be185ce-9cfa4cf7c673a59966ad8296f4c88804.r44.cf3.rackcdn.com/WebP/logo-webp.png" alt="webp"></p>
<p>让我们在上面代码的基础上，添加WebP图片的支持。同时，我们要确保能够根据不同的DPR使用最佳视觉效果的图片。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- JPEG Images --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span></span></div><div class="line">        <span class="attr">media</span>=<span class="string">"(min-width: 1024px)"</span></div><div class="line">        <span class="attr">srcset</span>=<span class="string">"./images/brooklyn.jpg, ./images/brooklyn-2x.jpg 2x, ./images/brooklyn-3x.jpg 3x"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"image/jpeg"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">source</span></span></div><div class="line">        <span class="attr">media</span>=<span class="string">"(min-width: 320px)"</span></div><div class="line">        <span class="attr">srcset</span>=<span class="string">"./images/brooklyn-small.jpg, ./images/brooklyn-small-2x.jpg 2x, ./images/brooklyn-small-3x.jpg 3x"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"image/jpeg"</span>&gt;</div><div class="line">    <span class="comment">&lt;!-- WebP Images --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span></span></div><div class="line">        <span class="attr">media</span>=<span class="string">"(min-width: 1024px)"</span></div><div class="line">        <span class="attr">srcset</span>=<span class="string">"./images/brooklyn.webp, ./images/brooklyn-2x.webp 2x, ./images/brooklyn-3x.webp 3x"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"image/webp"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">source</span></span></div><div class="line">        <span class="attr">media</span>=<span class="string">"(min-width: 320px)"</span></div><div class="line">        <span class="attr">srcset</span>=<span class="string">"./images/brooklyn-small.webp, ./images/brooklyn-small-2x.webp 2x, ./images/brooklyn-small-3x.webp 3x"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"image/webp"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- The fallback image --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span></span></div><div class="line">        <span class="attr">src</span>=<span class="string">"./images/brooklyn.jpg"</span> <span class="attr">alt</span>=<span class="string">"Brooklyn Bridge - New York"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在上面的代码中，我们已经创建了能够同时使用JPEG和WebP图片的picture标签。浏览器将根据设备决定最佳的选项。由于WebP并不支持IE和Safari，使用WebP图片意味着你需要在服务器上同时保存WebP和JPEG格式的图片副本。上面的代码足够满足我们当前的需求，但试想一下如果每张采用这种方式来编写，代码将会变得非常臃肿。当你的站点开始增长时，为每张图片编写上面的代码将会变得非常乏味。这时候，便可以采用Service Workers来解决这个问题。</p>
<p><img src="http://a43d55f6a02c4be185ce-9cfa4cf7c673a59966ad8296f4c88804.r44.cf3.rackcdn.com/Service-Workers-WebP/accept-headers-webp.png" alt="webp"></p>
<p>我们采用开发者工具观察HTTP请求头部，可以看出可以根据Accept头部来判断我们的浏览器是否支持WebP图片。为了利用这一点，并开始提供WebP图片，我们需要注册一个Service Worker。Service Worker的一大特性就是，它们能够拦截网络请求，这样子，我们就能够完全控制响应内容。使用这个特性，我们能够监听HTTP头部，并决定如何做。如果你想了解更多关于Service Workers的内容，可以看看这个<a href="https://github.com/slightlyoff/ServiceWorker" target="_blank" rel="external">Github</a>库获取更多的信息。</p>
<p>我们在html页面添加如下代码用于注册Service Worker。以下的代码引用service-worker.js文件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">// Register the service worker</span></div><div class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</div><div class="line">	navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</div><div class="line">    <span class="comment">// Registration was successful</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'ServiceWorker registration successful with scope: '</span>, registration.scope);</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="comment">// registration failed :(</span></div><div class="line">    	<span class="built_in">console</span>.log(<span class="string">'ServiceWorker registration failed: '</span>, err);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在上面的代码中，我们做了一个简单的检查，判断浏览器是否支持Service Worker，如果支持，注册并安装Service Worker。这段代码代码最好的地方就是做了兼容处理，如果浏览器不支持Service Workers，它们会自动回退并且用户不会注意到其中差别。</p>
<p>接下来，我们需要创建Service Worker文件‘service-worker.js‘，用于拦截正在传递到服务器的请求。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="comment">// Listen to fetch events</span></div><div class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// Check if the image is a jpeg</span></div><div class="line">  <span class="keyword">if</span> (<span class="regexp">/\.jpg$|.png$/</span>.test(event.request.url)) &#123;</div><div class="line"></div><div class="line">  <span class="comment">// Inspect the accept header for WebP support</span></div><div class="line">  <span class="keyword">var</span> supportsWebp = <span class="literal">false</span>;</div><div class="line">  <span class="keyword">if</span> (event.request.headers.has(<span class="string">'accept'</span>))&#123;</div><div class="line">	supportsWebp = event.request.headers</div><div class="line">        	                    .get(<span class="string">'accept'</span>)</div><div class="line">                                    .includes(<span class="string">'webp'</span>);</div><div class="line">      	&#125;</div><div class="line"></div><div class="line">  	<span class="comment">// If we support WebP</span></div><div class="line">  	<span class="keyword">if</span> (supportsWebp)</div><div class="line">  	&#123;</div><div class="line">		<span class="comment">// Clone the request</span></div><div class="line">		<span class="keyword">var</span> req = event.request.clone();</div><div class="line"></div><div class="line">	        <span class="comment">// Build the return URL</span></div><div class="line">	    	<span class="keyword">var</span> returnUrl = req.url.substr(<span class="number">0</span>, req.url.lastIndexOf(<span class="string">"."</span>)) + <span class="string">".webp"</span>;</div><div class="line"></div><div class="line">		event.respondWith(</div><div class="line">		  fetch(returnUrl, &#123;</div><div class="line">		     <span class="attr">mode</span>: <span class="string">'no-cors'</span></div><div class="line">		   &#125;)</div><div class="line">		);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的示例代码做了一系列的事情，让我们来一步步分解。</p>
<p>在前面几行，我添加一个事件监听器来监听任何一个fetch事件。当每个请求发生时，先判断当前的请求是否是获取JPEG或者PNG格式的图片。如果当前的请求是获取图片，我就能根据HTTP请求头部来决定最佳的响应。在这种情况下，我通过检查Accept头部并且查找是否存在“image/webp“ Mime类型。一旦查询完头部的值，我就能确定浏览器是否支持WebP图片，如果浏览器支持WebP图片，就返回相应的WebP图片。</p>
<p>现在，我们的HTML看起来比较整洁，能够支持WebP图片而并不臃肿。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span></span></div><div class="line">        <span class="attr">media</span>=<span class="string">"(min-width: 1024px)"</span></div><div class="line">        <span class="attr">srcset</span>=<span class="string">"./images/brooklyn.jpg, ./images/brooklyn-2x.jpg 2x, ./images/brooklyn-3x.jpg 3x"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"image/jpeg"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">source</span></span></div><div class="line">        <span class="attr">media</span>=<span class="string">"(min-width: 320px)"</span></div><div class="line">        <span class="attr">srcset</span>=<span class="string">"./images/brooklyn-small.jpg, ./images/brooklyn-small-2x.jpg 2x, ./images/brooklyn-small-3x.jpg 3x"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"image/jpeg"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Service Workers给了我们无限的可能。在这个例子中，我们可以扩展到包括其他图片格式，甚至是缓存。你还能轻松地添加支持IE的<a href="http://caniuse.com/#feat=jpegxr" target="_blank" rel="external">JPEGXR</a>。这样子，我们能够更快地给我们的用户展示我们的页面。</p>
<p>如果你想看看示例代码运行的效果，请移步到<a href="https://deanhume.github.io/Service-Workers-WebP" target="_blank" rel="external">deanhume.github.io/Service-Workers-WebP</a>。打开支持这些特性的浏览器，如Chrome，打开开发者工具，就可以看到页面的运行。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://html.spec.whatwg.org/multipage/embedded-content.html#the-picture-element" target="_blank" rel="external">https://html.spec.whatwg.org/multipage/embedded-content.html#the-picture-element</a></li>
<li><a href="http://scottjehl.github.io/picturefill/" target="_blank" rel="external">http://scottjehl.github.io/picturefill/</a></li>
<li><a href="https://developers.google.com/speed/webp/" target="_blank" rel="external">https://developers.google.com/speed/webp/</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;译文地址：&lt;a href=&quot;http://deanhume.com/Home/BlogPost/service-workers--dynamic-responsive-images-using-webp-images/10132/&quot; target=
    
    </summary>
    
      <category term="性能优化" scheme="https://aotu.io/cates/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="WebP" scheme="https://aotu.io/tags/WebP/"/>
    
  </entry>
  
  <entry>
    <title>使用Adobe FLASH CC制作Canvas动画</title>
    <link href="https://aotu.io/notes/2015/11/02/flash-canvas/"/>
    <id>https://aotu.io/notes/2015/11/02/flash-canvas/</id>
    <published>2015-11-02T10:44:25.000Z</published>
    <updated>2016-10-20T07:06:32.402Z</updated>
    
    <content type="html"><![CDATA[<p>flash可以导出canvas动画，大大缩短制作动画所需要的时间。它是一个可视化IDE，可以让我们写少很多代码。做出来的动画，可以更加精确。同时，可以通用使用帧脚本中的 Javascript，为资源添加交互性。</p>
<a id="more"></a>
<h2 id="新建HTML5-Canvas项目"><a href="#新建HTML5-Canvas项目" class="headerlink" title="新建HTML5 Canvas项目"></a>新建HTML5 Canvas项目</h2><p><img src="//img.aotu.io/youing/1.png" alt="新建"></p>
<h3 id="舞台设置"><a href="#舞台设置" class="headerlink" title="舞台设置"></a>舞台设置</h3><p>舞台大小修改为：600x600 (<em>这里可以根据设计稿调整所需要的舞台大小</em>)</p>
<h3 id="帧频"><a href="#帧频" class="headerlink" title="帧频"></a>帧频</h3><p>是指每秒钟放映或显示的帧或图像的数量，这个数值设置越大，动画越快，但同时也是性能消耗大户。这里我们设置为36</p>
<p><img src="//img.aotu.io/youing/2.png" alt="帧频"></p>
<h2 id="导入资源"><a href="#导入资源" class="headerlink" title="导入资源"></a>导入资源</h2><p>文件 &gt; 导入 &gt; 导入到库</p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>快捷键Ctrl + L或者窗口菜单下 &gt; 库</p>
<p>从资源库中把资源拖到舞台进去,通过移动拖拽的形式进行布局</p>
<p><img src="//img.aotu.io/youing/3.png" alt="布局"></p>
<h2 id="图形与影片剪辑"><a href="#图形与影片剪辑" class="headerlink" title="图形与影片剪辑"></a>图形与影片剪辑</h2><p>我们可以将单独的动画，放到一个独立的影片剪辑里，这样可以更好的控制动画。几个独立的剪片剪辑，可以组成一个完整的动画。</p>
<p>当我们把图片从资源库拖到舞台时，它这个时候，只是普通的位图，并不能做补帧动画，所以我们必须把它转换成元件。</p>
<ul>
<li><strong>图形</strong>由矢量图或者是位图组成。</li>
<li><strong>影片剪辑</strong>包含在动画影片中的影片片段，有自己的时间轴和属性。具有交互性，是用途最广、功能最多的部分。</li>
</ul>
<p>下面制作以飘动的钱，做个例子说明</p>
<p>选择位图，右键 &gt; 转换为元件，这个时候，弹出一个对话窗口，我们首先选择“影片剪辑”，保存。双击进入刚才创始的影片剪辑，这个时候，由于刚才我们只是把位图转成了影片剪辑，但实际上，它里面，仍然是一个位图，所以并不能做动画操作。所以我们需要在影片剪辑里，把图片转换了“图形”。</p>
<p><img src="//img.aotu.io/youing/4.png" alt="图形与影片"></p>
<h2 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h2><p>上面已经把图片转成图形元件，所以我们现在需要时间轴某个地方中插入关键帧。这里我们在30,60帧处插入关键帧。然后在30帧处，移动元件的位置，然后在每个关键帧的中间右键，选择“创建传统补间”。速度可以通过删除或者增加两个关键帧的补间动画时间长度来控制。</p>
<p><img src="//img.aotu.io/youing/5.png" alt="时间轴"></p>
<p><img src="//img.aotu.io/youing/6.png" alt="时间轴"></p>
<h2 id="动作播放控制"><a href="#动作播放控制" class="headerlink" title="动作播放控制"></a>动作播放控制</h2><p>如果我们希望动画可以连续从头再播放，可以在动画的最后一帧插入一个空白关键帧，打开动作面板，然后写上</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.gotoAndPlay(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p><img src="//img.aotu.io/youing/7.png" alt="动作播放控制"></p>
<p>即可回到第一帧重新播放，如果希望停止动画，则</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.<span class="built_in">stop</span>();</div></pre></td></tr></table></figure>
<p>如果希望跳到某帧去播放</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.gotoAndPlay(n)</div></pre></td></tr></table></figure>
<p>如果希望跳到某帧并停止</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.gotoAndStop(n)</div></pre></td></tr></table></figure>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>文件 &gt; 发布设置</p>
<h3 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h3><ul>
<li>循环时间轴(<em>表示是否循环整个动画</em>)</li>
<li>覆盖HTML(<em>第一次发布时可以选上，如果对html有修改，记得把这个选项去掉,否则会对文件进行覆盖操作</em>)</li>
</ul>
<h3 id="资源导出选项"><a href="#资源导出选项" class="headerlink" title="资源导出选项"></a>资源导出选项</h3><ul>
<li>图像(<em>是否导出雪碧图</em>)</li>
<li>javascript命名空间(<em>基本上不需要修改</em>)，这几个属于全局变量，可以在发布后的js文件中再修改。</li>
</ul>
<p><img src="//img.aotu.io/youing/8.png" alt="资源导出"></p>
<h2 id="生成html"><a href="#生成html" class="headerlink" title="生成html"></a>生成html</h2><p>最终会生成一个html文件和一个js文件</p>
<h3 id="生成的html文件"><a href="#生成的html文件" class="headerlink" title="生成的html文件"></a>生成的html文件</h3><ul>
<li>框架自带的preloadjs,可以轻松管理资源预加载，它提供了相关api可以进行loading等操作。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>people<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.createjs.com/easeljs-0.8.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.createjs.com/tweenjs-0.6.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.createjs.com/movieclip-0.8.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.createjs.com/preloadjs-0.6.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"people.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> canvas, stage, exportRoot;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</div><div class="line">	images = images||&#123;&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> loader = <span class="keyword">new</span> createjs.LoadQueue(<span class="literal">false</span>);</div><div class="line">	loader.addEventListener(<span class="string">"fileload"</span>, handleFileLoad);</div><div class="line">	loader.addEventListener(<span class="string">"complete"</span>, handleComplete);</div><div class="line">	loader.loadManifest(lib.properties.manifest);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleFileLoad</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (evt.item.type == <span class="string">"image"</span>) &#123; images[evt.item.id] = evt.result; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleComplete</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">	exportRoot = <span class="keyword">new</span> lib.people();</div><div class="line"></div><div class="line">	stage = <span class="keyword">new</span> createjs.Stage(canvas);</div><div class="line">	stage.addChild(exportRoot);</div><div class="line">	stage.update();</div><div class="line"></div><div class="line">	createjs.Ticker.setFPS(lib.properties.fps);</div><div class="line">	createjs.Ticker.addEventListener(<span class="string">"tick"</span>, stage);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"init();"</span> <span class="attr">style</span>=<span class="string">"background-color:#D4D4D4"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"620"</span> <span class="attr">style</span>=<span class="string">"background-color:#FFFFFF"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="生成的js文件"><a href="#生成的js文件" class="headerlink" title="生成的js文件"></a>生成的js文件</h3><ul>
<li>生成的动画配置及脚本都在这个js文件里面，如果需要，可以手动修改相关数据。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">lib, img, cjs, ss</span>) </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p; <span class="comment">// shortcut to reference prototypes</span></div><div class="line"></div><div class="line"><span class="comment">// library properties:</span></div><div class="line">lib.properties = &#123;</div><div class="line">	<span class="attr">width</span>: <span class="number">600</span>,</div><div class="line">	<span class="attr">height</span>: <span class="number">620</span>,</div><div class="line">	<span class="attr">fps</span>: <span class="number">36</span>,</div><div class="line">	<span class="attr">color</span>: <span class="string">"#FFFFFF"</span>,</div><div class="line">	<span class="attr">manifest</span>: [</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/bigband.png"</span>, <span class="attr">id</span>:<span class="string">"bigband"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/Bitmap1.png"</span>, <span class="attr">id</span>:<span class="string">"Bitmap1"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/body.png"</span>, <span class="attr">id</span>:<span class="string">"body"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/eye1.png"</span>, <span class="attr">id</span>:<span class="string">"eye1"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/eye2.png"</span>, <span class="attr">id</span>:<span class="string">"eye2"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/face1.png"</span>, <span class="attr">id</span>:<span class="string">"face1"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/face2.png"</span>, <span class="attr">id</span>:<span class="string">"face2"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/face3.png"</span>, <span class="attr">id</span>:<span class="string">"face3"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/hair.png"</span>, <span class="attr">id</span>:<span class="string">"hair"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/hand2.png"</span>, <span class="attr">id</span>:<span class="string">"hand2"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/hand3.png"</span>, <span class="attr">id</span>:<span class="string">"hand3"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/hand4.png"</span>, <span class="attr">id</span>:<span class="string">"hand4"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/index30.png"</span>, <span class="attr">id</span>:<span class="string">"index30"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/index302.png"</span>, <span class="attr">id</span>:<span class="string">"index302"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/index40.png"</span>, <span class="attr">id</span>:<span class="string">"index40"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/index5.png"</span>, <span class="attr">id</span>:<span class="string">"index5"</span>&#125;,</div><div class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/shadow.png"</span>, <span class="attr">id</span>:<span class="string">"shadow"</span>&#125;</div><div class="line">	]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// symbols:</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">(lib.bigband = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.initialize(img.bigband);</div><div class="line">&#125;).prototype = p = <span class="keyword">new</span> cjs.Bitmap();</div><div class="line">p.nominalBounds = <span class="keyword">new</span> cjs.Rectangle(<span class="number">0</span>,<span class="number">0</span>,<span class="number">295</span>,<span class="number">538</span>);</div><div class="line"></div><div class="line"></div><div class="line">(lib.Bitmap1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.initialize(img.Bitmap1);</div><div class="line">&#125;).prototype = p = <span class="keyword">new</span> cjs.Bitmap();</div><div class="line">p.nominalBounds = <span class="keyword">new</span> cjs.Rectangle(<span class="number">0</span>,<span class="number">0</span>,<span class="number">543</span>,<span class="number">577</span>);</div><div class="line"></div><div class="line"></div><div class="line">(lib.body = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.initialize(img.body);</div><div class="line">&#125;).prototype = p = <span class="keyword">new</span> cjs.Bitmap();</div><div class="line">p.nominalBounds = <span class="keyword">new</span> cjs.Rectangle(<span class="number">0</span>,<span class="number">0</span>,<span class="number">521</span>,<span class="number">242</span>);</div><div class="line"></div><div class="line"></div><div class="line">(lib.eye1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.initialize(img.eye1);</div><div class="line">&#125;).prototype = p = <span class="keyword">new</span> cjs.Bitmap();</div><div class="line">p.nominalBounds = <span class="keyword">new</span> cjs.Rectangle(<span class="number">0</span>,<span class="number">0</span>,<span class="number">73</span>,<span class="number">58</span>);</div><div class="line"></div><div class="line"></div><div class="line">(lib.eye2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.initialize(img.eye2);</div><div class="line">&#125;).prototype = p = <span class="keyword">new</span> cjs.Bitmap();</div><div class="line">p.nominalBounds = <span class="keyword">new</span> cjs.Rectangle(<span class="number">0</span>,<span class="number">0</span>,<span class="number">72</span>,<span class="number">35</span>);</div><div class="line"></div><div class="line"></div><div class="line">(lib.face1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.initialize(img.face1);</div><div class="line">&#125;).prototype = p = <span class="keyword">new</span> cjs.Bitmap();</div><div class="line">p.nominalBounds = <span class="keyword">new</span> cjs.Rectangle(<span class="number">0</span>,<span class="number">0</span>,<span class="number">297</span>,<span class="number">368</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">// stage content:</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">(lib.people = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.initialize();</div><div class="line"></div><div class="line">	<span class="comment">// people</span></div><div class="line">	<span class="keyword">this</span>.instance = <span class="keyword">new</span> lib.peoplemc();</div><div class="line">	<span class="keyword">this</span>.instance.setTransform(<span class="number">295</span>,<span class="number">312.5</span>);</div><div class="line"></div><div class="line">	<span class="comment">// qpmask (mask)</span></div><div class="line">	<span class="keyword">var</span> mask = <span class="keyword">new</span> cjs.Shape();</div><div class="line">	mask._off = <span class="literal">true</span>;</div><div class="line">	mask.graphics.p(<span class="string">"EgpUgqAMBU1AAAMAAABaIMhU1AAAg"</span>);</div><div class="line">	mask.setTransform(<span class="number">278.5</span>,<span class="number">308.1</span>);</div><div class="line"></div><div class="line">	<span class="comment">// qp</span></div><div class="line">	<span class="keyword">this</span>.instance_1 = <span class="keyword">new</span> lib.qpmc();</div><div class="line">	<span class="keyword">this</span>.instance_1.setTransform(<span class="number">291.5</span>,<span class="number">263.5</span>);</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.instance_1.mask = mask;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.addChild(<span class="keyword">this</span>.instance_1,<span class="keyword">this</span>.instance);</div><div class="line">&#125;).prototype = p = <span class="keyword">new</span> cjs.Container();</div><div class="line">p.nominalBounds = <span class="keyword">new</span> cjs.Rectangle(<span class="number">263</span>,<span class="number">31.5</span>,<span class="number">617</span>,<span class="number">905.5</span>);</div><div class="line"></div><div class="line">&#125;)(lib = lib||&#123;&#125;, images = images||&#123;&#125;, createjs = createjs||&#123;&#125;, ss = ss||&#123;&#125;);</div><div class="line"><span class="keyword">var</span> lib, images, createjs, ss;</div></pre></td></tr></table></figure>
<h2 id="附上最终效果"><a href="#附上最终效果" class="headerlink" title="附上最终效果"></a>附上最终效果</h2><p><a href="http://b.gengshu.net/doc/flash/people.html" target="_blank" rel="external">点我看效果</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;flash可以导出canvas动画，大大缩短制作动画所需要的时间。它是一个可视化IDE，可以让我们写少很多代码。做出来的动画，可以更加精确。同时，可以通用使用帧脚本中的 Javascript，为资源添加交互性。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Flash" scheme="https://aotu.io/tags/Flash/"/>
    
      <category term="Canvas" scheme="https://aotu.io/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>前方有坑，请绕道——Zepto 中使用 CORS</title>
    <link href="https://aotu.io/notes/2015/10/26/zepto-cors/"/>
    <id>https://aotu.io/notes/2015/10/26/zepto-cors/</id>
    <published>2015-10-26T04:24:22.000Z</published>
    <updated>2016-10-20T07:06:32.402Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，现在移动 Web 开发中，<code>Zepto.js</code> 是使用频率比较高的库之一。由于它的体积小，加载速度快，有着和 <code>jquery</code> 类似的 API，而备受开发者喜爱。可随着时间的推移，我们遇到了不少 <code>Zepto</code> 的坑，而且文件体积的大小跟代码的执行效率并没有什么关系，最后我们发现 <code>Zepto</code> 并没有太大的卵用。</p>
<p>jsperf 上有个 <code>zepto</code> 和 <code>jquery</code> DOM 操作的对比测试，有兴趣可以看一下：<a href="http://jsperf.com/zepto-vs-jquery-2013/25" target="_blank" rel="external">zepto vs jquery - selectors</a></p>
<blockquote>
<p>开源项目好坏的一个评判标准之一：是否有一个强大的社区和一批积极的贡献者</p>
</blockquote>
<p>我们简单的看一个对比：<br><img src="http://jdc.jd.com/fd/blog_image/cors_pic_01.jpg" alt="zepto github"><br><img src="http://jdc.jd.com/fd/blog_image/cors_pic_02.jpg" alt="jquery github"></p>
<p>很明显，<code>Zepto</code> 的活跃度远远没有 <code>jquery</code> 高。不过言归正传，还是回到 <code>Zepto</code> 的话题上。</p>
<hr>
<p>一直以来，我们在移动端上面使用 <code>zepto</code>并没有出现太大的问题。直至我们将 Ajax 跨域请求从 iframe 的方式切换成 <code>CORS</code> 之后，一个比较隐蔽的 Bug 出现了。</p>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><ol>
<li>页面在Webview中，点击按钮无效</li>
<li>页面在部分浏览器中，无法拉取到用户的信息</li>
</ol>
<h3 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h3><p>我通过 <code>Fiddler</code> 或 <code>Charles</code> 抓包发现，在 webview 中，点击按钮之后的 Ajax 请求并未发出，但是页面在手机QQ浏览器和 PC 上表现都是正常的。因为是在切换 CORS 之后，页面才出现异常的，在此之前并没有版本迭代。所以 CORS 代码首当其冲要进行深层次的 code-review，于是我直接在 <code>CORS</code> 的代码块上进行 <code>try-catch</code>，结果捕获到异常：</p>
<p><code>INVALID_STATE_ERR: DOM Exception 11</code></p>
<h3 id="问题深入剖析"><a href="#问题深入剖析" class="headerlink" title="问题深入剖析"></a>问题深入剖析</h3><p>先来看看测试代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (options.withCredentials) &#123;</div><div class="line">    options = $.extend(options, &#123;</div><div class="line">        <span class="attr">xhr</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="built_in">window</span>.XMLHttpRequest()</div><div class="line">         xhr.withCredentails = <span class="literal">true</span></div><div class="line">         <span class="keyword">return</span> xhr</div><div class="line">     &#125;</div><div class="line">&#125;&#125;</div><div class="line"><span class="keyword">delete</span> options.withCredentails</div><div class="line"></div><div class="line">$.ajax(options)</div></pre></td></tr></table></figure>
<p>这段代码在大多数浏览器中都可以正常执行，但是在 Android 的 webview 和一些旧版本的手机浏览器中会抛出错误。</p>
<p>以上代码和普通的 Ajax 请求不同的地方在于设置了 <code>CORS</code> 的 <code>withCredentials</code> 属性。（<code>CORS</code> 请求默认是不会带上 <code>cookies</code> 等身份信息的，如果需要在请求中带上 <code>cookies</code>，则需要设置 <code>XMLHttpRequest</code> 的 <code>withCredentials</code> 属性值为 true）</p>
<p>下面通过两个例子来分析一下：</p>
<p>例一：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var xhr = <span class="built_in">new</span> XMLHttpRequest()</div><div class="line">xhr.withCrendentials = <span class="literal">true</span></div><div class="line">xhr.<span class="built_in">open</span>(<span class="string">'POST'</span>, <span class="string">'url'</span>, <span class="literal">true</span>)</div><div class="line">xhr.<span class="built_in">send</span>()</div></pre></td></tr></table></figure>
<p>这段代码在部分浏览器中依旧会抛出异常：<code>INVALID_STATE_ERR: DOM Exception 11</code></p>
<p>例二：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var xhr = <span class="built_in">new</span> XMLHttpRequest()</div><div class="line">xhr.<span class="built_in">open</span>(<span class="string">'POST'</span>, <span class="string">'url'</span>, <span class="literal">true</span>)</div><div class="line">xhr.withCredentials = <span class="literal">true</span></div><div class="line">xhr.<span class="built_in">send</span>()</div></pre></td></tr></table></figure>
<p>这段代码可以正常执行，并不会抛出异常<br>为什么 <code>xhr.withCredentials</code> 赋值在 <code>xhr.open()</code> 方法之前就会出错呢？</p>
<p>秉着科(xian)学(de)严(dan)谨(teng)的态度，翻看了 W3C 在 2011 年和 2012 年关于 <code>XMLHttpRequest</code> 的规范文档，发现使用 <code>withCredentials</code> 属性的规范发生了改变。</p>
<p>2011 年的规范：<br><img src="http://jdc.jd.com/fd/blog_image/cors_pic_03.png" alt="2011 CORS"></p>
<p>2012 年的规范：<br><img src="http://jdc.jd.com/fd/blog_image/cors_pic_04.png" alt="2012 CORS"></p>
<p>对比两份文档，我们重点看一下 step 1：<br>2011 年的规范中规定当 <code>XMLHttpRequest</code> 的 <code>readyState</code> 状态不是 <code>OPENED</code> 时，会报错；<br>2012 年的规范中规定当 <code>XMLHttpRequest</code> 的 <code>readyState</code> 状态不是 <code>UNSENT</code> 或 <code>OPENDED</code> 时，会报错；</p>
<p>下面简单介绍一下 <code>XMLHttpRequest</code> 的 <code>readyState</code> 值：</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>State</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>UNSENT</td>
<td>open() has not been called yet.</td>
</tr>
<tr>
<td>1</td>
<td>OPENED</td>
<td>send() has not been called yet.</td>
</tr>
<tr>
<td>2</td>
<td>HEADERS_RECEIVED</td>
<td>send() has been called,and headers and status are available.</td>
</tr>
<tr>
<td>3</td>
<td>LOADING</td>
<td>Downloading;responseText holds partial data</td>
</tr>
<tr>
<td>4</td>
<td>DONE</td>
<td>The operation is complete</td>
</tr>
</tbody>
</table>
<p>由此可以看出，当一个 <code>XMLHttpRequest</code> 对象被创建时，默认的 <code>readyState</code> 状态为 <code>UNSENT</code>，只有执行了 open() 方法并且还没有执行 send() 方法时，<code>readyState</code> 的状态才为 <code>OPENED</code>。</p>
<p>由于一些老版本的浏览器是按照 2012 年之前的规范来实现的，所以这一部分浏览器中，open() 方法要在设置 <code>withCredentials</code> 属性之前调用。因此为了兼容，正确的做法应该是在 open() 方法之后再设置 <code>withCredentials</code> 属性。</p>
<p>下面来看看 zepto.js v1.1.3 的源码：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (settings.xhrFields) <span class="keyword">for</span> (name <span class="keyword">in</span> settings.xhrFields) xhr[name] = settings.xhrFields[name]</div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="keyword">async</span> = <span class="string">'async'</span> <span class="keyword">in</span> settings ? settings.<span class="keyword">async</span> : <span class="literal">true</span></div><div class="line"></div><div class="line">xhr.open(settings.type, settings.url, <span class="keyword">async</span>, settings.username, settings.password)</div></pre></td></tr></table></figure></p>
<p><code>zepto</code> 是在 open() 方法之前设置 <code>XMLHttpRequest</code> 的属性值的，所以这会导致在使用 <code>CORS</code> 并且设置 <code>withCredentials</code> 的时候，代码在部分浏览器中报错。Android webview 中重现的几率很大。</p>
<hr>
<p>总结：在使用 <code>CORS</code> 时，如果要给 <code>withCredentials</code> 赋值，请务必要在 open() 方法之后，否则无法向后兼容。</p>
<p>对于 zepto.js 的问题，已经有用户向作者提交了 PR，作者也表示会在下个版本中修复（可是直到今天，都更新到 v1.1.6 版本了，还是没有修复这个问题，更改一下代码顺序就那么难吗？！难怪阿里也嫌 zepto 更新速度太慢，问题多，所以自己 fork 代码进行了定制化）。</p>
<p>所以目前如果要用 <code>zepto</code> 来进行 <code>CORS</code> 的话，还是需要自己更改 <code>zepto</code> 的 ajax 模块代码，然后手动构建。</p>
<hr>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="http://www.w3.org/TR/2011/WD-XMLHttpRequest2-20110816/#the-withcredentials-attribute" target="_blank" rel="external">XMLHttpRequest Level 2 2011</a><br><a href="http://www.w3.org/TR/XMLHttpRequest/" target="_blank" rel="external">XMLHttpRequest Level 1 2014</a><br><a href="http://www.w3.org/TR/XMLHttpRequest2/" target="_blank" rel="external">XMLHttpRequest Level 2 2014</a><br><a href="https://github.com/madrobby/zepto/issues/921" target="_blank" rel="external">Zepto issues</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，现在移动 Web 开发中，&lt;code&gt;Zepto.js&lt;/code&gt; 是使用频率比较高的库之一。由于它的体积小，加载速度快，有着和 &lt;code&gt;jquery&lt;/code&gt; 类似的 API，而备受开发者喜爱。可随着时间的推移，我们遇到了不少 &lt;code&gt;Zepto&lt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Zepto" scheme="https://aotu.io/tags/Zepto/"/>
    
      <category term="CORS" scheme="https://aotu.io/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>探究transform动画元素的z-index</title>
    <link href="https://aotu.io/notes/2015/10/21/z-index-and-translate3d/"/>
    <id>https://aotu.io/notes/2015/10/21/z-index-and-translate3d/</id>
    <published>2015-10-21T02:24:35.000Z</published>
    <updated>2016-10-20T07:06:32.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="z-index-和-translate3d"><a href="#z-index-和-translate3d" class="headerlink" title="z-index 和 translate3d"></a>z-index 和 translate3d</h2><p>在一次需求中，需要做出三张卡牌走马灯式滚动的效果，由于在前面的一张卡牌需要挡住后面的卡牌，自然而然地就用 z-index 使前面的卡牌显示在最上面，配以 transform 动画让“走马灯”滚起来，在开发过程中，在 PC 侧 Chrome 中表现良好，在本人手机浏览器中也表现良好，最后测试时却发现，在微信客户端或 QQ 客户端中打开页面出现问题，“走马灯”滚动时，卡牌先通过 transform 就位后，才把 z-index 设置较大的卡牌置于上面，感觉上非常的不流畅。</p>
<p><img src="//img.aotu.io/Manjiz/2015/151116_card.png" alt=""></p>
<p>究其原因，发现这是某些浏览器的渲染规则，涉及到 <code>stacking context</code> 的概念，transform 的元素会创建新的 DOM，层级会在普通元素的上面，除了 transform ,还有哪些情况会创建新 <code>stacking context</code>呢？</p>
<p>MDN 上有相关介绍：</p>
<blockquote>
<ul>
<li>the root element (HTML),</li>
<li><strong>positioned (absolutely or relatively) with a z-index value other than “auto”,</strong></li>
<li><strong>a flex item with a z-index value other than “auto”,</strong></li>
<li><strong>elements with an opacity value less than 1,</strong></li>
<li><strong>elements with a transform value other than “none”,</strong></li>
<li>elements with a mix-blend-mode value other than “normal”,</li>
<li>elements with isolation set to “isolate”, on mobile WebKit and Chrome 22+, position: fixed always creates a new stacking context, even when z-index is “auto”,</li>
<li>specifing any attribute above in will-change even you don’t write themselves directly</li>
</ul>
</blockquote>
<p>下图是对 transform 和 opacity 的测试结果：</p>
<p><img src="//img.aotu.io/Manjiz/2015/151117_twotest.png" alt=""></p>
<p>很明显，红色 div 都在绿色 div 上面了，说明真的有创建了个更高层级的 <code>stacking context</code>。再做进一步测试，我给两组的 div 都加了 <code>position:relative;z-index:1;</code>，结果绿色的都在上面了，手机微信上也一样，这能不能说明 z-index 对层级的影响大于 transform 和 opacity 呢。</p>
<p>至于 transform 变换的时候会让 z-index “临时失效”，其实并非 z-index 失效了，只是 z-index 被用在不同的 <code>stacking context</code> 上，而非在默认的 context 上同等地比较层级了。所以 DOM 在 transform 的工程中，DOM 处于一个新的 <code>stacking context</code> 里，z-index 也是相对于这个 <code>stacking context</code> 的，所以表现出来的实际是 <code>stacking context</code> 的层次，动画一结束，DOM 又回到默认的 context 里，这时的 z-index 才是在同一个 context 上的比较。</p>
<p>那该用什么方法来控制卡牌的层级，又能让动画流畅地表现呢，当然是 translate3d 中的 z-axis，很多时候我们并不知道它是用来做什么的，平常用得最多的只是它的 x-axis 和 y-axis，不妨先看个例子：</p>
<pre><code>.box1 {width:100px;height:100px;background:red;transform:perspective(100px) translate3d(0, 0, 100px);}
.box2 {width:100px;height:100px;background:blue;transform:perspective(100px) translate3d(0, 0, 200px);}
</code></pre><p>实际效果是，看不到它们，然后我们再设置 perspective 为 201px，这时可以很明显地看到，box2 占据了整个屏幕，而 box1 宽高约为 200px，唯有设置 translate3d(0,0,0) 时，宽高才为 100px。</p>
<p>现在可以来理解下 perspective 和 translate3d 的关系，perspective 可以比作镜头和 DOM 的距离，实际上设置多少都没影响，因为它通过跟 z-axis 上的数值比例来影响样式，它更像是一个刻度，而 translate3d 的 z-axis 则表示了 DOM 和屏幕的距离。假定镜头跟屏幕的距离固定了，z-axis 越大，DOM 逐渐远离屏幕，靠近镜头，这时 DOM 看起来也就越大，当 z-axis 大于或等于 perspective 时，DOM元素已经在我们镜头的后面了，所以也就看不到它了。</p>
<p><img src="//img.aotu.io/Manjiz/2015/151116_perspective.png" alt=""></p>
<p>现在也就好理解为什么 perspective 和 translate3d 能够影响 DOM 的层级了，它们在屏幕和镜头之间的距离不同，所以就有了层次，移动端设备很好地表现了这个结论，但在 PC 的 Chrome 上测试则不然，我们仍需要 z-index 才会表现出我们需要的 层次关系。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://segmentfault.com/q/1010000002480824" target="_blank" rel="external">http://segmentfault.com/q/1010000002480824</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;z-index-和-translate3d&quot;&gt;&lt;a href=&quot;#z-index-和-translate3d&quot; class=&quot;headerlink&quot; title=&quot;z-index 和 translate3d&quot;&gt;&lt;/a&gt;z-index 和 translate3d&lt;/
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="translate3d" scheme="https://aotu.io/tags/translate3d/"/>
    
      <category term="zindex" scheme="https://aotu.io/tags/zindex/"/>
    
  </entry>
  
  <entry>
    <title>我的vim二三事</title>
    <link href="https://aotu.io/notes/2015/10/16/vim-list/"/>
    <id>https://aotu.io/notes/2015/10/16/vim-list/</id>
    <published>2015-10-16T02:24:35.000Z</published>
    <updated>2016-10-20T07:06:32.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>选择你所喜欢的，爱你所选择的–列夫·托尔斯泰</p>
</blockquote>
<h3 id="不是理由的理由"><a href="#不是理由的理由" class="headerlink" title="不是理由的理由"></a>不是理由的理由</h3><p>用了几年Vim，我发现我越来越喜欢它了，和好多人一样喜欢它，也许喜欢的理由各不相同，但大抵有如下几个：</p>
<ul>
<li>即使你用了几年了，你还是会在某天惊呼原来还可以这么操作，<strong>它总会给你带来惊喜</strong>。</li>
<li>当你要操作的时候你根本不用去想那些快捷键(也许不能叫快捷键，它是谓语{operator}和宾语{text-objects}，组合在一起形成不同指令,好像自然语言)，它们就在你意识里。也许开始的时候你需要去记一些快捷键（别的编辑器不用吗？），但记住以后你熟练了，就像是骑自行车，你就忘记它的存在，你只用输出你的思想，<strong>它让你更专注你要做的事情本身</strong>。</li>
<li>虽然会有很多的快捷键以便让不同的人找到他们最佳的操作方式，但是<strong>每个人常用的不外乎特定的十几个快捷键</strong>，而这些快捷键都是有内在逻辑让你记住的，比如：d(elete)删除,D(elete)删除到行尾,d(elete)<br>a w(ord) 删除一个词。</li>
<li>如果懒，那么你学Vim是没错的，它是<strong>变化中的永恒</strong>，那么多的编辑器更新迭代，它们都有vi模式或vi插件，你可以用你所学，一如既往。</li>
<li>它有<strong>非常多的插件</strong>，你可以定制一些自己喜欢的强大功能。（这其实也是个缺点的吧，毕竟自己配置多费时间呀，不过好些人一个配置用了十多年）。<a href="http://www.zhihu.com/question/20151659" target="_blank" rel="external">到底有多强大呢，看看知乎上这篇文章。</a></li>
</ul>
<p>我知道上面这些说得太抽象了，也许我们应该来点具体的，你可以边看边对比一下你使用的编辑器的操作：</p>
<table>
<thead>
<tr>
<th style="text-align:left">编辑</th>
<th style="text-align:left">用 Vim</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">如何向下移动7行</td>
<td style="text-align:left">7j</td>
</tr>
<tr>
<td style="text-align:left">如何删除一个词（word）</td>
<td style="text-align:left">dw</td>
</tr>
<tr>
<td style="text-align:left">如何删除一行</td>
<td style="text-align:left">dd</td>
</tr>
<tr>
<td style="text-align:left">如何删除｛｝里的内容</td>
<td style="text-align:left">di{</td>
</tr>
<tr>
<td style="text-align:left">光标移动到第80行</td>
<td style="text-align:left">80G</td>
</tr>
<tr>
<td style="text-align:left">如何在当前文件里搜索光标所在位置的词</td>
<td style="text-align:left">*(#)</td>
</tr>
<tr>
<td style="text-align:left">如何在50行到100行之间查找并替换</td>
<td style="text-align:left">:50,100/old/new/g</td>
</tr>
<tr>
<td style="text-align:left">如果你想在同一文件中对比两个不同的块时怎么做</td>
<td style="text-align:left">:sp (to ‘split’ the view)</td>
</tr>
<tr>
<td style="text-align:left">如果你想要打开光标所在文件名的文件</td>
<td style="text-align:left">gf (which means ‘g’o to this ‘f’ile)</td>
</tr>
<tr>
<td style="text-align:left">如果你想要得到每行前10个字母而它后面的数据不是你想要的</td>
<td style="text-align:left">ctrl-v (win 下是ctrl-q)</td>
</tr>
<tr>
<td style="text-align:left">如果你想要转换别人给到你的混合大小的文件变成小写</td>
<td style="text-align:left">1GVG u</td>
</tr>
<tr>
<td style="text-align:left">录制一系列命令然后执行</td>
<td style="text-align:left">用宏</td>
</tr>
<tr>
<td style="text-align:left">在width:16px的数字16上加20</td>
<td style="text-align:left">20 ctrl+a</td>
</tr>
<tr>
<td style="text-align:left">输入23+45+119的结果</td>
<td style="text-align:left">ctrl+r=23+45+119</td>
</tr>
</tbody>
</table>
<p>以上的这些操作都是直接在键盘上操作的，没有用鼠标。</p>
<p>喜欢一个人的时候总能说出好多的理由，而不喜欢却只需要一个理由。此时我赞美我的女神你也在心里列举了你心中女神的诸多可爱美丽特点。所以可以想象各种关于编辑器文章下的各种互喷吐槽，即使是同一个编辑器的文章下也不免相互吐槽，毕竟不同人理念也是不一样的。</p>
<h3 id="有所为有所不为"><a href="#有所为有所不为" class="headerlink" title="有所为有所不为"></a>有所为有所不为</h3><p>vim是个高效的文本编辑器，在文本编辑这一领域可谓是独步天下，高手<a href="http://zhuanlan.zhihu.com/vim-non-programming/19918627" target="_blank" rel="external">使用vim处理SRT字幕内容</a>，痴迷者除了使用vim写代码、<a href="http://www.vimer.cn?p=1222" target="_blank" rel="external">发邮件</a>、<a href="http://bluegene8210.is-programmer.com/posts/67910.html" target="_blank" rel="external">看股票</a>、写博客、写markdown(这篇文章就是vim写的markdown)还<a href="http://www.iplaysoft.com/vimium-and-vimperator.html" target="_blank" rel="external">使用vim浏览网页</a>，普通人可以把它作为<a href="http://blog.sina.com.cn/s/blog_45dac66f010005kw.html" target="_blank" rel="external">普通人的编辑利器</a>。在文本编辑领域，后来者只有模仿而无法超越vim。小李飞刀独步天下却也砍不了骨头，在代码编程领域，公认的最适合的场景是做Unix/Linux服务器编程,不用下载服务器端的文件而直接修改；其次是编写html/css/javascript/shell/python/c等；最后在mac、linux下要改文件用系统带的vim随手改改。而编写Java<br>EE、Objective-C等还是用Eclipse、XCode等IDE的比较好。</p>
<h3 id="君子性非异也，善假于物也"><a href="#君子性非异也，善假于物也" class="headerlink" title="君子性非异也，善假于物也"></a>君子性非异也，善假于物也</h3><p>vim只是一个工具而已，它并不能让你码代码的能力提升，只能帮你更快速地输出你的思维。每一个工具都有它特定的场景，聪明的人总会在适当的场景做出合适的选择。好多人都说学习起来好难的呀，投入的成本换来的收益是不是成正比的呢？我觉得还是值得的，上面也说过，它是万变中的不变，同时它真的是个高效的工具，另外也许最后出来的高效的编辑外还带给你一些东西，比如好奇发现带来的惊喜，又如你发现你用了几年还有好多不会的谦虚，还有用宏解决了一个棘手问题的喜悦。最后它只是一个工具，是雕刻林诗音松木人像的小刀，或是冠绝武林的小李飞刀，关键在人。</p>
<h3 id="不积跬步无以至千里"><a href="#不积跬步无以至千里" class="headerlink" title="不积跬步无以至千里"></a>不积跬步无以至千里</h3><p>佛渡有缘人，细想这个‘有缘人’还挺有意思的，其实就是信的人，不信的说再多也是没有用的。如果想学，不必卸载你的是编辑器，做出破釜沉舟之势，万一用了两天觉得不方便或是有紧急的要修改的内容，要换回来用熟悉的编辑器。另外也不要觉得一时学不会就感觉挫折，毕竟很多东西都不可一蹴而就的，需要一点积累，所以慢慢来的。那些《7天XX》《21精通XX》真的害了好多人，慢慢来，实在不行认为自己笨了，不还有勤能补拙吗？好多的编辑器都有vi插件或模式，你可以找一找然后装上试试的，等熟悉了觉得不满足了再换成vim，要是觉得一直用vi插件也不错的就一直用着，能解决问题的顺手的才是最高效的。</p>
<h3 id="选择你所喜欢的，爱你所选择的"><a href="#选择你所喜欢的，爱你所选择的" class="headerlink" title="选择你所喜欢的，爱你所选择的"></a>选择你所喜欢的，爱你所选择的</h3><p>我在小学的时候搞了个小霸王说要学习五笔，然后字根没有背完就忘记了，大学时候再一个想起这个事决定再学五笔，然后没有几天又放弃了，毕业两年后想起学五笔这个事，心里有个结，于是又学起来了，然后一直在用，虽然是五笔混合模式，偶尔也用纯五笔模式。vim就是在我可以用五笔的时候开始学的，当时拿同事的vimrc来直接就用了，现在也在用的，只是改了少许的地方，一直在够用就好的状态，然后在用的时候觉得有什么不自然的地方就找一下答案的，慢慢地越来越顺手了。细想我这个慢方法还是可取的，那么多我的命令我只会我常用的十几个，但那也是够用的了，并且是越来越喜欢，看着别人用的也还常发现还有很多不会的东西。</p>
<p>再回首，一切是那样自然，一如vim的理念keep it simple，我也只装了平时常用的几个插件，还有一些比较强大的插件也没有用得着，所以没有装上。最近为了给同事们讲一下vim,才意识到虽然平时说vim有几个模式，但是用的时候自己也没有区分得很清楚，觉得就是一个整体，应该那样，有时候我们只是为了区分和认识一个东西才把它解构了，就像一首好的歌曲，我们只用觉得好听，那些乐评人说的为什么好感觉都很有道理。vim命令有多难记也还是有逻辑的；vim里可以快速精确的查找定位；vim真的好像一切文本皆对象，操作针对字符，词，行，块，文件这些对象；vim的设计哲学是如果你的工作只需要做一次，那没问题，怎么搞都行，如果你的工作是要重复地完成某些工作，则vim总可以帮你找到更少的按键方式来实现相同的目标。如<a href="http://vimgolf.com/" target="_blank" rel="external">VimGolf</a>所说Real Vim ninjas count every keystroke - do you?  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;选择你所喜欢的，爱你所选择的–列夫·托尔斯泰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;不是理由的理由&quot;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Web开发" scheme="https://aotu.io/tags/Web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>PostCSS快速入门使用</title>
    <link href="https://aotu.io/notes/2015/10/13/start-postcss/"/>
    <id>https://aotu.io/notes/2015/10/13/start-postcss/</id>
    <published>2015-10-13T01:34:25.000Z</published>
    <updated>2016-10-20T07:06:32.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识PostCSS"><a href="#初识PostCSS" class="headerlink" title="初识PostCSS"></a>初识PostCSS</h2><p>如果你第一次听说<code>PostCSS</code>这个东西，那么请看下面摘自官方<code>Github</code>的介绍：</p>
<blockquote>
<p>PostCSS is a tool for transforming CSS with JS Plugins. These plugins can support variables and mixins, transpile future CSS syntax, inline images, and more</p>
</blockquote>
<p>翻译成中文的意思如下：</p>
<blockquote>
<p>PostCSS 是一套利用JS插件实现的用来改变CSS的工具.这些插件能够支持变量和混合语法，转换未来CSS语法，内联图片，还有更多</p>
</blockquote>
<p>我们用过<code>Less</code>、<code>SASS</code>等工具来对CSS做<code>预处理</code>操作，按照它们约定的语法来书写并且最终转换成可用的样式，这付出的代价是<strong>必须先熟悉这个工具的书写语法</strong>。 </p>
<p>随着近几年 <a href="http://gruntjs.cn/" target="_blank" rel="external">Grunt</a>、<a href="http://gulpjs.com/" target="_blank" rel="external">Gulp</a>、<a href="http://webpack.github.io/docs/" target="_blank" rel="external">Webpack</a> 等自动化工具的兴起，<code>组合式应用</code>变得非常的热门，那<code>PostCSS</code>存在的意义是什么呢？答案是：<strong>CSS生态系统</strong></p>
<p><code>PostCSS</code>拥有非常多的插件，诸如自动为CSS添加浏览器前缀的插件<code>autoprefixer</code>、当前移动端最常用的<code>px</code>转<code>rem</code>插件<code>px2rem</code>，还有支持尚未成为CSS标准但特定可用的插件<code>cssnext</code>，还有很多很多。就连著名的<code>Bootstrap</code>在下一个版本<code>Bootstrap 5</code>也将使用<code>PostCSS</code>作为样式的基础。</p>
<p>一句话来概括PostCSS：<strong>CSS编译器能够做到的事情，它也可以做到，而且能够做得更好</strong></p>
<h2 id="快速使用PostCSS"><a href="#快速使用PostCSS" class="headerlink" title="快速使用PostCSS"></a>快速使用PostCSS</h2><p>上面大致介绍了<code>PostCSS</code>，也许我们并没有在头脑里形成对它的认知，那下面我们就通过一个简单地实例来看看如何使用<code>PostCSS</code>。</p>
<p><code>PostCSS</code>得益于插件，支持Grunt,Gulp,webpack,Broccoli,Brunch还有ENB，这里我们将以<code>Gulp</code>作为实例来讲。</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>创建并进入我们的实例目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir postcss-demo &amp;&amp; <span class="built_in">cd</span> postcss-demo</div></pre></td></tr></table></figure>
<p>然后快速生成<code>package.json</code>文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># --yes 参数能够帮助我们快速生成默认的package.json</span></div><div class="line">npm init --yes</div></pre></td></tr></table></figure>
<p>将上面创建的<code>package.json</code>文件的<code>main</code>参数改为<code>gulpfile.js</code>，然后安装我们所需的依赖</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># gulp跟gulp-postcss是必须的，后面两个插件为了演示用途</span></div><div class="line">npm i gulp gulp-postcss autoprefixer autoprefixer-core cssnext --save-dev <span class="_">-d</span></div></pre></td></tr></table></figure>
<p>创建<code>gulpfile.js</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 这里用命令行进行创建，你也可以手动新建</span></div><div class="line">touch gulpfile.js</div></pre></td></tr></table></figure>
<h3 id="修改gulpfile-js"><a href="#修改gulpfile-js" class="headerlink" title="修改gulpfile.js"></a>修改gulpfile.js</h3><p>将下面代码贴进<code>gulpfile.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> postcss = <span class="built_in">require</span>(<span class="string">'gulp-postcss'</span>);</div><div class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</div><div class="line"><span class="keyword">var</span> cssnext = <span class="built_in">require</span>(<span class="string">'cssnext'</span>);</div><div class="line"></div><div class="line"><span class="comment">//定义css任务</span></div><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//定义postcss任务流数组</span></div><div class="line">  <span class="keyword">var</span> processors = [</div><div class="line">    autoprefixer(&#123;</div><div class="line">      <span class="attr">browsers</span>:[<span class="string">'last 3 version'</span>],</div><div class="line">      <span class="attr">cascade</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">remove</span>: <span class="literal">false</span></div><div class="line">    &#125;),</div><div class="line">    cssnext()</div><div class="line">  ];</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/css/*.css'</span>)</div><div class="line">             .pipe(postcss(processors))</div><div class="line">             .pipe(gulp.dest(<span class="string">'./dist'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="创建示例样式"><a href="#创建示例样式" class="headerlink" title="创建示例样式"></a>创建示例样式</h3><p>在项目根目录下创建src目录，再在src目录下面创建css目录，然后创建style.css文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 这里用命令创建，你也可以手动创建</span></div><div class="line">mkdir -p src/css &amp;&amp; touch style.css</div></pre></td></tr></table></figure>
<p>编辑样式如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">  <span class="attribute">display</span>:flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-pseudo">:root</span> &#123;</div><div class="line"><span class="attribute">--fontSize</span>: <span class="number">1rem</span>;</div><div class="line"><span class="attribute">--mainColor</span>: <span class="number">#12345678</span>;</div><div class="line"><span class="attribute">--highlightColor</span>: <span class="built_in">hwb</span>(190, 35%, 20%);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line"><span class="attribute">color</span>: <span class="built_in">var</span>(--mainColor);</div><div class="line"></div><div class="line"><span class="attribute">font-size</span>: <span class="built_in">var</span>(--fontSize);</div><div class="line"><span class="attribute">line-height</span>: <span class="built_in">calc</span>(var(--fontSize) * <span class="number">1.5</span>);</div><div class="line"><span class="attribute">padding</span>: <span class="built_in">calc</span>((var(--fontSize) / <span class="number">2</span>) + <span class="number">1px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行实例"><a href="#运行实例" class="headerlink" title="运行实例"></a>运行实例</h3><p>一切准备就绪之后可以在项目根目录下执行刚才我们定义的任务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp css</div></pre></td></tr></table></figure>
<p>如果不出什么意外的话就会在根目录下面生成一个<code>dist</code>文件夹，里面有一个样式文件，内容如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">display</span>:-webkit-flex;</div><div class="line">  <span class="attribute">display</span>:-ms-flexbox;</div><div class="line">  <span class="attribute">display</span>:-webkit-box;</div><div class="line">  <span class="attribute">display</span>:flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line"><span class="attribute">color</span>:<span class="number">#123456</span>;</div><div class="line"><span class="attribute">color</span>:<span class="built_in">rgba</span>(18, 52, 86, 0.47059);</div><div class="line"></div><div class="line"><span class="attribute">font-size</span>:<span class="number">16px</span>;</div><div class="line"><span class="attribute">font-size</span>:<span class="number">1rem</span>;</div><div class="line"><span class="attribute">line-height</span>:<span class="number">24px</span>;</div><div class="line"><span class="attribute">line-height</span>:<span class="number">1.5rem</span>;</div><div class="line"><span class="attribute">padding</span>:<span class="built_in">calc</span>(0.5rem + 1px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到我们写的样式自动添加了浏览器前缀，并且一些未来CSS语法也被转换了。</p>
<h2 id="了解PostCSS"><a href="#了解PostCSS" class="headerlink" title="了解PostCSS"></a>了解PostCSS</h2><p>通过上面的实例我们应该知道<code>PostCSS</code>的使用方法，此时让我们先回想一下<code>CSS预处理器</code>的使用历程：</p>
<ol>
<li>学习该CSS预处理器的语法特性，诸如：变量定义、嵌套、继承</li>
<li>在特定后缀名(.less/.scss等)的文件按照上面的语法进行编写</li>
<li>通过Gulp/Grunt/Webpack等自动化工具或者手动编译成CSS样式</li>
</ol>
<p>而<code>PostCSS</code>的使用历程：</p>
<ol>
<li>直接按照CSS标准语法来书写CSS样式文件</li>
<li>通过Gulp/Grunt/Webpack等自动化工具加载PostCSS插件转换输出</li>
</ol>
<p>通过对比我们类比一个结论：<em>CSS预处理器好比给你一个工具箱，工具箱里面有什么东西该怎么拿已经跟你约定好，你必须按照这个规则来拿；而PostCSS好比给你一个盒子，你可以从旁边选择自己需要的工具放进盒子打包拿走，如果还不够用你可以自己造一个工具</em></p>
<h2 id="深入PostCSS"><a href="#深入PostCSS" class="headerlink" title="深入PostCSS"></a>深入PostCSS</h2><p><code>PostCSS</code>自身只包括了<code>CSS分析器</code>，<code>CSS节点树API</code>，<code>source map生成器</code>，<code>CSS节点拼接器</code>，而基于<code>PostCSS</code>的插件都是使用了<code>CSS节点树API</code>来实现的。</p>
<p>我们都知道CSS的组成如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">element &#123;</div><div class="line">  prop1 : rule1 rule2 ...;</div><div class="line">  prop2 : rule1 rule2 ...;</div><div class="line">  prop2 : rule1 rule2 ...;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是一条一条的样式规则组成，每一条样式规则包含一个或多个属性跟值。所以<code>PostCSS</code>的执行过程大致如下：</p>
<ol>
<li><p>Parser<br> 利用<code>CSS分析器</code>读取CSS字符内容，得到一个完整的<code>节点树</code></p>
</li>
<li><p>Plugin<br> 对上面拿到的<code>节点树</code>利用<code>CSS节点树API</code>进行一系列的转换操作</p>
</li>
<li><p>Plugin<br> 利用<code>CSS节点拼接器</code>将上面转换之后的节点树重新组成CSS字符</p>
</li>
<li><p>Stringifier<br> 在上面转换期间可利用<code>source map生成器</code>表明转换前后字符的对应关系</p>
</li>
</ol>
<h3 id="PostCSS性能"><a href="#PostCSS性能" class="headerlink" title="PostCSS性能"></a>PostCSS性能</h3><p>在PostCSS官方推特上看到，由JavaScript编写的PostCSS比C++编写的libsass还要快3倍，下面来自官方推特的截图:</p>
<p><img src="//img.aotu.io/cnt1992/postcss.png" alt="PostCss"></p>
<p>如果你对上面的性能截图有疑问，可以亲自来<a href="https://github.com/postcss/benchmark" target="_blank" rel="external">这里</a>测试看看。</p>
<h3 id="开始编写自己的PostCSS插件"><a href="#开始编写自己的PostCSS插件" class="headerlink" title="开始编写自己的PostCSS插件"></a>开始编写自己的PostCSS插件</h3><p><code>PostCSS</code>在自己的<a href="https://github.com/postcss/postcss#plugins" target="_blank" rel="external">Github</a>上放了一些常用的插件，更多的插件可以在<a href="http://postcss.parts/" target="_blank" rel="external">postcss.parts</a>进行搜索。</p>
<p>但有时候已有的插件不满足我们的需求，这个时候需要编写自己的PostCSS插件，下面我们将一步步创建一个简单的插件，这个插件功能非常简单，如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line">  文件位置：src/css/style.css</div><div class="line"> */</div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">"\5FAE\8F6F\96C5\9ED1"</span>,<span class="built_in">fontstack</span>(<span class="string">'Arial'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当输入上面的样式时，会生成下面的样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">  文件位置：dist/style.css</div><div class="line"> */</div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">"\5FAE\8F6F\96C5\9ED1"</span>,tahoma,arial;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h3><p>我们将以<code>Gulp</code>作为基础来实现我们的插件，首先创建项目文件夹</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir postcss-plugin &amp;&amp; <span class="built_in">cd</span> postcss-plugin</div></pre></td></tr></table></figure>
<p>然后快速创建<code>package.json</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init --yes</div></pre></td></tr></table></figure>
<p>紧接着先安装必备的包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i gulp postcss gulp-postcss --save-dev <span class="_">-d</span></div></pre></td></tr></table></figure>
<p>再创建<code>gulpfile.js</code>并且输入下面内容:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> postcss = <span class="built_in">require</span>(<span class="string">'gulp-postcss'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> processors = [</div><div class="line">  ];</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/css/*.css'</span>)</div><div class="line">             .pipe(postcss(processors))</div><div class="line">             .pipe(gulp.dest(<span class="string">'./dist'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="创建插件文件夹"><a href="#创建插件文件夹" class="headerlink" title="创建插件文件夹"></a>创建插件文件夹</h3><p>我们在执行<code>npm install</code>安装的包都放置在<code>node_modules</code>文件夹下面，这里我们创建PostCSS的插件文件夹，注意：<strong>PostCSS的插件命名格式为：postcss-插件名字</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 这里采用命令新建文件夹，你也可以手动创建</span></div><div class="line">mkdir node_modules/postcss-fontstack</div></pre></td></tr></table></figure>
<h3 id="创建插件入口文件"><a href="#创建插件入口文件" class="headerlink" title="创建插件入口文件"></a>创建插件入口文件</h3><p>现在我们可以在<code>postcss-fontstack</code>文件夹创建入口文件<code>index.js</code>，<code>PostCSS</code>创建插件的方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> postcss = <span class="built_in">require</span>(<span class="string">'postcss'</span>);</div><div class="line"><span class="built_in">module</span>.exports = postcss.plugin(<span class="string">'插件名字'</span>, <span class="function"><span class="keyword">function</span> 插件名字(<span class="params">选项</span>)</span>&#123;</div><div class="line">  <span class="comment">//这里写插件代码</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>那我们可以在<code>index.js</code>里面贴入下面代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> postcss = <span class="built_in">require</span>(<span class="string">'postcss'</span>);</div><div class="line"></div><div class="line">modules.exports = postcss.plugin(<span class="string">'fontstack'</span>, <span class="function"><span class="keyword">function</span> <span class="title">fontstack</span>(<span class="params"> options </span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> css </span>)</span>&#123;</div><div class="line">    options = options || &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> fontstack_config = &#123;</div><div class="line">      <span class="string">'Arial'</span>: <span class="string">'tahoma,arial'</span>,</div><div class="line">      <span class="string">'Times New Roman'</span>: <span class="string">'TimesNewRoman, "Times New Roman", Times, Baskerville, Georgia, serif'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toTitleCase</span>(<span class="params"> str </span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> str.replace(<span class="regexp">/\w\S*/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params"> txt </span>)</span>&#123;</div><div class="line">          <span class="keyword">return</span> txt.charAt(<span class="number">0</span>).toUpperCase() + txt.substr(<span class="number">1</span>).toLowerCase();</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// css.walkRules方法用来遍历每一条css规则</span></div><div class="line">    css.walkRules( <span class="function"><span class="keyword">function</span>(<span class="params"> rule </span>)</span>&#123;</div><div class="line">        <span class="comment">// walkDecls方法用来解析属性跟值</span></div><div class="line">        rule.walkDecls( <span class="function"><span class="keyword">function</span>(<span class="params"> decl, i </span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> value = decl.value;</div><div class="line">            <span class="keyword">if</span>( value.indexOf( <span class="string">'fontstack('</span> ) !== <span class="number">-1</span> )&#123;</div><div class="line">                <span class="keyword">var</span> fontstack_requested = value.match(<span class="regexp">/\(([^)]+)\)/</span>)[<span class="number">1</span>].replace(<span class="regexp">/["']/g</span>,<span class="string">""</span>);</div><div class="line">                fontstack_requested = toTitleCase( fontstack_requested );</div><div class="line"></div><div class="line">                <span class="keyword">var</span> fontstack = fontstack_config[ fontstack_requested ];</div><div class="line"></div><div class="line">                <span class="keyword">var</span> firstFont = value.substr( <span class="number">0</span>, value.indexOf(<span class="string">'fontstack('</span>) );</div><div class="line"></div><div class="line">                <span class="keyword">var</span> newValue = firstFont + fontstack;</div><div class="line"></div><div class="line">                decl.value = newValue;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在<code>gulpfile.js</code>引入上面的插件，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> postcss = <span class="built_in">require</span>(<span class="string">'gulp-postcss'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> processors = [</div><div class="line">  ];</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/css/*.css'</span>)</div><div class="line">             .pipe(postcss(processors))</div><div class="line">             .pipe(gulp.dest(<span class="string">'./dist'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="运行实例-1"><a href="#运行实例-1" class="headerlink" title="运行实例"></a>运行实例</h3><p>在项目根目录下运行实例，最终实现我们的效果</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp css</div></pre></td></tr></table></figure>
<h2 id="再谈PostCSS"><a href="#再谈PostCSS" class="headerlink" title="再谈PostCSS"></a>再谈PostCSS</h2><p>基于<code>PostCSS</code>能够做到很多<code>CSS预处理器</code>做不到的事情，未来发展前景还是挺不错的，而且最新的<code>Atom</code>编辑器也可以下载插件来支持<code>PostCSS</code>这种语法。</p>
<p>但这就意味着<code>CSS预处理器</code>过时了么？不会。<code>PostCSS</code>的出现并不是为了替换掉之前的技术，只是提供多一种思路让我们去考虑，就比如Sass编译后再加<code>autoprefixer</code>自动补齐浏览器前缀这种做法当前还是比较流行的。</p>
<p>再回到文章最开始说的，<code>PostCSS</code>其实是在打造一个改变CSS开发方式的生态系统。也许暂时我们还是保持传统的开发方式，但未来对于<code>PostCSS</code>我还是保持关注，它是值得期待的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初识PostCSS&quot;&gt;&lt;a href=&quot;#初识PostCSS&quot; class=&quot;headerlink&quot; title=&quot;初识PostCSS&quot;&gt;&lt;/a&gt;初识PostCSS&lt;/h2&gt;&lt;p&gt;如果你第一次听说&lt;code&gt;PostCSS&lt;/code&gt;这个东西，那么请看下面摘自官
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Web开发" scheme="https://aotu.io/tags/Web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>凹凸实验室博客V1.0.0发布</title>
    <link href="https://aotu.io/notes/2015/10/08/aotu-blog-v1/"/>
    <id>https://aotu.io/notes/2015/10/08/aotu-blog-v1/</id>
    <published>2015-10-08T02:24:35.000Z</published>
    <updated>2016-10-20T07:06:32.400Z</updated>
    
    <content type="html"><![CDATA[<p>筹备了两周多，凹凸实验室博客 V1.0.0 正式发布啦，欢迎同学们体验并提供建议。<br>它是一个托管于Github的静态博客，基于HEXO搭建，主题的定做参考自<a href="http://html5up.net/future-imperfect" target="_blank" rel="external">future-imperfect</a>的扁平简约，暂且命名为<code>o2</code>。主题单独开源于 <a href="o2team/hexo-theme-o2">hexo-theme-o2</a>，有兴趣的朋友可以自由下载使用。</p>
<a id="more"></a>
<h2 id="博客的一些特性"><a href="#博客的一些特性" class="headerlink" title="博客的一些特性"></a>博客的一些特性</h2><ol>
<li><p>使用github头像</p>
<p>记得将你们在github的头像更新到最帅，将你github的用户名在文章内头部填好即可！</p>
</li>
<li><p><a href="https://npmjs.org/package/hexo-wordcount" target="_blank" rel="external">hexo-wordcount</a> 显示博文字数</p>
</li>
<li><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">不蒜子</a> 统计博文的pv</li>
<li>每日一句英文警句</li>
<li><a href="http://duoshuo.com" target="_blank" rel="external">多说</a>评论</li>
</ol>
<h2 id="使用指引"><a href="#使用指引" class="headerlink" title="使用指引"></a>使用指引</h2><ol>
<li><p>安装hexo</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="selector-tag">i</span> hexo-cli -g</div></pre></td></tr></table></figure>
</li>
<li><p>将o2team.github.io的源码拉到本地</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@github<span class="selector-class">.com</span>:o2team/o2team<span class="selector-class">.github</span><span class="selector-class">.io</span><span class="selector-class">.git</span> o2team</div></pre></td></tr></table></figure>
</li>
<li><p>初始化子模块(submodules)</p>
 <figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> o2team</div><div class="line">git submodule init</div><div class="line">git submodule <span class="keyword">update</span></div><div class="line"></div><div class="line"><span class="comment"># 切换至themes/o2目录，签出master分支</span></div><div class="line"><span class="keyword">cd</span> ../themes/o2</div><div class="line">git checkout master</div></pre></td></tr></table></figure>
</li>
<li><p>安装nodejs包</p>
 <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 切换回根目录下</span></div><div class="line">cd ..<span class="regexp">/../</span></div><div class="line"><span class="built_in">npm</span> install</div></pre></td></tr></table></figure>
</li>
<li><p>运行<code>hexo s --watch</code></p>
<p> 运行上述命令后，浏览器打开 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 即可本地访问我们的网站</p>
</li>
</ol>
<h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><p>有两种方法创建文章，可任选其一：</p>
<blockquote>
<p>注意：文件名不要出现中文!!!</p>
</blockquote>
<ol>
<li><p>使用<code>hexo new</code> 命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
</li>
<li><p>拷贝现有的文章进行修改</p>
<p>hexo使用markdown来编辑文章，在source目录下，拷贝任意md文件进行创建新的文章。具体可参考下hexo的官方说明</p>
</li>
</ol>
<h2 id="文章规范"><a href="#文章规范" class="headerlink" title="文章规范"></a>文章规范</h2><ol>
<li>使用markdown写博文 </li>
<li><p>博文图片统一位置：<code>source/img/post/</code><br> 在博客内容中可以使用 <code>pimg</code> 自定义标签来引用图片。注意别覆盖了别人的图片!!!<br> 其语法格式为：<br> <code>{% pimg imageName [alt text] [JSONImageAttibutes] %}</code><br> 例如：<br> <code>{% pimg post-aotu.jpg "空格请用%20来区分" '{"title":"hello","class":"test_img"}' %}</code><br> 需要注意的是：<code>pimg</code> 利用空格来划分字段属性，如果一个属性的值需要空格，请将空格用<code>%20</code>代替!!!    </p>
</li>
<li><p>为了保证博客整体美观，每个文章需要一张配图(大小：840x340)</p>
</li>
<li><p>指明文章的副标题、作者信息、封面图片地址</p>
 <figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">subtitle: "凹凸实验室博客是一个托管于Github的静态博客，基于HEXO搭建..."</div><div class="line">date: 2015<span class="string">-11</span><span class="string">-20</span> 00:24:35</div><div class="line">cover: "封面图片地址"</div><div class="line"><span class="keyword">tags:</span></div><div class="line">- Hexo</div><div class="line">author:</div><div class="line">    nick: LV主唱大人</div><div class="line">    github_name: mamboer</div></pre></td></tr></table></figure>
</li>
<li><p>利用<code>&lt;!-- more --&gt;</code>设置文章的摘要</p>
<p> 示例：</p>
 <figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml">title: 文章标题</span></div><div class="line">---</div><div class="line">这部分是文章摘要，这部分是文章摘要。在hexo模版里可通过 <span class="template-tag">&#123;% <span class="name">raw</span> %&#125;</span><span class="xml"></span><span class="template-variable">&#123;&#123; post.excerpt &#125;&#125;</span><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endraw</span> %&#125;</span><span class="xml"> 来引用。</span></div><div class="line"><span class="comment">&lt;!-- more --&gt;</span> </div><div class="line">这里是文章的剩余部分。在hexo模版里可通过<span class="template-tag">&#123;% <span class="name">raw</span> %&#125;</span><span class="xml"></span><span class="template-variable">&#123;&#123; post.more &#125;&#125;</span><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endraw</span> %&#125;</span><span class="xml"> 来引用。</span></div></pre></td></tr></table></figure>
<p> 实际使用请参考<a href="!--￼9--">本文</a>。</p>
</li>
</ol>
<h2 id="关于博客的发布"><a href="#关于博客的发布" class="headerlink" title="关于博客的发布"></a>关于博客的发布</h2><p>为了便于统一维护，博客的发布由<code>LV</code>负责。同学们写好博文并在本地预览OK后直接提交Github即可。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;筹备了两周多，凹凸实验室博客 V1.0.0 正式发布啦，欢迎同学们体验并提供建议。&lt;br&gt;它是一个托管于Github的静态博客，基于HEXO搭建，主题的定做参考自&lt;a href=&quot;http://html5up.net/future-imperfect&quot;&gt;future-imperfect&lt;/a&gt;的扁平简约，暂且命名为&lt;code&gt;o2&lt;/code&gt;。主题单独开源于 &lt;a href=&quot;o2team/hexo-theme-o2&quot;&gt;hexo-theme-o2&lt;/a&gt;，有兴趣的朋友可以自由下载使用。&lt;/p&gt;
    
    </summary>
    
      <category term="项目总结" scheme="https://aotu.io/cates/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Hexo" scheme="https://aotu.io/tags/Hexo/"/>
    
      <category term="项目总结" scheme="https://aotu.io/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
